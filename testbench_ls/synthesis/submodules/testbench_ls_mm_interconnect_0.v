// testbench_ls_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 646

`timescale 1 ps / 1 ps
module testbench_ls_mm_interconnect_0 (
		input  wire         ddr2_ram_afi_clk_clk,                                        //                                      ddr2_ram_afi_clk.clk
		input  wire         ddr2_ram_1_afi_clk_clk,                                      //                                    ddr2_ram_1_afi_clk.clk
		input  wire         ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset, // ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         ddr2_ram_1_soft_reset_reset_bridge_in_reset_reset,           //           ddr2_ram_1_soft_reset_reset_bridge_in_reset.reset
		input  wire         ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset,   //   ddr2_ram_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         ddr2_ram_soft_reset_reset_bridge_in_reset_reset,             //             ddr2_ram_soft_reset_reset_bridge_in_reset.reset
		input  wire         from_ETH_to_DDR_reset_reset_bridge_in_reset_reset,           //           from_ETH_to_DDR_reset_reset_bridge_in_reset.reset
		input  wire         nios_cpu_reset_reset_bridge_in_reset_reset,                  //                  nios_cpu_reset_reset_bridge_in_reset.reset
		input  wire [29:0]  dma_fifo_subsystem_1_dma_mm_read_address,                    //                      dma_fifo_subsystem_1_dma_mm_read.address
		output wire         dma_fifo_subsystem_1_dma_mm_read_waitrequest,                //                                                      .waitrequest
		input  wire [10:0]  dma_fifo_subsystem_1_dma_mm_read_burstcount,                 //                                                      .burstcount
		input  wire [31:0]  dma_fifo_subsystem_1_dma_mm_read_byteenable,                 //                                                      .byteenable
		input  wire         dma_fifo_subsystem_1_dma_mm_read_read,                       //                                                      .read
		output wire [255:0] dma_fifo_subsystem_1_dma_mm_read_readdata,                   //                                                      .readdata
		output wire         dma_fifo_subsystem_1_dma_mm_read_readdatavalid,              //                                                      .readdatavalid
		input  wire [29:0]  dma_fifo_subsystem_2_dma_mm_read_address,                    //                      dma_fifo_subsystem_2_dma_mm_read.address
		output wire         dma_fifo_subsystem_2_dma_mm_read_waitrequest,                //                                                      .waitrequest
		input  wire [10:0]  dma_fifo_subsystem_2_dma_mm_read_burstcount,                 //                                                      .burstcount
		input  wire [31:0]  dma_fifo_subsystem_2_dma_mm_read_byteenable,                 //                                                      .byteenable
		input  wire         dma_fifo_subsystem_2_dma_mm_read_read,                       //                                                      .read
		output wire [255:0] dma_fifo_subsystem_2_dma_mm_read_readdata,                   //                                                      .readdata
		output wire         dma_fifo_subsystem_2_dma_mm_read_readdatavalid,              //                                                      .readdatavalid
		input  wire [30:0]  dma_fifo_subsystem_3_dma_mm_read_address,                    //                      dma_fifo_subsystem_3_dma_mm_read.address
		output wire         dma_fifo_subsystem_3_dma_mm_read_waitrequest,                //                                                      .waitrequest
		input  wire [10:0]  dma_fifo_subsystem_3_dma_mm_read_burstcount,                 //                                                      .burstcount
		input  wire [31:0]  dma_fifo_subsystem_3_dma_mm_read_byteenable,                 //                                                      .byteenable
		input  wire         dma_fifo_subsystem_3_dma_mm_read_read,                       //                                                      .read
		output wire [255:0] dma_fifo_subsystem_3_dma_mm_read_readdata,                   //                                                      .readdata
		output wire         dma_fifo_subsystem_3_dma_mm_read_readdatavalid,              //                                                      .readdatavalid
		input  wire [30:0]  dma_fifo_subsystem_4_dma_mm_read_address,                    //                      dma_fifo_subsystem_4_dma_mm_read.address
		output wire         dma_fifo_subsystem_4_dma_mm_read_waitrequest,                //                                                      .waitrequest
		input  wire [10:0]  dma_fifo_subsystem_4_dma_mm_read_burstcount,                 //                                                      .burstcount
		input  wire [31:0]  dma_fifo_subsystem_4_dma_mm_read_byteenable,                 //                                                      .byteenable
		input  wire         dma_fifo_subsystem_4_dma_mm_read_read,                       //                                                      .read
		output wire [255:0] dma_fifo_subsystem_4_dma_mm_read_readdata,                   //                                                      .readdata
		output wire         dma_fifo_subsystem_4_dma_mm_read_readdatavalid,              //                                                      .readdatavalid
		input  wire [29:0]  dma_fifo_susbystem_dma_mm_read_address,                      //                        dma_fifo_susbystem_dma_mm_read.address
		output wire         dma_fifo_susbystem_dma_mm_read_waitrequest,                  //                                                      .waitrequest
		input  wire [10:0]  dma_fifo_susbystem_dma_mm_read_burstcount,                   //                                                      .burstcount
		input  wire [31:0]  dma_fifo_susbystem_dma_mm_read_byteenable,                   //                                                      .byteenable
		input  wire         dma_fifo_susbystem_dma_mm_read_read,                         //                                                      .read
		output wire [255:0] dma_fifo_susbystem_dma_mm_read_readdata,                     //                                                      .readdata
		output wire         dma_fifo_susbystem_dma_mm_read_readdatavalid,                //                                                      .readdatavalid
		input  wire [30:0]  from_ETH_to_DDR_ETH_DMA_mm_write_address,                    //                      from_ETH_to_DDR_ETH_DMA_mm_write.address
		output wire         from_ETH_to_DDR_ETH_DMA_mm_write_waitrequest,                //                                                      .waitrequest
		input  wire [31:0]  from_ETH_to_DDR_ETH_DMA_mm_write_byteenable,                 //                                                      .byteenable
		input  wire         from_ETH_to_DDR_ETH_DMA_mm_write_write,                      //                                                      .write
		input  wire [255:0] from_ETH_to_DDR_ETH_DMA_mm_write_writedata,                  //                                                      .writedata
		input  wire [31:0]  nios_cpu_data_master_address,                                //                                  nios_cpu_data_master.address
		output wire         nios_cpu_data_master_waitrequest,                            //                                                      .waitrequest
		input  wire [3:0]   nios_cpu_data_master_byteenable,                             //                                                      .byteenable
		input  wire         nios_cpu_data_master_read,                                   //                                                      .read
		output wire [31:0]  nios_cpu_data_master_readdata,                               //                                                      .readdata
		output wire         nios_cpu_data_master_readdatavalid,                          //                                                      .readdatavalid
		input  wire         nios_cpu_data_master_write,                                  //                                                      .write
		input  wire [31:0]  nios_cpu_data_master_writedata,                              //                                                      .writedata
		input  wire         nios_cpu_data_master_debugaccess,                            //                                                      .debugaccess
		input  wire [31:0]  nios_cpu_instruction_master_address,                         //                           nios_cpu_instruction_master.address
		output wire         nios_cpu_instruction_master_waitrequest,                     //                                                      .waitrequest
		input  wire         nios_cpu_instruction_master_read,                            //                                                      .read
		output wire [31:0]  nios_cpu_instruction_master_readdata,                        //                                                      .readdata
		output wire         nios_cpu_instruction_master_readdatavalid,                   //                                                      .readdatavalid
		output wire [1:0]   ctrl_sig_s1_address,                                         //                                           ctrl_sig_s1.address
		output wire         ctrl_sig_s1_write,                                           //                                                      .write
		input  wire [31:0]  ctrl_sig_s1_readdata,                                        //                                                      .readdata
		output wire [31:0]  ctrl_sig_s1_writedata,                                       //                                                      .writedata
		output wire         ctrl_sig_s1_chipselect,                                      //                                                      .chipselect
		output wire [24:0]  ddr2_ram_avl_address,                                        //                                          ddr2_ram_avl.address
		output wire         ddr2_ram_avl_write,                                          //                                                      .write
		output wire         ddr2_ram_avl_read,                                           //                                                      .read
		input  wire [255:0] ddr2_ram_avl_readdata,                                       //                                                      .readdata
		output wire [255:0] ddr2_ram_avl_writedata,                                      //                                                      .writedata
		output wire         ddr2_ram_avl_beginbursttransfer,                             //                                                      .beginbursttransfer
		output wire [2:0]   ddr2_ram_avl_burstcount,                                     //                                                      .burstcount
		output wire [31:0]  ddr2_ram_avl_byteenable,                                     //                                                      .byteenable
		input  wire         ddr2_ram_avl_readdatavalid,                                  //                                                      .readdatavalid
		input  wire         ddr2_ram_avl_waitrequest,                                    //                                                      .waitrequest
		output wire [24:0]  ddr2_ram_1_avl_address,                                      //                                        ddr2_ram_1_avl.address
		output wire         ddr2_ram_1_avl_write,                                        //                                                      .write
		output wire         ddr2_ram_1_avl_read,                                         //                                                      .read
		input  wire [255:0] ddr2_ram_1_avl_readdata,                                     //                                                      .readdata
		output wire [255:0] ddr2_ram_1_avl_writedata,                                    //                                                      .writedata
		output wire         ddr2_ram_1_avl_beginbursttransfer,                           //                                                      .beginbursttransfer
		output wire [2:0]   ddr2_ram_1_avl_burstcount,                                   //                                                      .burstcount
		output wire [31:0]  ddr2_ram_1_avl_byteenable,                                   //                                                      .byteenable
		input  wire         ddr2_ram_1_avl_readdatavalid,                                //                                                      .readdatavalid
		input  wire         ddr2_ram_1_avl_waitrequest,                                  //                                                      .waitrequest
		output wire [2:0]   dma_fifo_subsystem_1_dma_csr_address,                        //                          dma_fifo_subsystem_1_dma_csr.address
		output wire         dma_fifo_subsystem_1_dma_csr_write,                          //                                                      .write
		output wire         dma_fifo_subsystem_1_dma_csr_read,                           //                                                      .read
		input  wire [31:0]  dma_fifo_subsystem_1_dma_csr_readdata,                       //                                                      .readdata
		output wire [31:0]  dma_fifo_subsystem_1_dma_csr_writedata,                      //                                                      .writedata
		output wire [3:0]   dma_fifo_subsystem_1_dma_csr_byteenable,                     //                                                      .byteenable
		output wire         dma_fifo_subsystem_1_dma_descriptor_slave_write,             //             dma_fifo_subsystem_1_dma_descriptor_slave.write
		output wire [127:0] dma_fifo_subsystem_1_dma_descriptor_slave_writedata,         //                                                      .writedata
		output wire [15:0]  dma_fifo_subsystem_1_dma_descriptor_slave_byteenable,        //                                                      .byteenable
		input  wire         dma_fifo_subsystem_1_dma_descriptor_slave_waitrequest,       //                                                      .waitrequest
		output wire [2:0]   dma_fifo_subsystem_2_dma_csr_address,                        //                          dma_fifo_subsystem_2_dma_csr.address
		output wire         dma_fifo_subsystem_2_dma_csr_write,                          //                                                      .write
		output wire         dma_fifo_subsystem_2_dma_csr_read,                           //                                                      .read
		input  wire [31:0]  dma_fifo_subsystem_2_dma_csr_readdata,                       //                                                      .readdata
		output wire [31:0]  dma_fifo_subsystem_2_dma_csr_writedata,                      //                                                      .writedata
		output wire [3:0]   dma_fifo_subsystem_2_dma_csr_byteenable,                     //                                                      .byteenable
		output wire         dma_fifo_subsystem_2_dma_descriptor_slave_write,             //             dma_fifo_subsystem_2_dma_descriptor_slave.write
		output wire [127:0] dma_fifo_subsystem_2_dma_descriptor_slave_writedata,         //                                                      .writedata
		output wire [15:0]  dma_fifo_subsystem_2_dma_descriptor_slave_byteenable,        //                                                      .byteenable
		input  wire         dma_fifo_subsystem_2_dma_descriptor_slave_waitrequest,       //                                                      .waitrequest
		output wire [2:0]   dma_fifo_subsystem_3_dma_csr_address,                        //                          dma_fifo_subsystem_3_dma_csr.address
		output wire         dma_fifo_subsystem_3_dma_csr_write,                          //                                                      .write
		output wire         dma_fifo_subsystem_3_dma_csr_read,                           //                                                      .read
		input  wire [31:0]  dma_fifo_subsystem_3_dma_csr_readdata,                       //                                                      .readdata
		output wire [31:0]  dma_fifo_subsystem_3_dma_csr_writedata,                      //                                                      .writedata
		output wire [3:0]   dma_fifo_subsystem_3_dma_csr_byteenable,                     //                                                      .byteenable
		output wire         dma_fifo_subsystem_3_dma_descriptor_slave_write,             //             dma_fifo_subsystem_3_dma_descriptor_slave.write
		output wire [127:0] dma_fifo_subsystem_3_dma_descriptor_slave_writedata,         //                                                      .writedata
		output wire [15:0]  dma_fifo_subsystem_3_dma_descriptor_slave_byteenable,        //                                                      .byteenable
		input  wire         dma_fifo_subsystem_3_dma_descriptor_slave_waitrequest,       //                                                      .waitrequest
		output wire [2:0]   dma_fifo_subsystem_4_dma_csr_address,                        //                          dma_fifo_subsystem_4_dma_csr.address
		output wire         dma_fifo_subsystem_4_dma_csr_write,                          //                                                      .write
		output wire         dma_fifo_subsystem_4_dma_csr_read,                           //                                                      .read
		input  wire [31:0]  dma_fifo_subsystem_4_dma_csr_readdata,                       //                                                      .readdata
		output wire [31:0]  dma_fifo_subsystem_4_dma_csr_writedata,                      //                                                      .writedata
		output wire [3:0]   dma_fifo_subsystem_4_dma_csr_byteenable,                     //                                                      .byteenable
		output wire         dma_fifo_subsystem_4_dma_descriptor_slave_write,             //             dma_fifo_subsystem_4_dma_descriptor_slave.write
		output wire [127:0] dma_fifo_subsystem_4_dma_descriptor_slave_writedata,         //                                                      .writedata
		output wire [15:0]  dma_fifo_subsystem_4_dma_descriptor_slave_byteenable,        //                                                      .byteenable
		input  wire         dma_fifo_subsystem_4_dma_descriptor_slave_waitrequest,       //                                                      .waitrequest
		output wire [2:0]   dma_fifo_susbystem_dma_csr_address,                          //                            dma_fifo_susbystem_dma_csr.address
		output wire         dma_fifo_susbystem_dma_csr_write,                            //                                                      .write
		output wire         dma_fifo_susbystem_dma_csr_read,                             //                                                      .read
		input  wire [31:0]  dma_fifo_susbystem_dma_csr_readdata,                         //                                                      .readdata
		output wire [31:0]  dma_fifo_susbystem_dma_csr_writedata,                        //                                                      .writedata
		output wire [3:0]   dma_fifo_susbystem_dma_csr_byteenable,                       //                                                      .byteenable
		output wire         dma_fifo_susbystem_dma_descriptor_slave_write,               //               dma_fifo_susbystem_dma_descriptor_slave.write
		output wire [127:0] dma_fifo_susbystem_dma_descriptor_slave_writedata,           //                                                      .writedata
		output wire [15:0]  dma_fifo_susbystem_dma_descriptor_slave_byteenable,          //                                                      .byteenable
		input  wire         dma_fifo_susbystem_dma_descriptor_slave_waitrequest,         //                                                      .waitrequest
		output wire [2:0]   from_ETH_to_DDR_ETH_DMA_csr_address,                         //                           from_ETH_to_DDR_ETH_DMA_csr.address
		output wire         from_ETH_to_DDR_ETH_DMA_csr_write,                           //                                                      .write
		output wire         from_ETH_to_DDR_ETH_DMA_csr_read,                            //                                                      .read
		input  wire [31:0]  from_ETH_to_DDR_ETH_DMA_csr_readdata,                        //                                                      .readdata
		output wire [31:0]  from_ETH_to_DDR_ETH_DMA_csr_writedata,                       //                                                      .writedata
		output wire [3:0]   from_ETH_to_DDR_ETH_DMA_csr_byteenable,                      //                                                      .byteenable
		output wire         from_ETH_to_DDR_ETH_DMA_descriptor_slave_write,              //              from_ETH_to_DDR_ETH_DMA_descriptor_slave.write
		output wire [127:0] from_ETH_to_DDR_ETH_DMA_descriptor_slave_writedata,          //                                                      .writedata
		output wire [15:0]  from_ETH_to_DDR_ETH_DMA_descriptor_slave_byteenable,         //                                                      .byteenable
		input  wire         from_ETH_to_DDR_ETH_DMA_descriptor_slave_waitrequest,        //                                                      .waitrequest
		output wire [1:0]   input_IO_s1_address,                                         //                                           input_IO_s1.address
		output wire         input_IO_s1_write,                                           //                                                      .write
		input  wire [31:0]  input_IO_s1_readdata,                                        //                                                      .readdata
		output wire [31:0]  input_IO_s1_writedata,                                       //                                                      .writedata
		output wire         input_IO_s1_chipselect,                                      //                                                      .chipselect
		output wire [1:0]   input_IO_0_s1_address,                                       //                                         input_IO_0_s1.address
		output wire         input_IO_0_s1_write,                                         //                                                      .write
		input  wire [31:0]  input_IO_0_s1_readdata,                                      //                                                      .readdata
		output wire [31:0]  input_IO_0_s1_writedata,                                     //                                                      .writedata
		output wire         input_IO_0_s1_chipselect,                                    //                                                      .chipselect
		output wire [1:0]   input_IO_1_s1_address,                                       //                                         input_IO_1_s1.address
		output wire         input_IO_1_s1_write,                                         //                                                      .write
		input  wire [31:0]  input_IO_1_s1_readdata,                                      //                                                      .readdata
		output wire [31:0]  input_IO_1_s1_writedata,                                     //                                                      .writedata
		output wire         input_IO_1_s1_chipselect,                                    //                                                      .chipselect
		output wire [1:0]   input_IO_2_s1_address,                                       //                                         input_IO_2_s1.address
		output wire         input_IO_2_s1_write,                                         //                                                      .write
		input  wire [31:0]  input_IO_2_s1_readdata,                                      //                                                      .readdata
		output wire [31:0]  input_IO_2_s1_writedata,                                     //                                                      .writedata
		output wire         input_IO_2_s1_chipselect,                                    //                                                      .chipselect
		output wire [1:0]   input_IO_3_s1_address,                                       //                                         input_IO_3_s1.address
		output wire         input_IO_3_s1_write,                                         //                                                      .write
		input  wire [31:0]  input_IO_3_s1_readdata,                                      //                                                      .readdata
		output wire [31:0]  input_IO_3_s1_writedata,                                     //                                                      .writedata
		output wire         input_IO_3_s1_chipselect,                                    //                                                      .chipselect
		output wire [1:0]   input_IO_4_s1_address,                                       //                                         input_IO_4_s1.address
		output wire         input_IO_4_s1_write,                                         //                                                      .write
		input  wire [31:0]  input_IO_4_s1_readdata,                                      //                                                      .readdata
		output wire [31:0]  input_IO_4_s1_writedata,                                     //                                                      .writedata
		output wire         input_IO_4_s1_chipselect,                                    //                                                      .chipselect
		output wire [1:0]   input_IO_5_s1_address,                                       //                                         input_IO_5_s1.address
		output wire         input_IO_5_s1_write,                                         //                                                      .write
		input  wire [31:0]  input_IO_5_s1_readdata,                                      //                                                      .readdata
		output wire [31:0]  input_IO_5_s1_writedata,                                     //                                                      .writedata
		output wire         input_IO_5_s1_chipselect,                                    //                                                      .chipselect
		output wire [0:0]   jtag_avalon_jtag_slave_address,                              //                                jtag_avalon_jtag_slave.address
		output wire         jtag_avalon_jtag_slave_write,                                //                                                      .write
		output wire         jtag_avalon_jtag_slave_read,                                 //                                                      .read
		input  wire [31:0]  jtag_avalon_jtag_slave_readdata,                             //                                                      .readdata
		output wire [31:0]  jtag_avalon_jtag_slave_writedata,                            //                                                      .writedata
		input  wire         jtag_avalon_jtag_slave_waitrequest,                          //                                                      .waitrequest
		output wire         jtag_avalon_jtag_slave_chipselect,                           //                                                      .chipselect
		output wire [8:0]   nios_cpu_debug_mem_slave_address,                            //                              nios_cpu_debug_mem_slave.address
		output wire         nios_cpu_debug_mem_slave_write,                              //                                                      .write
		output wire         nios_cpu_debug_mem_slave_read,                               //                                                      .read
		input  wire [31:0]  nios_cpu_debug_mem_slave_readdata,                           //                                                      .readdata
		output wire [31:0]  nios_cpu_debug_mem_slave_writedata,                          //                                                      .writedata
		output wire [3:0]   nios_cpu_debug_mem_slave_byteenable,                         //                                                      .byteenable
		input  wire         nios_cpu_debug_mem_slave_waitrequest,                        //                                                      .waitrequest
		output wire         nios_cpu_debug_mem_slave_debugaccess,                        //                                                      .debugaccess
		output wire [1:0]   pilot_sig_s1_address,                                        //                                          pilot_sig_s1.address
		output wire         pilot_sig_s1_write,                                          //                                                      .write
		input  wire [31:0]  pilot_sig_s1_readdata,                                       //                                                      .readdata
		output wire [31:0]  pilot_sig_s1_writedata,                                      //                                                      .writedata
		output wire         pilot_sig_s1_chipselect,                                     //                                                      .chipselect
		output wire [2:0]   sys_timer_s1_address,                                        //                                          sys_timer_s1.address
		output wire         sys_timer_s1_write,                                          //                                                      .write
		input  wire [15:0]  sys_timer_s1_readdata,                                       //                                                      .readdata
		output wire [15:0]  sys_timer_s1_writedata,                                      //                                                      .writedata
		output wire         sys_timer_s1_chipselect,                                     //                                                      .chipselect
		output wire [16:0]  system_ram_s1_address,                                       //                                         system_ram_s1.address
		output wire         system_ram_s1_write,                                         //                                                      .write
		input  wire [31:0]  system_ram_s1_readdata,                                      //                                                      .readdata
		output wire [31:0]  system_ram_s1_writedata,                                     //                                                      .writedata
		output wire [3:0]   system_ram_s1_byteenable,                                    //                                                      .byteenable
		output wire         system_ram_s1_chipselect,                                    //                                                      .chipselect
		output wire         system_ram_s1_clken                                          //                                                      .clken
	);

	wire          from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_waitrequest;                     // from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_waitrequest -> from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_waitrequest
	wire  [255:0] from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_readdata;                        // from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_readdata -> from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_readdata
	wire          from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_debugaccess;                     // from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_debugaccess -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_debugaccess
	wire   [31:0] from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_address;                         // from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_address -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_address
	wire          from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_read;                            // from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_read -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_read
	wire   [31:0] from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_byteenable;                      // from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_byteenable -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_byteenable
	wire          from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_readdatavalid;                   // from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_readdatavalid -> from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_readdatavalid
	wire          from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_lock;                            // from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_lock -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_lock
	wire          from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_write;                           // from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_write -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_write
	wire  [255:0] from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_writedata;                       // from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_writedata -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_writedata
	wire    [5:0] from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_burstcount;                      // from_ETH_to_DDR_ETH_DMA_mm_write_translator:uav_burstcount -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                                     // rsp_mux:src_valid -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:rp_valid
	wire  [376:0] rsp_mux_src_data;                                                                                      // rsp_mux:src_data -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:rp_data
	wire          rsp_mux_src_ready;                                                                                     // from_ETH_to_DDR_ETH_DMA_mm_write_agent:rp_ready -> rsp_mux:src_ready
	wire   [26:0] rsp_mux_src_channel;                                                                                   // rsp_mux:src_channel -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                             // rsp_mux:src_startofpacket -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                               // rsp_mux:src_endofpacket -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:rp_endofpacket
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest;                                 // nios_cpu_data_master_agent:av_waitrequest -> nios_cpu_data_master_translator:uav_waitrequest
	wire   [31:0] nios_cpu_data_master_translator_avalon_universal_master_0_readdata;                                    // nios_cpu_data_master_agent:av_readdata -> nios_cpu_data_master_translator:uav_readdata
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess;                                 // nios_cpu_data_master_translator:uav_debugaccess -> nios_cpu_data_master_agent:av_debugaccess
	wire   [31:0] nios_cpu_data_master_translator_avalon_universal_master_0_address;                                     // nios_cpu_data_master_translator:uav_address -> nios_cpu_data_master_agent:av_address
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_read;                                        // nios_cpu_data_master_translator:uav_read -> nios_cpu_data_master_agent:av_read
	wire    [3:0] nios_cpu_data_master_translator_avalon_universal_master_0_byteenable;                                  // nios_cpu_data_master_translator:uav_byteenable -> nios_cpu_data_master_agent:av_byteenable
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                               // nios_cpu_data_master_agent:av_readdatavalid -> nios_cpu_data_master_translator:uav_readdatavalid
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_lock;                                        // nios_cpu_data_master_translator:uav_lock -> nios_cpu_data_master_agent:av_lock
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_write;                                       // nios_cpu_data_master_translator:uav_write -> nios_cpu_data_master_agent:av_write
	wire   [31:0] nios_cpu_data_master_translator_avalon_universal_master_0_writedata;                                   // nios_cpu_data_master_translator:uav_writedata -> nios_cpu_data_master_agent:av_writedata
	wire    [2:0] nios_cpu_data_master_translator_avalon_universal_master_0_burstcount;                                  // nios_cpu_data_master_translator:uav_burstcount -> nios_cpu_data_master_agent:av_burstcount
	wire          dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_waitrequest;                       // dma_fifo_susbystem_dma_mm_read_agent:av_waitrequest -> dma_fifo_susbystem_dma_mm_read_translator:uav_waitrequest
	wire  [255:0] dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_readdata;                          // dma_fifo_susbystem_dma_mm_read_agent:av_readdata -> dma_fifo_susbystem_dma_mm_read_translator:uav_readdata
	wire          dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_debugaccess;                       // dma_fifo_susbystem_dma_mm_read_translator:uav_debugaccess -> dma_fifo_susbystem_dma_mm_read_agent:av_debugaccess
	wire   [31:0] dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_address;                           // dma_fifo_susbystem_dma_mm_read_translator:uav_address -> dma_fifo_susbystem_dma_mm_read_agent:av_address
	wire          dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_read;                              // dma_fifo_susbystem_dma_mm_read_translator:uav_read -> dma_fifo_susbystem_dma_mm_read_agent:av_read
	wire   [31:0] dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_byteenable;                        // dma_fifo_susbystem_dma_mm_read_translator:uav_byteenable -> dma_fifo_susbystem_dma_mm_read_agent:av_byteenable
	wire          dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_readdatavalid;                     // dma_fifo_susbystem_dma_mm_read_agent:av_readdatavalid -> dma_fifo_susbystem_dma_mm_read_translator:uav_readdatavalid
	wire          dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_lock;                              // dma_fifo_susbystem_dma_mm_read_translator:uav_lock -> dma_fifo_susbystem_dma_mm_read_agent:av_lock
	wire          dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_write;                             // dma_fifo_susbystem_dma_mm_read_translator:uav_write -> dma_fifo_susbystem_dma_mm_read_agent:av_write
	wire  [255:0] dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_writedata;                         // dma_fifo_susbystem_dma_mm_read_translator:uav_writedata -> dma_fifo_susbystem_dma_mm_read_agent:av_writedata
	wire   [15:0] dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_burstcount;                        // dma_fifo_susbystem_dma_mm_read_translator:uav_burstcount -> dma_fifo_susbystem_dma_mm_read_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                                 // rsp_mux_002:src_valid -> dma_fifo_susbystem_dma_mm_read_agent:rp_valid
	wire  [376:0] rsp_mux_002_src_data;                                                                                  // rsp_mux_002:src_data -> dma_fifo_susbystem_dma_mm_read_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                                 // dma_fifo_susbystem_dma_mm_read_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [26:0] rsp_mux_002_src_channel;                                                                               // rsp_mux_002:src_channel -> dma_fifo_susbystem_dma_mm_read_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                                         // rsp_mux_002:src_startofpacket -> dma_fifo_susbystem_dma_mm_read_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                           // rsp_mux_002:src_endofpacket -> dma_fifo_susbystem_dma_mm_read_agent:rp_endofpacket
	wire          dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_waitrequest;                     // dma_fifo_subsystem_1_dma_mm_read_agent:av_waitrequest -> dma_fifo_subsystem_1_dma_mm_read_translator:uav_waitrequest
	wire  [255:0] dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_readdata;                        // dma_fifo_subsystem_1_dma_mm_read_agent:av_readdata -> dma_fifo_subsystem_1_dma_mm_read_translator:uav_readdata
	wire          dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_debugaccess;                     // dma_fifo_subsystem_1_dma_mm_read_translator:uav_debugaccess -> dma_fifo_subsystem_1_dma_mm_read_agent:av_debugaccess
	wire   [31:0] dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_address;                         // dma_fifo_subsystem_1_dma_mm_read_translator:uav_address -> dma_fifo_subsystem_1_dma_mm_read_agent:av_address
	wire          dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_read;                            // dma_fifo_subsystem_1_dma_mm_read_translator:uav_read -> dma_fifo_subsystem_1_dma_mm_read_agent:av_read
	wire   [31:0] dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_byteenable;                      // dma_fifo_subsystem_1_dma_mm_read_translator:uav_byteenable -> dma_fifo_subsystem_1_dma_mm_read_agent:av_byteenable
	wire          dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_readdatavalid;                   // dma_fifo_subsystem_1_dma_mm_read_agent:av_readdatavalid -> dma_fifo_subsystem_1_dma_mm_read_translator:uav_readdatavalid
	wire          dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_lock;                            // dma_fifo_subsystem_1_dma_mm_read_translator:uav_lock -> dma_fifo_subsystem_1_dma_mm_read_agent:av_lock
	wire          dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_write;                           // dma_fifo_subsystem_1_dma_mm_read_translator:uav_write -> dma_fifo_subsystem_1_dma_mm_read_agent:av_write
	wire  [255:0] dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_writedata;                       // dma_fifo_subsystem_1_dma_mm_read_translator:uav_writedata -> dma_fifo_subsystem_1_dma_mm_read_agent:av_writedata
	wire   [15:0] dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_burstcount;                      // dma_fifo_subsystem_1_dma_mm_read_translator:uav_burstcount -> dma_fifo_subsystem_1_dma_mm_read_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                                 // rsp_mux_003:src_valid -> dma_fifo_subsystem_1_dma_mm_read_agent:rp_valid
	wire  [376:0] rsp_mux_003_src_data;                                                                                  // rsp_mux_003:src_data -> dma_fifo_subsystem_1_dma_mm_read_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                                 // dma_fifo_subsystem_1_dma_mm_read_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [26:0] rsp_mux_003_src_channel;                                                                               // rsp_mux_003:src_channel -> dma_fifo_subsystem_1_dma_mm_read_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                                         // rsp_mux_003:src_startofpacket -> dma_fifo_subsystem_1_dma_mm_read_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                           // rsp_mux_003:src_endofpacket -> dma_fifo_subsystem_1_dma_mm_read_agent:rp_endofpacket
	wire          dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_waitrequest;                     // dma_fifo_subsystem_2_dma_mm_read_agent:av_waitrequest -> dma_fifo_subsystem_2_dma_mm_read_translator:uav_waitrequest
	wire  [255:0] dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_readdata;                        // dma_fifo_subsystem_2_dma_mm_read_agent:av_readdata -> dma_fifo_subsystem_2_dma_mm_read_translator:uav_readdata
	wire          dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_debugaccess;                     // dma_fifo_subsystem_2_dma_mm_read_translator:uav_debugaccess -> dma_fifo_subsystem_2_dma_mm_read_agent:av_debugaccess
	wire   [31:0] dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_address;                         // dma_fifo_subsystem_2_dma_mm_read_translator:uav_address -> dma_fifo_subsystem_2_dma_mm_read_agent:av_address
	wire          dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_read;                            // dma_fifo_subsystem_2_dma_mm_read_translator:uav_read -> dma_fifo_subsystem_2_dma_mm_read_agent:av_read
	wire   [31:0] dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_byteenable;                      // dma_fifo_subsystem_2_dma_mm_read_translator:uav_byteenable -> dma_fifo_subsystem_2_dma_mm_read_agent:av_byteenable
	wire          dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_readdatavalid;                   // dma_fifo_subsystem_2_dma_mm_read_agent:av_readdatavalid -> dma_fifo_subsystem_2_dma_mm_read_translator:uav_readdatavalid
	wire          dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_lock;                            // dma_fifo_subsystem_2_dma_mm_read_translator:uav_lock -> dma_fifo_subsystem_2_dma_mm_read_agent:av_lock
	wire          dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_write;                           // dma_fifo_subsystem_2_dma_mm_read_translator:uav_write -> dma_fifo_subsystem_2_dma_mm_read_agent:av_write
	wire  [255:0] dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_writedata;                       // dma_fifo_subsystem_2_dma_mm_read_translator:uav_writedata -> dma_fifo_subsystem_2_dma_mm_read_agent:av_writedata
	wire   [15:0] dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_burstcount;                      // dma_fifo_subsystem_2_dma_mm_read_translator:uav_burstcount -> dma_fifo_subsystem_2_dma_mm_read_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                                 // rsp_mux_004:src_valid -> dma_fifo_subsystem_2_dma_mm_read_agent:rp_valid
	wire  [376:0] rsp_mux_004_src_data;                                                                                  // rsp_mux_004:src_data -> dma_fifo_subsystem_2_dma_mm_read_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                                 // dma_fifo_subsystem_2_dma_mm_read_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [26:0] rsp_mux_004_src_channel;                                                                               // rsp_mux_004:src_channel -> dma_fifo_subsystem_2_dma_mm_read_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                                         // rsp_mux_004:src_startofpacket -> dma_fifo_subsystem_2_dma_mm_read_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                           // rsp_mux_004:src_endofpacket -> dma_fifo_subsystem_2_dma_mm_read_agent:rp_endofpacket
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                          // nios_cpu_instruction_master_agent:av_waitrequest -> nios_cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata;                             // nios_cpu_instruction_master_agent:av_readdata -> nios_cpu_instruction_master_translator:uav_readdata
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                          // nios_cpu_instruction_master_translator:uav_debugaccess -> nios_cpu_instruction_master_agent:av_debugaccess
	wire   [31:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_address;                              // nios_cpu_instruction_master_translator:uav_address -> nios_cpu_instruction_master_agent:av_address
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_read;                                 // nios_cpu_instruction_master_translator:uav_read -> nios_cpu_instruction_master_agent:av_read
	wire    [3:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                           // nios_cpu_instruction_master_translator:uav_byteenable -> nios_cpu_instruction_master_agent:av_byteenable
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                        // nios_cpu_instruction_master_agent:av_readdatavalid -> nios_cpu_instruction_master_translator:uav_readdatavalid
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_lock;                                 // nios_cpu_instruction_master_translator:uav_lock -> nios_cpu_instruction_master_agent:av_lock
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_write;                                // nios_cpu_instruction_master_translator:uav_write -> nios_cpu_instruction_master_agent:av_write
	wire   [31:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata;                            // nios_cpu_instruction_master_translator:uav_writedata -> nios_cpu_instruction_master_agent:av_writedata
	wire    [2:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                           // nios_cpu_instruction_master_translator:uav_burstcount -> nios_cpu_instruction_master_agent:av_burstcount
	wire          dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_waitrequest;                     // dma_fifo_subsystem_4_dma_mm_read_agent:av_waitrequest -> dma_fifo_subsystem_4_dma_mm_read_translator:uav_waitrequest
	wire  [255:0] dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_readdata;                        // dma_fifo_subsystem_4_dma_mm_read_agent:av_readdata -> dma_fifo_subsystem_4_dma_mm_read_translator:uav_readdata
	wire          dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_debugaccess;                     // dma_fifo_subsystem_4_dma_mm_read_translator:uav_debugaccess -> dma_fifo_subsystem_4_dma_mm_read_agent:av_debugaccess
	wire   [31:0] dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_address;                         // dma_fifo_subsystem_4_dma_mm_read_translator:uav_address -> dma_fifo_subsystem_4_dma_mm_read_agent:av_address
	wire          dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_read;                            // dma_fifo_subsystem_4_dma_mm_read_translator:uav_read -> dma_fifo_subsystem_4_dma_mm_read_agent:av_read
	wire   [31:0] dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_byteenable;                      // dma_fifo_subsystem_4_dma_mm_read_translator:uav_byteenable -> dma_fifo_subsystem_4_dma_mm_read_agent:av_byteenable
	wire          dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_readdatavalid;                   // dma_fifo_subsystem_4_dma_mm_read_agent:av_readdatavalid -> dma_fifo_subsystem_4_dma_mm_read_translator:uav_readdatavalid
	wire          dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_lock;                            // dma_fifo_subsystem_4_dma_mm_read_translator:uav_lock -> dma_fifo_subsystem_4_dma_mm_read_agent:av_lock
	wire          dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_write;                           // dma_fifo_subsystem_4_dma_mm_read_translator:uav_write -> dma_fifo_subsystem_4_dma_mm_read_agent:av_write
	wire  [255:0] dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_writedata;                       // dma_fifo_subsystem_4_dma_mm_read_translator:uav_writedata -> dma_fifo_subsystem_4_dma_mm_read_agent:av_writedata
	wire   [15:0] dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_burstcount;                      // dma_fifo_subsystem_4_dma_mm_read_translator:uav_burstcount -> dma_fifo_subsystem_4_dma_mm_read_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                                                 // rsp_mux_006:src_valid -> dma_fifo_subsystem_4_dma_mm_read_agent:rp_valid
	wire  [376:0] rsp_mux_006_src_data;                                                                                  // rsp_mux_006:src_data -> dma_fifo_subsystem_4_dma_mm_read_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                                                 // dma_fifo_subsystem_4_dma_mm_read_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [26:0] rsp_mux_006_src_channel;                                                                               // rsp_mux_006:src_channel -> dma_fifo_subsystem_4_dma_mm_read_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                                         // rsp_mux_006:src_startofpacket -> dma_fifo_subsystem_4_dma_mm_read_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                                           // rsp_mux_006:src_endofpacket -> dma_fifo_subsystem_4_dma_mm_read_agent:rp_endofpacket
	wire          dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_waitrequest;                     // dma_fifo_subsystem_3_dma_mm_read_agent:av_waitrequest -> dma_fifo_subsystem_3_dma_mm_read_translator:uav_waitrequest
	wire  [255:0] dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_readdata;                        // dma_fifo_subsystem_3_dma_mm_read_agent:av_readdata -> dma_fifo_subsystem_3_dma_mm_read_translator:uav_readdata
	wire          dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_debugaccess;                     // dma_fifo_subsystem_3_dma_mm_read_translator:uav_debugaccess -> dma_fifo_subsystem_3_dma_mm_read_agent:av_debugaccess
	wire   [31:0] dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_address;                         // dma_fifo_subsystem_3_dma_mm_read_translator:uav_address -> dma_fifo_subsystem_3_dma_mm_read_agent:av_address
	wire          dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_read;                            // dma_fifo_subsystem_3_dma_mm_read_translator:uav_read -> dma_fifo_subsystem_3_dma_mm_read_agent:av_read
	wire   [31:0] dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_byteenable;                      // dma_fifo_subsystem_3_dma_mm_read_translator:uav_byteenable -> dma_fifo_subsystem_3_dma_mm_read_agent:av_byteenable
	wire          dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_readdatavalid;                   // dma_fifo_subsystem_3_dma_mm_read_agent:av_readdatavalid -> dma_fifo_subsystem_3_dma_mm_read_translator:uav_readdatavalid
	wire          dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_lock;                            // dma_fifo_subsystem_3_dma_mm_read_translator:uav_lock -> dma_fifo_subsystem_3_dma_mm_read_agent:av_lock
	wire          dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_write;                           // dma_fifo_subsystem_3_dma_mm_read_translator:uav_write -> dma_fifo_subsystem_3_dma_mm_read_agent:av_write
	wire  [255:0] dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_writedata;                       // dma_fifo_subsystem_3_dma_mm_read_translator:uav_writedata -> dma_fifo_subsystem_3_dma_mm_read_agent:av_writedata
	wire   [15:0] dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_burstcount;                      // dma_fifo_subsystem_3_dma_mm_read_translator:uav_burstcount -> dma_fifo_subsystem_3_dma_mm_read_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                                                 // rsp_mux_007:src_valid -> dma_fifo_subsystem_3_dma_mm_read_agent:rp_valid
	wire  [376:0] rsp_mux_007_src_data;                                                                                  // rsp_mux_007:src_data -> dma_fifo_subsystem_3_dma_mm_read_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                                                 // dma_fifo_subsystem_3_dma_mm_read_agent:rp_ready -> rsp_mux_007:src_ready
	wire   [26:0] rsp_mux_007_src_channel;                                                                               // rsp_mux_007:src_channel -> dma_fifo_subsystem_3_dma_mm_read_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                                         // rsp_mux_007:src_startofpacket -> dma_fifo_subsystem_3_dma_mm_read_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                                           // rsp_mux_007:src_endofpacket -> dma_fifo_subsystem_3_dma_mm_read_agent:rp_endofpacket
	wire  [255:0] ddr2_ram_avl_agent_m0_readdata;                                                                        // ddr2_ram_avl_translator:uav_readdata -> ddr2_ram_avl_agent:m0_readdata
	wire          ddr2_ram_avl_agent_m0_waitrequest;                                                                     // ddr2_ram_avl_translator:uav_waitrequest -> ddr2_ram_avl_agent:m0_waitrequest
	wire          ddr2_ram_avl_agent_m0_debugaccess;                                                                     // ddr2_ram_avl_agent:m0_debugaccess -> ddr2_ram_avl_translator:uav_debugaccess
	wire   [31:0] ddr2_ram_avl_agent_m0_address;                                                                         // ddr2_ram_avl_agent:m0_address -> ddr2_ram_avl_translator:uav_address
	wire   [31:0] ddr2_ram_avl_agent_m0_byteenable;                                                                      // ddr2_ram_avl_agent:m0_byteenable -> ddr2_ram_avl_translator:uav_byteenable
	wire          ddr2_ram_avl_agent_m0_read;                                                                            // ddr2_ram_avl_agent:m0_read -> ddr2_ram_avl_translator:uav_read
	wire          ddr2_ram_avl_agent_m0_readdatavalid;                                                                   // ddr2_ram_avl_translator:uav_readdatavalid -> ddr2_ram_avl_agent:m0_readdatavalid
	wire          ddr2_ram_avl_agent_m0_lock;                                                                            // ddr2_ram_avl_agent:m0_lock -> ddr2_ram_avl_translator:uav_lock
	wire  [255:0] ddr2_ram_avl_agent_m0_writedata;                                                                       // ddr2_ram_avl_agent:m0_writedata -> ddr2_ram_avl_translator:uav_writedata
	wire          ddr2_ram_avl_agent_m0_write;                                                                           // ddr2_ram_avl_agent:m0_write -> ddr2_ram_avl_translator:uav_write
	wire    [7:0] ddr2_ram_avl_agent_m0_burstcount;                                                                      // ddr2_ram_avl_agent:m0_burstcount -> ddr2_ram_avl_translator:uav_burstcount
	wire          ddr2_ram_avl_agent_rf_source_valid;                                                                    // ddr2_ram_avl_agent:rf_source_valid -> ddr2_ram_avl_agent_rsp_fifo:in_valid
	wire  [377:0] ddr2_ram_avl_agent_rf_source_data;                                                                     // ddr2_ram_avl_agent:rf_source_data -> ddr2_ram_avl_agent_rsp_fifo:in_data
	wire          ddr2_ram_avl_agent_rf_source_ready;                                                                    // ddr2_ram_avl_agent_rsp_fifo:in_ready -> ddr2_ram_avl_agent:rf_source_ready
	wire          ddr2_ram_avl_agent_rf_source_startofpacket;                                                            // ddr2_ram_avl_agent:rf_source_startofpacket -> ddr2_ram_avl_agent_rsp_fifo:in_startofpacket
	wire          ddr2_ram_avl_agent_rf_source_endofpacket;                                                              // ddr2_ram_avl_agent:rf_source_endofpacket -> ddr2_ram_avl_agent_rsp_fifo:in_endofpacket
	wire          ddr2_ram_avl_agent_rsp_fifo_out_valid;                                                                 // ddr2_ram_avl_agent_rsp_fifo:out_valid -> ddr2_ram_avl_agent:rf_sink_valid
	wire  [377:0] ddr2_ram_avl_agent_rsp_fifo_out_data;                                                                  // ddr2_ram_avl_agent_rsp_fifo:out_data -> ddr2_ram_avl_agent:rf_sink_data
	wire          ddr2_ram_avl_agent_rsp_fifo_out_ready;                                                                 // ddr2_ram_avl_agent:rf_sink_ready -> ddr2_ram_avl_agent_rsp_fifo:out_ready
	wire          ddr2_ram_avl_agent_rsp_fifo_out_startofpacket;                                                         // ddr2_ram_avl_agent_rsp_fifo:out_startofpacket -> ddr2_ram_avl_agent:rf_sink_startofpacket
	wire          ddr2_ram_avl_agent_rsp_fifo_out_endofpacket;                                                           // ddr2_ram_avl_agent_rsp_fifo:out_endofpacket -> ddr2_ram_avl_agent:rf_sink_endofpacket
	wire  [255:0] ddr2_ram_1_avl_agent_m0_readdata;                                                                      // ddr2_ram_1_avl_translator:uav_readdata -> ddr2_ram_1_avl_agent:m0_readdata
	wire          ddr2_ram_1_avl_agent_m0_waitrequest;                                                                   // ddr2_ram_1_avl_translator:uav_waitrequest -> ddr2_ram_1_avl_agent:m0_waitrequest
	wire          ddr2_ram_1_avl_agent_m0_debugaccess;                                                                   // ddr2_ram_1_avl_agent:m0_debugaccess -> ddr2_ram_1_avl_translator:uav_debugaccess
	wire   [31:0] ddr2_ram_1_avl_agent_m0_address;                                                                       // ddr2_ram_1_avl_agent:m0_address -> ddr2_ram_1_avl_translator:uav_address
	wire   [31:0] ddr2_ram_1_avl_agent_m0_byteenable;                                                                    // ddr2_ram_1_avl_agent:m0_byteenable -> ddr2_ram_1_avl_translator:uav_byteenable
	wire          ddr2_ram_1_avl_agent_m0_read;                                                                          // ddr2_ram_1_avl_agent:m0_read -> ddr2_ram_1_avl_translator:uav_read
	wire          ddr2_ram_1_avl_agent_m0_readdatavalid;                                                                 // ddr2_ram_1_avl_translator:uav_readdatavalid -> ddr2_ram_1_avl_agent:m0_readdatavalid
	wire          ddr2_ram_1_avl_agent_m0_lock;                                                                          // ddr2_ram_1_avl_agent:m0_lock -> ddr2_ram_1_avl_translator:uav_lock
	wire  [255:0] ddr2_ram_1_avl_agent_m0_writedata;                                                                     // ddr2_ram_1_avl_agent:m0_writedata -> ddr2_ram_1_avl_translator:uav_writedata
	wire          ddr2_ram_1_avl_agent_m0_write;                                                                         // ddr2_ram_1_avl_agent:m0_write -> ddr2_ram_1_avl_translator:uav_write
	wire    [7:0] ddr2_ram_1_avl_agent_m0_burstcount;                                                                    // ddr2_ram_1_avl_agent:m0_burstcount -> ddr2_ram_1_avl_translator:uav_burstcount
	wire          ddr2_ram_1_avl_agent_rf_source_valid;                                                                  // ddr2_ram_1_avl_agent:rf_source_valid -> ddr2_ram_1_avl_agent_rsp_fifo:in_valid
	wire  [377:0] ddr2_ram_1_avl_agent_rf_source_data;                                                                   // ddr2_ram_1_avl_agent:rf_source_data -> ddr2_ram_1_avl_agent_rsp_fifo:in_data
	wire          ddr2_ram_1_avl_agent_rf_source_ready;                                                                  // ddr2_ram_1_avl_agent_rsp_fifo:in_ready -> ddr2_ram_1_avl_agent:rf_source_ready
	wire          ddr2_ram_1_avl_agent_rf_source_startofpacket;                                                          // ddr2_ram_1_avl_agent:rf_source_startofpacket -> ddr2_ram_1_avl_agent_rsp_fifo:in_startofpacket
	wire          ddr2_ram_1_avl_agent_rf_source_endofpacket;                                                            // ddr2_ram_1_avl_agent:rf_source_endofpacket -> ddr2_ram_1_avl_agent_rsp_fifo:in_endofpacket
	wire          ddr2_ram_1_avl_agent_rsp_fifo_out_valid;                                                               // ddr2_ram_1_avl_agent_rsp_fifo:out_valid -> ddr2_ram_1_avl_agent:rf_sink_valid
	wire  [377:0] ddr2_ram_1_avl_agent_rsp_fifo_out_data;                                                                // ddr2_ram_1_avl_agent_rsp_fifo:out_data -> ddr2_ram_1_avl_agent:rf_sink_data
	wire          ddr2_ram_1_avl_agent_rsp_fifo_out_ready;                                                               // ddr2_ram_1_avl_agent:rf_sink_ready -> ddr2_ram_1_avl_agent_rsp_fifo:out_ready
	wire          ddr2_ram_1_avl_agent_rsp_fifo_out_startofpacket;                                                       // ddr2_ram_1_avl_agent_rsp_fifo:out_startofpacket -> ddr2_ram_1_avl_agent:rf_sink_startofpacket
	wire          ddr2_ram_1_avl_agent_rsp_fifo_out_endofpacket;                                                         // ddr2_ram_1_avl_agent_rsp_fifo:out_endofpacket -> ddr2_ram_1_avl_agent:rf_sink_endofpacket
	wire          ddr2_ram_1_avl_agent_rdata_fifo_src_valid;                                                             // ddr2_ram_1_avl_agent:rdata_fifo_src_valid -> ddr2_ram_1_avl_agent_rdata_fifo:in_valid
	wire  [257:0] ddr2_ram_1_avl_agent_rdata_fifo_src_data;                                                              // ddr2_ram_1_avl_agent:rdata_fifo_src_data -> ddr2_ram_1_avl_agent_rdata_fifo:in_data
	wire          ddr2_ram_1_avl_agent_rdata_fifo_src_ready;                                                             // ddr2_ram_1_avl_agent_rdata_fifo:in_ready -> ddr2_ram_1_avl_agent:rdata_fifo_src_ready
	wire   [31:0] from_eth_to_ddr_eth_dma_csr_agent_m0_readdata;                                                         // from_ETH_to_DDR_ETH_DMA_csr_translator:uav_readdata -> from_ETH_to_DDR_ETH_DMA_csr_agent:m0_readdata
	wire          from_eth_to_ddr_eth_dma_csr_agent_m0_waitrequest;                                                      // from_ETH_to_DDR_ETH_DMA_csr_translator:uav_waitrequest -> from_ETH_to_DDR_ETH_DMA_csr_agent:m0_waitrequest
	wire          from_eth_to_ddr_eth_dma_csr_agent_m0_debugaccess;                                                      // from_ETH_to_DDR_ETH_DMA_csr_agent:m0_debugaccess -> from_ETH_to_DDR_ETH_DMA_csr_translator:uav_debugaccess
	wire   [31:0] from_eth_to_ddr_eth_dma_csr_agent_m0_address;                                                          // from_ETH_to_DDR_ETH_DMA_csr_agent:m0_address -> from_ETH_to_DDR_ETH_DMA_csr_translator:uav_address
	wire    [3:0] from_eth_to_ddr_eth_dma_csr_agent_m0_byteenable;                                                       // from_ETH_to_DDR_ETH_DMA_csr_agent:m0_byteenable -> from_ETH_to_DDR_ETH_DMA_csr_translator:uav_byteenable
	wire          from_eth_to_ddr_eth_dma_csr_agent_m0_read;                                                             // from_ETH_to_DDR_ETH_DMA_csr_agent:m0_read -> from_ETH_to_DDR_ETH_DMA_csr_translator:uav_read
	wire          from_eth_to_ddr_eth_dma_csr_agent_m0_readdatavalid;                                                    // from_ETH_to_DDR_ETH_DMA_csr_translator:uav_readdatavalid -> from_ETH_to_DDR_ETH_DMA_csr_agent:m0_readdatavalid
	wire          from_eth_to_ddr_eth_dma_csr_agent_m0_lock;                                                             // from_ETH_to_DDR_ETH_DMA_csr_agent:m0_lock -> from_ETH_to_DDR_ETH_DMA_csr_translator:uav_lock
	wire   [31:0] from_eth_to_ddr_eth_dma_csr_agent_m0_writedata;                                                        // from_ETH_to_DDR_ETH_DMA_csr_agent:m0_writedata -> from_ETH_to_DDR_ETH_DMA_csr_translator:uav_writedata
	wire          from_eth_to_ddr_eth_dma_csr_agent_m0_write;                                                            // from_ETH_to_DDR_ETH_DMA_csr_agent:m0_write -> from_ETH_to_DDR_ETH_DMA_csr_translator:uav_write
	wire    [2:0] from_eth_to_ddr_eth_dma_csr_agent_m0_burstcount;                                                       // from_ETH_to_DDR_ETH_DMA_csr_agent:m0_burstcount -> from_ETH_to_DDR_ETH_DMA_csr_translator:uav_burstcount
	wire          from_eth_to_ddr_eth_dma_csr_agent_rf_source_valid;                                                     // from_ETH_to_DDR_ETH_DMA_csr_agent:rf_source_valid -> from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:in_valid
	wire  [125:0] from_eth_to_ddr_eth_dma_csr_agent_rf_source_data;                                                      // from_ETH_to_DDR_ETH_DMA_csr_agent:rf_source_data -> from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:in_data
	wire          from_eth_to_ddr_eth_dma_csr_agent_rf_source_ready;                                                     // from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:in_ready -> from_ETH_to_DDR_ETH_DMA_csr_agent:rf_source_ready
	wire          from_eth_to_ddr_eth_dma_csr_agent_rf_source_startofpacket;                                             // from_ETH_to_DDR_ETH_DMA_csr_agent:rf_source_startofpacket -> from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:in_startofpacket
	wire          from_eth_to_ddr_eth_dma_csr_agent_rf_source_endofpacket;                                               // from_ETH_to_DDR_ETH_DMA_csr_agent:rf_source_endofpacket -> from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:in_endofpacket
	wire          from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_valid;                                                  // from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:out_valid -> from_ETH_to_DDR_ETH_DMA_csr_agent:rf_sink_valid
	wire  [125:0] from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_data;                                                   // from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:out_data -> from_ETH_to_DDR_ETH_DMA_csr_agent:rf_sink_data
	wire          from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_ready;                                                  // from_ETH_to_DDR_ETH_DMA_csr_agent:rf_sink_ready -> from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:out_ready
	wire          from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_startofpacket;                                          // from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:out_startofpacket -> from_ETH_to_DDR_ETH_DMA_csr_agent:rf_sink_startofpacket
	wire          from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_endofpacket;                                            // from_ETH_to_DDR_ETH_DMA_csr_agent_rsp_fifo:out_endofpacket -> from_ETH_to_DDR_ETH_DMA_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                 // cmd_mux_002:src_valid -> from_ETH_to_DDR_ETH_DMA_csr_agent:cp_valid
	wire  [124:0] cmd_mux_002_src_data;                                                                                  // cmd_mux_002:src_data -> from_ETH_to_DDR_ETH_DMA_csr_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                                 // from_ETH_to_DDR_ETH_DMA_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [26:0] cmd_mux_002_src_channel;                                                                               // cmd_mux_002:src_channel -> from_ETH_to_DDR_ETH_DMA_csr_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                         // cmd_mux_002:src_startofpacket -> from_ETH_to_DDR_ETH_DMA_csr_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                           // cmd_mux_002:src_endofpacket -> from_ETH_to_DDR_ETH_DMA_csr_agent:cp_endofpacket
	wire  [127:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_readdata;                                            // from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_readdata -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_readdata
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_waitrequest;                                         // from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_waitrequest -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_waitrequest
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_debugaccess;                                         // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_debugaccess -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_address;                                             // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_address -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_address
	wire   [15:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_byteenable;                                          // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_byteenable -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_byteenable
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_read;                                                // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_read -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_read
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_readdatavalid;                                       // from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_readdatavalid -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_readdatavalid
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_lock;                                                // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_lock -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_lock
	wire  [127:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_writedata;                                           // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_writedata -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_writedata
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_write;                                               // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_write -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_write
	wire    [4:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_burstcount;                                          // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:m0_burstcount -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_translator:uav_burstcount
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_valid;                                        // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_source_valid -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [233:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_data;                                         // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_source_data -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:in_data
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_ready;                                        // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:in_ready -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_source_ready
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_startofpacket;                                // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_source_startofpacket -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_endofpacket;                                  // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_source_endofpacket -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_valid;                                     // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:out_valid -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_sink_valid
	wire  [233:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_data;                                      // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:out_data -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_sink_data
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_ready;                                     // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_sink_ready -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:out_ready
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;                             // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:out_startofpacket -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_sink_startofpacket
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                               // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent_rsp_fifo:out_endofpacket -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                 // cmd_mux_003:src_valid -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:cp_valid
	wire  [232:0] cmd_mux_003_src_data;                                                                                  // cmd_mux_003:src_data -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                                 // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [26:0] cmd_mux_003_src_channel;                                                                               // cmd_mux_003:src_channel -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                         // cmd_mux_003:src_startofpacket -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                           // cmd_mux_003:src_endofpacket -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:cp_endofpacket
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_readdata;                                                              // jtag_avalon_jtag_slave_translator:uav_readdata -> jtag_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_avalon_jtag_slave_agent_m0_waitrequest;                                                           // jtag_avalon_jtag_slave_translator:uav_waitrequest -> jtag_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_avalon_jtag_slave_agent_m0_debugaccess;                                                           // jtag_avalon_jtag_slave_agent:m0_debugaccess -> jtag_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_address;                                                               // jtag_avalon_jtag_slave_agent:m0_address -> jtag_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_avalon_jtag_slave_agent_m0_byteenable;                                                            // jtag_avalon_jtag_slave_agent:m0_byteenable -> jtag_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_avalon_jtag_slave_agent_m0_read;                                                                  // jtag_avalon_jtag_slave_agent:m0_read -> jtag_avalon_jtag_slave_translator:uav_read
	wire          jtag_avalon_jtag_slave_agent_m0_readdatavalid;                                                         // jtag_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_avalon_jtag_slave_agent_m0_lock;                                                                  // jtag_avalon_jtag_slave_agent:m0_lock -> jtag_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_writedata;                                                             // jtag_avalon_jtag_slave_agent:m0_writedata -> jtag_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_avalon_jtag_slave_agent_m0_write;                                                                 // jtag_avalon_jtag_slave_agent:m0_write -> jtag_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_avalon_jtag_slave_agent_m0_burstcount;                                                            // jtag_avalon_jtag_slave_agent:m0_burstcount -> jtag_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_avalon_jtag_slave_agent_rf_source_valid;                                                          // jtag_avalon_jtag_slave_agent:rf_source_valid -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [125:0] jtag_avalon_jtag_slave_agent_rf_source_data;                                                           // jtag_avalon_jtag_slave_agent:rf_source_data -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_avalon_jtag_slave_agent_rf_source_ready;                                                          // jtag_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_avalon_jtag_slave_agent_rf_source_startofpacket;                                                  // jtag_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rf_source_endofpacket;                                                    // jtag_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                                       // jtag_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_avalon_jtag_slave_agent:rf_sink_valid
	wire  [125:0] jtag_avalon_jtag_slave_agent_rsp_fifo_out_data;                                                        // jtag_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                                       // jtag_avalon_jtag_slave_agent:rf_sink_ready -> jtag_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                               // jtag_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                                 // jtag_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                 // cmd_mux_004:src_valid -> jtag_avalon_jtag_slave_agent:cp_valid
	wire  [124:0] cmd_mux_004_src_data;                                                                                  // cmd_mux_004:src_data -> jtag_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                                 // jtag_avalon_jtag_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [26:0] cmd_mux_004_src_channel;                                                                               // cmd_mux_004:src_channel -> jtag_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                         // cmd_mux_004:src_startofpacket -> jtag_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                           // cmd_mux_004:src_endofpacket -> jtag_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] nios_cpu_debug_mem_slave_agent_m0_readdata;                                                            // nios_cpu_debug_mem_slave_translator:uav_readdata -> nios_cpu_debug_mem_slave_agent:m0_readdata
	wire          nios_cpu_debug_mem_slave_agent_m0_waitrequest;                                                         // nios_cpu_debug_mem_slave_translator:uav_waitrequest -> nios_cpu_debug_mem_slave_agent:m0_waitrequest
	wire          nios_cpu_debug_mem_slave_agent_m0_debugaccess;                                                         // nios_cpu_debug_mem_slave_agent:m0_debugaccess -> nios_cpu_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios_cpu_debug_mem_slave_agent_m0_address;                                                             // nios_cpu_debug_mem_slave_agent:m0_address -> nios_cpu_debug_mem_slave_translator:uav_address
	wire    [3:0] nios_cpu_debug_mem_slave_agent_m0_byteenable;                                                          // nios_cpu_debug_mem_slave_agent:m0_byteenable -> nios_cpu_debug_mem_slave_translator:uav_byteenable
	wire          nios_cpu_debug_mem_slave_agent_m0_read;                                                                // nios_cpu_debug_mem_slave_agent:m0_read -> nios_cpu_debug_mem_slave_translator:uav_read
	wire          nios_cpu_debug_mem_slave_agent_m0_readdatavalid;                                                       // nios_cpu_debug_mem_slave_translator:uav_readdatavalid -> nios_cpu_debug_mem_slave_agent:m0_readdatavalid
	wire          nios_cpu_debug_mem_slave_agent_m0_lock;                                                                // nios_cpu_debug_mem_slave_agent:m0_lock -> nios_cpu_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios_cpu_debug_mem_slave_agent_m0_writedata;                                                           // nios_cpu_debug_mem_slave_agent:m0_writedata -> nios_cpu_debug_mem_slave_translator:uav_writedata
	wire          nios_cpu_debug_mem_slave_agent_m0_write;                                                               // nios_cpu_debug_mem_slave_agent:m0_write -> nios_cpu_debug_mem_slave_translator:uav_write
	wire    [2:0] nios_cpu_debug_mem_slave_agent_m0_burstcount;                                                          // nios_cpu_debug_mem_slave_agent:m0_burstcount -> nios_cpu_debug_mem_slave_translator:uav_burstcount
	wire          nios_cpu_debug_mem_slave_agent_rf_source_valid;                                                        // nios_cpu_debug_mem_slave_agent:rf_source_valid -> nios_cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [125:0] nios_cpu_debug_mem_slave_agent_rf_source_data;                                                         // nios_cpu_debug_mem_slave_agent:rf_source_data -> nios_cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios_cpu_debug_mem_slave_agent_rf_source_ready;                                                        // nios_cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> nios_cpu_debug_mem_slave_agent:rf_source_ready
	wire          nios_cpu_debug_mem_slave_agent_rf_source_startofpacket;                                                // nios_cpu_debug_mem_slave_agent:rf_source_startofpacket -> nios_cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios_cpu_debug_mem_slave_agent_rf_source_endofpacket;                                                  // nios_cpu_debug_mem_slave_agent:rf_source_endofpacket -> nios_cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios_cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                                     // nios_cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> nios_cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [125:0] nios_cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                                      // nios_cpu_debug_mem_slave_agent_rsp_fifo:out_data -> nios_cpu_debug_mem_slave_agent:rf_sink_data
	wire          nios_cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                                     // nios_cpu_debug_mem_slave_agent:rf_sink_ready -> nios_cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                             // nios_cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios_cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                               // nios_cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios_cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                 // cmd_mux_005:src_valid -> nios_cpu_debug_mem_slave_agent:cp_valid
	wire  [124:0] cmd_mux_005_src_data;                                                                                  // cmd_mux_005:src_data -> nios_cpu_debug_mem_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                                 // nios_cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [26:0] cmd_mux_005_src_channel;                                                                               // cmd_mux_005:src_channel -> nios_cpu_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                         // cmd_mux_005:src_startofpacket -> nios_cpu_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                           // cmd_mux_005:src_endofpacket -> nios_cpu_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] dma_fifo_susbystem_dma_csr_agent_m0_readdata;                                                          // dma_fifo_susbystem_dma_csr_translator:uav_readdata -> dma_fifo_susbystem_dma_csr_agent:m0_readdata
	wire          dma_fifo_susbystem_dma_csr_agent_m0_waitrequest;                                                       // dma_fifo_susbystem_dma_csr_translator:uav_waitrequest -> dma_fifo_susbystem_dma_csr_agent:m0_waitrequest
	wire          dma_fifo_susbystem_dma_csr_agent_m0_debugaccess;                                                       // dma_fifo_susbystem_dma_csr_agent:m0_debugaccess -> dma_fifo_susbystem_dma_csr_translator:uav_debugaccess
	wire   [31:0] dma_fifo_susbystem_dma_csr_agent_m0_address;                                                           // dma_fifo_susbystem_dma_csr_agent:m0_address -> dma_fifo_susbystem_dma_csr_translator:uav_address
	wire    [3:0] dma_fifo_susbystem_dma_csr_agent_m0_byteenable;                                                        // dma_fifo_susbystem_dma_csr_agent:m0_byteenable -> dma_fifo_susbystem_dma_csr_translator:uav_byteenable
	wire          dma_fifo_susbystem_dma_csr_agent_m0_read;                                                              // dma_fifo_susbystem_dma_csr_agent:m0_read -> dma_fifo_susbystem_dma_csr_translator:uav_read
	wire          dma_fifo_susbystem_dma_csr_agent_m0_readdatavalid;                                                     // dma_fifo_susbystem_dma_csr_translator:uav_readdatavalid -> dma_fifo_susbystem_dma_csr_agent:m0_readdatavalid
	wire          dma_fifo_susbystem_dma_csr_agent_m0_lock;                                                              // dma_fifo_susbystem_dma_csr_agent:m0_lock -> dma_fifo_susbystem_dma_csr_translator:uav_lock
	wire   [31:0] dma_fifo_susbystem_dma_csr_agent_m0_writedata;                                                         // dma_fifo_susbystem_dma_csr_agent:m0_writedata -> dma_fifo_susbystem_dma_csr_translator:uav_writedata
	wire          dma_fifo_susbystem_dma_csr_agent_m0_write;                                                             // dma_fifo_susbystem_dma_csr_agent:m0_write -> dma_fifo_susbystem_dma_csr_translator:uav_write
	wire    [2:0] dma_fifo_susbystem_dma_csr_agent_m0_burstcount;                                                        // dma_fifo_susbystem_dma_csr_agent:m0_burstcount -> dma_fifo_susbystem_dma_csr_translator:uav_burstcount
	wire          dma_fifo_susbystem_dma_csr_agent_rf_source_valid;                                                      // dma_fifo_susbystem_dma_csr_agent:rf_source_valid -> dma_fifo_susbystem_dma_csr_agent_rsp_fifo:in_valid
	wire  [125:0] dma_fifo_susbystem_dma_csr_agent_rf_source_data;                                                       // dma_fifo_susbystem_dma_csr_agent:rf_source_data -> dma_fifo_susbystem_dma_csr_agent_rsp_fifo:in_data
	wire          dma_fifo_susbystem_dma_csr_agent_rf_source_ready;                                                      // dma_fifo_susbystem_dma_csr_agent_rsp_fifo:in_ready -> dma_fifo_susbystem_dma_csr_agent:rf_source_ready
	wire          dma_fifo_susbystem_dma_csr_agent_rf_source_startofpacket;                                              // dma_fifo_susbystem_dma_csr_agent:rf_source_startofpacket -> dma_fifo_susbystem_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_susbystem_dma_csr_agent_rf_source_endofpacket;                                                // dma_fifo_susbystem_dma_csr_agent:rf_source_endofpacket -> dma_fifo_susbystem_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_valid;                                                   // dma_fifo_susbystem_dma_csr_agent_rsp_fifo:out_valid -> dma_fifo_susbystem_dma_csr_agent:rf_sink_valid
	wire  [125:0] dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_data;                                                    // dma_fifo_susbystem_dma_csr_agent_rsp_fifo:out_data -> dma_fifo_susbystem_dma_csr_agent:rf_sink_data
	wire          dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_ready;                                                   // dma_fifo_susbystem_dma_csr_agent:rf_sink_ready -> dma_fifo_susbystem_dma_csr_agent_rsp_fifo:out_ready
	wire          dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_startofpacket;                                           // dma_fifo_susbystem_dma_csr_agent_rsp_fifo:out_startofpacket -> dma_fifo_susbystem_dma_csr_agent:rf_sink_startofpacket
	wire          dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_endofpacket;                                             // dma_fifo_susbystem_dma_csr_agent_rsp_fifo:out_endofpacket -> dma_fifo_susbystem_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                                 // cmd_mux_006:src_valid -> dma_fifo_susbystem_dma_csr_agent:cp_valid
	wire  [124:0] cmd_mux_006_src_data;                                                                                  // cmd_mux_006:src_data -> dma_fifo_susbystem_dma_csr_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                                 // dma_fifo_susbystem_dma_csr_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [26:0] cmd_mux_006_src_channel;                                                                               // cmd_mux_006:src_channel -> dma_fifo_susbystem_dma_csr_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                         // cmd_mux_006:src_startofpacket -> dma_fifo_susbystem_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                           // cmd_mux_006:src_endofpacket -> dma_fifo_susbystem_dma_csr_agent:cp_endofpacket
	wire   [31:0] dma_fifo_subsystem_1_dma_csr_agent_m0_readdata;                                                        // dma_fifo_subsystem_1_dma_csr_translator:uav_readdata -> dma_fifo_subsystem_1_dma_csr_agent:m0_readdata
	wire          dma_fifo_subsystem_1_dma_csr_agent_m0_waitrequest;                                                     // dma_fifo_subsystem_1_dma_csr_translator:uav_waitrequest -> dma_fifo_subsystem_1_dma_csr_agent:m0_waitrequest
	wire          dma_fifo_subsystem_1_dma_csr_agent_m0_debugaccess;                                                     // dma_fifo_subsystem_1_dma_csr_agent:m0_debugaccess -> dma_fifo_subsystem_1_dma_csr_translator:uav_debugaccess
	wire   [31:0] dma_fifo_subsystem_1_dma_csr_agent_m0_address;                                                         // dma_fifo_subsystem_1_dma_csr_agent:m0_address -> dma_fifo_subsystem_1_dma_csr_translator:uav_address
	wire    [3:0] dma_fifo_subsystem_1_dma_csr_agent_m0_byteenable;                                                      // dma_fifo_subsystem_1_dma_csr_agent:m0_byteenable -> dma_fifo_subsystem_1_dma_csr_translator:uav_byteenable
	wire          dma_fifo_subsystem_1_dma_csr_agent_m0_read;                                                            // dma_fifo_subsystem_1_dma_csr_agent:m0_read -> dma_fifo_subsystem_1_dma_csr_translator:uav_read
	wire          dma_fifo_subsystem_1_dma_csr_agent_m0_readdatavalid;                                                   // dma_fifo_subsystem_1_dma_csr_translator:uav_readdatavalid -> dma_fifo_subsystem_1_dma_csr_agent:m0_readdatavalid
	wire          dma_fifo_subsystem_1_dma_csr_agent_m0_lock;                                                            // dma_fifo_subsystem_1_dma_csr_agent:m0_lock -> dma_fifo_subsystem_1_dma_csr_translator:uav_lock
	wire   [31:0] dma_fifo_subsystem_1_dma_csr_agent_m0_writedata;                                                       // dma_fifo_subsystem_1_dma_csr_agent:m0_writedata -> dma_fifo_subsystem_1_dma_csr_translator:uav_writedata
	wire          dma_fifo_subsystem_1_dma_csr_agent_m0_write;                                                           // dma_fifo_subsystem_1_dma_csr_agent:m0_write -> dma_fifo_subsystem_1_dma_csr_translator:uav_write
	wire    [2:0] dma_fifo_subsystem_1_dma_csr_agent_m0_burstcount;                                                      // dma_fifo_subsystem_1_dma_csr_agent:m0_burstcount -> dma_fifo_subsystem_1_dma_csr_translator:uav_burstcount
	wire          dma_fifo_subsystem_1_dma_csr_agent_rf_source_valid;                                                    // dma_fifo_subsystem_1_dma_csr_agent:rf_source_valid -> dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:in_valid
	wire  [125:0] dma_fifo_subsystem_1_dma_csr_agent_rf_source_data;                                                     // dma_fifo_subsystem_1_dma_csr_agent:rf_source_data -> dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:in_data
	wire          dma_fifo_subsystem_1_dma_csr_agent_rf_source_ready;                                                    // dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:in_ready -> dma_fifo_subsystem_1_dma_csr_agent:rf_source_ready
	wire          dma_fifo_subsystem_1_dma_csr_agent_rf_source_startofpacket;                                            // dma_fifo_subsystem_1_dma_csr_agent:rf_source_startofpacket -> dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_subsystem_1_dma_csr_agent_rf_source_endofpacket;                                              // dma_fifo_subsystem_1_dma_csr_agent:rf_source_endofpacket -> dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_valid;                                                 // dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:out_valid -> dma_fifo_subsystem_1_dma_csr_agent:rf_sink_valid
	wire  [125:0] dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_data;                                                  // dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:out_data -> dma_fifo_subsystem_1_dma_csr_agent:rf_sink_data
	wire          dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_ready;                                                 // dma_fifo_subsystem_1_dma_csr_agent:rf_sink_ready -> dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:out_ready
	wire          dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_startofpacket;                                         // dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:out_startofpacket -> dma_fifo_subsystem_1_dma_csr_agent:rf_sink_startofpacket
	wire          dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_endofpacket;                                           // dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo:out_endofpacket -> dma_fifo_subsystem_1_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                                 // cmd_mux_007:src_valid -> dma_fifo_subsystem_1_dma_csr_agent:cp_valid
	wire  [124:0] cmd_mux_007_src_data;                                                                                  // cmd_mux_007:src_data -> dma_fifo_subsystem_1_dma_csr_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                                 // dma_fifo_subsystem_1_dma_csr_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [26:0] cmd_mux_007_src_channel;                                                                               // cmd_mux_007:src_channel -> dma_fifo_subsystem_1_dma_csr_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                         // cmd_mux_007:src_startofpacket -> dma_fifo_subsystem_1_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                           // cmd_mux_007:src_endofpacket -> dma_fifo_subsystem_1_dma_csr_agent:cp_endofpacket
	wire   [31:0] dma_fifo_subsystem_2_dma_csr_agent_m0_readdata;                                                        // dma_fifo_subsystem_2_dma_csr_translator:uav_readdata -> dma_fifo_subsystem_2_dma_csr_agent:m0_readdata
	wire          dma_fifo_subsystem_2_dma_csr_agent_m0_waitrequest;                                                     // dma_fifo_subsystem_2_dma_csr_translator:uav_waitrequest -> dma_fifo_subsystem_2_dma_csr_agent:m0_waitrequest
	wire          dma_fifo_subsystem_2_dma_csr_agent_m0_debugaccess;                                                     // dma_fifo_subsystem_2_dma_csr_agent:m0_debugaccess -> dma_fifo_subsystem_2_dma_csr_translator:uav_debugaccess
	wire   [31:0] dma_fifo_subsystem_2_dma_csr_agent_m0_address;                                                         // dma_fifo_subsystem_2_dma_csr_agent:m0_address -> dma_fifo_subsystem_2_dma_csr_translator:uav_address
	wire    [3:0] dma_fifo_subsystem_2_dma_csr_agent_m0_byteenable;                                                      // dma_fifo_subsystem_2_dma_csr_agent:m0_byteenable -> dma_fifo_subsystem_2_dma_csr_translator:uav_byteenable
	wire          dma_fifo_subsystem_2_dma_csr_agent_m0_read;                                                            // dma_fifo_subsystem_2_dma_csr_agent:m0_read -> dma_fifo_subsystem_2_dma_csr_translator:uav_read
	wire          dma_fifo_subsystem_2_dma_csr_agent_m0_readdatavalid;                                                   // dma_fifo_subsystem_2_dma_csr_translator:uav_readdatavalid -> dma_fifo_subsystem_2_dma_csr_agent:m0_readdatavalid
	wire          dma_fifo_subsystem_2_dma_csr_agent_m0_lock;                                                            // dma_fifo_subsystem_2_dma_csr_agent:m0_lock -> dma_fifo_subsystem_2_dma_csr_translator:uav_lock
	wire   [31:0] dma_fifo_subsystem_2_dma_csr_agent_m0_writedata;                                                       // dma_fifo_subsystem_2_dma_csr_agent:m0_writedata -> dma_fifo_subsystem_2_dma_csr_translator:uav_writedata
	wire          dma_fifo_subsystem_2_dma_csr_agent_m0_write;                                                           // dma_fifo_subsystem_2_dma_csr_agent:m0_write -> dma_fifo_subsystem_2_dma_csr_translator:uav_write
	wire    [2:0] dma_fifo_subsystem_2_dma_csr_agent_m0_burstcount;                                                      // dma_fifo_subsystem_2_dma_csr_agent:m0_burstcount -> dma_fifo_subsystem_2_dma_csr_translator:uav_burstcount
	wire          dma_fifo_subsystem_2_dma_csr_agent_rf_source_valid;                                                    // dma_fifo_subsystem_2_dma_csr_agent:rf_source_valid -> dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:in_valid
	wire  [125:0] dma_fifo_subsystem_2_dma_csr_agent_rf_source_data;                                                     // dma_fifo_subsystem_2_dma_csr_agent:rf_source_data -> dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:in_data
	wire          dma_fifo_subsystem_2_dma_csr_agent_rf_source_ready;                                                    // dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:in_ready -> dma_fifo_subsystem_2_dma_csr_agent:rf_source_ready
	wire          dma_fifo_subsystem_2_dma_csr_agent_rf_source_startofpacket;                                            // dma_fifo_subsystem_2_dma_csr_agent:rf_source_startofpacket -> dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_subsystem_2_dma_csr_agent_rf_source_endofpacket;                                              // dma_fifo_subsystem_2_dma_csr_agent:rf_source_endofpacket -> dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_valid;                                                 // dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:out_valid -> dma_fifo_subsystem_2_dma_csr_agent:rf_sink_valid
	wire  [125:0] dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_data;                                                  // dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:out_data -> dma_fifo_subsystem_2_dma_csr_agent:rf_sink_data
	wire          dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_ready;                                                 // dma_fifo_subsystem_2_dma_csr_agent:rf_sink_ready -> dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:out_ready
	wire          dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_startofpacket;                                         // dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:out_startofpacket -> dma_fifo_subsystem_2_dma_csr_agent:rf_sink_startofpacket
	wire          dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_endofpacket;                                           // dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo:out_endofpacket -> dma_fifo_subsystem_2_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                                 // cmd_mux_008:src_valid -> dma_fifo_subsystem_2_dma_csr_agent:cp_valid
	wire  [124:0] cmd_mux_008_src_data;                                                                                  // cmd_mux_008:src_data -> dma_fifo_subsystem_2_dma_csr_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                                 // dma_fifo_subsystem_2_dma_csr_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [26:0] cmd_mux_008_src_channel;                                                                               // cmd_mux_008:src_channel -> dma_fifo_subsystem_2_dma_csr_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                         // cmd_mux_008:src_startofpacket -> dma_fifo_subsystem_2_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                           // cmd_mux_008:src_endofpacket -> dma_fifo_subsystem_2_dma_csr_agent:cp_endofpacket
	wire   [31:0] dma_fifo_subsystem_3_dma_csr_agent_m0_readdata;                                                        // dma_fifo_subsystem_3_dma_csr_translator:uav_readdata -> dma_fifo_subsystem_3_dma_csr_agent:m0_readdata
	wire          dma_fifo_subsystem_3_dma_csr_agent_m0_waitrequest;                                                     // dma_fifo_subsystem_3_dma_csr_translator:uav_waitrequest -> dma_fifo_subsystem_3_dma_csr_agent:m0_waitrequest
	wire          dma_fifo_subsystem_3_dma_csr_agent_m0_debugaccess;                                                     // dma_fifo_subsystem_3_dma_csr_agent:m0_debugaccess -> dma_fifo_subsystem_3_dma_csr_translator:uav_debugaccess
	wire   [31:0] dma_fifo_subsystem_3_dma_csr_agent_m0_address;                                                         // dma_fifo_subsystem_3_dma_csr_agent:m0_address -> dma_fifo_subsystem_3_dma_csr_translator:uav_address
	wire    [3:0] dma_fifo_subsystem_3_dma_csr_agent_m0_byteenable;                                                      // dma_fifo_subsystem_3_dma_csr_agent:m0_byteenable -> dma_fifo_subsystem_3_dma_csr_translator:uav_byteenable
	wire          dma_fifo_subsystem_3_dma_csr_agent_m0_read;                                                            // dma_fifo_subsystem_3_dma_csr_agent:m0_read -> dma_fifo_subsystem_3_dma_csr_translator:uav_read
	wire          dma_fifo_subsystem_3_dma_csr_agent_m0_readdatavalid;                                                   // dma_fifo_subsystem_3_dma_csr_translator:uav_readdatavalid -> dma_fifo_subsystem_3_dma_csr_agent:m0_readdatavalid
	wire          dma_fifo_subsystem_3_dma_csr_agent_m0_lock;                                                            // dma_fifo_subsystem_3_dma_csr_agent:m0_lock -> dma_fifo_subsystem_3_dma_csr_translator:uav_lock
	wire   [31:0] dma_fifo_subsystem_3_dma_csr_agent_m0_writedata;                                                       // dma_fifo_subsystem_3_dma_csr_agent:m0_writedata -> dma_fifo_subsystem_3_dma_csr_translator:uav_writedata
	wire          dma_fifo_subsystem_3_dma_csr_agent_m0_write;                                                           // dma_fifo_subsystem_3_dma_csr_agent:m0_write -> dma_fifo_subsystem_3_dma_csr_translator:uav_write
	wire    [2:0] dma_fifo_subsystem_3_dma_csr_agent_m0_burstcount;                                                      // dma_fifo_subsystem_3_dma_csr_agent:m0_burstcount -> dma_fifo_subsystem_3_dma_csr_translator:uav_burstcount
	wire          dma_fifo_subsystem_3_dma_csr_agent_rf_source_valid;                                                    // dma_fifo_subsystem_3_dma_csr_agent:rf_source_valid -> dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:in_valid
	wire  [125:0] dma_fifo_subsystem_3_dma_csr_agent_rf_source_data;                                                     // dma_fifo_subsystem_3_dma_csr_agent:rf_source_data -> dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:in_data
	wire          dma_fifo_subsystem_3_dma_csr_agent_rf_source_ready;                                                    // dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:in_ready -> dma_fifo_subsystem_3_dma_csr_agent:rf_source_ready
	wire          dma_fifo_subsystem_3_dma_csr_agent_rf_source_startofpacket;                                            // dma_fifo_subsystem_3_dma_csr_agent:rf_source_startofpacket -> dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_subsystem_3_dma_csr_agent_rf_source_endofpacket;                                              // dma_fifo_subsystem_3_dma_csr_agent:rf_source_endofpacket -> dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_valid;                                                 // dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:out_valid -> dma_fifo_subsystem_3_dma_csr_agent:rf_sink_valid
	wire  [125:0] dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_data;                                                  // dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:out_data -> dma_fifo_subsystem_3_dma_csr_agent:rf_sink_data
	wire          dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_ready;                                                 // dma_fifo_subsystem_3_dma_csr_agent:rf_sink_ready -> dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:out_ready
	wire          dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_startofpacket;                                         // dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:out_startofpacket -> dma_fifo_subsystem_3_dma_csr_agent:rf_sink_startofpacket
	wire          dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_endofpacket;                                           // dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo:out_endofpacket -> dma_fifo_subsystem_3_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                                 // cmd_mux_009:src_valid -> dma_fifo_subsystem_3_dma_csr_agent:cp_valid
	wire  [124:0] cmd_mux_009_src_data;                                                                                  // cmd_mux_009:src_data -> dma_fifo_subsystem_3_dma_csr_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                                 // dma_fifo_subsystem_3_dma_csr_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [26:0] cmd_mux_009_src_channel;                                                                               // cmd_mux_009:src_channel -> dma_fifo_subsystem_3_dma_csr_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                         // cmd_mux_009:src_startofpacket -> dma_fifo_subsystem_3_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                           // cmd_mux_009:src_endofpacket -> dma_fifo_subsystem_3_dma_csr_agent:cp_endofpacket
	wire   [31:0] dma_fifo_subsystem_4_dma_csr_agent_m0_readdata;                                                        // dma_fifo_subsystem_4_dma_csr_translator:uav_readdata -> dma_fifo_subsystem_4_dma_csr_agent:m0_readdata
	wire          dma_fifo_subsystem_4_dma_csr_agent_m0_waitrequest;                                                     // dma_fifo_subsystem_4_dma_csr_translator:uav_waitrequest -> dma_fifo_subsystem_4_dma_csr_agent:m0_waitrequest
	wire          dma_fifo_subsystem_4_dma_csr_agent_m0_debugaccess;                                                     // dma_fifo_subsystem_4_dma_csr_agent:m0_debugaccess -> dma_fifo_subsystem_4_dma_csr_translator:uav_debugaccess
	wire   [31:0] dma_fifo_subsystem_4_dma_csr_agent_m0_address;                                                         // dma_fifo_subsystem_4_dma_csr_agent:m0_address -> dma_fifo_subsystem_4_dma_csr_translator:uav_address
	wire    [3:0] dma_fifo_subsystem_4_dma_csr_agent_m0_byteenable;                                                      // dma_fifo_subsystem_4_dma_csr_agent:m0_byteenable -> dma_fifo_subsystem_4_dma_csr_translator:uav_byteenable
	wire          dma_fifo_subsystem_4_dma_csr_agent_m0_read;                                                            // dma_fifo_subsystem_4_dma_csr_agent:m0_read -> dma_fifo_subsystem_4_dma_csr_translator:uav_read
	wire          dma_fifo_subsystem_4_dma_csr_agent_m0_readdatavalid;                                                   // dma_fifo_subsystem_4_dma_csr_translator:uav_readdatavalid -> dma_fifo_subsystem_4_dma_csr_agent:m0_readdatavalid
	wire          dma_fifo_subsystem_4_dma_csr_agent_m0_lock;                                                            // dma_fifo_subsystem_4_dma_csr_agent:m0_lock -> dma_fifo_subsystem_4_dma_csr_translator:uav_lock
	wire   [31:0] dma_fifo_subsystem_4_dma_csr_agent_m0_writedata;                                                       // dma_fifo_subsystem_4_dma_csr_agent:m0_writedata -> dma_fifo_subsystem_4_dma_csr_translator:uav_writedata
	wire          dma_fifo_subsystem_4_dma_csr_agent_m0_write;                                                           // dma_fifo_subsystem_4_dma_csr_agent:m0_write -> dma_fifo_subsystem_4_dma_csr_translator:uav_write
	wire    [2:0] dma_fifo_subsystem_4_dma_csr_agent_m0_burstcount;                                                      // dma_fifo_subsystem_4_dma_csr_agent:m0_burstcount -> dma_fifo_subsystem_4_dma_csr_translator:uav_burstcount
	wire          dma_fifo_subsystem_4_dma_csr_agent_rf_source_valid;                                                    // dma_fifo_subsystem_4_dma_csr_agent:rf_source_valid -> dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:in_valid
	wire  [125:0] dma_fifo_subsystem_4_dma_csr_agent_rf_source_data;                                                     // dma_fifo_subsystem_4_dma_csr_agent:rf_source_data -> dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:in_data
	wire          dma_fifo_subsystem_4_dma_csr_agent_rf_source_ready;                                                    // dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:in_ready -> dma_fifo_subsystem_4_dma_csr_agent:rf_source_ready
	wire          dma_fifo_subsystem_4_dma_csr_agent_rf_source_startofpacket;                                            // dma_fifo_subsystem_4_dma_csr_agent:rf_source_startofpacket -> dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_subsystem_4_dma_csr_agent_rf_source_endofpacket;                                              // dma_fifo_subsystem_4_dma_csr_agent:rf_source_endofpacket -> dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_valid;                                                 // dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:out_valid -> dma_fifo_subsystem_4_dma_csr_agent:rf_sink_valid
	wire  [125:0] dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_data;                                                  // dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:out_data -> dma_fifo_subsystem_4_dma_csr_agent:rf_sink_data
	wire          dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_ready;                                                 // dma_fifo_subsystem_4_dma_csr_agent:rf_sink_ready -> dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:out_ready
	wire          dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_startofpacket;                                         // dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:out_startofpacket -> dma_fifo_subsystem_4_dma_csr_agent:rf_sink_startofpacket
	wire          dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_endofpacket;                                           // dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo:out_endofpacket -> dma_fifo_subsystem_4_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                                 // cmd_mux_010:src_valid -> dma_fifo_subsystem_4_dma_csr_agent:cp_valid
	wire  [124:0] cmd_mux_010_src_data;                                                                                  // cmd_mux_010:src_data -> dma_fifo_subsystem_4_dma_csr_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                                 // dma_fifo_subsystem_4_dma_csr_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [26:0] cmd_mux_010_src_channel;                                                                               // cmd_mux_010:src_channel -> dma_fifo_subsystem_4_dma_csr_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                         // cmd_mux_010:src_startofpacket -> dma_fifo_subsystem_4_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                           // cmd_mux_010:src_endofpacket -> dma_fifo_subsystem_4_dma_csr_agent:cp_endofpacket
	wire  [127:0] dma_fifo_susbystem_dma_descriptor_slave_agent_m0_readdata;                                             // dma_fifo_susbystem_dma_descriptor_slave_translator:uav_readdata -> dma_fifo_susbystem_dma_descriptor_slave_agent:m0_readdata
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_m0_waitrequest;                                          // dma_fifo_susbystem_dma_descriptor_slave_translator:uav_waitrequest -> dma_fifo_susbystem_dma_descriptor_slave_agent:m0_waitrequest
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_m0_debugaccess;                                          // dma_fifo_susbystem_dma_descriptor_slave_agent:m0_debugaccess -> dma_fifo_susbystem_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_fifo_susbystem_dma_descriptor_slave_agent_m0_address;                                              // dma_fifo_susbystem_dma_descriptor_slave_agent:m0_address -> dma_fifo_susbystem_dma_descriptor_slave_translator:uav_address
	wire   [15:0] dma_fifo_susbystem_dma_descriptor_slave_agent_m0_byteenable;                                           // dma_fifo_susbystem_dma_descriptor_slave_agent:m0_byteenable -> dma_fifo_susbystem_dma_descriptor_slave_translator:uav_byteenable
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_m0_read;                                                 // dma_fifo_susbystem_dma_descriptor_slave_agent:m0_read -> dma_fifo_susbystem_dma_descriptor_slave_translator:uav_read
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_m0_readdatavalid;                                        // dma_fifo_susbystem_dma_descriptor_slave_translator:uav_readdatavalid -> dma_fifo_susbystem_dma_descriptor_slave_agent:m0_readdatavalid
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_m0_lock;                                                 // dma_fifo_susbystem_dma_descriptor_slave_agent:m0_lock -> dma_fifo_susbystem_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] dma_fifo_susbystem_dma_descriptor_slave_agent_m0_writedata;                                            // dma_fifo_susbystem_dma_descriptor_slave_agent:m0_writedata -> dma_fifo_susbystem_dma_descriptor_slave_translator:uav_writedata
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_m0_write;                                                // dma_fifo_susbystem_dma_descriptor_slave_agent:m0_write -> dma_fifo_susbystem_dma_descriptor_slave_translator:uav_write
	wire    [4:0] dma_fifo_susbystem_dma_descriptor_slave_agent_m0_burstcount;                                           // dma_fifo_susbystem_dma_descriptor_slave_agent:m0_burstcount -> dma_fifo_susbystem_dma_descriptor_slave_translator:uav_burstcount
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_valid;                                         // dma_fifo_susbystem_dma_descriptor_slave_agent:rf_source_valid -> dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [233:0] dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_data;                                          // dma_fifo_susbystem_dma_descriptor_slave_agent:rf_source_data -> dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_ready;                                         // dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:in_ready -> dma_fifo_susbystem_dma_descriptor_slave_agent:rf_source_ready
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_startofpacket;                                 // dma_fifo_susbystem_dma_descriptor_slave_agent:rf_source_startofpacket -> dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_endofpacket;                                   // dma_fifo_susbystem_dma_descriptor_slave_agent:rf_source_endofpacket -> dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_valid;                                      // dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:out_valid -> dma_fifo_susbystem_dma_descriptor_slave_agent:rf_sink_valid
	wire  [233:0] dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_data;                                       // dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:out_data -> dma_fifo_susbystem_dma_descriptor_slave_agent:rf_sink_data
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_ready;                                      // dma_fifo_susbystem_dma_descriptor_slave_agent:rf_sink_ready -> dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;                              // dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_fifo_susbystem_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                                // dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_fifo_susbystem_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                                 // cmd_mux_011:src_valid -> dma_fifo_susbystem_dma_descriptor_slave_agent:cp_valid
	wire  [232:0] cmd_mux_011_src_data;                                                                                  // cmd_mux_011:src_data -> dma_fifo_susbystem_dma_descriptor_slave_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                                 // dma_fifo_susbystem_dma_descriptor_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [26:0] cmd_mux_011_src_channel;                                                                               // cmd_mux_011:src_channel -> dma_fifo_susbystem_dma_descriptor_slave_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                                         // cmd_mux_011:src_startofpacket -> dma_fifo_susbystem_dma_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                           // cmd_mux_011:src_endofpacket -> dma_fifo_susbystem_dma_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_readdata;                                           // dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_readdata -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_readdata
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_waitrequest;                                        // dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_waitrequest -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_waitrequest
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_debugaccess;                                        // dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_debugaccess -> dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_address;                                            // dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_address -> dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_address
	wire   [15:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_byteenable;                                         // dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_byteenable -> dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_byteenable
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_read;                                               // dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_read -> dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_read
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_readdatavalid;                                      // dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_readdatavalid -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_readdatavalid
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_lock;                                               // dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_lock -> dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_writedata;                                          // dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_writedata -> dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_writedata
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_write;                                              // dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_write -> dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_write
	wire    [4:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_burstcount;                                         // dma_fifo_subsystem_1_dma_descriptor_slave_agent:m0_burstcount -> dma_fifo_subsystem_1_dma_descriptor_slave_translator:uav_burstcount
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_valid;                                       // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_source_valid -> dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [233:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_data;                                        // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_source_data -> dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_ready;                                       // dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:in_ready -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_source_ready
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_startofpacket;                               // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_source_startofpacket -> dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_endofpacket;                                 // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_source_endofpacket -> dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_valid;                                    // dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:out_valid -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_sink_valid
	wire  [233:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_data;                                     // dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:out_data -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_sink_data
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_ready;                                    // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_sink_ready -> dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;                            // dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                              // dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                                 // cmd_mux_012:src_valid -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:cp_valid
	wire  [232:0] cmd_mux_012_src_data;                                                                                  // cmd_mux_012:src_data -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                                 // dma_fifo_subsystem_1_dma_descriptor_slave_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [26:0] cmd_mux_012_src_channel;                                                                               // cmd_mux_012:src_channel -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                                         // cmd_mux_012:src_startofpacket -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                           // cmd_mux_012:src_endofpacket -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_readdata;                                           // dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_readdata -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_readdata
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_waitrequest;                                        // dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_waitrequest -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_waitrequest
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_debugaccess;                                        // dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_debugaccess -> dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_address;                                            // dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_address -> dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_address
	wire   [15:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_byteenable;                                         // dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_byteenable -> dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_byteenable
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_read;                                               // dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_read -> dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_read
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_readdatavalid;                                      // dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_readdatavalid -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_readdatavalid
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_lock;                                               // dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_lock -> dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_writedata;                                          // dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_writedata -> dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_writedata
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_write;                                              // dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_write -> dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_write
	wire    [4:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_burstcount;                                         // dma_fifo_subsystem_2_dma_descriptor_slave_agent:m0_burstcount -> dma_fifo_subsystem_2_dma_descriptor_slave_translator:uav_burstcount
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_valid;                                       // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_source_valid -> dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [233:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_data;                                        // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_source_data -> dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_ready;                                       // dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:in_ready -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_source_ready
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_startofpacket;                               // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_source_startofpacket -> dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_endofpacket;                                 // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_source_endofpacket -> dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_valid;                                    // dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:out_valid -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_sink_valid
	wire  [233:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_data;                                     // dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:out_data -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_sink_data
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_ready;                                    // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_sink_ready -> dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;                            // dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                              // dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                                 // cmd_mux_013:src_valid -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:cp_valid
	wire  [232:0] cmd_mux_013_src_data;                                                                                  // cmd_mux_013:src_data -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                                 // dma_fifo_subsystem_2_dma_descriptor_slave_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [26:0] cmd_mux_013_src_channel;                                                                               // cmd_mux_013:src_channel -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                                         // cmd_mux_013:src_startofpacket -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                           // cmd_mux_013:src_endofpacket -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_readdata;                                           // dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_readdata -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_readdata
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_waitrequest;                                        // dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_waitrequest -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_waitrequest
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_debugaccess;                                        // dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_debugaccess -> dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_address;                                            // dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_address -> dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_address
	wire   [15:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_byteenable;                                         // dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_byteenable -> dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_byteenable
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_read;                                               // dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_read -> dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_read
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_readdatavalid;                                      // dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_readdatavalid -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_readdatavalid
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_lock;                                               // dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_lock -> dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_writedata;                                          // dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_writedata -> dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_writedata
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_write;                                              // dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_write -> dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_write
	wire    [4:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_burstcount;                                         // dma_fifo_subsystem_3_dma_descriptor_slave_agent:m0_burstcount -> dma_fifo_subsystem_3_dma_descriptor_slave_translator:uav_burstcount
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_valid;                                       // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_source_valid -> dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [233:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_data;                                        // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_source_data -> dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_ready;                                       // dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:in_ready -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_source_ready
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_startofpacket;                               // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_source_startofpacket -> dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_endofpacket;                                 // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_source_endofpacket -> dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_valid;                                    // dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:out_valid -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_sink_valid
	wire  [233:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_data;                                     // dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:out_data -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_sink_data
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_ready;                                    // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_sink_ready -> dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;                            // dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                              // dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                                 // cmd_mux_014:src_valid -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:cp_valid
	wire  [232:0] cmd_mux_014_src_data;                                                                                  // cmd_mux_014:src_data -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                                 // dma_fifo_subsystem_3_dma_descriptor_slave_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [26:0] cmd_mux_014_src_channel;                                                                               // cmd_mux_014:src_channel -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                                         // cmd_mux_014:src_startofpacket -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                           // cmd_mux_014:src_endofpacket -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_readdata;                                           // dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_readdata -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_readdata
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_waitrequest;                                        // dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_waitrequest -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_waitrequest
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_debugaccess;                                        // dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_debugaccess -> dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_address;                                            // dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_address -> dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_address
	wire   [15:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_byteenable;                                         // dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_byteenable -> dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_byteenable
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_read;                                               // dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_read -> dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_read
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_readdatavalid;                                      // dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_readdatavalid -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_readdatavalid
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_lock;                                               // dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_lock -> dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_writedata;                                          // dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_writedata -> dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_writedata
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_write;                                              // dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_write -> dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_write
	wire    [4:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_burstcount;                                         // dma_fifo_subsystem_4_dma_descriptor_slave_agent:m0_burstcount -> dma_fifo_subsystem_4_dma_descriptor_slave_translator:uav_burstcount
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_valid;                                       // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_source_valid -> dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [233:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_data;                                        // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_source_data -> dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_ready;                                       // dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:in_ready -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_source_ready
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_startofpacket;                               // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_source_startofpacket -> dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_endofpacket;                                 // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_source_endofpacket -> dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_valid;                                    // dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:out_valid -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_sink_valid
	wire  [233:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_data;                                     // dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:out_data -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_sink_data
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_ready;                                    // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_sink_ready -> dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;                            // dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                              // dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                                 // cmd_mux_015:src_valid -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:cp_valid
	wire  [232:0] cmd_mux_015_src_data;                                                                                  // cmd_mux_015:src_data -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                                 // dma_fifo_subsystem_4_dma_descriptor_slave_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [26:0] cmd_mux_015_src_channel;                                                                               // cmd_mux_015:src_channel -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                                         // cmd_mux_015:src_startofpacket -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                           // cmd_mux_015:src_endofpacket -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:cp_endofpacket
	wire   [31:0] system_ram_s1_agent_m0_readdata;                                                                       // system_ram_s1_translator:uav_readdata -> system_ram_s1_agent:m0_readdata
	wire          system_ram_s1_agent_m0_waitrequest;                                                                    // system_ram_s1_translator:uav_waitrequest -> system_ram_s1_agent:m0_waitrequest
	wire          system_ram_s1_agent_m0_debugaccess;                                                                    // system_ram_s1_agent:m0_debugaccess -> system_ram_s1_translator:uav_debugaccess
	wire   [31:0] system_ram_s1_agent_m0_address;                                                                        // system_ram_s1_agent:m0_address -> system_ram_s1_translator:uav_address
	wire    [3:0] system_ram_s1_agent_m0_byteenable;                                                                     // system_ram_s1_agent:m0_byteenable -> system_ram_s1_translator:uav_byteenable
	wire          system_ram_s1_agent_m0_read;                                                                           // system_ram_s1_agent:m0_read -> system_ram_s1_translator:uav_read
	wire          system_ram_s1_agent_m0_readdatavalid;                                                                  // system_ram_s1_translator:uav_readdatavalid -> system_ram_s1_agent:m0_readdatavalid
	wire          system_ram_s1_agent_m0_lock;                                                                           // system_ram_s1_agent:m0_lock -> system_ram_s1_translator:uav_lock
	wire   [31:0] system_ram_s1_agent_m0_writedata;                                                                      // system_ram_s1_agent:m0_writedata -> system_ram_s1_translator:uav_writedata
	wire          system_ram_s1_agent_m0_write;                                                                          // system_ram_s1_agent:m0_write -> system_ram_s1_translator:uav_write
	wire    [2:0] system_ram_s1_agent_m0_burstcount;                                                                     // system_ram_s1_agent:m0_burstcount -> system_ram_s1_translator:uav_burstcount
	wire          system_ram_s1_agent_rf_source_valid;                                                                   // system_ram_s1_agent:rf_source_valid -> system_ram_s1_agent_rsp_fifo:in_valid
	wire  [125:0] system_ram_s1_agent_rf_source_data;                                                                    // system_ram_s1_agent:rf_source_data -> system_ram_s1_agent_rsp_fifo:in_data
	wire          system_ram_s1_agent_rf_source_ready;                                                                   // system_ram_s1_agent_rsp_fifo:in_ready -> system_ram_s1_agent:rf_source_ready
	wire          system_ram_s1_agent_rf_source_startofpacket;                                                           // system_ram_s1_agent:rf_source_startofpacket -> system_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          system_ram_s1_agent_rf_source_endofpacket;                                                             // system_ram_s1_agent:rf_source_endofpacket -> system_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          system_ram_s1_agent_rsp_fifo_out_valid;                                                                // system_ram_s1_agent_rsp_fifo:out_valid -> system_ram_s1_agent:rf_sink_valid
	wire  [125:0] system_ram_s1_agent_rsp_fifo_out_data;                                                                 // system_ram_s1_agent_rsp_fifo:out_data -> system_ram_s1_agent:rf_sink_data
	wire          system_ram_s1_agent_rsp_fifo_out_ready;                                                                // system_ram_s1_agent:rf_sink_ready -> system_ram_s1_agent_rsp_fifo:out_ready
	wire          system_ram_s1_agent_rsp_fifo_out_startofpacket;                                                        // system_ram_s1_agent_rsp_fifo:out_startofpacket -> system_ram_s1_agent:rf_sink_startofpacket
	wire          system_ram_s1_agent_rsp_fifo_out_endofpacket;                                                          // system_ram_s1_agent_rsp_fifo:out_endofpacket -> system_ram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                                 // cmd_mux_016:src_valid -> system_ram_s1_agent:cp_valid
	wire  [124:0] cmd_mux_016_src_data;                                                                                  // cmd_mux_016:src_data -> system_ram_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                                 // system_ram_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [26:0] cmd_mux_016_src_channel;                                                                               // cmd_mux_016:src_channel -> system_ram_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                                         // cmd_mux_016:src_startofpacket -> system_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                           // cmd_mux_016:src_endofpacket -> system_ram_s1_agent:cp_endofpacket
	wire   [31:0] ctrl_sig_s1_agent_m0_readdata;                                                                         // ctrl_sig_s1_translator:uav_readdata -> ctrl_sig_s1_agent:m0_readdata
	wire          ctrl_sig_s1_agent_m0_waitrequest;                                                                      // ctrl_sig_s1_translator:uav_waitrequest -> ctrl_sig_s1_agent:m0_waitrequest
	wire          ctrl_sig_s1_agent_m0_debugaccess;                                                                      // ctrl_sig_s1_agent:m0_debugaccess -> ctrl_sig_s1_translator:uav_debugaccess
	wire   [31:0] ctrl_sig_s1_agent_m0_address;                                                                          // ctrl_sig_s1_agent:m0_address -> ctrl_sig_s1_translator:uav_address
	wire    [3:0] ctrl_sig_s1_agent_m0_byteenable;                                                                       // ctrl_sig_s1_agent:m0_byteenable -> ctrl_sig_s1_translator:uav_byteenable
	wire          ctrl_sig_s1_agent_m0_read;                                                                             // ctrl_sig_s1_agent:m0_read -> ctrl_sig_s1_translator:uav_read
	wire          ctrl_sig_s1_agent_m0_readdatavalid;                                                                    // ctrl_sig_s1_translator:uav_readdatavalid -> ctrl_sig_s1_agent:m0_readdatavalid
	wire          ctrl_sig_s1_agent_m0_lock;                                                                             // ctrl_sig_s1_agent:m0_lock -> ctrl_sig_s1_translator:uav_lock
	wire   [31:0] ctrl_sig_s1_agent_m0_writedata;                                                                        // ctrl_sig_s1_agent:m0_writedata -> ctrl_sig_s1_translator:uav_writedata
	wire          ctrl_sig_s1_agent_m0_write;                                                                            // ctrl_sig_s1_agent:m0_write -> ctrl_sig_s1_translator:uav_write
	wire    [2:0] ctrl_sig_s1_agent_m0_burstcount;                                                                       // ctrl_sig_s1_agent:m0_burstcount -> ctrl_sig_s1_translator:uav_burstcount
	wire          ctrl_sig_s1_agent_rf_source_valid;                                                                     // ctrl_sig_s1_agent:rf_source_valid -> ctrl_sig_s1_agent_rsp_fifo:in_valid
	wire  [125:0] ctrl_sig_s1_agent_rf_source_data;                                                                      // ctrl_sig_s1_agent:rf_source_data -> ctrl_sig_s1_agent_rsp_fifo:in_data
	wire          ctrl_sig_s1_agent_rf_source_ready;                                                                     // ctrl_sig_s1_agent_rsp_fifo:in_ready -> ctrl_sig_s1_agent:rf_source_ready
	wire          ctrl_sig_s1_agent_rf_source_startofpacket;                                                             // ctrl_sig_s1_agent:rf_source_startofpacket -> ctrl_sig_s1_agent_rsp_fifo:in_startofpacket
	wire          ctrl_sig_s1_agent_rf_source_endofpacket;                                                               // ctrl_sig_s1_agent:rf_source_endofpacket -> ctrl_sig_s1_agent_rsp_fifo:in_endofpacket
	wire          ctrl_sig_s1_agent_rsp_fifo_out_valid;                                                                  // ctrl_sig_s1_agent_rsp_fifo:out_valid -> ctrl_sig_s1_agent:rf_sink_valid
	wire  [125:0] ctrl_sig_s1_agent_rsp_fifo_out_data;                                                                   // ctrl_sig_s1_agent_rsp_fifo:out_data -> ctrl_sig_s1_agent:rf_sink_data
	wire          ctrl_sig_s1_agent_rsp_fifo_out_ready;                                                                  // ctrl_sig_s1_agent:rf_sink_ready -> ctrl_sig_s1_agent_rsp_fifo:out_ready
	wire          ctrl_sig_s1_agent_rsp_fifo_out_startofpacket;                                                          // ctrl_sig_s1_agent_rsp_fifo:out_startofpacket -> ctrl_sig_s1_agent:rf_sink_startofpacket
	wire          ctrl_sig_s1_agent_rsp_fifo_out_endofpacket;                                                            // ctrl_sig_s1_agent_rsp_fifo:out_endofpacket -> ctrl_sig_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                                                 // cmd_mux_017:src_valid -> ctrl_sig_s1_agent:cp_valid
	wire  [124:0] cmd_mux_017_src_data;                                                                                  // cmd_mux_017:src_data -> ctrl_sig_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                                 // ctrl_sig_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [26:0] cmd_mux_017_src_channel;                                                                               // cmd_mux_017:src_channel -> ctrl_sig_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                                         // cmd_mux_017:src_startofpacket -> ctrl_sig_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                           // cmd_mux_017:src_endofpacket -> ctrl_sig_s1_agent:cp_endofpacket
	wire   [31:0] sys_timer_s1_agent_m0_readdata;                                                                        // sys_timer_s1_translator:uav_readdata -> sys_timer_s1_agent:m0_readdata
	wire          sys_timer_s1_agent_m0_waitrequest;                                                                     // sys_timer_s1_translator:uav_waitrequest -> sys_timer_s1_agent:m0_waitrequest
	wire          sys_timer_s1_agent_m0_debugaccess;                                                                     // sys_timer_s1_agent:m0_debugaccess -> sys_timer_s1_translator:uav_debugaccess
	wire   [31:0] sys_timer_s1_agent_m0_address;                                                                         // sys_timer_s1_agent:m0_address -> sys_timer_s1_translator:uav_address
	wire    [3:0] sys_timer_s1_agent_m0_byteenable;                                                                      // sys_timer_s1_agent:m0_byteenable -> sys_timer_s1_translator:uav_byteenable
	wire          sys_timer_s1_agent_m0_read;                                                                            // sys_timer_s1_agent:m0_read -> sys_timer_s1_translator:uav_read
	wire          sys_timer_s1_agent_m0_readdatavalid;                                                                   // sys_timer_s1_translator:uav_readdatavalid -> sys_timer_s1_agent:m0_readdatavalid
	wire          sys_timer_s1_agent_m0_lock;                                                                            // sys_timer_s1_agent:m0_lock -> sys_timer_s1_translator:uav_lock
	wire   [31:0] sys_timer_s1_agent_m0_writedata;                                                                       // sys_timer_s1_agent:m0_writedata -> sys_timer_s1_translator:uav_writedata
	wire          sys_timer_s1_agent_m0_write;                                                                           // sys_timer_s1_agent:m0_write -> sys_timer_s1_translator:uav_write
	wire    [2:0] sys_timer_s1_agent_m0_burstcount;                                                                      // sys_timer_s1_agent:m0_burstcount -> sys_timer_s1_translator:uav_burstcount
	wire          sys_timer_s1_agent_rf_source_valid;                                                                    // sys_timer_s1_agent:rf_source_valid -> sys_timer_s1_agent_rsp_fifo:in_valid
	wire  [125:0] sys_timer_s1_agent_rf_source_data;                                                                     // sys_timer_s1_agent:rf_source_data -> sys_timer_s1_agent_rsp_fifo:in_data
	wire          sys_timer_s1_agent_rf_source_ready;                                                                    // sys_timer_s1_agent_rsp_fifo:in_ready -> sys_timer_s1_agent:rf_source_ready
	wire          sys_timer_s1_agent_rf_source_startofpacket;                                                            // sys_timer_s1_agent:rf_source_startofpacket -> sys_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_timer_s1_agent_rf_source_endofpacket;                                                              // sys_timer_s1_agent:rf_source_endofpacket -> sys_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_timer_s1_agent_rsp_fifo_out_valid;                                                                 // sys_timer_s1_agent_rsp_fifo:out_valid -> sys_timer_s1_agent:rf_sink_valid
	wire  [125:0] sys_timer_s1_agent_rsp_fifo_out_data;                                                                  // sys_timer_s1_agent_rsp_fifo:out_data -> sys_timer_s1_agent:rf_sink_data
	wire          sys_timer_s1_agent_rsp_fifo_out_ready;                                                                 // sys_timer_s1_agent:rf_sink_ready -> sys_timer_s1_agent_rsp_fifo:out_ready
	wire          sys_timer_s1_agent_rsp_fifo_out_startofpacket;                                                         // sys_timer_s1_agent_rsp_fifo:out_startofpacket -> sys_timer_s1_agent:rf_sink_startofpacket
	wire          sys_timer_s1_agent_rsp_fifo_out_endofpacket;                                                           // sys_timer_s1_agent_rsp_fifo:out_endofpacket -> sys_timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                                                 // cmd_mux_018:src_valid -> sys_timer_s1_agent:cp_valid
	wire  [124:0] cmd_mux_018_src_data;                                                                                  // cmd_mux_018:src_data -> sys_timer_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                                 // sys_timer_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [26:0] cmd_mux_018_src_channel;                                                                               // cmd_mux_018:src_channel -> sys_timer_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                                         // cmd_mux_018:src_startofpacket -> sys_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                                           // cmd_mux_018:src_endofpacket -> sys_timer_s1_agent:cp_endofpacket
	wire   [31:0] pilot_sig_s1_agent_m0_readdata;                                                                        // pilot_sig_s1_translator:uav_readdata -> pilot_sig_s1_agent:m0_readdata
	wire          pilot_sig_s1_agent_m0_waitrequest;                                                                     // pilot_sig_s1_translator:uav_waitrequest -> pilot_sig_s1_agent:m0_waitrequest
	wire          pilot_sig_s1_agent_m0_debugaccess;                                                                     // pilot_sig_s1_agent:m0_debugaccess -> pilot_sig_s1_translator:uav_debugaccess
	wire   [31:0] pilot_sig_s1_agent_m0_address;                                                                         // pilot_sig_s1_agent:m0_address -> pilot_sig_s1_translator:uav_address
	wire    [3:0] pilot_sig_s1_agent_m0_byteenable;                                                                      // pilot_sig_s1_agent:m0_byteenable -> pilot_sig_s1_translator:uav_byteenable
	wire          pilot_sig_s1_agent_m0_read;                                                                            // pilot_sig_s1_agent:m0_read -> pilot_sig_s1_translator:uav_read
	wire          pilot_sig_s1_agent_m0_readdatavalid;                                                                   // pilot_sig_s1_translator:uav_readdatavalid -> pilot_sig_s1_agent:m0_readdatavalid
	wire          pilot_sig_s1_agent_m0_lock;                                                                            // pilot_sig_s1_agent:m0_lock -> pilot_sig_s1_translator:uav_lock
	wire   [31:0] pilot_sig_s1_agent_m0_writedata;                                                                       // pilot_sig_s1_agent:m0_writedata -> pilot_sig_s1_translator:uav_writedata
	wire          pilot_sig_s1_agent_m0_write;                                                                           // pilot_sig_s1_agent:m0_write -> pilot_sig_s1_translator:uav_write
	wire    [2:0] pilot_sig_s1_agent_m0_burstcount;                                                                      // pilot_sig_s1_agent:m0_burstcount -> pilot_sig_s1_translator:uav_burstcount
	wire          pilot_sig_s1_agent_rf_source_valid;                                                                    // pilot_sig_s1_agent:rf_source_valid -> pilot_sig_s1_agent_rsp_fifo:in_valid
	wire  [125:0] pilot_sig_s1_agent_rf_source_data;                                                                     // pilot_sig_s1_agent:rf_source_data -> pilot_sig_s1_agent_rsp_fifo:in_data
	wire          pilot_sig_s1_agent_rf_source_ready;                                                                    // pilot_sig_s1_agent_rsp_fifo:in_ready -> pilot_sig_s1_agent:rf_source_ready
	wire          pilot_sig_s1_agent_rf_source_startofpacket;                                                            // pilot_sig_s1_agent:rf_source_startofpacket -> pilot_sig_s1_agent_rsp_fifo:in_startofpacket
	wire          pilot_sig_s1_agent_rf_source_endofpacket;                                                              // pilot_sig_s1_agent:rf_source_endofpacket -> pilot_sig_s1_agent_rsp_fifo:in_endofpacket
	wire          pilot_sig_s1_agent_rsp_fifo_out_valid;                                                                 // pilot_sig_s1_agent_rsp_fifo:out_valid -> pilot_sig_s1_agent:rf_sink_valid
	wire  [125:0] pilot_sig_s1_agent_rsp_fifo_out_data;                                                                  // pilot_sig_s1_agent_rsp_fifo:out_data -> pilot_sig_s1_agent:rf_sink_data
	wire          pilot_sig_s1_agent_rsp_fifo_out_ready;                                                                 // pilot_sig_s1_agent:rf_sink_ready -> pilot_sig_s1_agent_rsp_fifo:out_ready
	wire          pilot_sig_s1_agent_rsp_fifo_out_startofpacket;                                                         // pilot_sig_s1_agent_rsp_fifo:out_startofpacket -> pilot_sig_s1_agent:rf_sink_startofpacket
	wire          pilot_sig_s1_agent_rsp_fifo_out_endofpacket;                                                           // pilot_sig_s1_agent_rsp_fifo:out_endofpacket -> pilot_sig_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                                                 // cmd_mux_019:src_valid -> pilot_sig_s1_agent:cp_valid
	wire  [124:0] cmd_mux_019_src_data;                                                                                  // cmd_mux_019:src_data -> pilot_sig_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                                 // pilot_sig_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [26:0] cmd_mux_019_src_channel;                                                                               // cmd_mux_019:src_channel -> pilot_sig_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                                         // cmd_mux_019:src_startofpacket -> pilot_sig_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                                           // cmd_mux_019:src_endofpacket -> pilot_sig_s1_agent:cp_endofpacket
	wire   [31:0] input_io_s1_agent_m0_readdata;                                                                         // input_IO_s1_translator:uav_readdata -> input_IO_s1_agent:m0_readdata
	wire          input_io_s1_agent_m0_waitrequest;                                                                      // input_IO_s1_translator:uav_waitrequest -> input_IO_s1_agent:m0_waitrequest
	wire          input_io_s1_agent_m0_debugaccess;                                                                      // input_IO_s1_agent:m0_debugaccess -> input_IO_s1_translator:uav_debugaccess
	wire   [31:0] input_io_s1_agent_m0_address;                                                                          // input_IO_s1_agent:m0_address -> input_IO_s1_translator:uav_address
	wire    [3:0] input_io_s1_agent_m0_byteenable;                                                                       // input_IO_s1_agent:m0_byteenable -> input_IO_s1_translator:uav_byteenable
	wire          input_io_s1_agent_m0_read;                                                                             // input_IO_s1_agent:m0_read -> input_IO_s1_translator:uav_read
	wire          input_io_s1_agent_m0_readdatavalid;                                                                    // input_IO_s1_translator:uav_readdatavalid -> input_IO_s1_agent:m0_readdatavalid
	wire          input_io_s1_agent_m0_lock;                                                                             // input_IO_s1_agent:m0_lock -> input_IO_s1_translator:uav_lock
	wire   [31:0] input_io_s1_agent_m0_writedata;                                                                        // input_IO_s1_agent:m0_writedata -> input_IO_s1_translator:uav_writedata
	wire          input_io_s1_agent_m0_write;                                                                            // input_IO_s1_agent:m0_write -> input_IO_s1_translator:uav_write
	wire    [2:0] input_io_s1_agent_m0_burstcount;                                                                       // input_IO_s1_agent:m0_burstcount -> input_IO_s1_translator:uav_burstcount
	wire          input_io_s1_agent_rf_source_valid;                                                                     // input_IO_s1_agent:rf_source_valid -> input_IO_s1_agent_rsp_fifo:in_valid
	wire  [125:0] input_io_s1_agent_rf_source_data;                                                                      // input_IO_s1_agent:rf_source_data -> input_IO_s1_agent_rsp_fifo:in_data
	wire          input_io_s1_agent_rf_source_ready;                                                                     // input_IO_s1_agent_rsp_fifo:in_ready -> input_IO_s1_agent:rf_source_ready
	wire          input_io_s1_agent_rf_source_startofpacket;                                                             // input_IO_s1_agent:rf_source_startofpacket -> input_IO_s1_agent_rsp_fifo:in_startofpacket
	wire          input_io_s1_agent_rf_source_endofpacket;                                                               // input_IO_s1_agent:rf_source_endofpacket -> input_IO_s1_agent_rsp_fifo:in_endofpacket
	wire          input_io_s1_agent_rsp_fifo_out_valid;                                                                  // input_IO_s1_agent_rsp_fifo:out_valid -> input_IO_s1_agent:rf_sink_valid
	wire  [125:0] input_io_s1_agent_rsp_fifo_out_data;                                                                   // input_IO_s1_agent_rsp_fifo:out_data -> input_IO_s1_agent:rf_sink_data
	wire          input_io_s1_agent_rsp_fifo_out_ready;                                                                  // input_IO_s1_agent:rf_sink_ready -> input_IO_s1_agent_rsp_fifo:out_ready
	wire          input_io_s1_agent_rsp_fifo_out_startofpacket;                                                          // input_IO_s1_agent_rsp_fifo:out_startofpacket -> input_IO_s1_agent:rf_sink_startofpacket
	wire          input_io_s1_agent_rsp_fifo_out_endofpacket;                                                            // input_IO_s1_agent_rsp_fifo:out_endofpacket -> input_IO_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                                                 // cmd_mux_020:src_valid -> input_IO_s1_agent:cp_valid
	wire  [124:0] cmd_mux_020_src_data;                                                                                  // cmd_mux_020:src_data -> input_IO_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                                 // input_IO_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [26:0] cmd_mux_020_src_channel;                                                                               // cmd_mux_020:src_channel -> input_IO_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                                         // cmd_mux_020:src_startofpacket -> input_IO_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                                           // cmd_mux_020:src_endofpacket -> input_IO_s1_agent:cp_endofpacket
	wire   [31:0] input_io_0_s1_agent_m0_readdata;                                                                       // input_IO_0_s1_translator:uav_readdata -> input_IO_0_s1_agent:m0_readdata
	wire          input_io_0_s1_agent_m0_waitrequest;                                                                    // input_IO_0_s1_translator:uav_waitrequest -> input_IO_0_s1_agent:m0_waitrequest
	wire          input_io_0_s1_agent_m0_debugaccess;                                                                    // input_IO_0_s1_agent:m0_debugaccess -> input_IO_0_s1_translator:uav_debugaccess
	wire   [31:0] input_io_0_s1_agent_m0_address;                                                                        // input_IO_0_s1_agent:m0_address -> input_IO_0_s1_translator:uav_address
	wire    [3:0] input_io_0_s1_agent_m0_byteenable;                                                                     // input_IO_0_s1_agent:m0_byteenable -> input_IO_0_s1_translator:uav_byteenable
	wire          input_io_0_s1_agent_m0_read;                                                                           // input_IO_0_s1_agent:m0_read -> input_IO_0_s1_translator:uav_read
	wire          input_io_0_s1_agent_m0_readdatavalid;                                                                  // input_IO_0_s1_translator:uav_readdatavalid -> input_IO_0_s1_agent:m0_readdatavalid
	wire          input_io_0_s1_agent_m0_lock;                                                                           // input_IO_0_s1_agent:m0_lock -> input_IO_0_s1_translator:uav_lock
	wire   [31:0] input_io_0_s1_agent_m0_writedata;                                                                      // input_IO_0_s1_agent:m0_writedata -> input_IO_0_s1_translator:uav_writedata
	wire          input_io_0_s1_agent_m0_write;                                                                          // input_IO_0_s1_agent:m0_write -> input_IO_0_s1_translator:uav_write
	wire    [2:0] input_io_0_s1_agent_m0_burstcount;                                                                     // input_IO_0_s1_agent:m0_burstcount -> input_IO_0_s1_translator:uav_burstcount
	wire          input_io_0_s1_agent_rf_source_valid;                                                                   // input_IO_0_s1_agent:rf_source_valid -> input_IO_0_s1_agent_rsp_fifo:in_valid
	wire  [125:0] input_io_0_s1_agent_rf_source_data;                                                                    // input_IO_0_s1_agent:rf_source_data -> input_IO_0_s1_agent_rsp_fifo:in_data
	wire          input_io_0_s1_agent_rf_source_ready;                                                                   // input_IO_0_s1_agent_rsp_fifo:in_ready -> input_IO_0_s1_agent:rf_source_ready
	wire          input_io_0_s1_agent_rf_source_startofpacket;                                                           // input_IO_0_s1_agent:rf_source_startofpacket -> input_IO_0_s1_agent_rsp_fifo:in_startofpacket
	wire          input_io_0_s1_agent_rf_source_endofpacket;                                                             // input_IO_0_s1_agent:rf_source_endofpacket -> input_IO_0_s1_agent_rsp_fifo:in_endofpacket
	wire          input_io_0_s1_agent_rsp_fifo_out_valid;                                                                // input_IO_0_s1_agent_rsp_fifo:out_valid -> input_IO_0_s1_agent:rf_sink_valid
	wire  [125:0] input_io_0_s1_agent_rsp_fifo_out_data;                                                                 // input_IO_0_s1_agent_rsp_fifo:out_data -> input_IO_0_s1_agent:rf_sink_data
	wire          input_io_0_s1_agent_rsp_fifo_out_ready;                                                                // input_IO_0_s1_agent:rf_sink_ready -> input_IO_0_s1_agent_rsp_fifo:out_ready
	wire          input_io_0_s1_agent_rsp_fifo_out_startofpacket;                                                        // input_IO_0_s1_agent_rsp_fifo:out_startofpacket -> input_IO_0_s1_agent:rf_sink_startofpacket
	wire          input_io_0_s1_agent_rsp_fifo_out_endofpacket;                                                          // input_IO_0_s1_agent_rsp_fifo:out_endofpacket -> input_IO_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                                                 // cmd_mux_021:src_valid -> input_IO_0_s1_agent:cp_valid
	wire  [124:0] cmd_mux_021_src_data;                                                                                  // cmd_mux_021:src_data -> input_IO_0_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                                                 // input_IO_0_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [26:0] cmd_mux_021_src_channel;                                                                               // cmd_mux_021:src_channel -> input_IO_0_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                                         // cmd_mux_021:src_startofpacket -> input_IO_0_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                                           // cmd_mux_021:src_endofpacket -> input_IO_0_s1_agent:cp_endofpacket
	wire   [31:0] input_io_1_s1_agent_m0_readdata;                                                                       // input_IO_1_s1_translator:uav_readdata -> input_IO_1_s1_agent:m0_readdata
	wire          input_io_1_s1_agent_m0_waitrequest;                                                                    // input_IO_1_s1_translator:uav_waitrequest -> input_IO_1_s1_agent:m0_waitrequest
	wire          input_io_1_s1_agent_m0_debugaccess;                                                                    // input_IO_1_s1_agent:m0_debugaccess -> input_IO_1_s1_translator:uav_debugaccess
	wire   [31:0] input_io_1_s1_agent_m0_address;                                                                        // input_IO_1_s1_agent:m0_address -> input_IO_1_s1_translator:uav_address
	wire    [3:0] input_io_1_s1_agent_m0_byteenable;                                                                     // input_IO_1_s1_agent:m0_byteenable -> input_IO_1_s1_translator:uav_byteenable
	wire          input_io_1_s1_agent_m0_read;                                                                           // input_IO_1_s1_agent:m0_read -> input_IO_1_s1_translator:uav_read
	wire          input_io_1_s1_agent_m0_readdatavalid;                                                                  // input_IO_1_s1_translator:uav_readdatavalid -> input_IO_1_s1_agent:m0_readdatavalid
	wire          input_io_1_s1_agent_m0_lock;                                                                           // input_IO_1_s1_agent:m0_lock -> input_IO_1_s1_translator:uav_lock
	wire   [31:0] input_io_1_s1_agent_m0_writedata;                                                                      // input_IO_1_s1_agent:m0_writedata -> input_IO_1_s1_translator:uav_writedata
	wire          input_io_1_s1_agent_m0_write;                                                                          // input_IO_1_s1_agent:m0_write -> input_IO_1_s1_translator:uav_write
	wire    [2:0] input_io_1_s1_agent_m0_burstcount;                                                                     // input_IO_1_s1_agent:m0_burstcount -> input_IO_1_s1_translator:uav_burstcount
	wire          input_io_1_s1_agent_rf_source_valid;                                                                   // input_IO_1_s1_agent:rf_source_valid -> input_IO_1_s1_agent_rsp_fifo:in_valid
	wire  [125:0] input_io_1_s1_agent_rf_source_data;                                                                    // input_IO_1_s1_agent:rf_source_data -> input_IO_1_s1_agent_rsp_fifo:in_data
	wire          input_io_1_s1_agent_rf_source_ready;                                                                   // input_IO_1_s1_agent_rsp_fifo:in_ready -> input_IO_1_s1_agent:rf_source_ready
	wire          input_io_1_s1_agent_rf_source_startofpacket;                                                           // input_IO_1_s1_agent:rf_source_startofpacket -> input_IO_1_s1_agent_rsp_fifo:in_startofpacket
	wire          input_io_1_s1_agent_rf_source_endofpacket;                                                             // input_IO_1_s1_agent:rf_source_endofpacket -> input_IO_1_s1_agent_rsp_fifo:in_endofpacket
	wire          input_io_1_s1_agent_rsp_fifo_out_valid;                                                                // input_IO_1_s1_agent_rsp_fifo:out_valid -> input_IO_1_s1_agent:rf_sink_valid
	wire  [125:0] input_io_1_s1_agent_rsp_fifo_out_data;                                                                 // input_IO_1_s1_agent_rsp_fifo:out_data -> input_IO_1_s1_agent:rf_sink_data
	wire          input_io_1_s1_agent_rsp_fifo_out_ready;                                                                // input_IO_1_s1_agent:rf_sink_ready -> input_IO_1_s1_agent_rsp_fifo:out_ready
	wire          input_io_1_s1_agent_rsp_fifo_out_startofpacket;                                                        // input_IO_1_s1_agent_rsp_fifo:out_startofpacket -> input_IO_1_s1_agent:rf_sink_startofpacket
	wire          input_io_1_s1_agent_rsp_fifo_out_endofpacket;                                                          // input_IO_1_s1_agent_rsp_fifo:out_endofpacket -> input_IO_1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                                                 // cmd_mux_022:src_valid -> input_IO_1_s1_agent:cp_valid
	wire  [124:0] cmd_mux_022_src_data;                                                                                  // cmd_mux_022:src_data -> input_IO_1_s1_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                                                 // input_IO_1_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [26:0] cmd_mux_022_src_channel;                                                                               // cmd_mux_022:src_channel -> input_IO_1_s1_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                                         // cmd_mux_022:src_startofpacket -> input_IO_1_s1_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                                           // cmd_mux_022:src_endofpacket -> input_IO_1_s1_agent:cp_endofpacket
	wire   [31:0] input_io_2_s1_agent_m0_readdata;                                                                       // input_IO_2_s1_translator:uav_readdata -> input_IO_2_s1_agent:m0_readdata
	wire          input_io_2_s1_agent_m0_waitrequest;                                                                    // input_IO_2_s1_translator:uav_waitrequest -> input_IO_2_s1_agent:m0_waitrequest
	wire          input_io_2_s1_agent_m0_debugaccess;                                                                    // input_IO_2_s1_agent:m0_debugaccess -> input_IO_2_s1_translator:uav_debugaccess
	wire   [31:0] input_io_2_s1_agent_m0_address;                                                                        // input_IO_2_s1_agent:m0_address -> input_IO_2_s1_translator:uav_address
	wire    [3:0] input_io_2_s1_agent_m0_byteenable;                                                                     // input_IO_2_s1_agent:m0_byteenable -> input_IO_2_s1_translator:uav_byteenable
	wire          input_io_2_s1_agent_m0_read;                                                                           // input_IO_2_s1_agent:m0_read -> input_IO_2_s1_translator:uav_read
	wire          input_io_2_s1_agent_m0_readdatavalid;                                                                  // input_IO_2_s1_translator:uav_readdatavalid -> input_IO_2_s1_agent:m0_readdatavalid
	wire          input_io_2_s1_agent_m0_lock;                                                                           // input_IO_2_s1_agent:m0_lock -> input_IO_2_s1_translator:uav_lock
	wire   [31:0] input_io_2_s1_agent_m0_writedata;                                                                      // input_IO_2_s1_agent:m0_writedata -> input_IO_2_s1_translator:uav_writedata
	wire          input_io_2_s1_agent_m0_write;                                                                          // input_IO_2_s1_agent:m0_write -> input_IO_2_s1_translator:uav_write
	wire    [2:0] input_io_2_s1_agent_m0_burstcount;                                                                     // input_IO_2_s1_agent:m0_burstcount -> input_IO_2_s1_translator:uav_burstcount
	wire          input_io_2_s1_agent_rf_source_valid;                                                                   // input_IO_2_s1_agent:rf_source_valid -> input_IO_2_s1_agent_rsp_fifo:in_valid
	wire  [125:0] input_io_2_s1_agent_rf_source_data;                                                                    // input_IO_2_s1_agent:rf_source_data -> input_IO_2_s1_agent_rsp_fifo:in_data
	wire          input_io_2_s1_agent_rf_source_ready;                                                                   // input_IO_2_s1_agent_rsp_fifo:in_ready -> input_IO_2_s1_agent:rf_source_ready
	wire          input_io_2_s1_agent_rf_source_startofpacket;                                                           // input_IO_2_s1_agent:rf_source_startofpacket -> input_IO_2_s1_agent_rsp_fifo:in_startofpacket
	wire          input_io_2_s1_agent_rf_source_endofpacket;                                                             // input_IO_2_s1_agent:rf_source_endofpacket -> input_IO_2_s1_agent_rsp_fifo:in_endofpacket
	wire          input_io_2_s1_agent_rsp_fifo_out_valid;                                                                // input_IO_2_s1_agent_rsp_fifo:out_valid -> input_IO_2_s1_agent:rf_sink_valid
	wire  [125:0] input_io_2_s1_agent_rsp_fifo_out_data;                                                                 // input_IO_2_s1_agent_rsp_fifo:out_data -> input_IO_2_s1_agent:rf_sink_data
	wire          input_io_2_s1_agent_rsp_fifo_out_ready;                                                                // input_IO_2_s1_agent:rf_sink_ready -> input_IO_2_s1_agent_rsp_fifo:out_ready
	wire          input_io_2_s1_agent_rsp_fifo_out_startofpacket;                                                        // input_IO_2_s1_agent_rsp_fifo:out_startofpacket -> input_IO_2_s1_agent:rf_sink_startofpacket
	wire          input_io_2_s1_agent_rsp_fifo_out_endofpacket;                                                          // input_IO_2_s1_agent_rsp_fifo:out_endofpacket -> input_IO_2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                                                 // cmd_mux_023:src_valid -> input_IO_2_s1_agent:cp_valid
	wire  [124:0] cmd_mux_023_src_data;                                                                                  // cmd_mux_023:src_data -> input_IO_2_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                                                 // input_IO_2_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [26:0] cmd_mux_023_src_channel;                                                                               // cmd_mux_023:src_channel -> input_IO_2_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                                         // cmd_mux_023:src_startofpacket -> input_IO_2_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                                           // cmd_mux_023:src_endofpacket -> input_IO_2_s1_agent:cp_endofpacket
	wire   [31:0] input_io_3_s1_agent_m0_readdata;                                                                       // input_IO_3_s1_translator:uav_readdata -> input_IO_3_s1_agent:m0_readdata
	wire          input_io_3_s1_agent_m0_waitrequest;                                                                    // input_IO_3_s1_translator:uav_waitrequest -> input_IO_3_s1_agent:m0_waitrequest
	wire          input_io_3_s1_agent_m0_debugaccess;                                                                    // input_IO_3_s1_agent:m0_debugaccess -> input_IO_3_s1_translator:uav_debugaccess
	wire   [31:0] input_io_3_s1_agent_m0_address;                                                                        // input_IO_3_s1_agent:m0_address -> input_IO_3_s1_translator:uav_address
	wire    [3:0] input_io_3_s1_agent_m0_byteenable;                                                                     // input_IO_3_s1_agent:m0_byteenable -> input_IO_3_s1_translator:uav_byteenable
	wire          input_io_3_s1_agent_m0_read;                                                                           // input_IO_3_s1_agent:m0_read -> input_IO_3_s1_translator:uav_read
	wire          input_io_3_s1_agent_m0_readdatavalid;                                                                  // input_IO_3_s1_translator:uav_readdatavalid -> input_IO_3_s1_agent:m0_readdatavalid
	wire          input_io_3_s1_agent_m0_lock;                                                                           // input_IO_3_s1_agent:m0_lock -> input_IO_3_s1_translator:uav_lock
	wire   [31:0] input_io_3_s1_agent_m0_writedata;                                                                      // input_IO_3_s1_agent:m0_writedata -> input_IO_3_s1_translator:uav_writedata
	wire          input_io_3_s1_agent_m0_write;                                                                          // input_IO_3_s1_agent:m0_write -> input_IO_3_s1_translator:uav_write
	wire    [2:0] input_io_3_s1_agent_m0_burstcount;                                                                     // input_IO_3_s1_agent:m0_burstcount -> input_IO_3_s1_translator:uav_burstcount
	wire          input_io_3_s1_agent_rf_source_valid;                                                                   // input_IO_3_s1_agent:rf_source_valid -> input_IO_3_s1_agent_rsp_fifo:in_valid
	wire  [125:0] input_io_3_s1_agent_rf_source_data;                                                                    // input_IO_3_s1_agent:rf_source_data -> input_IO_3_s1_agent_rsp_fifo:in_data
	wire          input_io_3_s1_agent_rf_source_ready;                                                                   // input_IO_3_s1_agent_rsp_fifo:in_ready -> input_IO_3_s1_agent:rf_source_ready
	wire          input_io_3_s1_agent_rf_source_startofpacket;                                                           // input_IO_3_s1_agent:rf_source_startofpacket -> input_IO_3_s1_agent_rsp_fifo:in_startofpacket
	wire          input_io_3_s1_agent_rf_source_endofpacket;                                                             // input_IO_3_s1_agent:rf_source_endofpacket -> input_IO_3_s1_agent_rsp_fifo:in_endofpacket
	wire          input_io_3_s1_agent_rsp_fifo_out_valid;                                                                // input_IO_3_s1_agent_rsp_fifo:out_valid -> input_IO_3_s1_agent:rf_sink_valid
	wire  [125:0] input_io_3_s1_agent_rsp_fifo_out_data;                                                                 // input_IO_3_s1_agent_rsp_fifo:out_data -> input_IO_3_s1_agent:rf_sink_data
	wire          input_io_3_s1_agent_rsp_fifo_out_ready;                                                                // input_IO_3_s1_agent:rf_sink_ready -> input_IO_3_s1_agent_rsp_fifo:out_ready
	wire          input_io_3_s1_agent_rsp_fifo_out_startofpacket;                                                        // input_IO_3_s1_agent_rsp_fifo:out_startofpacket -> input_IO_3_s1_agent:rf_sink_startofpacket
	wire          input_io_3_s1_agent_rsp_fifo_out_endofpacket;                                                          // input_IO_3_s1_agent_rsp_fifo:out_endofpacket -> input_IO_3_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                                                 // cmd_mux_024:src_valid -> input_IO_3_s1_agent:cp_valid
	wire  [124:0] cmd_mux_024_src_data;                                                                                  // cmd_mux_024:src_data -> input_IO_3_s1_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                                                 // input_IO_3_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [26:0] cmd_mux_024_src_channel;                                                                               // cmd_mux_024:src_channel -> input_IO_3_s1_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                                         // cmd_mux_024:src_startofpacket -> input_IO_3_s1_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                                           // cmd_mux_024:src_endofpacket -> input_IO_3_s1_agent:cp_endofpacket
	wire   [31:0] input_io_4_s1_agent_m0_readdata;                                                                       // input_IO_4_s1_translator:uav_readdata -> input_IO_4_s1_agent:m0_readdata
	wire          input_io_4_s1_agent_m0_waitrequest;                                                                    // input_IO_4_s1_translator:uav_waitrequest -> input_IO_4_s1_agent:m0_waitrequest
	wire          input_io_4_s1_agent_m0_debugaccess;                                                                    // input_IO_4_s1_agent:m0_debugaccess -> input_IO_4_s1_translator:uav_debugaccess
	wire   [31:0] input_io_4_s1_agent_m0_address;                                                                        // input_IO_4_s1_agent:m0_address -> input_IO_4_s1_translator:uav_address
	wire    [3:0] input_io_4_s1_agent_m0_byteenable;                                                                     // input_IO_4_s1_agent:m0_byteenable -> input_IO_4_s1_translator:uav_byteenable
	wire          input_io_4_s1_agent_m0_read;                                                                           // input_IO_4_s1_agent:m0_read -> input_IO_4_s1_translator:uav_read
	wire          input_io_4_s1_agent_m0_readdatavalid;                                                                  // input_IO_4_s1_translator:uav_readdatavalid -> input_IO_4_s1_agent:m0_readdatavalid
	wire          input_io_4_s1_agent_m0_lock;                                                                           // input_IO_4_s1_agent:m0_lock -> input_IO_4_s1_translator:uav_lock
	wire   [31:0] input_io_4_s1_agent_m0_writedata;                                                                      // input_IO_4_s1_agent:m0_writedata -> input_IO_4_s1_translator:uav_writedata
	wire          input_io_4_s1_agent_m0_write;                                                                          // input_IO_4_s1_agent:m0_write -> input_IO_4_s1_translator:uav_write
	wire    [2:0] input_io_4_s1_agent_m0_burstcount;                                                                     // input_IO_4_s1_agent:m0_burstcount -> input_IO_4_s1_translator:uav_burstcount
	wire          input_io_4_s1_agent_rf_source_valid;                                                                   // input_IO_4_s1_agent:rf_source_valid -> input_IO_4_s1_agent_rsp_fifo:in_valid
	wire  [125:0] input_io_4_s1_agent_rf_source_data;                                                                    // input_IO_4_s1_agent:rf_source_data -> input_IO_4_s1_agent_rsp_fifo:in_data
	wire          input_io_4_s1_agent_rf_source_ready;                                                                   // input_IO_4_s1_agent_rsp_fifo:in_ready -> input_IO_4_s1_agent:rf_source_ready
	wire          input_io_4_s1_agent_rf_source_startofpacket;                                                           // input_IO_4_s1_agent:rf_source_startofpacket -> input_IO_4_s1_agent_rsp_fifo:in_startofpacket
	wire          input_io_4_s1_agent_rf_source_endofpacket;                                                             // input_IO_4_s1_agent:rf_source_endofpacket -> input_IO_4_s1_agent_rsp_fifo:in_endofpacket
	wire          input_io_4_s1_agent_rsp_fifo_out_valid;                                                                // input_IO_4_s1_agent_rsp_fifo:out_valid -> input_IO_4_s1_agent:rf_sink_valid
	wire  [125:0] input_io_4_s1_agent_rsp_fifo_out_data;                                                                 // input_IO_4_s1_agent_rsp_fifo:out_data -> input_IO_4_s1_agent:rf_sink_data
	wire          input_io_4_s1_agent_rsp_fifo_out_ready;                                                                // input_IO_4_s1_agent:rf_sink_ready -> input_IO_4_s1_agent_rsp_fifo:out_ready
	wire          input_io_4_s1_agent_rsp_fifo_out_startofpacket;                                                        // input_IO_4_s1_agent_rsp_fifo:out_startofpacket -> input_IO_4_s1_agent:rf_sink_startofpacket
	wire          input_io_4_s1_agent_rsp_fifo_out_endofpacket;                                                          // input_IO_4_s1_agent_rsp_fifo:out_endofpacket -> input_IO_4_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                                                 // cmd_mux_025:src_valid -> input_IO_4_s1_agent:cp_valid
	wire  [124:0] cmd_mux_025_src_data;                                                                                  // cmd_mux_025:src_data -> input_IO_4_s1_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                                                 // input_IO_4_s1_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [26:0] cmd_mux_025_src_channel;                                                                               // cmd_mux_025:src_channel -> input_IO_4_s1_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                                         // cmd_mux_025:src_startofpacket -> input_IO_4_s1_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                                           // cmd_mux_025:src_endofpacket -> input_IO_4_s1_agent:cp_endofpacket
	wire   [31:0] input_io_5_s1_agent_m0_readdata;                                                                       // input_IO_5_s1_translator:uav_readdata -> input_IO_5_s1_agent:m0_readdata
	wire          input_io_5_s1_agent_m0_waitrequest;                                                                    // input_IO_5_s1_translator:uav_waitrequest -> input_IO_5_s1_agent:m0_waitrequest
	wire          input_io_5_s1_agent_m0_debugaccess;                                                                    // input_IO_5_s1_agent:m0_debugaccess -> input_IO_5_s1_translator:uav_debugaccess
	wire   [31:0] input_io_5_s1_agent_m0_address;                                                                        // input_IO_5_s1_agent:m0_address -> input_IO_5_s1_translator:uav_address
	wire    [3:0] input_io_5_s1_agent_m0_byteenable;                                                                     // input_IO_5_s1_agent:m0_byteenable -> input_IO_5_s1_translator:uav_byteenable
	wire          input_io_5_s1_agent_m0_read;                                                                           // input_IO_5_s1_agent:m0_read -> input_IO_5_s1_translator:uav_read
	wire          input_io_5_s1_agent_m0_readdatavalid;                                                                  // input_IO_5_s1_translator:uav_readdatavalid -> input_IO_5_s1_agent:m0_readdatavalid
	wire          input_io_5_s1_agent_m0_lock;                                                                           // input_IO_5_s1_agent:m0_lock -> input_IO_5_s1_translator:uav_lock
	wire   [31:0] input_io_5_s1_agent_m0_writedata;                                                                      // input_IO_5_s1_agent:m0_writedata -> input_IO_5_s1_translator:uav_writedata
	wire          input_io_5_s1_agent_m0_write;                                                                          // input_IO_5_s1_agent:m0_write -> input_IO_5_s1_translator:uav_write
	wire    [2:0] input_io_5_s1_agent_m0_burstcount;                                                                     // input_IO_5_s1_agent:m0_burstcount -> input_IO_5_s1_translator:uav_burstcount
	wire          input_io_5_s1_agent_rf_source_valid;                                                                   // input_IO_5_s1_agent:rf_source_valid -> input_IO_5_s1_agent_rsp_fifo:in_valid
	wire  [125:0] input_io_5_s1_agent_rf_source_data;                                                                    // input_IO_5_s1_agent:rf_source_data -> input_IO_5_s1_agent_rsp_fifo:in_data
	wire          input_io_5_s1_agent_rf_source_ready;                                                                   // input_IO_5_s1_agent_rsp_fifo:in_ready -> input_IO_5_s1_agent:rf_source_ready
	wire          input_io_5_s1_agent_rf_source_startofpacket;                                                           // input_IO_5_s1_agent:rf_source_startofpacket -> input_IO_5_s1_agent_rsp_fifo:in_startofpacket
	wire          input_io_5_s1_agent_rf_source_endofpacket;                                                             // input_IO_5_s1_agent:rf_source_endofpacket -> input_IO_5_s1_agent_rsp_fifo:in_endofpacket
	wire          input_io_5_s1_agent_rsp_fifo_out_valid;                                                                // input_IO_5_s1_agent_rsp_fifo:out_valid -> input_IO_5_s1_agent:rf_sink_valid
	wire  [125:0] input_io_5_s1_agent_rsp_fifo_out_data;                                                                 // input_IO_5_s1_agent_rsp_fifo:out_data -> input_IO_5_s1_agent:rf_sink_data
	wire          input_io_5_s1_agent_rsp_fifo_out_ready;                                                                // input_IO_5_s1_agent:rf_sink_ready -> input_IO_5_s1_agent_rsp_fifo:out_ready
	wire          input_io_5_s1_agent_rsp_fifo_out_startofpacket;                                                        // input_IO_5_s1_agent_rsp_fifo:out_startofpacket -> input_IO_5_s1_agent:rf_sink_startofpacket
	wire          input_io_5_s1_agent_rsp_fifo_out_endofpacket;                                                          // input_IO_5_s1_agent_rsp_fifo:out_endofpacket -> input_IO_5_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_026_src_valid;                                                                                 // cmd_mux_026:src_valid -> input_IO_5_s1_agent:cp_valid
	wire  [124:0] cmd_mux_026_src_data;                                                                                  // cmd_mux_026:src_data -> input_IO_5_s1_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                                                 // input_IO_5_s1_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [26:0] cmd_mux_026_src_channel;                                                                               // cmd_mux_026:src_channel -> input_IO_5_s1_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                                         // cmd_mux_026:src_startofpacket -> input_IO_5_s1_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                                           // cmd_mux_026:src_endofpacket -> input_IO_5_s1_agent:cp_endofpacket
	wire          from_eth_to_ddr_eth_dma_mm_write_agent_cp_valid;                                                       // from_ETH_to_DDR_ETH_DMA_mm_write_agent:cp_valid -> router:sink_valid
	wire  [376:0] from_eth_to_ddr_eth_dma_mm_write_agent_cp_data;                                                        // from_ETH_to_DDR_ETH_DMA_mm_write_agent:cp_data -> router:sink_data
	wire          from_eth_to_ddr_eth_dma_mm_write_agent_cp_ready;                                                       // router:sink_ready -> from_ETH_to_DDR_ETH_DMA_mm_write_agent:cp_ready
	wire          from_eth_to_ddr_eth_dma_mm_write_agent_cp_startofpacket;                                               // from_ETH_to_DDR_ETH_DMA_mm_write_agent:cp_startofpacket -> router:sink_startofpacket
	wire          from_eth_to_ddr_eth_dma_mm_write_agent_cp_endofpacket;                                                 // from_ETH_to_DDR_ETH_DMA_mm_write_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [376:0] router_src_data;                                                                                       // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                                      // cmd_demux:sink_ready -> router:src_ready
	wire   [26:0] router_src_channel;                                                                                    // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios_cpu_data_master_agent_cp_valid;                                                                   // nios_cpu_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [124:0] nios_cpu_data_master_agent_cp_data;                                                                    // nios_cpu_data_master_agent:cp_data -> router_001:sink_data
	wire          nios_cpu_data_master_agent_cp_ready;                                                                   // router_001:sink_ready -> nios_cpu_data_master_agent:cp_ready
	wire          nios_cpu_data_master_agent_cp_startofpacket;                                                           // nios_cpu_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios_cpu_data_master_agent_cp_endofpacket;                                                             // nios_cpu_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          dma_fifo_susbystem_dma_mm_read_agent_cp_valid;                                                         // dma_fifo_susbystem_dma_mm_read_agent:cp_valid -> router_002:sink_valid
	wire  [376:0] dma_fifo_susbystem_dma_mm_read_agent_cp_data;                                                          // dma_fifo_susbystem_dma_mm_read_agent:cp_data -> router_002:sink_data
	wire          dma_fifo_susbystem_dma_mm_read_agent_cp_ready;                                                         // router_002:sink_ready -> dma_fifo_susbystem_dma_mm_read_agent:cp_ready
	wire          dma_fifo_susbystem_dma_mm_read_agent_cp_startofpacket;                                                 // dma_fifo_susbystem_dma_mm_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          dma_fifo_susbystem_dma_mm_read_agent_cp_endofpacket;                                                   // dma_fifo_susbystem_dma_mm_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                                  // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [376:0] router_002_src_data;                                                                                   // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                                  // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [26:0] router_002_src_channel;                                                                                // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                                          // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                            // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          dma_fifo_subsystem_1_dma_mm_read_agent_cp_valid;                                                       // dma_fifo_subsystem_1_dma_mm_read_agent:cp_valid -> router_003:sink_valid
	wire  [376:0] dma_fifo_subsystem_1_dma_mm_read_agent_cp_data;                                                        // dma_fifo_subsystem_1_dma_mm_read_agent:cp_data -> router_003:sink_data
	wire          dma_fifo_subsystem_1_dma_mm_read_agent_cp_ready;                                                       // router_003:sink_ready -> dma_fifo_subsystem_1_dma_mm_read_agent:cp_ready
	wire          dma_fifo_subsystem_1_dma_mm_read_agent_cp_startofpacket;                                               // dma_fifo_subsystem_1_dma_mm_read_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          dma_fifo_subsystem_1_dma_mm_read_agent_cp_endofpacket;                                                 // dma_fifo_subsystem_1_dma_mm_read_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                  // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [376:0] router_003_src_data;                                                                                   // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                                  // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [26:0] router_003_src_channel;                                                                                // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                                          // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                            // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          dma_fifo_subsystem_2_dma_mm_read_agent_cp_valid;                                                       // dma_fifo_subsystem_2_dma_mm_read_agent:cp_valid -> router_004:sink_valid
	wire  [376:0] dma_fifo_subsystem_2_dma_mm_read_agent_cp_data;                                                        // dma_fifo_subsystem_2_dma_mm_read_agent:cp_data -> router_004:sink_data
	wire          dma_fifo_subsystem_2_dma_mm_read_agent_cp_ready;                                                       // router_004:sink_ready -> dma_fifo_subsystem_2_dma_mm_read_agent:cp_ready
	wire          dma_fifo_subsystem_2_dma_mm_read_agent_cp_startofpacket;                                               // dma_fifo_subsystem_2_dma_mm_read_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          dma_fifo_subsystem_2_dma_mm_read_agent_cp_endofpacket;                                                 // dma_fifo_subsystem_2_dma_mm_read_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                  // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [376:0] router_004_src_data;                                                                                   // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                                  // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [26:0] router_004_src_channel;                                                                                // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                                          // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                            // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          nios_cpu_instruction_master_agent_cp_valid;                                                            // nios_cpu_instruction_master_agent:cp_valid -> router_005:sink_valid
	wire  [124:0] nios_cpu_instruction_master_agent_cp_data;                                                             // nios_cpu_instruction_master_agent:cp_data -> router_005:sink_data
	wire          nios_cpu_instruction_master_agent_cp_ready;                                                            // router_005:sink_ready -> nios_cpu_instruction_master_agent:cp_ready
	wire          nios_cpu_instruction_master_agent_cp_startofpacket;                                                    // nios_cpu_instruction_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          nios_cpu_instruction_master_agent_cp_endofpacket;                                                      // nios_cpu_instruction_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          dma_fifo_subsystem_4_dma_mm_read_agent_cp_valid;                                                       // dma_fifo_subsystem_4_dma_mm_read_agent:cp_valid -> router_006:sink_valid
	wire  [376:0] dma_fifo_subsystem_4_dma_mm_read_agent_cp_data;                                                        // dma_fifo_subsystem_4_dma_mm_read_agent:cp_data -> router_006:sink_data
	wire          dma_fifo_subsystem_4_dma_mm_read_agent_cp_ready;                                                       // router_006:sink_ready -> dma_fifo_subsystem_4_dma_mm_read_agent:cp_ready
	wire          dma_fifo_subsystem_4_dma_mm_read_agent_cp_startofpacket;                                               // dma_fifo_subsystem_4_dma_mm_read_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          dma_fifo_subsystem_4_dma_mm_read_agent_cp_endofpacket;                                                 // dma_fifo_subsystem_4_dma_mm_read_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                  // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [376:0] router_006_src_data;                                                                                   // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                                                  // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [26:0] router_006_src_channel;                                                                                // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                                          // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                            // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          dma_fifo_subsystem_3_dma_mm_read_agent_cp_valid;                                                       // dma_fifo_subsystem_3_dma_mm_read_agent:cp_valid -> router_007:sink_valid
	wire  [376:0] dma_fifo_subsystem_3_dma_mm_read_agent_cp_data;                                                        // dma_fifo_subsystem_3_dma_mm_read_agent:cp_data -> router_007:sink_data
	wire          dma_fifo_subsystem_3_dma_mm_read_agent_cp_ready;                                                       // router_007:sink_ready -> dma_fifo_subsystem_3_dma_mm_read_agent:cp_ready
	wire          dma_fifo_subsystem_3_dma_mm_read_agent_cp_startofpacket;                                               // dma_fifo_subsystem_3_dma_mm_read_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          dma_fifo_subsystem_3_dma_mm_read_agent_cp_endofpacket;                                                 // dma_fifo_subsystem_3_dma_mm_read_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                  // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [376:0] router_007_src_data;                                                                                   // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                                                  // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [26:0] router_007_src_channel;                                                                                // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                                          // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                            // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          ddr2_ram_avl_agent_rp_valid;                                                                           // ddr2_ram_avl_agent:rp_valid -> router_008:sink_valid
	wire  [376:0] ddr2_ram_avl_agent_rp_data;                                                                            // ddr2_ram_avl_agent:rp_data -> router_008:sink_data
	wire          ddr2_ram_avl_agent_rp_ready;                                                                           // router_008:sink_ready -> ddr2_ram_avl_agent:rp_ready
	wire          ddr2_ram_avl_agent_rp_startofpacket;                                                                   // ddr2_ram_avl_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          ddr2_ram_avl_agent_rp_endofpacket;                                                                     // ddr2_ram_avl_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                  // router_008:src_valid -> rsp_demux:sink_valid
	wire  [376:0] router_008_src_data;                                                                                   // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                                                  // rsp_demux:sink_ready -> router_008:src_ready
	wire   [26:0] router_008_src_channel;                                                                                // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                                          // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                            // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ddr2_ram_1_avl_agent_rp_valid;                                                                         // ddr2_ram_1_avl_agent:rp_valid -> router_009:sink_valid
	wire  [376:0] ddr2_ram_1_avl_agent_rp_data;                                                                          // ddr2_ram_1_avl_agent:rp_data -> router_009:sink_data
	wire          ddr2_ram_1_avl_agent_rp_ready;                                                                         // router_009:sink_ready -> ddr2_ram_1_avl_agent:rp_ready
	wire          ddr2_ram_1_avl_agent_rp_startofpacket;                                                                 // ddr2_ram_1_avl_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          ddr2_ram_1_avl_agent_rp_endofpacket;                                                                   // ddr2_ram_1_avl_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                  // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [376:0] router_009_src_data;                                                                                   // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                                                  // rsp_demux_001:sink_ready -> router_009:src_ready
	wire   [26:0] router_009_src_channel;                                                                                // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                                          // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                            // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          from_eth_to_ddr_eth_dma_csr_agent_rp_valid;                                                            // from_ETH_to_DDR_ETH_DMA_csr_agent:rp_valid -> router_010:sink_valid
	wire  [124:0] from_eth_to_ddr_eth_dma_csr_agent_rp_data;                                                             // from_ETH_to_DDR_ETH_DMA_csr_agent:rp_data -> router_010:sink_data
	wire          from_eth_to_ddr_eth_dma_csr_agent_rp_ready;                                                            // router_010:sink_ready -> from_ETH_to_DDR_ETH_DMA_csr_agent:rp_ready
	wire          from_eth_to_ddr_eth_dma_csr_agent_rp_startofpacket;                                                    // from_ETH_to_DDR_ETH_DMA_csr_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          from_eth_to_ddr_eth_dma_csr_agent_rp_endofpacket;                                                      // from_ETH_to_DDR_ETH_DMA_csr_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                  // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [124:0] router_010_src_data;                                                                                   // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                                                  // rsp_demux_002:sink_ready -> router_010:src_ready
	wire   [26:0] router_010_src_channel;                                                                                // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                                          // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                            // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_valid;                                               // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rp_valid -> router_011:sink_valid
	wire  [232:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_data;                                                // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rp_data -> router_011:sink_data
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_ready;                                               // router_011:sink_ready -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rp_ready
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_startofpacket;                                       // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_endofpacket;                                         // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                  // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [232:0] router_011_src_data;                                                                                   // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                                                  // rsp_demux_003:sink_ready -> router_011:src_ready
	wire   [26:0] router_011_src_channel;                                                                                // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                                          // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                            // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rp_valid;                                                                 // jtag_avalon_jtag_slave_agent:rp_valid -> router_012:sink_valid
	wire  [124:0] jtag_avalon_jtag_slave_agent_rp_data;                                                                  // jtag_avalon_jtag_slave_agent:rp_data -> router_012:sink_data
	wire          jtag_avalon_jtag_slave_agent_rp_ready;                                                                 // router_012:sink_ready -> jtag_avalon_jtag_slave_agent:rp_ready
	wire          jtag_avalon_jtag_slave_agent_rp_startofpacket;                                                         // jtag_avalon_jtag_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rp_endofpacket;                                                           // jtag_avalon_jtag_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                                  // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [124:0] router_012_src_data;                                                                                   // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                                                  // rsp_demux_004:sink_ready -> router_012:src_ready
	wire   [26:0] router_012_src_channel;                                                                                // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                                          // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                            // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          nios_cpu_debug_mem_slave_agent_rp_valid;                                                               // nios_cpu_debug_mem_slave_agent:rp_valid -> router_013:sink_valid
	wire  [124:0] nios_cpu_debug_mem_slave_agent_rp_data;                                                                // nios_cpu_debug_mem_slave_agent:rp_data -> router_013:sink_data
	wire          nios_cpu_debug_mem_slave_agent_rp_ready;                                                               // router_013:sink_ready -> nios_cpu_debug_mem_slave_agent:rp_ready
	wire          nios_cpu_debug_mem_slave_agent_rp_startofpacket;                                                       // nios_cpu_debug_mem_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          nios_cpu_debug_mem_slave_agent_rp_endofpacket;                                                         // nios_cpu_debug_mem_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                  // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [124:0] router_013_src_data;                                                                                   // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                                                  // rsp_demux_005:sink_ready -> router_013:src_ready
	wire   [26:0] router_013_src_channel;                                                                                // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                                          // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                            // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          dma_fifo_susbystem_dma_csr_agent_rp_valid;                                                             // dma_fifo_susbystem_dma_csr_agent:rp_valid -> router_014:sink_valid
	wire  [124:0] dma_fifo_susbystem_dma_csr_agent_rp_data;                                                              // dma_fifo_susbystem_dma_csr_agent:rp_data -> router_014:sink_data
	wire          dma_fifo_susbystem_dma_csr_agent_rp_ready;                                                             // router_014:sink_ready -> dma_fifo_susbystem_dma_csr_agent:rp_ready
	wire          dma_fifo_susbystem_dma_csr_agent_rp_startofpacket;                                                     // dma_fifo_susbystem_dma_csr_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          dma_fifo_susbystem_dma_csr_agent_rp_endofpacket;                                                       // dma_fifo_susbystem_dma_csr_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                  // router_014:src_valid -> rsp_demux_006:sink_valid
	wire  [124:0] router_014_src_data;                                                                                   // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                                                  // rsp_demux_006:sink_ready -> router_014:src_ready
	wire   [26:0] router_014_src_channel;                                                                                // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                                          // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                            // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          dma_fifo_subsystem_1_dma_csr_agent_rp_valid;                                                           // dma_fifo_subsystem_1_dma_csr_agent:rp_valid -> router_015:sink_valid
	wire  [124:0] dma_fifo_subsystem_1_dma_csr_agent_rp_data;                                                            // dma_fifo_subsystem_1_dma_csr_agent:rp_data -> router_015:sink_data
	wire          dma_fifo_subsystem_1_dma_csr_agent_rp_ready;                                                           // router_015:sink_ready -> dma_fifo_subsystem_1_dma_csr_agent:rp_ready
	wire          dma_fifo_subsystem_1_dma_csr_agent_rp_startofpacket;                                                   // dma_fifo_subsystem_1_dma_csr_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          dma_fifo_subsystem_1_dma_csr_agent_rp_endofpacket;                                                     // dma_fifo_subsystem_1_dma_csr_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                                  // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [124:0] router_015_src_data;                                                                                   // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                                                  // rsp_demux_007:sink_ready -> router_015:src_ready
	wire   [26:0] router_015_src_channel;                                                                                // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                                          // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                            // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          dma_fifo_subsystem_2_dma_csr_agent_rp_valid;                                                           // dma_fifo_subsystem_2_dma_csr_agent:rp_valid -> router_016:sink_valid
	wire  [124:0] dma_fifo_subsystem_2_dma_csr_agent_rp_data;                                                            // dma_fifo_subsystem_2_dma_csr_agent:rp_data -> router_016:sink_data
	wire          dma_fifo_subsystem_2_dma_csr_agent_rp_ready;                                                           // router_016:sink_ready -> dma_fifo_subsystem_2_dma_csr_agent:rp_ready
	wire          dma_fifo_subsystem_2_dma_csr_agent_rp_startofpacket;                                                   // dma_fifo_subsystem_2_dma_csr_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          dma_fifo_subsystem_2_dma_csr_agent_rp_endofpacket;                                                     // dma_fifo_subsystem_2_dma_csr_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                                  // router_016:src_valid -> rsp_demux_008:sink_valid
	wire  [124:0] router_016_src_data;                                                                                   // router_016:src_data -> rsp_demux_008:sink_data
	wire          router_016_src_ready;                                                                                  // rsp_demux_008:sink_ready -> router_016:src_ready
	wire   [26:0] router_016_src_channel;                                                                                // router_016:src_channel -> rsp_demux_008:sink_channel
	wire          router_016_src_startofpacket;                                                                          // router_016:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                            // router_016:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          dma_fifo_subsystem_3_dma_csr_agent_rp_valid;                                                           // dma_fifo_subsystem_3_dma_csr_agent:rp_valid -> router_017:sink_valid
	wire  [124:0] dma_fifo_subsystem_3_dma_csr_agent_rp_data;                                                            // dma_fifo_subsystem_3_dma_csr_agent:rp_data -> router_017:sink_data
	wire          dma_fifo_subsystem_3_dma_csr_agent_rp_ready;                                                           // router_017:sink_ready -> dma_fifo_subsystem_3_dma_csr_agent:rp_ready
	wire          dma_fifo_subsystem_3_dma_csr_agent_rp_startofpacket;                                                   // dma_fifo_subsystem_3_dma_csr_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          dma_fifo_subsystem_3_dma_csr_agent_rp_endofpacket;                                                     // dma_fifo_subsystem_3_dma_csr_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                                  // router_017:src_valid -> rsp_demux_009:sink_valid
	wire  [124:0] router_017_src_data;                                                                                   // router_017:src_data -> rsp_demux_009:sink_data
	wire          router_017_src_ready;                                                                                  // rsp_demux_009:sink_ready -> router_017:src_ready
	wire   [26:0] router_017_src_channel;                                                                                // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_startofpacket;                                                                          // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                            // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          dma_fifo_subsystem_4_dma_csr_agent_rp_valid;                                                           // dma_fifo_subsystem_4_dma_csr_agent:rp_valid -> router_018:sink_valid
	wire  [124:0] dma_fifo_subsystem_4_dma_csr_agent_rp_data;                                                            // dma_fifo_subsystem_4_dma_csr_agent:rp_data -> router_018:sink_data
	wire          dma_fifo_subsystem_4_dma_csr_agent_rp_ready;                                                           // router_018:sink_ready -> dma_fifo_subsystem_4_dma_csr_agent:rp_ready
	wire          dma_fifo_subsystem_4_dma_csr_agent_rp_startofpacket;                                                   // dma_fifo_subsystem_4_dma_csr_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          dma_fifo_subsystem_4_dma_csr_agent_rp_endofpacket;                                                     // dma_fifo_subsystem_4_dma_csr_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                                  // router_018:src_valid -> rsp_demux_010:sink_valid
	wire  [124:0] router_018_src_data;                                                                                   // router_018:src_data -> rsp_demux_010:sink_data
	wire          router_018_src_ready;                                                                                  // rsp_demux_010:sink_ready -> router_018:src_ready
	wire   [26:0] router_018_src_channel;                                                                                // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_startofpacket;                                                                          // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                            // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rp_valid;                                                // dma_fifo_susbystem_dma_descriptor_slave_agent:rp_valid -> router_019:sink_valid
	wire  [232:0] dma_fifo_susbystem_dma_descriptor_slave_agent_rp_data;                                                 // dma_fifo_susbystem_dma_descriptor_slave_agent:rp_data -> router_019:sink_data
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rp_ready;                                                // router_019:sink_ready -> dma_fifo_susbystem_dma_descriptor_slave_agent:rp_ready
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rp_startofpacket;                                        // dma_fifo_susbystem_dma_descriptor_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rp_endofpacket;                                          // dma_fifo_susbystem_dma_descriptor_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                                  // router_019:src_valid -> rsp_demux_011:sink_valid
	wire  [232:0] router_019_src_data;                                                                                   // router_019:src_data -> rsp_demux_011:sink_data
	wire          router_019_src_ready;                                                                                  // rsp_demux_011:sink_ready -> router_019:src_ready
	wire   [26:0] router_019_src_channel;                                                                                // router_019:src_channel -> rsp_demux_011:sink_channel
	wire          router_019_src_startofpacket;                                                                          // router_019:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                            // router_019:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_valid;                                              // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rp_valid -> router_020:sink_valid
	wire  [232:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_data;                                               // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rp_data -> router_020:sink_data
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_ready;                                              // router_020:sink_ready -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rp_ready
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_startofpacket;                                      // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_endofpacket;                                        // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                                  // router_020:src_valid -> rsp_demux_012:sink_valid
	wire  [232:0] router_020_src_data;                                                                                   // router_020:src_data -> rsp_demux_012:sink_data
	wire          router_020_src_ready;                                                                                  // rsp_demux_012:sink_ready -> router_020:src_ready
	wire   [26:0] router_020_src_channel;                                                                                // router_020:src_channel -> rsp_demux_012:sink_channel
	wire          router_020_src_startofpacket;                                                                          // router_020:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                            // router_020:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_valid;                                              // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rp_valid -> router_021:sink_valid
	wire  [232:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_data;                                               // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rp_data -> router_021:sink_data
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_ready;                                              // router_021:sink_ready -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rp_ready
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_startofpacket;                                      // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_endofpacket;                                        // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                                  // router_021:src_valid -> rsp_demux_013:sink_valid
	wire  [232:0] router_021_src_data;                                                                                   // router_021:src_data -> rsp_demux_013:sink_data
	wire          router_021_src_ready;                                                                                  // rsp_demux_013:sink_ready -> router_021:src_ready
	wire   [26:0] router_021_src_channel;                                                                                // router_021:src_channel -> rsp_demux_013:sink_channel
	wire          router_021_src_startofpacket;                                                                          // router_021:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                            // router_021:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_valid;                                              // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rp_valid -> router_022:sink_valid
	wire  [232:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_data;                                               // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rp_data -> router_022:sink_data
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_ready;                                              // router_022:sink_ready -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rp_ready
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_startofpacket;                                      // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_endofpacket;                                        // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                                  // router_022:src_valid -> rsp_demux_014:sink_valid
	wire  [232:0] router_022_src_data;                                                                                   // router_022:src_data -> rsp_demux_014:sink_data
	wire          router_022_src_ready;                                                                                  // rsp_demux_014:sink_ready -> router_022:src_ready
	wire   [26:0] router_022_src_channel;                                                                                // router_022:src_channel -> rsp_demux_014:sink_channel
	wire          router_022_src_startofpacket;                                                                          // router_022:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                            // router_022:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_valid;                                              // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rp_valid -> router_023:sink_valid
	wire  [232:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_data;                                               // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rp_data -> router_023:sink_data
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_ready;                                              // router_023:sink_ready -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rp_ready
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_startofpacket;                                      // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_endofpacket;                                        // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                                  // router_023:src_valid -> rsp_demux_015:sink_valid
	wire  [232:0] router_023_src_data;                                                                                   // router_023:src_data -> rsp_demux_015:sink_data
	wire          router_023_src_ready;                                                                                  // rsp_demux_015:sink_ready -> router_023:src_ready
	wire   [26:0] router_023_src_channel;                                                                                // router_023:src_channel -> rsp_demux_015:sink_channel
	wire          router_023_src_startofpacket;                                                                          // router_023:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                            // router_023:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          system_ram_s1_agent_rp_valid;                                                                          // system_ram_s1_agent:rp_valid -> router_024:sink_valid
	wire  [124:0] system_ram_s1_agent_rp_data;                                                                           // system_ram_s1_agent:rp_data -> router_024:sink_data
	wire          system_ram_s1_agent_rp_ready;                                                                          // router_024:sink_ready -> system_ram_s1_agent:rp_ready
	wire          system_ram_s1_agent_rp_startofpacket;                                                                  // system_ram_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          system_ram_s1_agent_rp_endofpacket;                                                                    // system_ram_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                                  // router_024:src_valid -> rsp_demux_016:sink_valid
	wire  [124:0] router_024_src_data;                                                                                   // router_024:src_data -> rsp_demux_016:sink_data
	wire          router_024_src_ready;                                                                                  // rsp_demux_016:sink_ready -> router_024:src_ready
	wire   [26:0] router_024_src_channel;                                                                                // router_024:src_channel -> rsp_demux_016:sink_channel
	wire          router_024_src_startofpacket;                                                                          // router_024:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                            // router_024:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          ctrl_sig_s1_agent_rp_valid;                                                                            // ctrl_sig_s1_agent:rp_valid -> router_025:sink_valid
	wire  [124:0] ctrl_sig_s1_agent_rp_data;                                                                             // ctrl_sig_s1_agent:rp_data -> router_025:sink_data
	wire          ctrl_sig_s1_agent_rp_ready;                                                                            // router_025:sink_ready -> ctrl_sig_s1_agent:rp_ready
	wire          ctrl_sig_s1_agent_rp_startofpacket;                                                                    // ctrl_sig_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          ctrl_sig_s1_agent_rp_endofpacket;                                                                      // ctrl_sig_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                                  // router_025:src_valid -> rsp_demux_017:sink_valid
	wire  [124:0] router_025_src_data;                                                                                   // router_025:src_data -> rsp_demux_017:sink_data
	wire          router_025_src_ready;                                                                                  // rsp_demux_017:sink_ready -> router_025:src_ready
	wire   [26:0] router_025_src_channel;                                                                                // router_025:src_channel -> rsp_demux_017:sink_channel
	wire          router_025_src_startofpacket;                                                                          // router_025:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                            // router_025:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          sys_timer_s1_agent_rp_valid;                                                                           // sys_timer_s1_agent:rp_valid -> router_026:sink_valid
	wire  [124:0] sys_timer_s1_agent_rp_data;                                                                            // sys_timer_s1_agent:rp_data -> router_026:sink_data
	wire          sys_timer_s1_agent_rp_ready;                                                                           // router_026:sink_ready -> sys_timer_s1_agent:rp_ready
	wire          sys_timer_s1_agent_rp_startofpacket;                                                                   // sys_timer_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          sys_timer_s1_agent_rp_endofpacket;                                                                     // sys_timer_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                                  // router_026:src_valid -> rsp_demux_018:sink_valid
	wire  [124:0] router_026_src_data;                                                                                   // router_026:src_data -> rsp_demux_018:sink_data
	wire          router_026_src_ready;                                                                                  // rsp_demux_018:sink_ready -> router_026:src_ready
	wire   [26:0] router_026_src_channel;                                                                                // router_026:src_channel -> rsp_demux_018:sink_channel
	wire          router_026_src_startofpacket;                                                                          // router_026:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                            // router_026:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          pilot_sig_s1_agent_rp_valid;                                                                           // pilot_sig_s1_agent:rp_valid -> router_027:sink_valid
	wire  [124:0] pilot_sig_s1_agent_rp_data;                                                                            // pilot_sig_s1_agent:rp_data -> router_027:sink_data
	wire          pilot_sig_s1_agent_rp_ready;                                                                           // router_027:sink_ready -> pilot_sig_s1_agent:rp_ready
	wire          pilot_sig_s1_agent_rp_startofpacket;                                                                   // pilot_sig_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          pilot_sig_s1_agent_rp_endofpacket;                                                                     // pilot_sig_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                                  // router_027:src_valid -> rsp_demux_019:sink_valid
	wire  [124:0] router_027_src_data;                                                                                   // router_027:src_data -> rsp_demux_019:sink_data
	wire          router_027_src_ready;                                                                                  // rsp_demux_019:sink_ready -> router_027:src_ready
	wire   [26:0] router_027_src_channel;                                                                                // router_027:src_channel -> rsp_demux_019:sink_channel
	wire          router_027_src_startofpacket;                                                                          // router_027:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                            // router_027:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          input_io_s1_agent_rp_valid;                                                                            // input_IO_s1_agent:rp_valid -> router_028:sink_valid
	wire  [124:0] input_io_s1_agent_rp_data;                                                                             // input_IO_s1_agent:rp_data -> router_028:sink_data
	wire          input_io_s1_agent_rp_ready;                                                                            // router_028:sink_ready -> input_IO_s1_agent:rp_ready
	wire          input_io_s1_agent_rp_startofpacket;                                                                    // input_IO_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          input_io_s1_agent_rp_endofpacket;                                                                      // input_IO_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                                  // router_028:src_valid -> rsp_demux_020:sink_valid
	wire  [124:0] router_028_src_data;                                                                                   // router_028:src_data -> rsp_demux_020:sink_data
	wire          router_028_src_ready;                                                                                  // rsp_demux_020:sink_ready -> router_028:src_ready
	wire   [26:0] router_028_src_channel;                                                                                // router_028:src_channel -> rsp_demux_020:sink_channel
	wire          router_028_src_startofpacket;                                                                          // router_028:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_028_src_endofpacket;                                                                            // router_028:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          input_io_0_s1_agent_rp_valid;                                                                          // input_IO_0_s1_agent:rp_valid -> router_029:sink_valid
	wire  [124:0] input_io_0_s1_agent_rp_data;                                                                           // input_IO_0_s1_agent:rp_data -> router_029:sink_data
	wire          input_io_0_s1_agent_rp_ready;                                                                          // router_029:sink_ready -> input_IO_0_s1_agent:rp_ready
	wire          input_io_0_s1_agent_rp_startofpacket;                                                                  // input_IO_0_s1_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          input_io_0_s1_agent_rp_endofpacket;                                                                    // input_IO_0_s1_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                                  // router_029:src_valid -> rsp_demux_021:sink_valid
	wire  [124:0] router_029_src_data;                                                                                   // router_029:src_data -> rsp_demux_021:sink_data
	wire          router_029_src_ready;                                                                                  // rsp_demux_021:sink_ready -> router_029:src_ready
	wire   [26:0] router_029_src_channel;                                                                                // router_029:src_channel -> rsp_demux_021:sink_channel
	wire          router_029_src_startofpacket;                                                                          // router_029:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_029_src_endofpacket;                                                                            // router_029:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          input_io_1_s1_agent_rp_valid;                                                                          // input_IO_1_s1_agent:rp_valid -> router_030:sink_valid
	wire  [124:0] input_io_1_s1_agent_rp_data;                                                                           // input_IO_1_s1_agent:rp_data -> router_030:sink_data
	wire          input_io_1_s1_agent_rp_ready;                                                                          // router_030:sink_ready -> input_IO_1_s1_agent:rp_ready
	wire          input_io_1_s1_agent_rp_startofpacket;                                                                  // input_IO_1_s1_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          input_io_1_s1_agent_rp_endofpacket;                                                                    // input_IO_1_s1_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                                                  // router_030:src_valid -> rsp_demux_022:sink_valid
	wire  [124:0] router_030_src_data;                                                                                   // router_030:src_data -> rsp_demux_022:sink_data
	wire          router_030_src_ready;                                                                                  // rsp_demux_022:sink_ready -> router_030:src_ready
	wire   [26:0] router_030_src_channel;                                                                                // router_030:src_channel -> rsp_demux_022:sink_channel
	wire          router_030_src_startofpacket;                                                                          // router_030:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_030_src_endofpacket;                                                                            // router_030:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          input_io_2_s1_agent_rp_valid;                                                                          // input_IO_2_s1_agent:rp_valid -> router_031:sink_valid
	wire  [124:0] input_io_2_s1_agent_rp_data;                                                                           // input_IO_2_s1_agent:rp_data -> router_031:sink_data
	wire          input_io_2_s1_agent_rp_ready;                                                                          // router_031:sink_ready -> input_IO_2_s1_agent:rp_ready
	wire          input_io_2_s1_agent_rp_startofpacket;                                                                  // input_IO_2_s1_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          input_io_2_s1_agent_rp_endofpacket;                                                                    // input_IO_2_s1_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                                                  // router_031:src_valid -> rsp_demux_023:sink_valid
	wire  [124:0] router_031_src_data;                                                                                   // router_031:src_data -> rsp_demux_023:sink_data
	wire          router_031_src_ready;                                                                                  // rsp_demux_023:sink_ready -> router_031:src_ready
	wire   [26:0] router_031_src_channel;                                                                                // router_031:src_channel -> rsp_demux_023:sink_channel
	wire          router_031_src_startofpacket;                                                                          // router_031:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_031_src_endofpacket;                                                                            // router_031:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          input_io_3_s1_agent_rp_valid;                                                                          // input_IO_3_s1_agent:rp_valid -> router_032:sink_valid
	wire  [124:0] input_io_3_s1_agent_rp_data;                                                                           // input_IO_3_s1_agent:rp_data -> router_032:sink_data
	wire          input_io_3_s1_agent_rp_ready;                                                                          // router_032:sink_ready -> input_IO_3_s1_agent:rp_ready
	wire          input_io_3_s1_agent_rp_startofpacket;                                                                  // input_IO_3_s1_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          input_io_3_s1_agent_rp_endofpacket;                                                                    // input_IO_3_s1_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                                                  // router_032:src_valid -> rsp_demux_024:sink_valid
	wire  [124:0] router_032_src_data;                                                                                   // router_032:src_data -> rsp_demux_024:sink_data
	wire          router_032_src_ready;                                                                                  // rsp_demux_024:sink_ready -> router_032:src_ready
	wire   [26:0] router_032_src_channel;                                                                                // router_032:src_channel -> rsp_demux_024:sink_channel
	wire          router_032_src_startofpacket;                                                                          // router_032:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_032_src_endofpacket;                                                                            // router_032:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          input_io_4_s1_agent_rp_valid;                                                                          // input_IO_4_s1_agent:rp_valid -> router_033:sink_valid
	wire  [124:0] input_io_4_s1_agent_rp_data;                                                                           // input_IO_4_s1_agent:rp_data -> router_033:sink_data
	wire          input_io_4_s1_agent_rp_ready;                                                                          // router_033:sink_ready -> input_IO_4_s1_agent:rp_ready
	wire          input_io_4_s1_agent_rp_startofpacket;                                                                  // input_IO_4_s1_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          input_io_4_s1_agent_rp_endofpacket;                                                                    // input_IO_4_s1_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                                                  // router_033:src_valid -> rsp_demux_025:sink_valid
	wire  [124:0] router_033_src_data;                                                                                   // router_033:src_data -> rsp_demux_025:sink_data
	wire          router_033_src_ready;                                                                                  // rsp_demux_025:sink_ready -> router_033:src_ready
	wire   [26:0] router_033_src_channel;                                                                                // router_033:src_channel -> rsp_demux_025:sink_channel
	wire          router_033_src_startofpacket;                                                                          // router_033:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_033_src_endofpacket;                                                                            // router_033:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          input_io_5_s1_agent_rp_valid;                                                                          // input_IO_5_s1_agent:rp_valid -> router_034:sink_valid
	wire  [124:0] input_io_5_s1_agent_rp_data;                                                                           // input_IO_5_s1_agent:rp_data -> router_034:sink_data
	wire          input_io_5_s1_agent_rp_ready;                                                                          // router_034:sink_ready -> input_IO_5_s1_agent:rp_ready
	wire          input_io_5_s1_agent_rp_startofpacket;                                                                  // input_IO_5_s1_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          input_io_5_s1_agent_rp_endofpacket;                                                                    // input_IO_5_s1_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                                                  // router_034:src_valid -> rsp_demux_026:sink_valid
	wire  [124:0] router_034_src_data;                                                                                   // router_034:src_data -> rsp_demux_026:sink_data
	wire          router_034_src_ready;                                                                                  // rsp_demux_026:sink_ready -> router_034:src_ready
	wire   [26:0] router_034_src_channel;                                                                                // router_034:src_channel -> rsp_demux_026:sink_channel
	wire          router_034_src_startofpacket;                                                                          // router_034:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_034_src_endofpacket;                                                                            // router_034:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          router_001_src_valid;                                                                                  // router_001:src_valid -> nios_cpu_data_master_limiter:cmd_sink_valid
	wire  [124:0] router_001_src_data;                                                                                   // router_001:src_data -> nios_cpu_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                                  // nios_cpu_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [26:0] router_001_src_channel;                                                                                // router_001:src_channel -> nios_cpu_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                          // router_001:src_startofpacket -> nios_cpu_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                            // router_001:src_endofpacket -> nios_cpu_data_master_limiter:cmd_sink_endofpacket
	wire  [124:0] nios_cpu_data_master_limiter_cmd_src_data;                                                             // nios_cpu_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          nios_cpu_data_master_limiter_cmd_src_ready;                                                            // cmd_demux_001:sink_ready -> nios_cpu_data_master_limiter:cmd_src_ready
	wire   [26:0] nios_cpu_data_master_limiter_cmd_src_channel;                                                          // nios_cpu_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios_cpu_data_master_limiter_cmd_src_startofpacket;                                                    // nios_cpu_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          nios_cpu_data_master_limiter_cmd_src_endofpacket;                                                      // nios_cpu_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                                 // rsp_mux_001:src_valid -> nios_cpu_data_master_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_001_src_data;                                                                                  // rsp_mux_001:src_data -> nios_cpu_data_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                                 // nios_cpu_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [26:0] rsp_mux_001_src_channel;                                                                               // rsp_mux_001:src_channel -> nios_cpu_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                         // rsp_mux_001:src_startofpacket -> nios_cpu_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                           // rsp_mux_001:src_endofpacket -> nios_cpu_data_master_limiter:rsp_sink_endofpacket
	wire          nios_cpu_data_master_limiter_rsp_src_valid;                                                            // nios_cpu_data_master_limiter:rsp_src_valid -> nios_cpu_data_master_agent:rp_valid
	wire  [124:0] nios_cpu_data_master_limiter_rsp_src_data;                                                             // nios_cpu_data_master_limiter:rsp_src_data -> nios_cpu_data_master_agent:rp_data
	wire          nios_cpu_data_master_limiter_rsp_src_ready;                                                            // nios_cpu_data_master_agent:rp_ready -> nios_cpu_data_master_limiter:rsp_src_ready
	wire   [26:0] nios_cpu_data_master_limiter_rsp_src_channel;                                                          // nios_cpu_data_master_limiter:rsp_src_channel -> nios_cpu_data_master_agent:rp_channel
	wire          nios_cpu_data_master_limiter_rsp_src_startofpacket;                                                    // nios_cpu_data_master_limiter:rsp_src_startofpacket -> nios_cpu_data_master_agent:rp_startofpacket
	wire          nios_cpu_data_master_limiter_rsp_src_endofpacket;                                                      // nios_cpu_data_master_limiter:rsp_src_endofpacket -> nios_cpu_data_master_agent:rp_endofpacket
	wire          router_005_src_valid;                                                                                  // router_005:src_valid -> nios_cpu_instruction_master_limiter:cmd_sink_valid
	wire  [124:0] router_005_src_data;                                                                                   // router_005:src_data -> nios_cpu_instruction_master_limiter:cmd_sink_data
	wire          router_005_src_ready;                                                                                  // nios_cpu_instruction_master_limiter:cmd_sink_ready -> router_005:src_ready
	wire   [26:0] router_005_src_channel;                                                                                // router_005:src_channel -> nios_cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_005_src_startofpacket;                                                                          // router_005:src_startofpacket -> nios_cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_005_src_endofpacket;                                                                            // router_005:src_endofpacket -> nios_cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire  [124:0] nios_cpu_instruction_master_limiter_cmd_src_data;                                                      // nios_cpu_instruction_master_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire          nios_cpu_instruction_master_limiter_cmd_src_ready;                                                     // cmd_demux_005:sink_ready -> nios_cpu_instruction_master_limiter:cmd_src_ready
	wire   [26:0] nios_cpu_instruction_master_limiter_cmd_src_channel;                                                   // nios_cpu_instruction_master_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          nios_cpu_instruction_master_limiter_cmd_src_startofpacket;                                             // nios_cpu_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          nios_cpu_instruction_master_limiter_cmd_src_endofpacket;                                               // nios_cpu_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                                                 // rsp_mux_005:src_valid -> nios_cpu_instruction_master_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_005_src_data;                                                                                  // rsp_mux_005:src_data -> nios_cpu_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_005_src_ready;                                                                                 // nios_cpu_instruction_master_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire   [26:0] rsp_mux_005_src_channel;                                                                               // rsp_mux_005:src_channel -> nios_cpu_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_startofpacket;                                                                         // rsp_mux_005:src_startofpacket -> nios_cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                                           // rsp_mux_005:src_endofpacket -> nios_cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios_cpu_instruction_master_limiter_rsp_src_valid;                                                     // nios_cpu_instruction_master_limiter:rsp_src_valid -> nios_cpu_instruction_master_agent:rp_valid
	wire  [124:0] nios_cpu_instruction_master_limiter_rsp_src_data;                                                      // nios_cpu_instruction_master_limiter:rsp_src_data -> nios_cpu_instruction_master_agent:rp_data
	wire          nios_cpu_instruction_master_limiter_rsp_src_ready;                                                     // nios_cpu_instruction_master_agent:rp_ready -> nios_cpu_instruction_master_limiter:rsp_src_ready
	wire   [26:0] nios_cpu_instruction_master_limiter_rsp_src_channel;                                                   // nios_cpu_instruction_master_limiter:rsp_src_channel -> nios_cpu_instruction_master_agent:rp_channel
	wire          nios_cpu_instruction_master_limiter_rsp_src_startofpacket;                                             // nios_cpu_instruction_master_limiter:rsp_src_startofpacket -> nios_cpu_instruction_master_agent:rp_startofpacket
	wire          nios_cpu_instruction_master_limiter_rsp_src_endofpacket;                                               // nios_cpu_instruction_master_limiter:rsp_src_endofpacket -> nios_cpu_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                     // cmd_mux:src_valid -> ddr2_ram_avl_burst_adapter:sink0_valid
	wire  [376:0] cmd_mux_src_data;                                                                                      // cmd_mux:src_data -> ddr2_ram_avl_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                     // ddr2_ram_avl_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [26:0] cmd_mux_src_channel;                                                                                   // cmd_mux:src_channel -> ddr2_ram_avl_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                             // cmd_mux:src_startofpacket -> ddr2_ram_avl_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                               // cmd_mux:src_endofpacket -> ddr2_ram_avl_burst_adapter:sink0_endofpacket
	wire          ddr2_ram_avl_burst_adapter_source0_valid;                                                              // ddr2_ram_avl_burst_adapter:source0_valid -> ddr2_ram_avl_agent:cp_valid
	wire  [376:0] ddr2_ram_avl_burst_adapter_source0_data;                                                               // ddr2_ram_avl_burst_adapter:source0_data -> ddr2_ram_avl_agent:cp_data
	wire          ddr2_ram_avl_burst_adapter_source0_ready;                                                              // ddr2_ram_avl_agent:cp_ready -> ddr2_ram_avl_burst_adapter:source0_ready
	wire   [26:0] ddr2_ram_avl_burst_adapter_source0_channel;                                                            // ddr2_ram_avl_burst_adapter:source0_channel -> ddr2_ram_avl_agent:cp_channel
	wire          ddr2_ram_avl_burst_adapter_source0_startofpacket;                                                      // ddr2_ram_avl_burst_adapter:source0_startofpacket -> ddr2_ram_avl_agent:cp_startofpacket
	wire          ddr2_ram_avl_burst_adapter_source0_endofpacket;                                                        // ddr2_ram_avl_burst_adapter:source0_endofpacket -> ddr2_ram_avl_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                 // cmd_mux_001:src_valid -> ddr2_ram_1_avl_burst_adapter:sink0_valid
	wire  [376:0] cmd_mux_001_src_data;                                                                                  // cmd_mux_001:src_data -> ddr2_ram_1_avl_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                                 // ddr2_ram_1_avl_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [26:0] cmd_mux_001_src_channel;                                                                               // cmd_mux_001:src_channel -> ddr2_ram_1_avl_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                         // cmd_mux_001:src_startofpacket -> ddr2_ram_1_avl_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                           // cmd_mux_001:src_endofpacket -> ddr2_ram_1_avl_burst_adapter:sink0_endofpacket
	wire          ddr2_ram_1_avl_burst_adapter_source0_valid;                                                            // ddr2_ram_1_avl_burst_adapter:source0_valid -> ddr2_ram_1_avl_agent:cp_valid
	wire  [376:0] ddr2_ram_1_avl_burst_adapter_source0_data;                                                             // ddr2_ram_1_avl_burst_adapter:source0_data -> ddr2_ram_1_avl_agent:cp_data
	wire          ddr2_ram_1_avl_burst_adapter_source0_ready;                                                            // ddr2_ram_1_avl_agent:cp_ready -> ddr2_ram_1_avl_burst_adapter:source0_ready
	wire   [26:0] ddr2_ram_1_avl_burst_adapter_source0_channel;                                                          // ddr2_ram_1_avl_burst_adapter:source0_channel -> ddr2_ram_1_avl_agent:cp_channel
	wire          ddr2_ram_1_avl_burst_adapter_source0_startofpacket;                                                    // ddr2_ram_1_avl_burst_adapter:source0_startofpacket -> ddr2_ram_1_avl_agent:cp_startofpacket
	wire          ddr2_ram_1_avl_burst_adapter_source0_endofpacket;                                                      // ddr2_ram_1_avl_burst_adapter:source0_endofpacket -> ddr2_ram_1_avl_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [376:0] cmd_demux_src0_data;                                                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [26:0] cmd_demux_src0_channel;                                                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                              // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire  [124:0] cmd_demux_001_src2_data;                                                                               // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_001_src2_ready;                                                                              // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire   [26:0] cmd_demux_001_src2_channel;                                                                            // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                                                      // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                        // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                              // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire  [124:0] cmd_demux_001_src4_data;                                                                               // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_001_src4_ready;                                                                              // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire   [26:0] cmd_demux_001_src4_channel;                                                                            // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                                      // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                                        // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                              // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire  [124:0] cmd_demux_001_src5_data;                                                                               // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src5_ready;                                                                              // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire   [26:0] cmd_demux_001_src5_channel;                                                                            // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                                                      // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                                        // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                              // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire  [124:0] cmd_demux_001_src6_data;                                                                               // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_001_src6_ready;                                                                              // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire   [26:0] cmd_demux_001_src6_channel;                                                                            // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                                                      // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                                        // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                              // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire  [124:0] cmd_demux_001_src7_data;                                                                               // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                              // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire   [26:0] cmd_demux_001_src7_channel;                                                                            // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                                      // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                                        // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                              // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire  [124:0] cmd_demux_001_src8_data;                                                                               // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                              // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire   [26:0] cmd_demux_001_src8_channel;                                                                            // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                                      // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                                        // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                                              // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire  [124:0] cmd_demux_001_src9_data;                                                                               // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src9_ready;                                                                              // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire   [26:0] cmd_demux_001_src9_channel;                                                                            // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                                      // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                                        // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                                             // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire  [124:0] cmd_demux_001_src10_data;                                                                              // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src10_ready;                                                                             // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire   [26:0] cmd_demux_001_src10_channel;                                                                           // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                                     // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                                       // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src16_valid;                                                                             // cmd_demux_001:src16_valid -> cmd_mux_016:sink0_valid
	wire  [124:0] cmd_demux_001_src16_data;                                                                              // cmd_demux_001:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_001_src16_ready;                                                                             // cmd_mux_016:sink0_ready -> cmd_demux_001:src16_ready
	wire   [26:0] cmd_demux_001_src16_channel;                                                                           // cmd_demux_001:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_001_src16_startofpacket;                                                                     // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                                                       // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src17_valid;                                                                             // cmd_demux_001:src17_valid -> cmd_mux_017:sink0_valid
	wire  [124:0] cmd_demux_001_src17_data;                                                                              // cmd_demux_001:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_001_src17_ready;                                                                             // cmd_mux_017:sink0_ready -> cmd_demux_001:src17_ready
	wire   [26:0] cmd_demux_001_src17_channel;                                                                           // cmd_demux_001:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_001_src17_startofpacket;                                                                     // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                                                       // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src18_valid;                                                                             // cmd_demux_001:src18_valid -> cmd_mux_018:sink0_valid
	wire  [124:0] cmd_demux_001_src18_data;                                                                              // cmd_demux_001:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_001_src18_ready;                                                                             // cmd_mux_018:sink0_ready -> cmd_demux_001:src18_ready
	wire   [26:0] cmd_demux_001_src18_channel;                                                                           // cmd_demux_001:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_001_src18_startofpacket;                                                                     // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                                                       // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src19_valid;                                                                             // cmd_demux_001:src19_valid -> cmd_mux_019:sink0_valid
	wire  [124:0] cmd_demux_001_src19_data;                                                                              // cmd_demux_001:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_001_src19_ready;                                                                             // cmd_mux_019:sink0_ready -> cmd_demux_001:src19_ready
	wire   [26:0] cmd_demux_001_src19_channel;                                                                           // cmd_demux_001:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_001_src19_startofpacket;                                                                     // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                                                       // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src20_valid;                                                                             // cmd_demux_001:src20_valid -> cmd_mux_020:sink0_valid
	wire  [124:0] cmd_demux_001_src20_data;                                                                              // cmd_demux_001:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_001_src20_ready;                                                                             // cmd_mux_020:sink0_ready -> cmd_demux_001:src20_ready
	wire   [26:0] cmd_demux_001_src20_channel;                                                                           // cmd_demux_001:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_001_src20_startofpacket;                                                                     // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                                                       // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src21_valid;                                                                             // cmd_demux_001:src21_valid -> cmd_mux_021:sink0_valid
	wire  [124:0] cmd_demux_001_src21_data;                                                                              // cmd_demux_001:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_001_src21_ready;                                                                             // cmd_mux_021:sink0_ready -> cmd_demux_001:src21_ready
	wire   [26:0] cmd_demux_001_src21_channel;                                                                           // cmd_demux_001:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_001_src21_startofpacket;                                                                     // cmd_demux_001:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                                                       // cmd_demux_001:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src22_valid;                                                                             // cmd_demux_001:src22_valid -> cmd_mux_022:sink0_valid
	wire  [124:0] cmd_demux_001_src22_data;                                                                              // cmd_demux_001:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_001_src22_ready;                                                                             // cmd_mux_022:sink0_ready -> cmd_demux_001:src22_ready
	wire   [26:0] cmd_demux_001_src22_channel;                                                                           // cmd_demux_001:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_001_src22_startofpacket;                                                                     // cmd_demux_001:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_001_src22_endofpacket;                                                                       // cmd_demux_001:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_001_src23_valid;                                                                             // cmd_demux_001:src23_valid -> cmd_mux_023:sink0_valid
	wire  [124:0] cmd_demux_001_src23_data;                                                                              // cmd_demux_001:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_001_src23_ready;                                                                             // cmd_mux_023:sink0_ready -> cmd_demux_001:src23_ready
	wire   [26:0] cmd_demux_001_src23_channel;                                                                           // cmd_demux_001:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_001_src23_startofpacket;                                                                     // cmd_demux_001:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_001_src23_endofpacket;                                                                       // cmd_demux_001:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_001_src24_valid;                                                                             // cmd_demux_001:src24_valid -> cmd_mux_024:sink0_valid
	wire  [124:0] cmd_demux_001_src24_data;                                                                              // cmd_demux_001:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_001_src24_ready;                                                                             // cmd_mux_024:sink0_ready -> cmd_demux_001:src24_ready
	wire   [26:0] cmd_demux_001_src24_channel;                                                                           // cmd_demux_001:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_001_src24_startofpacket;                                                                     // cmd_demux_001:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_001_src24_endofpacket;                                                                       // cmd_demux_001:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_001_src25_valid;                                                                             // cmd_demux_001:src25_valid -> cmd_mux_025:sink0_valid
	wire  [124:0] cmd_demux_001_src25_data;                                                                              // cmd_demux_001:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_001_src25_ready;                                                                             // cmd_mux_025:sink0_ready -> cmd_demux_001:src25_ready
	wire   [26:0] cmd_demux_001_src25_channel;                                                                           // cmd_demux_001:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_001_src25_startofpacket;                                                                     // cmd_demux_001:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_001_src25_endofpacket;                                                                       // cmd_demux_001:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_001_src26_valid;                                                                             // cmd_demux_001:src26_valid -> cmd_mux_026:sink0_valid
	wire  [124:0] cmd_demux_001_src26_data;                                                                              // cmd_demux_001:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_001_src26_ready;                                                                             // cmd_mux_026:sink0_ready -> cmd_demux_001:src26_ready
	wire   [26:0] cmd_demux_001_src26_channel;                                                                           // cmd_demux_001:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_001_src26_startofpacket;                                                                     // cmd_demux_001:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_001_src26_endofpacket;                                                                       // cmd_demux_001:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                              // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [376:0] cmd_demux_002_src0_data;                                                                               // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                              // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [26:0] cmd_demux_002_src0_channel;                                                                            // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                      // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                        // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                              // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [376:0] cmd_demux_003_src0_data;                                                                               // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                                              // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire   [26:0] cmd_demux_003_src0_channel;                                                                            // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                                      // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                        // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                              // cmd_demux_004:src0_valid -> cmd_mux:sink4_valid
	wire  [376:0] cmd_demux_004_src0_data;                                                                               // cmd_demux_004:src0_data -> cmd_mux:sink4_data
	wire          cmd_demux_004_src0_ready;                                                                              // cmd_mux:sink4_ready -> cmd_demux_004:src0_ready
	wire   [26:0] cmd_demux_004_src0_channel;                                                                            // cmd_demux_004:src0_channel -> cmd_mux:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                                      // cmd_demux_004:src0_startofpacket -> cmd_mux:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                        // cmd_demux_004:src0_endofpacket -> cmd_mux:sink4_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                              // cmd_demux_005:src0_valid -> cmd_mux_005:sink1_valid
	wire  [124:0] cmd_demux_005_src0_data;                                                                               // cmd_demux_005:src0_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_005_src0_ready;                                                                              // cmd_mux_005:sink1_ready -> cmd_demux_005:src0_ready
	wire   [26:0] cmd_demux_005_src0_channel;                                                                            // cmd_demux_005:src0_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_005_src0_startofpacket;                                                                      // cmd_demux_005:src0_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                                        // cmd_demux_005:src0_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_005_src1_valid;                                                                              // cmd_demux_005:src1_valid -> cmd_mux_016:sink1_valid
	wire  [124:0] cmd_demux_005_src1_data;                                                                               // cmd_demux_005:src1_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_005_src1_ready;                                                                              // cmd_mux_016:sink1_ready -> cmd_demux_005:src1_ready
	wire   [26:0] cmd_demux_005_src1_channel;                                                                            // cmd_demux_005:src1_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_005_src1_startofpacket;                                                                      // cmd_demux_005:src1_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                                        // cmd_demux_005:src1_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [376:0] rsp_demux_src0_data;                                                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [26:0] rsp_demux_src0_channel;                                                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                                  // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [376:0] rsp_demux_src2_data;                                                                                   // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                                  // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [26:0] rsp_demux_src2_channel;                                                                                // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                                          // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                            // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                                  // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [376:0] rsp_demux_src3_data;                                                                                   // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                                                  // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire   [26:0] rsp_demux_src3_channel;                                                                                // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                                          // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                                            // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src4_valid;                                                                                  // rsp_demux:src4_valid -> rsp_mux_004:sink0_valid
	wire  [376:0] rsp_demux_src4_data;                                                                                   // rsp_demux:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_src4_ready;                                                                                  // rsp_mux_004:sink0_ready -> rsp_demux:src4_ready
	wire   [26:0] rsp_demux_src4_channel;                                                                                // rsp_demux:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_src4_startofpacket;                                                                          // rsp_demux:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                                            // rsp_demux:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                              // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire  [124:0] rsp_demux_002_src0_data;                                                                               // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                              // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire   [26:0] rsp_demux_002_src0_channel;                                                                            // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                      // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                        // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                              // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire  [124:0] rsp_demux_004_src0_data;                                                                               // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                              // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire   [26:0] rsp_demux_004_src0_channel;                                                                            // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                      // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                        // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                              // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire  [124:0] rsp_demux_005_src0_data;                                                                               // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                              // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire   [26:0] rsp_demux_005_src0_channel;                                                                            // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                      // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                        // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                              // rsp_demux_005:src1_valid -> rsp_mux_005:sink0_valid
	wire  [124:0] rsp_demux_005_src1_data;                                                                               // rsp_demux_005:src1_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_005_src1_ready;                                                                              // rsp_mux_005:sink0_ready -> rsp_demux_005:src1_ready
	wire   [26:0] rsp_demux_005_src1_channel;                                                                            // rsp_demux_005:src1_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_005_src1_startofpacket;                                                                      // rsp_demux_005:src1_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                        // rsp_demux_005:src1_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                              // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire  [124:0] rsp_demux_006_src0_data;                                                                               // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                              // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire   [26:0] rsp_demux_006_src0_channel;                                                                            // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                      // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                        // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                              // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire  [124:0] rsp_demux_007_src0_data;                                                                               // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                              // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire   [26:0] rsp_demux_007_src0_channel;                                                                            // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                      // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                        // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                              // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire  [124:0] rsp_demux_008_src0_data;                                                                               // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                              // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire   [26:0] rsp_demux_008_src0_channel;                                                                            // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                      // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                        // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                              // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire  [124:0] rsp_demux_009_src0_data;                                                                               // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                              // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire   [26:0] rsp_demux_009_src0_channel;                                                                            // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                      // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                        // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                              // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire  [124:0] rsp_demux_010_src0_data;                                                                               // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                              // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire   [26:0] rsp_demux_010_src0_channel;                                                                            // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                      // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                        // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                              // rsp_demux_016:src0_valid -> rsp_mux_001:sink16_valid
	wire  [124:0] rsp_demux_016_src0_data;                                                                               // rsp_demux_016:src0_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                              // rsp_mux_001:sink16_ready -> rsp_demux_016:src0_ready
	wire   [26:0] rsp_demux_016_src0_channel;                                                                            // rsp_demux_016:src0_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                                      // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                                        // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                                              // rsp_demux_016:src1_valid -> rsp_mux_005:sink1_valid
	wire  [124:0] rsp_demux_016_src1_data;                                                                               // rsp_demux_016:src1_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_016_src1_ready;                                                                              // rsp_mux_005:sink1_ready -> rsp_demux_016:src1_ready
	wire   [26:0] rsp_demux_016_src1_channel;                                                                            // rsp_demux_016:src1_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_016_src1_startofpacket;                                                                      // rsp_demux_016:src1_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                                        // rsp_demux_016:src1_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                              // rsp_demux_017:src0_valid -> rsp_mux_001:sink17_valid
	wire  [124:0] rsp_demux_017_src0_data;                                                                               // rsp_demux_017:src0_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                              // rsp_mux_001:sink17_ready -> rsp_demux_017:src0_ready
	wire   [26:0] rsp_demux_017_src0_channel;                                                                            // rsp_demux_017:src0_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                                      // rsp_demux_017:src0_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                                        // rsp_demux_017:src0_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                              // rsp_demux_018:src0_valid -> rsp_mux_001:sink18_valid
	wire  [124:0] rsp_demux_018_src0_data;                                                                               // rsp_demux_018:src0_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                              // rsp_mux_001:sink18_ready -> rsp_demux_018:src0_ready
	wire   [26:0] rsp_demux_018_src0_channel;                                                                            // rsp_demux_018:src0_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                                      // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                                        // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                              // rsp_demux_019:src0_valid -> rsp_mux_001:sink19_valid
	wire  [124:0] rsp_demux_019_src0_data;                                                                               // rsp_demux_019:src0_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                              // rsp_mux_001:sink19_ready -> rsp_demux_019:src0_ready
	wire   [26:0] rsp_demux_019_src0_channel;                                                                            // rsp_demux_019:src0_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                                      // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                                        // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                              // rsp_demux_020:src0_valid -> rsp_mux_001:sink20_valid
	wire  [124:0] rsp_demux_020_src0_data;                                                                               // rsp_demux_020:src0_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                              // rsp_mux_001:sink20_ready -> rsp_demux_020:src0_ready
	wire   [26:0] rsp_demux_020_src0_channel;                                                                            // rsp_demux_020:src0_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                                      // rsp_demux_020:src0_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                                        // rsp_demux_020:src0_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                              // rsp_demux_021:src0_valid -> rsp_mux_001:sink21_valid
	wire  [124:0] rsp_demux_021_src0_data;                                                                               // rsp_demux_021:src0_data -> rsp_mux_001:sink21_data
	wire          rsp_demux_021_src0_ready;                                                                              // rsp_mux_001:sink21_ready -> rsp_demux_021:src0_ready
	wire   [26:0] rsp_demux_021_src0_channel;                                                                            // rsp_demux_021:src0_channel -> rsp_mux_001:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                                      // rsp_demux_021:src0_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                                        // rsp_demux_021:src0_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                                              // rsp_demux_022:src0_valid -> rsp_mux_001:sink22_valid
	wire  [124:0] rsp_demux_022_src0_data;                                                                               // rsp_demux_022:src0_data -> rsp_mux_001:sink22_data
	wire          rsp_demux_022_src0_ready;                                                                              // rsp_mux_001:sink22_ready -> rsp_demux_022:src0_ready
	wire   [26:0] rsp_demux_022_src0_channel;                                                                            // rsp_demux_022:src0_channel -> rsp_mux_001:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                                      // rsp_demux_022:src0_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                                        // rsp_demux_022:src0_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                                              // rsp_demux_023:src0_valid -> rsp_mux_001:sink23_valid
	wire  [124:0] rsp_demux_023_src0_data;                                                                               // rsp_demux_023:src0_data -> rsp_mux_001:sink23_data
	wire          rsp_demux_023_src0_ready;                                                                              // rsp_mux_001:sink23_ready -> rsp_demux_023:src0_ready
	wire   [26:0] rsp_demux_023_src0_channel;                                                                            // rsp_demux_023:src0_channel -> rsp_mux_001:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                                      // rsp_demux_023:src0_startofpacket -> rsp_mux_001:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                                        // rsp_demux_023:src0_endofpacket -> rsp_mux_001:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                                              // rsp_demux_024:src0_valid -> rsp_mux_001:sink24_valid
	wire  [124:0] rsp_demux_024_src0_data;                                                                               // rsp_demux_024:src0_data -> rsp_mux_001:sink24_data
	wire          rsp_demux_024_src0_ready;                                                                              // rsp_mux_001:sink24_ready -> rsp_demux_024:src0_ready
	wire   [26:0] rsp_demux_024_src0_channel;                                                                            // rsp_demux_024:src0_channel -> rsp_mux_001:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                                      // rsp_demux_024:src0_startofpacket -> rsp_mux_001:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                                        // rsp_demux_024:src0_endofpacket -> rsp_mux_001:sink24_endofpacket
	wire          rsp_demux_025_src0_valid;                                                                              // rsp_demux_025:src0_valid -> rsp_mux_001:sink25_valid
	wire  [124:0] rsp_demux_025_src0_data;                                                                               // rsp_demux_025:src0_data -> rsp_mux_001:sink25_data
	wire          rsp_demux_025_src0_ready;                                                                              // rsp_mux_001:sink25_ready -> rsp_demux_025:src0_ready
	wire   [26:0] rsp_demux_025_src0_channel;                                                                            // rsp_demux_025:src0_channel -> rsp_mux_001:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                                      // rsp_demux_025:src0_startofpacket -> rsp_mux_001:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                                        // rsp_demux_025:src0_endofpacket -> rsp_mux_001:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                                              // rsp_demux_026:src0_valid -> rsp_mux_001:sink26_valid
	wire  [124:0] rsp_demux_026_src0_data;                                                                               // rsp_demux_026:src0_data -> rsp_mux_001:sink26_data
	wire          rsp_demux_026_src0_ready;                                                                              // rsp_mux_001:sink26_ready -> rsp_demux_026:src0_ready
	wire   [26:0] rsp_demux_026_src0_channel;                                                                            // rsp_demux_026:src0_channel -> rsp_mux_001:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                                      // rsp_demux_026:src0_startofpacket -> rsp_mux_001:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                                        // rsp_demux_026:src0_endofpacket -> rsp_mux_001:sink26_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                              // cmd_demux_001:src0_valid -> nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src0_data;                                                                               // cmd_demux_001:src0_data -> nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                              // nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [26:0] cmd_demux_001_src0_channel;                                                                            // cmd_demux_001:src0_channel -> nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                      // cmd_demux_001:src0_startofpacket -> nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                        // cmd_demux_001:src0_endofpacket -> nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_valid;                                      // nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire  [376:0] nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_data;                                       // nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_ready;                                      // cmd_mux:sink1_ready -> nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:out_ready
	wire   [26:0] nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_channel;                                    // nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_startofpacket;                              // nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_endofpacket;                                // nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                              // cmd_demux_001:src1_valid -> nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src1_data;                                                                               // cmd_demux_001:src1_data -> nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                                              // nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire   [26:0] cmd_demux_001_src1_channel;                                                                            // cmd_demux_001:src1_channel -> nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                      // cmd_demux_001:src1_startofpacket -> nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                        // cmd_demux_001:src1_endofpacket -> nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                              // cmd_demux_001:src3_valid -> nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src3_data;                                                                               // cmd_demux_001:src3_data -> nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src3_ready;                                                                              // nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src3_ready
	wire   [26:0] cmd_demux_001_src3_channel;                                                                            // cmd_demux_001:src3_channel -> nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                                                      // cmd_demux_001:src3_startofpacket -> nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                        // cmd_demux_001:src3_endofpacket -> nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_valid;          // nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire  [232:0] nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_data;           // nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_ready;          // cmd_mux_003:sink0_ready -> nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:out_ready
	wire   [26:0] nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_channel;        // nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_startofpacket;  // nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;    // nios_cpu_data_master_to_from_ETH_to_DDR_ETH_DMA_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                                             // cmd_demux_001:src11_valid -> nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src11_data;                                                                              // cmd_demux_001:src11_data -> nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src11_ready;                                                                             // nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src11_ready
	wire   [26:0] cmd_demux_001_src11_channel;                                                                           // cmd_demux_001:src11_channel -> nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src11_startofpacket;                                                                     // cmd_demux_001:src11_startofpacket -> nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                                       // cmd_demux_001:src11_endofpacket -> nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_valid;           // nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_011:sink0_valid
	wire  [232:0] nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_data;            // nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_011:sink0_data
	wire          nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_ready;           // cmd_mux_011:sink0_ready -> nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire   [26:0] nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_channel;         // nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_011:sink0_channel
	wire          nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_startofpacket;   // nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;     // nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                                                             // cmd_demux_001:src12_valid -> nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src12_data;                                                                              // cmd_demux_001:src12_data -> nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src12_ready;                                                                             // nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src12_ready
	wire   [26:0] cmd_demux_001_src12_channel;                                                                           // cmd_demux_001:src12_channel -> nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src12_startofpacket;                                                                     // cmd_demux_001:src12_startofpacket -> nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                                       // cmd_demux_001:src12_endofpacket -> nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_valid;         // nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_012:sink0_valid
	wire  [232:0] nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_data;          // nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_012:sink0_data
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_ready;         // cmd_mux_012:sink0_ready -> nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire   [26:0] nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_channel;       // nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_012:sink0_channel
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                                             // cmd_demux_001:src13_valid -> nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src13_data;                                                                              // cmd_demux_001:src13_data -> nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src13_ready;                                                                             // nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src13_ready
	wire   [26:0] cmd_demux_001_src13_channel;                                                                           // cmd_demux_001:src13_channel -> nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src13_startofpacket;                                                                     // cmd_demux_001:src13_startofpacket -> nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                                       // cmd_demux_001:src13_endofpacket -> nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_valid;         // nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_013:sink0_valid
	wire  [232:0] nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_data;          // nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_013:sink0_data
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_ready;         // cmd_mux_013:sink0_ready -> nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire   [26:0] nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_channel;       // nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_013:sink0_channel
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src14_valid;                                                                             // cmd_demux_001:src14_valid -> nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src14_data;                                                                              // cmd_demux_001:src14_data -> nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src14_ready;                                                                             // nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src14_ready
	wire   [26:0] cmd_demux_001_src14_channel;                                                                           // cmd_demux_001:src14_channel -> nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src14_startofpacket;                                                                     // cmd_demux_001:src14_startofpacket -> nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                                       // cmd_demux_001:src14_endofpacket -> nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_valid;         // nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_014:sink0_valid
	wire  [232:0] nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_data;          // nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_014:sink0_data
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_ready;         // cmd_mux_014:sink0_ready -> nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire   [26:0] nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_channel;       // nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_014:sink0_channel
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src15_valid;                                                                             // cmd_demux_001:src15_valid -> nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src15_data;                                                                              // cmd_demux_001:src15_data -> nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src15_ready;                                                                             // nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src15_ready
	wire   [26:0] cmd_demux_001_src15_channel;                                                                           // cmd_demux_001:src15_channel -> nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src15_startofpacket;                                                                     // cmd_demux_001:src15_startofpacket -> nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                                       // cmd_demux_001:src15_endofpacket -> nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_valid;         // nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_015:sink0_valid
	wire  [232:0] nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_data;          // nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_015:sink0_data
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_ready;         // cmd_mux_015:sink0_ready -> nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire   [26:0] nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_channel;       // nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_015:sink0_channel
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                                  // rsp_demux:src1_valid -> ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:in_valid
	wire  [376:0] rsp_demux_src1_data;                                                                                   // rsp_demux:src1_data -> ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                                  // ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire   [26:0] rsp_demux_src1_channel;                                                                                // rsp_demux:src1_channel -> ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                          // rsp_demux:src1_startofpacket -> ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                            // rsp_demux:src1_endofpacket -> ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:in_endofpacket
	wire          ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_valid;                                      // ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [124:0] ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_data;                                       // ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_ready;                                      // rsp_mux_001:sink0_ready -> ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:out_ready
	wire   [26:0] ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_channel;                                    // ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket;                              // ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;                                // ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                              // rsp_demux_001:src1_valid -> ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:in_valid
	wire  [376:0] rsp_demux_001_src1_data;                                                                               // rsp_demux_001:src1_data -> ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                                              // ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire   [26:0] rsp_demux_001_src1_channel;                                                                            // rsp_demux_001:src1_channel -> ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                      // rsp_demux_001:src1_startofpacket -> ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                        // rsp_demux_001:src1_endofpacket -> ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                              // rsp_demux_003:src0_valid -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_valid
	wire  [232:0] rsp_demux_003_src0_data;                                                                               // rsp_demux_003:src0_data -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                                              // from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire   [26:0] rsp_demux_003_src0_channel;                                                                            // rsp_demux_003:src0_channel -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                      // rsp_demux_003:src0_startofpacket -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                        // rsp_demux_003:src0_endofpacket -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_endofpacket
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid;          // from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink3_valid
	wire  [124:0] from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data;           // from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink3_data
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready;          // rsp_mux_001:sink3_ready -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_ready
	wire   [26:0] from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel;        // from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink3_channel
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket;  // from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;    // from_ETH_to_DDR_ETH_DMA_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                              // rsp_demux_011:src0_valid -> dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_valid
	wire  [232:0] rsp_demux_011_src0_data;                                                                               // rsp_demux_011:src0_data -> dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_011_src0_ready;                                                                              // dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_ready -> rsp_demux_011:src0_ready
	wire   [26:0] rsp_demux_011_src0_channel;                                                                            // rsp_demux_011:src0_channel -> dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                                                      // rsp_demux_011:src0_startofpacket -> dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                        // rsp_demux_011:src0_endofpacket -> dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_endofpacket
	wire          dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid;           // dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink11_valid
	wire  [124:0] dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data;            // dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink11_data
	wire          dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready;           // rsp_mux_001:sink11_ready -> dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_ready
	wire   [26:0] dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel;         // dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink11_channel
	wire          dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket;   // dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;     // dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                              // rsp_demux_012:src0_valid -> dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_valid
	wire  [232:0] rsp_demux_012_src0_data;                                                                               // rsp_demux_012:src0_data -> dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_012_src0_ready;                                                                              // dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_ready -> rsp_demux_012:src0_ready
	wire   [26:0] rsp_demux_012_src0_channel;                                                                            // rsp_demux_012:src0_channel -> dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                                      // rsp_demux_012:src0_startofpacket -> dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                        // rsp_demux_012:src0_endofpacket -> dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_endofpacket
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid;         // dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink12_valid
	wire  [124:0] dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data;          // dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink12_data
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready;         // rsp_mux_001:sink12_ready -> dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_ready
	wire   [26:0] dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel;       // dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink12_channel
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket; // dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;   // dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                              // rsp_demux_013:src0_valid -> dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_valid
	wire  [232:0] rsp_demux_013_src0_data;                                                                               // rsp_demux_013:src0_data -> dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_013_src0_ready;                                                                              // dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_ready -> rsp_demux_013:src0_ready
	wire   [26:0] rsp_demux_013_src0_channel;                                                                            // rsp_demux_013:src0_channel -> dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                                                      // rsp_demux_013:src0_startofpacket -> dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                        // rsp_demux_013:src0_endofpacket -> dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_endofpacket
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid;         // dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink13_valid
	wire  [124:0] dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data;          // dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink13_data
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready;         // rsp_mux_001:sink13_ready -> dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_ready
	wire   [26:0] dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel;       // dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink13_channel
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket; // dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;   // dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                              // rsp_demux_014:src0_valid -> dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_valid
	wire  [232:0] rsp_demux_014_src0_data;                                                                               // rsp_demux_014:src0_data -> dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_014_src0_ready;                                                                              // dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_ready -> rsp_demux_014:src0_ready
	wire   [26:0] rsp_demux_014_src0_channel;                                                                            // rsp_demux_014:src0_channel -> dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                                                      // rsp_demux_014:src0_startofpacket -> dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                        // rsp_demux_014:src0_endofpacket -> dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_endofpacket
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid;         // dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink14_valid
	wire  [124:0] dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data;          // dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink14_data
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready;         // rsp_mux_001:sink14_ready -> dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_ready
	wire   [26:0] dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel;       // dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink14_channel
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket; // dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;   // dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                              // rsp_demux_015:src0_valid -> dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_valid
	wire  [232:0] rsp_demux_015_src0_data;                                                                               // rsp_demux_015:src0_data -> dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_015_src0_ready;                                                                              // dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_ready -> rsp_demux_015:src0_ready
	wire   [26:0] rsp_demux_015_src0_channel;                                                                            // rsp_demux_015:src0_channel -> dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                                                      // rsp_demux_015:src0_startofpacket -> dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                        // rsp_demux_015:src0_endofpacket -> dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:in_endofpacket
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid;         // dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink15_valid
	wire  [124:0] dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data;          // dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink15_data
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready;         // rsp_mux_001:sink15_ready -> dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_ready
	wire   [26:0] dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel;       // dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink15_channel
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket; // dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;   // dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          cmd_demux_src1_valid;                                                                                  // cmd_demux:src1_valid -> crosser:in_valid
	wire  [376:0] cmd_demux_src1_data;                                                                                   // cmd_demux:src1_data -> crosser:in_data
	wire          cmd_demux_src1_ready;                                                                                  // crosser:in_ready -> cmd_demux:src1_ready
	wire   [26:0] cmd_demux_src1_channel;                                                                                // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                          // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                            // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                                     // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [376:0] crosser_out_data;                                                                                      // crosser:out_data -> cmd_mux_001:sink0_data
	wire          crosser_out_ready;                                                                                     // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire   [26:0] crosser_out_channel;                                                                                   // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_startofpacket;                                                                             // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                               // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                              // cmd_demux_006:src0_valid -> crosser_001:in_valid
	wire  [376:0] cmd_demux_006_src0_data;                                                                               // cmd_demux_006:src0_data -> crosser_001:in_data
	wire          cmd_demux_006_src0_ready;                                                                              // crosser_001:in_ready -> cmd_demux_006:src0_ready
	wire   [26:0] cmd_demux_006_src0_channel;                                                                            // cmd_demux_006:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_006_src0_startofpacket;                                                                      // cmd_demux_006:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                                        // cmd_demux_006:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                                 // crosser_001:out_valid -> cmd_mux_001:sink2_valid
	wire  [376:0] crosser_001_out_data;                                                                                  // crosser_001:out_data -> cmd_mux_001:sink2_data
	wire          crosser_001_out_ready;                                                                                 // cmd_mux_001:sink2_ready -> crosser_001:out_ready
	wire   [26:0] crosser_001_out_channel;                                                                               // crosser_001:out_channel -> cmd_mux_001:sink2_channel
	wire          crosser_001_out_startofpacket;                                                                         // crosser_001:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          crosser_001_out_endofpacket;                                                                           // crosser_001:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                              // cmd_demux_007:src0_valid -> crosser_002:in_valid
	wire  [376:0] cmd_demux_007_src0_data;                                                                               // cmd_demux_007:src0_data -> crosser_002:in_data
	wire          cmd_demux_007_src0_ready;                                                                              // crosser_002:in_ready -> cmd_demux_007:src0_ready
	wire   [26:0] cmd_demux_007_src0_channel;                                                                            // cmd_demux_007:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_007_src0_startofpacket;                                                                      // cmd_demux_007:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                                        // cmd_demux_007:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                                 // crosser_002:out_valid -> cmd_mux_001:sink3_valid
	wire  [376:0] crosser_002_out_data;                                                                                  // crosser_002:out_data -> cmd_mux_001:sink3_data
	wire          crosser_002_out_ready;                                                                                 // cmd_mux_001:sink3_ready -> crosser_002:out_ready
	wire   [26:0] crosser_002_out_channel;                                                                               // crosser_002:out_channel -> cmd_mux_001:sink3_channel
	wire          crosser_002_out_startofpacket;                                                                         // crosser_002:out_startofpacket -> cmd_mux_001:sink3_startofpacket
	wire          crosser_002_out_endofpacket;                                                                           // crosser_002:out_endofpacket -> cmd_mux_001:sink3_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                              // rsp_demux_001:src0_valid -> crosser_003:in_valid
	wire  [376:0] rsp_demux_001_src0_data;                                                                               // rsp_demux_001:src0_data -> crosser_003:in_data
	wire          rsp_demux_001_src0_ready;                                                                              // crosser_003:in_ready -> rsp_demux_001:src0_ready
	wire   [26:0] rsp_demux_001_src0_channel;                                                                            // rsp_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                      // rsp_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                        // rsp_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                                 // crosser_003:out_valid -> rsp_mux:sink1_valid
	wire  [376:0] crosser_003_out_data;                                                                                  // crosser_003:out_data -> rsp_mux:sink1_data
	wire          crosser_003_out_ready;                                                                                 // rsp_mux:sink1_ready -> crosser_003:out_ready
	wire   [26:0] crosser_003_out_channel;                                                                               // crosser_003:out_channel -> rsp_mux:sink1_channel
	wire          crosser_003_out_startofpacket;                                                                         // crosser_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                                                           // crosser_003:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                              // rsp_demux_001:src2_valid -> crosser_004:in_valid
	wire  [376:0] rsp_demux_001_src2_data;                                                                               // rsp_demux_001:src2_data -> crosser_004:in_data
	wire          rsp_demux_001_src2_ready;                                                                              // crosser_004:in_ready -> rsp_demux_001:src2_ready
	wire   [26:0] rsp_demux_001_src2_channel;                                                                            // rsp_demux_001:src2_channel -> crosser_004:in_channel
	wire          rsp_demux_001_src2_startofpacket;                                                                      // rsp_demux_001:src2_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                                        // rsp_demux_001:src2_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                                 // crosser_004:out_valid -> rsp_mux_006:sink0_valid
	wire  [376:0] crosser_004_out_data;                                                                                  // crosser_004:out_data -> rsp_mux_006:sink0_data
	wire          crosser_004_out_ready;                                                                                 // rsp_mux_006:sink0_ready -> crosser_004:out_ready
	wire   [26:0] crosser_004_out_channel;                                                                               // crosser_004:out_channel -> rsp_mux_006:sink0_channel
	wire          crosser_004_out_startofpacket;                                                                         // crosser_004:out_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                                           // crosser_004:out_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_001_src3_valid;                                                                              // rsp_demux_001:src3_valid -> crosser_005:in_valid
	wire  [376:0] rsp_demux_001_src3_data;                                                                               // rsp_demux_001:src3_data -> crosser_005:in_data
	wire          rsp_demux_001_src3_ready;                                                                              // crosser_005:in_ready -> rsp_demux_001:src3_ready
	wire   [26:0] rsp_demux_001_src3_channel;                                                                            // rsp_demux_001:src3_channel -> crosser_005:in_channel
	wire          rsp_demux_001_src3_startofpacket;                                                                      // rsp_demux_001:src3_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_001_src3_endofpacket;                                                                        // rsp_demux_001:src3_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                                 // crosser_005:out_valid -> rsp_mux_007:sink0_valid
	wire  [376:0] crosser_005_out_data;                                                                                  // crosser_005:out_data -> rsp_mux_007:sink0_data
	wire          crosser_005_out_ready;                                                                                 // rsp_mux_007:sink0_ready -> crosser_005:out_ready
	wire   [26:0] crosser_005_out_channel;                                                                               // crosser_005:out_channel -> rsp_mux_007:sink0_channel
	wire          crosser_005_out_startofpacket;                                                                         // crosser_005:out_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                                           // crosser_005:out_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_valid;                                    // nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:out_valid -> crosser_006:in_valid
	wire  [376:0] nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_data;                                     // nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:out_data -> crosser_006:in_data
	wire          nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_ready;                                    // crosser_006:in_ready -> nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:out_ready
	wire   [26:0] nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_channel;                                  // nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:out_channel -> crosser_006:in_channel
	wire          nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_startofpacket;                            // nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:out_startofpacket -> crosser_006:in_startofpacket
	wire          nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_endofpacket;                              // nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter:out_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                                 // crosser_006:out_valid -> cmd_mux_001:sink1_valid
	wire  [376:0] crosser_006_out_data;                                                                                  // crosser_006:out_data -> cmd_mux_001:sink1_data
	wire          crosser_006_out_ready;                                                                                 // cmd_mux_001:sink1_ready -> crosser_006:out_ready
	wire   [26:0] crosser_006_out_channel;                                                                               // crosser_006:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_006_out_startofpacket;                                                                         // crosser_006:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_006_out_endofpacket;                                                                           // crosser_006:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_valid;                                    // ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:out_valid -> crosser_007:in_valid
	wire  [124:0] ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_data;                                     // ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:out_data -> crosser_007:in_data
	wire          ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_ready;                                    // crosser_007:in_ready -> ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:out_ready
	wire   [26:0] ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_channel;                                  // ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:out_channel -> crosser_007:in_channel
	wire          ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket;                            // ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:out_startofpacket -> crosser_007:in_startofpacket
	wire          ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket;                              // ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter:out_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                                 // crosser_007:out_valid -> rsp_mux_001:sink1_valid
	wire  [124:0] crosser_007_out_data;                                                                                  // crosser_007:out_data -> rsp_mux_001:sink1_data
	wire          crosser_007_out_ready;                                                                                 // rsp_mux_001:sink1_ready -> crosser_007:out_ready
	wire   [26:0] crosser_007_out_channel;                                                                               // crosser_007:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_007_out_startofpacket;                                                                         // crosser_007:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                                                           // crosser_007:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire   [26:0] nios_cpu_data_master_limiter_cmd_valid_data;                                                           // nios_cpu_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [26:0] nios_cpu_instruction_master_limiter_cmd_valid_data;                                                    // nios_cpu_instruction_master_limiter:cmd_src_valid -> cmd_demux_005:sink_valid
	wire          ddr2_ram_avl_agent_rdata_fifo_src_valid;                                                               // ddr2_ram_avl_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] ddr2_ram_avl_agent_rdata_fifo_src_data;                                                                // ddr2_ram_avl_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          ddr2_ram_avl_agent_rdata_fifo_src_ready;                                                               // avalon_st_adapter:in_0_ready -> ddr2_ram_avl_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                                         // avalon_st_adapter:out_0_valid -> ddr2_ram_avl_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                                                          // avalon_st_adapter:out_0_data -> ddr2_ram_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                         // ddr2_ram_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                         // avalon_st_adapter:out_0_error -> ddr2_ram_avl_agent:rdata_fifo_sink_error
	wire          ddr2_ram_1_avl_agent_rdata_fifo_out_valid;                                                             // ddr2_ram_1_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [257:0] ddr2_ram_1_avl_agent_rdata_fifo_out_data;                                                              // ddr2_ram_1_avl_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          ddr2_ram_1_avl_agent_rdata_fifo_out_ready;                                                             // avalon_st_adapter_001:in_0_ready -> ddr2_ram_1_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                     // avalon_st_adapter_001:out_0_valid -> ddr2_ram_1_avl_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_001_out_0_data;                                                                      // avalon_st_adapter_001:out_0_data -> ddr2_ram_1_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                     // ddr2_ram_1_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                     // avalon_st_adapter_001:out_0_error -> ddr2_ram_1_avl_agent:rdata_fifo_sink_error
	wire          from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_valid;                                                // from_ETH_to_DDR_ETH_DMA_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_data;                                                 // from_ETH_to_DDR_ETH_DMA_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_002:in_0_ready -> from_ETH_to_DDR_ETH_DMA_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                     // avalon_st_adapter_002:out_0_valid -> from_ETH_to_DDR_ETH_DMA_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                      // avalon_st_adapter_002:out_0_data -> from_ETH_to_DDR_ETH_DMA_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                     // from_ETH_to_DDR_ETH_DMA_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                     // avalon_st_adapter_002:out_0_error -> from_ETH_to_DDR_ETH_DMA_csr_agent:rdata_fifo_sink_error
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_valid;                                   // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [129:0] from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_data;                                    // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_003:in_0_ready -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                     // avalon_st_adapter_003:out_0_valid -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_003_out_0_data;                                                                      // avalon_st_adapter_003:out_0_data -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                     // from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                     // avalon_st_adapter_003:out_0_error -> from_ETH_to_DDR_ETH_DMA_descriptor_slave_agent:rdata_fifo_sink_error
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                                     // jtag_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] jtag_avalon_jtag_slave_agent_rdata_fifo_src_data;                                                      // jtag_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                                     // avalon_st_adapter_004:in_0_ready -> jtag_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                     // avalon_st_adapter_004:out_0_valid -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                      // avalon_st_adapter_004:out_0_data -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                     // jtag_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                     // avalon_st_adapter_004:out_0_error -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          nios_cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                                   // nios_cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] nios_cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                                    // nios_cpu_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          nios_cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_005:in_0_ready -> nios_cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                     // avalon_st_adapter_005:out_0_valid -> nios_cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                                      // avalon_st_adapter_005:out_0_data -> nios_cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                     // nios_cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                     // avalon_st_adapter_005:out_0_error -> nios_cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_valid;                                                 // dma_fifo_susbystem_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_data;                                                  // dma_fifo_susbystem_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_006:in_0_ready -> dma_fifo_susbystem_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                     // avalon_st_adapter_006:out_0_valid -> dma_fifo_susbystem_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                                      // avalon_st_adapter_006:out_0_data -> dma_fifo_susbystem_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                     // dma_fifo_susbystem_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                     // avalon_st_adapter_006:out_0_error -> dma_fifo_susbystem_dma_csr_agent:rdata_fifo_sink_error
	wire          dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_valid;                                               // dma_fifo_subsystem_1_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_data;                                                // dma_fifo_subsystem_1_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_007:in_0_ready -> dma_fifo_subsystem_1_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                     // avalon_st_adapter_007:out_0_valid -> dma_fifo_subsystem_1_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                                      // avalon_st_adapter_007:out_0_data -> dma_fifo_subsystem_1_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                     // dma_fifo_subsystem_1_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                     // avalon_st_adapter_007:out_0_error -> dma_fifo_subsystem_1_dma_csr_agent:rdata_fifo_sink_error
	wire          dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_valid;                                               // dma_fifo_subsystem_2_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_data;                                                // dma_fifo_subsystem_2_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_008:in_0_ready -> dma_fifo_subsystem_2_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                     // avalon_st_adapter_008:out_0_valid -> dma_fifo_subsystem_2_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                                      // avalon_st_adapter_008:out_0_data -> dma_fifo_subsystem_2_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                     // dma_fifo_subsystem_2_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                     // avalon_st_adapter_008:out_0_error -> dma_fifo_subsystem_2_dma_csr_agent:rdata_fifo_sink_error
	wire          dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_valid;                                               // dma_fifo_subsystem_3_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_data;                                                // dma_fifo_subsystem_3_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_009:in_0_ready -> dma_fifo_subsystem_3_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                                     // avalon_st_adapter_009:out_0_valid -> dma_fifo_subsystem_3_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                                      // avalon_st_adapter_009:out_0_data -> dma_fifo_subsystem_3_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                                     // dma_fifo_subsystem_3_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                                     // avalon_st_adapter_009:out_0_error -> dma_fifo_subsystem_3_dma_csr_agent:rdata_fifo_sink_error
	wire          dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_valid;                                               // dma_fifo_subsystem_4_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_data;                                                // dma_fifo_subsystem_4_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_010:in_0_ready -> dma_fifo_subsystem_4_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                                     // avalon_st_adapter_010:out_0_valid -> dma_fifo_subsystem_4_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                                      // avalon_st_adapter_010:out_0_data -> dma_fifo_subsystem_4_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                                     // dma_fifo_subsystem_4_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                                     // avalon_st_adapter_010:out_0_error -> dma_fifo_subsystem_4_dma_csr_agent:rdata_fifo_sink_error
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_valid;                                    // dma_fifo_susbystem_dma_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [129:0] dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_data;                                     // dma_fifo_susbystem_dma_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_011:in_0_ready -> dma_fifo_susbystem_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                                     // avalon_st_adapter_011:out_0_valid -> dma_fifo_susbystem_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_011_out_0_data;                                                                      // avalon_st_adapter_011:out_0_data -> dma_fifo_susbystem_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                                     // dma_fifo_susbystem_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                                     // avalon_st_adapter_011:out_0_error -> dma_fifo_susbystem_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_valid;                                  // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire  [129:0] dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_data;                                   // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_012:in_0_ready -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                                     // avalon_st_adapter_012:out_0_valid -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_012_out_0_data;                                                                      // avalon_st_adapter_012:out_0_data -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                                     // dma_fifo_subsystem_1_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                                     // avalon_st_adapter_012:out_0_error -> dma_fifo_subsystem_1_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_valid;                                  // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire  [129:0] dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_data;                                   // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_013:in_0_ready -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                                     // avalon_st_adapter_013:out_0_valid -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_013_out_0_data;                                                                      // avalon_st_adapter_013:out_0_data -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                                     // dma_fifo_subsystem_2_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                                     // avalon_st_adapter_013:out_0_error -> dma_fifo_subsystem_2_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_valid;                                  // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire  [129:0] dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_data;                                   // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_014:in_0_ready -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                                     // avalon_st_adapter_014:out_0_valid -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_014_out_0_data;                                                                      // avalon_st_adapter_014:out_0_data -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                                     // dma_fifo_subsystem_3_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                                     // avalon_st_adapter_014:out_0_error -> dma_fifo_subsystem_3_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_valid;                                  // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire  [129:0] dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_data;                                   // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_015:in_0_ready -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                                     // avalon_st_adapter_015:out_0_valid -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_015_out_0_data;                                                                      // avalon_st_adapter_015:out_0_data -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                                     // dma_fifo_subsystem_4_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                                     // avalon_st_adapter_015:out_0_error -> dma_fifo_subsystem_4_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          system_ram_s1_agent_rdata_fifo_src_valid;                                                              // system_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] system_ram_s1_agent_rdata_fifo_src_data;                                                               // system_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          system_ram_s1_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter_016:in_0_ready -> system_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                                     // avalon_st_adapter_016:out_0_valid -> system_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                                      // avalon_st_adapter_016:out_0_data -> system_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                                     // system_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                                     // avalon_st_adapter_016:out_0_error -> system_ram_s1_agent:rdata_fifo_sink_error
	wire          ctrl_sig_s1_agent_rdata_fifo_src_valid;                                                                // ctrl_sig_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] ctrl_sig_s1_agent_rdata_fifo_src_data;                                                                 // ctrl_sig_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          ctrl_sig_s1_agent_rdata_fifo_src_ready;                                                                // avalon_st_adapter_017:in_0_ready -> ctrl_sig_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                                     // avalon_st_adapter_017:out_0_valid -> ctrl_sig_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                                      // avalon_st_adapter_017:out_0_data -> ctrl_sig_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                                     // ctrl_sig_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                                     // avalon_st_adapter_017:out_0_error -> ctrl_sig_s1_agent:rdata_fifo_sink_error
	wire          sys_timer_s1_agent_rdata_fifo_src_valid;                                                               // sys_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] sys_timer_s1_agent_rdata_fifo_src_data;                                                                // sys_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          sys_timer_s1_agent_rdata_fifo_src_ready;                                                               // avalon_st_adapter_018:in_0_ready -> sys_timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                                     // avalon_st_adapter_018:out_0_valid -> sys_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                                      // avalon_st_adapter_018:out_0_data -> sys_timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                                     // sys_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                                     // avalon_st_adapter_018:out_0_error -> sys_timer_s1_agent:rdata_fifo_sink_error
	wire          pilot_sig_s1_agent_rdata_fifo_src_valid;                                                               // pilot_sig_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] pilot_sig_s1_agent_rdata_fifo_src_data;                                                                // pilot_sig_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          pilot_sig_s1_agent_rdata_fifo_src_ready;                                                               // avalon_st_adapter_019:in_0_ready -> pilot_sig_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                                     // avalon_st_adapter_019:out_0_valid -> pilot_sig_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                                      // avalon_st_adapter_019:out_0_data -> pilot_sig_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                                     // pilot_sig_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                                     // avalon_st_adapter_019:out_0_error -> pilot_sig_s1_agent:rdata_fifo_sink_error
	wire          input_io_s1_agent_rdata_fifo_src_valid;                                                                // input_IO_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] input_io_s1_agent_rdata_fifo_src_data;                                                                 // input_IO_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          input_io_s1_agent_rdata_fifo_src_ready;                                                                // avalon_st_adapter_020:in_0_ready -> input_IO_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                                     // avalon_st_adapter_020:out_0_valid -> input_IO_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                                      // avalon_st_adapter_020:out_0_data -> input_IO_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                                     // input_IO_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                                     // avalon_st_adapter_020:out_0_error -> input_IO_s1_agent:rdata_fifo_sink_error
	wire          input_io_0_s1_agent_rdata_fifo_src_valid;                                                              // input_IO_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] input_io_0_s1_agent_rdata_fifo_src_data;                                                               // input_IO_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          input_io_0_s1_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter_021:in_0_ready -> input_IO_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                                     // avalon_st_adapter_021:out_0_valid -> input_IO_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                                      // avalon_st_adapter_021:out_0_data -> input_IO_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                                     // input_IO_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                                     // avalon_st_adapter_021:out_0_error -> input_IO_0_s1_agent:rdata_fifo_sink_error
	wire          input_io_1_s1_agent_rdata_fifo_src_valid;                                                              // input_IO_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] input_io_1_s1_agent_rdata_fifo_src_data;                                                               // input_IO_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          input_io_1_s1_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter_022:in_0_ready -> input_IO_1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                                     // avalon_st_adapter_022:out_0_valid -> input_IO_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                                      // avalon_st_adapter_022:out_0_data -> input_IO_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                                     // input_IO_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                                     // avalon_st_adapter_022:out_0_error -> input_IO_1_s1_agent:rdata_fifo_sink_error
	wire          input_io_2_s1_agent_rdata_fifo_src_valid;                                                              // input_IO_2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] input_io_2_s1_agent_rdata_fifo_src_data;                                                               // input_IO_2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          input_io_2_s1_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter_023:in_0_ready -> input_IO_2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                                     // avalon_st_adapter_023:out_0_valid -> input_IO_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                                      // avalon_st_adapter_023:out_0_data -> input_IO_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                                     // input_IO_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                                     // avalon_st_adapter_023:out_0_error -> input_IO_2_s1_agent:rdata_fifo_sink_error
	wire          input_io_3_s1_agent_rdata_fifo_src_valid;                                                              // input_IO_3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] input_io_3_s1_agent_rdata_fifo_src_data;                                                               // input_IO_3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          input_io_3_s1_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter_024:in_0_ready -> input_IO_3_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                                     // avalon_st_adapter_024:out_0_valid -> input_IO_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                                      // avalon_st_adapter_024:out_0_data -> input_IO_3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                                     // input_IO_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                                     // avalon_st_adapter_024:out_0_error -> input_IO_3_s1_agent:rdata_fifo_sink_error
	wire          input_io_4_s1_agent_rdata_fifo_src_valid;                                                              // input_IO_4_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] input_io_4_s1_agent_rdata_fifo_src_data;                                                               // input_IO_4_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          input_io_4_s1_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter_025:in_0_ready -> input_IO_4_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                                     // avalon_st_adapter_025:out_0_valid -> input_IO_4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                                      // avalon_st_adapter_025:out_0_data -> input_IO_4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                                     // input_IO_4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                                     // avalon_st_adapter_025:out_0_error -> input_IO_4_s1_agent:rdata_fifo_sink_error
	wire          input_io_5_s1_agent_rdata_fifo_src_valid;                                                              // input_IO_5_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] input_io_5_s1_agent_rdata_fifo_src_data;                                                               // input_IO_5_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          input_io_5_s1_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter_026:in_0_ready -> input_IO_5_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                                     // avalon_st_adapter_026:out_0_valid -> input_IO_5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                                      // avalon_st_adapter_026:out_0_data -> input_IO_5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                                     // input_IO_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                                     // avalon_st_adapter_026:out_0_error -> input_IO_5_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) from_eth_to_ddr_eth_dma_mm_write_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                //                       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                          //                     reset.reset
		.uav_address            (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (from_ETH_to_DDR_ETH_DMA_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (from_ETH_to_DDR_ETH_DMA_mm_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (from_ETH_to_DDR_ETH_DMA_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (from_ETH_to_DDR_ETH_DMA_mm_write_write),                                              //                          .write
		.av_writedata           (from_ETH_to_DDR_ETH_DMA_mm_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                //               (terminated)
		.av_read                (1'b0),                                                                                //               (terminated)
		.av_readdata            (),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                //               (terminated)
		.uav_clken              (),                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                               //               (terminated)
		.av_response            (),                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_cpu_data_master_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                    //                       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios_cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios_cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios_cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios_cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios_cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios_cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios_cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios_cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios_cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios_cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios_cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios_cpu_data_master_read),                                               //                          .read
		.av_readdata            (nios_cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios_cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios_cpu_data_master_write),                                              //                          .write
		.av_writedata           (nios_cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios_cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (11),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (16),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_fifo_susbystem_dma_mm_read_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                                                                                                                                                  //                       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                            //                     reset.reset
		.uav_address            (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_address),                                                                                                                                                                                           // avalon_universal_master_0.address
		.uav_burstcount         (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                        //                          .burstcount
		.uav_read               (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_read),                                                                                                                                                                                              //                          .read
		.uav_write              (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_write),                                                                                                                                                                                             //                          .write
		.uav_waitrequest        (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                       //                          .waitrequest
		.uav_readdatavalid      (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                     //                          .readdatavalid
		.uav_byteenable         (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                        //                          .byteenable
		.uav_readdata           (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                          //                          .readdata
		.uav_writedata          (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                         //                          .writedata
		.uav_lock               (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_lock),                                                                                                                                                                                              //                          .lock
		.uav_debugaccess        (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                       //                          .debugaccess
		.av_address             (dma_fifo_susbystem_dma_mm_read_address),                                                                                                                                                                                                                                //      avalon_anti_master_0.address
		.av_waitrequest         (dma_fifo_susbystem_dma_mm_read_waitrequest),                                                                                                                                                                                                                            //                          .waitrequest
		.av_burstcount          (dma_fifo_susbystem_dma_mm_read_burstcount),                                                                                                                                                                                                                             //                          .burstcount
		.av_byteenable          (dma_fifo_susbystem_dma_mm_read_byteenable),                                                                                                                                                                                                                             //                          .byteenable
		.av_read                (dma_fifo_susbystem_dma_mm_read_read),                                                                                                                                                                                                                                   //                          .read
		.av_readdata            (dma_fifo_susbystem_dma_mm_read_readdata),                                                                                                                                                                                                                               //                          .readdata
		.av_readdatavalid       (dma_fifo_susbystem_dma_mm_read_readdatavalid),                                                                                                                                                                                                                          //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (11),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (16),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_fifo_subsystem_1_dma_mm_read_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                                                                                                                                                  //                       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                            //                     reset.reset
		.uav_address            (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_address),                                                                                                                                                                                         // avalon_universal_master_0.address
		.uav_burstcount         (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                      //                          .burstcount
		.uav_read               (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_read),                                                                                                                                                                                            //                          .read
		.uav_write              (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_write),                                                                                                                                                                                           //                          .write
		.uav_waitrequest        (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                     //                          .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                   //                          .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                      //                          .byteenable
		.uav_readdata           (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                        //                          .readdata
		.uav_writedata          (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                       //                          .writedata
		.uav_lock               (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_lock),                                                                                                                                                                                            //                          .lock
		.uav_debugaccess        (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                     //                          .debugaccess
		.av_address             (dma_fifo_subsystem_1_dma_mm_read_address),                                                                                                                                                                                                                              //      avalon_anti_master_0.address
		.av_waitrequest         (dma_fifo_subsystem_1_dma_mm_read_waitrequest),                                                                                                                                                                                                                          //                          .waitrequest
		.av_burstcount          (dma_fifo_subsystem_1_dma_mm_read_burstcount),                                                                                                                                                                                                                           //                          .burstcount
		.av_byteenable          (dma_fifo_subsystem_1_dma_mm_read_byteenable),                                                                                                                                                                                                                           //                          .byteenable
		.av_read                (dma_fifo_subsystem_1_dma_mm_read_read),                                                                                                                                                                                                                                 //                          .read
		.av_readdata            (dma_fifo_subsystem_1_dma_mm_read_readdata),                                                                                                                                                                                                                             //                          .readdata
		.av_readdatavalid       (dma_fifo_subsystem_1_dma_mm_read_readdatavalid),                                                                                                                                                                                                                        //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (11),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (16),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_fifo_subsystem_2_dma_mm_read_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                                                                                                                                                  //                       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                            //                     reset.reset
		.uav_address            (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_address),                                                                                                                                                                                         // avalon_universal_master_0.address
		.uav_burstcount         (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                      //                          .burstcount
		.uav_read               (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_read),                                                                                                                                                                                            //                          .read
		.uav_write              (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_write),                                                                                                                                                                                           //                          .write
		.uav_waitrequest        (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                     //                          .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                   //                          .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                      //                          .byteenable
		.uav_readdata           (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                        //                          .readdata
		.uav_writedata          (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                       //                          .writedata
		.uav_lock               (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_lock),                                                                                                                                                                                            //                          .lock
		.uav_debugaccess        (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                     //                          .debugaccess
		.av_address             (dma_fifo_subsystem_2_dma_mm_read_address),                                                                                                                                                                                                                              //      avalon_anti_master_0.address
		.av_waitrequest         (dma_fifo_subsystem_2_dma_mm_read_waitrequest),                                                                                                                                                                                                                          //                          .waitrequest
		.av_burstcount          (dma_fifo_subsystem_2_dma_mm_read_burstcount),                                                                                                                                                                                                                           //                          .burstcount
		.av_byteenable          (dma_fifo_subsystem_2_dma_mm_read_byteenable),                                                                                                                                                                                                                           //                          .byteenable
		.av_read                (dma_fifo_subsystem_2_dma_mm_read_read),                                                                                                                                                                                                                                 //                          .read
		.av_readdata            (dma_fifo_subsystem_2_dma_mm_read_readdata),                                                                                                                                                                                                                             //                          .readdata
		.av_readdatavalid       (dma_fifo_subsystem_2_dma_mm_read_readdatavalid),                                                                                                                                                                                                                        //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_cpu_instruction_master_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                           //                       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios_cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios_cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios_cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios_cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios_cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios_cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios_cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (nios_cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios_cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                           //               (terminated)
		.av_byteenable          (4'b1111),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_write               (1'b0),                                                                           //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.av_debugaccess         (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (11),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (16),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_fifo_subsystem_4_dma_mm_read_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                                                                                                                                                  //                       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                            //                     reset.reset
		.uav_address            (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_address),                                                                                                                                                                                         // avalon_universal_master_0.address
		.uav_burstcount         (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                      //                          .burstcount
		.uav_read               (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_read),                                                                                                                                                                                            //                          .read
		.uav_write              (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_write),                                                                                                                                                                                           //                          .write
		.uav_waitrequest        (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                     //                          .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                   //                          .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                      //                          .byteenable
		.uav_readdata           (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                        //                          .readdata
		.uav_writedata          (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                       //                          .writedata
		.uav_lock               (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_lock),                                                                                                                                                                                            //                          .lock
		.uav_debugaccess        (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                     //                          .debugaccess
		.av_address             (dma_fifo_subsystem_4_dma_mm_read_address),                                                                                                                                                                                                                              //      avalon_anti_master_0.address
		.av_waitrequest         (dma_fifo_subsystem_4_dma_mm_read_waitrequest),                                                                                                                                                                                                                          //                          .waitrequest
		.av_burstcount          (dma_fifo_subsystem_4_dma_mm_read_burstcount),                                                                                                                                                                                                                           //                          .burstcount
		.av_byteenable          (dma_fifo_subsystem_4_dma_mm_read_byteenable),                                                                                                                                                                                                                           //                          .byteenable
		.av_read                (dma_fifo_subsystem_4_dma_mm_read_read),                                                                                                                                                                                                                                 //                          .read
		.av_readdata            (dma_fifo_subsystem_4_dma_mm_read_readdata),                                                                                                                                                                                                                             //                          .readdata
		.av_readdatavalid       (dma_fifo_subsystem_4_dma_mm_read_readdatavalid),                                                                                                                                                                                                                        //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (11),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (16),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_fifo_subsystem_3_dma_mm_read_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                                                                                                                                                  //                       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                            //                     reset.reset
		.uav_address            (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_address),                                                                                                                                                                                         // avalon_universal_master_0.address
		.uav_burstcount         (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                      //                          .burstcount
		.uav_read               (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_read),                                                                                                                                                                                            //                          .read
		.uav_write              (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_write),                                                                                                                                                                                           //                          .write
		.uav_waitrequest        (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                     //                          .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                   //                          .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                      //                          .byteenable
		.uav_readdata           (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                        //                          .readdata
		.uav_writedata          (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                       //                          .writedata
		.uav_lock               (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_lock),                                                                                                                                                                                            //                          .lock
		.uav_debugaccess        (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                     //                          .debugaccess
		.av_address             (dma_fifo_subsystem_3_dma_mm_read_address),                                                                                                                                                                                                                              //      avalon_anti_master_0.address
		.av_waitrequest         (dma_fifo_subsystem_3_dma_mm_read_waitrequest),                                                                                                                                                                                                                          //                          .waitrequest
		.av_burstcount          (dma_fifo_subsystem_3_dma_mm_read_burstcount),                                                                                                                                                                                                                           //                          .burstcount
		.av_byteenable          (dma_fifo_subsystem_3_dma_mm_read_byteenable),                                                                                                                                                                                                                           //                          .byteenable
		.av_read                (dma_fifo_subsystem_3_dma_mm_read_read),                                                                                                                                                                                                                                 //                          .read
		.av_readdata            (dma_fifo_subsystem_3_dma_mm_read_readdata),                                                                                                                                                                                                                             //                          .readdata
		.av_readdatavalid       (dma_fifo_subsystem_3_dma_mm_read_readdatavalid),                                                                                                                                                                                                                        //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (8),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr2_ram_avl_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                      //                      clk.clk
		.reset                  (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr2_ram_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (ddr2_ram_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (ddr2_ram_avl_agent_m0_read),                                //                         .read
		.uav_write              (ddr2_ram_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (ddr2_ram_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (ddr2_ram_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (ddr2_ram_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (ddr2_ram_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (ddr2_ram_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (ddr2_ram_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (ddr2_ram_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (ddr2_ram_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (ddr2_ram_avl_write),                                        //                         .write
		.av_read                (ddr2_ram_avl_read),                                         //                         .read
		.av_readdata            (ddr2_ram_avl_readdata),                                     //                         .readdata
		.av_writedata           (ddr2_ram_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (ddr2_ram_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (ddr2_ram_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (ddr2_ram_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (ddr2_ram_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (ddr2_ram_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (8),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr2_ram_1_avl_translator (
		.clk                    (ddr2_ram_1_afi_clk_clk),                                      //                      clk.clk
		.reset                  (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr2_ram_1_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (ddr2_ram_1_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (ddr2_ram_1_avl_agent_m0_read),                                //                         .read
		.uav_write              (ddr2_ram_1_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (ddr2_ram_1_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (ddr2_ram_1_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (ddr2_ram_1_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (ddr2_ram_1_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (ddr2_ram_1_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (ddr2_ram_1_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (ddr2_ram_1_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (ddr2_ram_1_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (ddr2_ram_1_avl_write),                                        //                         .write
		.av_read                (ddr2_ram_1_avl_read),                                         //                         .read
		.av_readdata            (ddr2_ram_1_avl_readdata),                                     //                         .readdata
		.av_writedata           (ddr2_ram_1_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (ddr2_ram_1_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (ddr2_ram_1_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (ddr2_ram_1_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (ddr2_ram_1_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (ddr2_ram_1_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                            //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) from_eth_to_ddr_eth_dma_csr_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                               //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (from_eth_to_ddr_eth_dma_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (from_eth_to_ddr_eth_dma_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (from_eth_to_ddr_eth_dma_csr_agent_m0_read),          //                         .read
		.uav_write              (from_eth_to_ddr_eth_dma_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (from_eth_to_ddr_eth_dma_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (from_eth_to_ddr_eth_dma_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (from_eth_to_ddr_eth_dma_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (from_eth_to_ddr_eth_dma_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (from_eth_to_ddr_eth_dma_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (from_eth_to_ddr_eth_dma_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (from_eth_to_ddr_eth_dma_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (from_ETH_to_DDR_ETH_DMA_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (from_ETH_to_DDR_ETH_DMA_csr_write),                  //                         .write
		.av_read                (from_ETH_to_DDR_ETH_DMA_csr_read),                   //                         .read
		.av_readdata            (from_ETH_to_DDR_ETH_DMA_csr_readdata),               //                         .readdata
		.av_writedata           (from_ETH_to_DDR_ETH_DMA_csr_writedata),              //                         .writedata
		.av_byteenable          (from_ETH_to_DDR_ETH_DMA_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) from_eth_to_ddr_eth_dma_descriptor_slave_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                  //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                            //                    reset.reset
		.uav_address            (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_address),                                                                             // avalon_universal_slave_0.address
		.uav_burstcount         (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_burstcount),                                                                          //                         .burstcount
		.uav_read               (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_read),                                                                                //                         .read
		.uav_write              (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_write),                                                                               //                         .write
		.uav_waitrequest        (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_waitrequest),                                                                         //                         .waitrequest
		.uav_readdatavalid      (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_readdatavalid),                                                                       //                         .readdatavalid
		.uav_byteenable         (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_byteenable),                                                                          //                         .byteenable
		.uav_readdata           (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_readdata),                                                                            //                         .readdata
		.uav_writedata          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_writedata),                                                                           //                         .writedata
		.uav_lock               (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_lock),                                                                                //                         .lock
		.uav_debugaccess        (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_debugaccess),                                                                         //                         .debugaccess
		.av_write               (from_ETH_to_DDR_ETH_DMA_descriptor_slave_write),                                                                                        //      avalon_anti_slave_0.write
		.av_writedata           (from_ETH_to_DDR_ETH_DMA_descriptor_slave_writedata),                                                                                    //                         .writedata
		.av_byteenable          (from_ETH_to_DDR_ETH_DMA_descriptor_slave_byteenable),                                                                                   //                         .byteenable
		.av_waitrequest         (from_ETH_to_DDR_ETH_DMA_descriptor_slave_waitrequest),                                                                                  //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_avalon_jtag_slave_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                          //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (jtag_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_cpu_debug_mem_slave_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                            //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios_cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios_cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios_cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios_cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios_cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios_cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios_cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios_cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios_cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios_cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios_cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios_cpu_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios_cpu_debug_mem_slave_write),                  //                         .write
		.av_read                (nios_cpu_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios_cpu_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios_cpu_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios_cpu_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios_cpu_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios_cpu_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_susbystem_dma_csr_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                              //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (dma_fifo_susbystem_dma_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_susbystem_dma_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_fifo_susbystem_dma_csr_agent_m0_read),          //                         .read
		.uav_write              (dma_fifo_susbystem_dma_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_fifo_susbystem_dma_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_susbystem_dma_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_fifo_susbystem_dma_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_fifo_susbystem_dma_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_fifo_susbystem_dma_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_fifo_susbystem_dma_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_fifo_susbystem_dma_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_fifo_susbystem_dma_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_fifo_susbystem_dma_csr_write),                  //                         .write
		.av_read                (dma_fifo_susbystem_dma_csr_read),                   //                         .read
		.av_readdata            (dma_fifo_susbystem_dma_csr_readdata),               //                         .readdata
		.av_writedata           (dma_fifo_susbystem_dma_csr_writedata),              //                         .writedata
		.av_byteenable          (dma_fifo_susbystem_dma_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_subsystem_1_dma_csr_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (dma_fifo_subsystem_1_dma_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_subsystem_1_dma_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_fifo_subsystem_1_dma_csr_agent_m0_read),          //                         .read
		.uav_write              (dma_fifo_subsystem_1_dma_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_fifo_subsystem_1_dma_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_1_dma_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_1_dma_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_fifo_subsystem_1_dma_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_fifo_subsystem_1_dma_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_fifo_subsystem_1_dma_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_fifo_subsystem_1_dma_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_fifo_subsystem_1_dma_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_fifo_subsystem_1_dma_csr_write),                  //                         .write
		.av_read                (dma_fifo_subsystem_1_dma_csr_read),                   //                         .read
		.av_readdata            (dma_fifo_subsystem_1_dma_csr_readdata),               //                         .readdata
		.av_writedata           (dma_fifo_subsystem_1_dma_csr_writedata),              //                         .writedata
		.av_byteenable          (dma_fifo_subsystem_1_dma_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_subsystem_2_dma_csr_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (dma_fifo_subsystem_2_dma_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_subsystem_2_dma_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_fifo_subsystem_2_dma_csr_agent_m0_read),          //                         .read
		.uav_write              (dma_fifo_subsystem_2_dma_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_fifo_subsystem_2_dma_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_2_dma_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_2_dma_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_fifo_subsystem_2_dma_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_fifo_subsystem_2_dma_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_fifo_subsystem_2_dma_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_fifo_subsystem_2_dma_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_fifo_subsystem_2_dma_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_fifo_subsystem_2_dma_csr_write),                  //                         .write
		.av_read                (dma_fifo_subsystem_2_dma_csr_read),                   //                         .read
		.av_readdata            (dma_fifo_subsystem_2_dma_csr_readdata),               //                         .readdata
		.av_writedata           (dma_fifo_subsystem_2_dma_csr_writedata),              //                         .writedata
		.av_byteenable          (dma_fifo_subsystem_2_dma_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_subsystem_3_dma_csr_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (dma_fifo_subsystem_3_dma_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_subsystem_3_dma_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_fifo_subsystem_3_dma_csr_agent_m0_read),          //                         .read
		.uav_write              (dma_fifo_subsystem_3_dma_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_fifo_subsystem_3_dma_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_3_dma_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_3_dma_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_fifo_subsystem_3_dma_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_fifo_subsystem_3_dma_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_fifo_subsystem_3_dma_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_fifo_subsystem_3_dma_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_fifo_subsystem_3_dma_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_fifo_subsystem_3_dma_csr_write),                  //                         .write
		.av_read                (dma_fifo_subsystem_3_dma_csr_read),                   //                         .read
		.av_readdata            (dma_fifo_subsystem_3_dma_csr_readdata),               //                         .readdata
		.av_writedata           (dma_fifo_subsystem_3_dma_csr_writedata),              //                         .writedata
		.av_byteenable          (dma_fifo_subsystem_3_dma_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_subsystem_4_dma_csr_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (dma_fifo_subsystem_4_dma_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_subsystem_4_dma_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_fifo_subsystem_4_dma_csr_agent_m0_read),          //                         .read
		.uav_write              (dma_fifo_subsystem_4_dma_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_fifo_subsystem_4_dma_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_4_dma_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_4_dma_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_fifo_subsystem_4_dma_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_fifo_subsystem_4_dma_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_fifo_subsystem_4_dma_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_fifo_subsystem_4_dma_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_fifo_subsystem_4_dma_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_fifo_subsystem_4_dma_csr_write),                  //                         .write
		.av_read                (dma_fifo_subsystem_4_dma_csr_read),                   //                         .read
		.av_readdata            (dma_fifo_subsystem_4_dma_csr_readdata),               //                         .readdata
		.av_writedata           (dma_fifo_subsystem_4_dma_csr_writedata),              //                         .writedata
		.av_byteenable          (dma_fifo_subsystem_4_dma_csr_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_susbystem_dma_descriptor_slave_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                  //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                            //                    reset.reset
		.uav_address            (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_address),                                                                              // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_burstcount),                                                                           //                         .burstcount
		.uav_read               (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_read),                                                                                 //                         .read
		.uav_write              (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_write),                                                                                //                         .write
		.uav_waitrequest        (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_waitrequest),                                                                          //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_readdatavalid),                                                                        //                         .readdatavalid
		.uav_byteenable         (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_byteenable),                                                                           //                         .byteenable
		.uav_readdata           (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_readdata),                                                                             //                         .readdata
		.uav_writedata          (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_writedata),                                                                            //                         .writedata
		.uav_lock               (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_lock),                                                                                 //                         .lock
		.uav_debugaccess        (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_debugaccess),                                                                          //                         .debugaccess
		.av_write               (dma_fifo_susbystem_dma_descriptor_slave_write),                                                                                         //      avalon_anti_slave_0.write
		.av_writedata           (dma_fifo_susbystem_dma_descriptor_slave_writedata),                                                                                     //                         .writedata
		.av_byteenable          (dma_fifo_susbystem_dma_descriptor_slave_byteenable),                                                                                    //                         .byteenable
		.av_waitrequest         (dma_fifo_susbystem_dma_descriptor_slave_waitrequest),                                                                                   //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_subsystem_1_dma_descriptor_slave_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                  //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                            //                    reset.reset
		.uav_address            (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_address),                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_burstcount),                                                                         //                         .burstcount
		.uav_read               (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_read),                                                                               //                         .read
		.uav_write              (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_write),                                                                              //                         .write
		.uav_waitrequest        (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_waitrequest),                                                                        //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_readdatavalid),                                                                      //                         .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_byteenable),                                                                         //                         .byteenable
		.uav_readdata           (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_readdata),                                                                           //                         .readdata
		.uav_writedata          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_writedata),                                                                          //                         .writedata
		.uav_lock               (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_lock),                                                                               //                         .lock
		.uav_debugaccess        (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_debugaccess),                                                                        //                         .debugaccess
		.av_write               (dma_fifo_subsystem_1_dma_descriptor_slave_write),                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (dma_fifo_subsystem_1_dma_descriptor_slave_writedata),                                                                                   //                         .writedata
		.av_byteenable          (dma_fifo_subsystem_1_dma_descriptor_slave_byteenable),                                                                                  //                         .byteenable
		.av_waitrequest         (dma_fifo_subsystem_1_dma_descriptor_slave_waitrequest),                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_subsystem_2_dma_descriptor_slave_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                  //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                            //                    reset.reset
		.uav_address            (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_address),                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_burstcount),                                                                         //                         .burstcount
		.uav_read               (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_read),                                                                               //                         .read
		.uav_write              (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_write),                                                                              //                         .write
		.uav_waitrequest        (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_waitrequest),                                                                        //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_readdatavalid),                                                                      //                         .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_byteenable),                                                                         //                         .byteenable
		.uav_readdata           (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_readdata),                                                                           //                         .readdata
		.uav_writedata          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_writedata),                                                                          //                         .writedata
		.uav_lock               (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_lock),                                                                               //                         .lock
		.uav_debugaccess        (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_debugaccess),                                                                        //                         .debugaccess
		.av_write               (dma_fifo_subsystem_2_dma_descriptor_slave_write),                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (dma_fifo_subsystem_2_dma_descriptor_slave_writedata),                                                                                   //                         .writedata
		.av_byteenable          (dma_fifo_subsystem_2_dma_descriptor_slave_byteenable),                                                                                  //                         .byteenable
		.av_waitrequest         (dma_fifo_subsystem_2_dma_descriptor_slave_waitrequest),                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_subsystem_3_dma_descriptor_slave_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                  //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                            //                    reset.reset
		.uav_address            (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_address),                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_burstcount),                                                                         //                         .burstcount
		.uav_read               (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_read),                                                                               //                         .read
		.uav_write              (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_write),                                                                              //                         .write
		.uav_waitrequest        (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_waitrequest),                                                                        //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_readdatavalid),                                                                      //                         .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_byteenable),                                                                         //                         .byteenable
		.uav_readdata           (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_readdata),                                                                           //                         .readdata
		.uav_writedata          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_writedata),                                                                          //                         .writedata
		.uav_lock               (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_lock),                                                                               //                         .lock
		.uav_debugaccess        (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_debugaccess),                                                                        //                         .debugaccess
		.av_write               (dma_fifo_subsystem_3_dma_descriptor_slave_write),                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (dma_fifo_subsystem_3_dma_descriptor_slave_writedata),                                                                                   //                         .writedata
		.av_byteenable          (dma_fifo_subsystem_3_dma_descriptor_slave_byteenable),                                                                                  //                         .byteenable
		.av_waitrequest         (dma_fifo_subsystem_3_dma_descriptor_slave_waitrequest),                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_subsystem_4_dma_descriptor_slave_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                                                                                                                  //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                                                                                            //                    reset.reset
		.uav_address            (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_address),                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_burstcount),                                                                         //                         .burstcount
		.uav_read               (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_read),                                                                               //                         .read
		.uav_write              (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_write),                                                                              //                         .write
		.uav_waitrequest        (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_waitrequest),                                                                        //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_readdatavalid),                                                                      //                         .readdatavalid
		.uav_byteenable         (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_byteenable),                                                                         //                         .byteenable
		.uav_readdata           (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_readdata),                                                                           //                         .readdata
		.uav_writedata          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_writedata),                                                                          //                         .writedata
		.uav_lock               (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_lock),                                                                               //                         .lock
		.uav_debugaccess        (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_debugaccess),                                                                        //                         .debugaccess
		.av_write               (dma_fifo_subsystem_4_dma_descriptor_slave_write),                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (dma_fifo_subsystem_4_dma_descriptor_slave_writedata),                                                                                   //                         .writedata
		.av_byteenable          (dma_fifo_subsystem_4_dma_descriptor_slave_byteenable),                                                                                  //                         .byteenable
		.av_waitrequest         (dma_fifo_subsystem_4_dma_descriptor_slave_waitrequest),                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) system_ram_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (system_ram_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (system_ram_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (system_ram_s1_agent_m0_read),                //                         .read
		.uav_write              (system_ram_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (system_ram_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (system_ram_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (system_ram_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (system_ram_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (system_ram_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (system_ram_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (system_ram_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (system_ram_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (system_ram_s1_write),                        //                         .write
		.av_readdata            (system_ram_s1_readdata),                     //                         .readdata
		.av_writedata           (system_ram_s1_writedata),                    //                         .writedata
		.av_byteenable          (system_ram_s1_byteenable),                   //                         .byteenable
		.av_chipselect          (system_ram_s1_chipselect),                   //                         .chipselect
		.av_clken               (system_ram_s1_clken),                        //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ctrl_sig_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ctrl_sig_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ctrl_sig_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ctrl_sig_s1_agent_m0_read),                  //                         .read
		.uav_write              (ctrl_sig_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ctrl_sig_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ctrl_sig_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ctrl_sig_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ctrl_sig_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ctrl_sig_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ctrl_sig_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ctrl_sig_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ctrl_sig_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (ctrl_sig_s1_write),                          //                         .write
		.av_readdata            (ctrl_sig_s1_readdata),                       //                         .readdata
		.av_writedata           (ctrl_sig_s1_writedata),                      //                         .writedata
		.av_chipselect          (ctrl_sig_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_timer_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_timer_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (sys_timer_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (sys_timer_s1_agent_m0_read),                 //                         .read
		.uav_write              (sys_timer_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (sys_timer_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (sys_timer_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (sys_timer_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (sys_timer_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (sys_timer_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (sys_timer_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (sys_timer_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (sys_timer_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (sys_timer_s1_write),                         //                         .write
		.av_readdata            (sys_timer_s1_readdata),                      //                         .readdata
		.av_writedata           (sys_timer_s1_writedata),                     //                         .writedata
		.av_chipselect          (sys_timer_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pilot_sig_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pilot_sig_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (pilot_sig_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (pilot_sig_s1_agent_m0_read),                 //                         .read
		.uav_write              (pilot_sig_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (pilot_sig_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (pilot_sig_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (pilot_sig_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (pilot_sig_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (pilot_sig_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (pilot_sig_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (pilot_sig_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (pilot_sig_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (pilot_sig_s1_write),                         //                         .write
		.av_readdata            (pilot_sig_s1_readdata),                      //                         .readdata
		.av_writedata           (pilot_sig_s1_writedata),                     //                         .writedata
		.av_chipselect          (pilot_sig_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) input_io_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (input_io_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (input_io_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (input_io_s1_agent_m0_read),                  //                         .read
		.uav_write              (input_io_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (input_io_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (input_io_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (input_io_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (input_io_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (input_io_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (input_io_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (input_io_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (input_IO_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (input_IO_s1_write),                          //                         .write
		.av_readdata            (input_IO_s1_readdata),                       //                         .readdata
		.av_writedata           (input_IO_s1_writedata),                      //                         .writedata
		.av_chipselect          (input_IO_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) input_io_0_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (input_io_0_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (input_io_0_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (input_io_0_s1_agent_m0_read),                //                         .read
		.uav_write              (input_io_0_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (input_io_0_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (input_io_0_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (input_io_0_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (input_io_0_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (input_io_0_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (input_io_0_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (input_io_0_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (input_IO_0_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (input_IO_0_s1_write),                        //                         .write
		.av_readdata            (input_IO_0_s1_readdata),                     //                         .readdata
		.av_writedata           (input_IO_0_s1_writedata),                    //                         .writedata
		.av_chipselect          (input_IO_0_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) input_io_1_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (input_io_1_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (input_io_1_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (input_io_1_s1_agent_m0_read),                //                         .read
		.uav_write              (input_io_1_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (input_io_1_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (input_io_1_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (input_io_1_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (input_io_1_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (input_io_1_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (input_io_1_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (input_io_1_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (input_IO_1_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (input_IO_1_s1_write),                        //                         .write
		.av_readdata            (input_IO_1_s1_readdata),                     //                         .readdata
		.av_writedata           (input_IO_1_s1_writedata),                    //                         .writedata
		.av_chipselect          (input_IO_1_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) input_io_2_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (input_io_2_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (input_io_2_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (input_io_2_s1_agent_m0_read),                //                         .read
		.uav_write              (input_io_2_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (input_io_2_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (input_io_2_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (input_io_2_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (input_io_2_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (input_io_2_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (input_io_2_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (input_io_2_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (input_IO_2_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (input_IO_2_s1_write),                        //                         .write
		.av_readdata            (input_IO_2_s1_readdata),                     //                         .readdata
		.av_writedata           (input_IO_2_s1_writedata),                    //                         .writedata
		.av_chipselect          (input_IO_2_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) input_io_3_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (input_io_3_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (input_io_3_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (input_io_3_s1_agent_m0_read),                //                         .read
		.uav_write              (input_io_3_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (input_io_3_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (input_io_3_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (input_io_3_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (input_io_3_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (input_io_3_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (input_io_3_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (input_io_3_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (input_IO_3_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (input_IO_3_s1_write),                        //                         .write
		.av_readdata            (input_IO_3_s1_readdata),                     //                         .readdata
		.av_writedata           (input_IO_3_s1_writedata),                    //                         .writedata
		.av_chipselect          (input_IO_3_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) input_io_4_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (input_io_4_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (input_io_4_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (input_io_4_s1_agent_m0_read),                //                         .read
		.uav_write              (input_io_4_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (input_io_4_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (input_io_4_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (input_io_4_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (input_io_4_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (input_io_4_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (input_io_4_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (input_io_4_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (input_IO_4_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (input_IO_4_s1_write),                        //                         .write
		.av_readdata            (input_IO_4_s1_readdata),                     //                         .readdata
		.av_writedata           (input_IO_4_s1_writedata),                    //                         .writedata
		.av_chipselect          (input_IO_4_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) input_io_5_s1_translator (
		.clk                    (ddr2_ram_afi_clk_clk),                       //                      clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (input_io_5_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (input_io_5_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (input_io_5_s1_agent_m0_read),                //                         .read
		.uav_write              (input_io_5_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (input_io_5_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (input_io_5_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (input_io_5_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (input_io_5_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (input_io_5_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (input_io_5_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (input_io_5_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (input_IO_5_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (input_IO_5_s1_write),                        //                         .write
		.av_readdata            (input_IO_5_s1_readdata),                     //                         .readdata
		.av_writedata           (input_IO_5_s1_writedata),                    //                         .writedata
		.av_chipselect          (input_IO_5_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (376),
		.PKT_ORI_BURST_SIZE_L      (374),
		.PKT_RESPONSE_STATUS_H     (373),
		.PKT_RESPONSE_STATUS_L     (372),
		.PKT_QOS_H                 (353),
		.PKT_QOS_L                 (353),
		.PKT_DATA_SIDEBAND_H       (351),
		.PKT_DATA_SIDEBAND_L       (351),
		.PKT_ADDR_SIDEBAND_H       (350),
		.PKT_ADDR_SIDEBAND_L       (350),
		.PKT_BURST_TYPE_H          (349),
		.PKT_BURST_TYPE_L          (348),
		.PKT_CACHE_H               (371),
		.PKT_CACHE_L               (368),
		.PKT_THREAD_ID_H           (364),
		.PKT_THREAD_ID_L           (364),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (352),
		.PKT_PROTECTION_H          (367),
		.PKT_PROTECTION_L          (365),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (354),
		.PKT_DEST_ID_H             (363),
		.PKT_DEST_ID_L             (359),
		.ST_DATA_W                 (377),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) from_eth_to_ddr_eth_dma_mm_write_agent (
		.clk                   (ddr2_ram_afi_clk_clk),                                                                //       clk.clk
		.reset                 (nios_cpu_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (from_eth_to_ddr_eth_dma_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (from_eth_to_ddr_eth_dma_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (from_eth_to_ddr_eth_dma_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (from_eth_to_ddr_eth_dma_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (from_eth_to_ddr_eth_dma_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (from_eth_to_ddr_eth_dma_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                   //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                    //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                             //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                   //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_QOS_H                 (101),
		.PKT_QOS_L                 (101),
		.PKT_DATA_SIDEBAND_H       (99),
		.PKT_DATA_SIDEBAND_L       (99),
		.PKT_ADDR_SIDEBAND_H       (98),
		.PKT_ADDR_SIDEBAND_L       (98),
		.PKT_BURST_TYPE_H          (97),
		.PKT_BURST_TYPE_L          (96),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (112),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (6),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_cpu_data_master_agent (
		.clk                   (ddr2_ram_afi_clk_clk),                                                    //       clk.clk
		.reset                 (nios_cpu_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios_cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios_cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios_cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios_cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios_cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios_cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios_cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios_cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios_cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios_cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios_cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios_cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios_cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios_cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios_cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios_cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios_cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios_cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios_cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (376),
		.PKT_ORI_BURST_SIZE_L      (374),
		.PKT_RESPONSE_STATUS_H     (373),
		.PKT_RESPONSE_STATUS_L     (372),
		.PKT_QOS_H                 (353),
		.PKT_QOS_L                 (353),
		.PKT_DATA_SIDEBAND_H       (351),
		.PKT_DATA_SIDEBAND_L       (351),
		.PKT_ADDR_SIDEBAND_H       (350),
		.PKT_ADDR_SIDEBAND_L       (350),
		.PKT_BURST_TYPE_H          (349),
		.PKT_BURST_TYPE_L          (348),
		.PKT_CACHE_H               (371),
		.PKT_CACHE_L               (368),
		.PKT_THREAD_ID_H           (364),
		.PKT_THREAD_ID_L           (364),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (352),
		.PKT_PROTECTION_H          (367),
		.PKT_PROTECTION_L          (365),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (354),
		.PKT_DEST_ID_H             (363),
		.PKT_DEST_ID_L             (359),
		.ST_DATA_W                 (377),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (16),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_fifo_susbystem_dma_mm_read_agent (
		.clk                   (ddr2_ram_afi_clk_clk),                                                              //       clk.clk
		.reset                 (nios_cpu_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.av_address            (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_fifo_susbystem_dma_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_fifo_susbystem_dma_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_fifo_susbystem_dma_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_fifo_susbystem_dma_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_fifo_susbystem_dma_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_fifo_susbystem_dma_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                             //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (376),
		.PKT_ORI_BURST_SIZE_L      (374),
		.PKT_RESPONSE_STATUS_H     (373),
		.PKT_RESPONSE_STATUS_L     (372),
		.PKT_QOS_H                 (353),
		.PKT_QOS_L                 (353),
		.PKT_DATA_SIDEBAND_H       (351),
		.PKT_DATA_SIDEBAND_L       (351),
		.PKT_ADDR_SIDEBAND_H       (350),
		.PKT_ADDR_SIDEBAND_L       (350),
		.PKT_BURST_TYPE_H          (349),
		.PKT_BURST_TYPE_L          (348),
		.PKT_CACHE_H               (371),
		.PKT_CACHE_L               (368),
		.PKT_THREAD_ID_H           (364),
		.PKT_THREAD_ID_L           (364),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (352),
		.PKT_PROTECTION_H          (367),
		.PKT_PROTECTION_L          (365),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (354),
		.PKT_DEST_ID_H             (363),
		.PKT_DEST_ID_L             (359),
		.ST_DATA_W                 (377),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (16),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_fifo_subsystem_1_dma_mm_read_agent (
		.clk                   (ddr2_ram_afi_clk_clk),                                                                //       clk.clk
		.reset                 (nios_cpu_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_fifo_subsystem_1_dma_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_fifo_subsystem_1_dma_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_fifo_subsystem_1_dma_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_fifo_subsystem_1_dma_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_fifo_subsystem_1_dma_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_fifo_subsystem_1_dma_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                               //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                                //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                             //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                         //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                               //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (376),
		.PKT_ORI_BURST_SIZE_L      (374),
		.PKT_RESPONSE_STATUS_H     (373),
		.PKT_RESPONSE_STATUS_L     (372),
		.PKT_QOS_H                 (353),
		.PKT_QOS_L                 (353),
		.PKT_DATA_SIDEBAND_H       (351),
		.PKT_DATA_SIDEBAND_L       (351),
		.PKT_ADDR_SIDEBAND_H       (350),
		.PKT_ADDR_SIDEBAND_L       (350),
		.PKT_BURST_TYPE_H          (349),
		.PKT_BURST_TYPE_L          (348),
		.PKT_CACHE_H               (371),
		.PKT_CACHE_L               (368),
		.PKT_THREAD_ID_H           (364),
		.PKT_THREAD_ID_L           (364),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (352),
		.PKT_PROTECTION_H          (367),
		.PKT_PROTECTION_L          (365),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (354),
		.PKT_DEST_ID_H             (363),
		.PKT_DEST_ID_L             (359),
		.ST_DATA_W                 (377),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (16),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_fifo_subsystem_2_dma_mm_read_agent (
		.clk                   (ddr2_ram_afi_clk_clk),                                                                //       clk.clk
		.reset                 (nios_cpu_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_fifo_subsystem_2_dma_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_fifo_subsystem_2_dma_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_fifo_subsystem_2_dma_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_fifo_subsystem_2_dma_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_fifo_subsystem_2_dma_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_fifo_subsystem_2_dma_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                               //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                                //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                             //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                         //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                               //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_QOS_H                 (101),
		.PKT_QOS_L                 (101),
		.PKT_DATA_SIDEBAND_H       (99),
		.PKT_DATA_SIDEBAND_L       (99),
		.PKT_ADDR_SIDEBAND_H       (98),
		.PKT_ADDR_SIDEBAND_L       (98),
		.PKT_BURST_TYPE_H          (97),
		.PKT_BURST_TYPE_L          (96),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (112),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (7),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_cpu_instruction_master_agent (
		.clk                   (ddr2_ram_afi_clk_clk),                                                           //       clk.clk
		.reset                 (nios_cpu_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios_cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios_cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios_cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios_cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios_cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios_cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios_cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios_cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios_cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios_cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios_cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios_cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios_cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios_cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios_cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (376),
		.PKT_ORI_BURST_SIZE_L      (374),
		.PKT_RESPONSE_STATUS_H     (373),
		.PKT_RESPONSE_STATUS_L     (372),
		.PKT_QOS_H                 (353),
		.PKT_QOS_L                 (353),
		.PKT_DATA_SIDEBAND_H       (351),
		.PKT_DATA_SIDEBAND_L       (351),
		.PKT_ADDR_SIDEBAND_H       (350),
		.PKT_ADDR_SIDEBAND_L       (350),
		.PKT_BURST_TYPE_H          (349),
		.PKT_BURST_TYPE_L          (348),
		.PKT_CACHE_H               (371),
		.PKT_CACHE_L               (368),
		.PKT_THREAD_ID_H           (364),
		.PKT_THREAD_ID_L           (364),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (352),
		.PKT_PROTECTION_H          (367),
		.PKT_PROTECTION_L          (365),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (354),
		.PKT_DEST_ID_H             (363),
		.PKT_DEST_ID_L             (359),
		.ST_DATA_W                 (377),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (16),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_fifo_subsystem_4_dma_mm_read_agent (
		.clk                   (ddr2_ram_afi_clk_clk),                                                                //       clk.clk
		.reset                 (nios_cpu_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_fifo_subsystem_4_dma_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_fifo_subsystem_4_dma_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_fifo_subsystem_4_dma_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_fifo_subsystem_4_dma_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_fifo_subsystem_4_dma_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_fifo_subsystem_4_dma_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                               //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                                //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                             //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                         //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                               //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (376),
		.PKT_ORI_BURST_SIZE_L      (374),
		.PKT_RESPONSE_STATUS_H     (373),
		.PKT_RESPONSE_STATUS_L     (372),
		.PKT_QOS_H                 (353),
		.PKT_QOS_L                 (353),
		.PKT_DATA_SIDEBAND_H       (351),
		.PKT_DATA_SIDEBAND_L       (351),
		.PKT_ADDR_SIDEBAND_H       (350),
		.PKT_ADDR_SIDEBAND_L       (350),
		.PKT_BURST_TYPE_H          (349),
		.PKT_BURST_TYPE_L          (348),
		.PKT_CACHE_H               (371),
		.PKT_CACHE_L               (368),
		.PKT_THREAD_ID_H           (364),
		.PKT_THREAD_ID_L           (364),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (352),
		.PKT_PROTECTION_H          (367),
		.PKT_PROTECTION_L          (365),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (354),
		.PKT_DEST_ID_H             (363),
		.PKT_DEST_ID_L             (359),
		.ST_DATA_W                 (377),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (16),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_fifo_subsystem_3_dma_mm_read_agent (
		.clk                   (ddr2_ram_afi_clk_clk),                                                                //       clk.clk
		.reset                 (nios_cpu_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_fifo_subsystem_3_dma_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_fifo_subsystem_3_dma_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_fifo_subsystem_3_dma_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_fifo_subsystem_3_dma_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_fifo_subsystem_3_dma_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_fifo_subsystem_3_dma_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                               //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                                //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                                             //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                                         //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                               //          .ready
		.av_response           (),                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (376),
		.PKT_ORI_BURST_SIZE_L      (374),
		.PKT_RESPONSE_STATUS_H     (373),
		.PKT_RESPONSE_STATUS_L     (372),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (352),
		.PKT_PROTECTION_H          (367),
		.PKT_PROTECTION_L          (365),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (354),
		.PKT_DEST_ID_H             (363),
		.PKT_DEST_ID_L             (359),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (377),
		.AVS_BURSTCOUNT_W          (8),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr2_ram_avl_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                      //             clk.clk
		.reset                   (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr2_ram_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (ddr2_ram_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (ddr2_ram_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (ddr2_ram_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (ddr2_ram_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (ddr2_ram_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (ddr2_ram_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (ddr2_ram_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (ddr2_ram_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (ddr2_ram_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (ddr2_ram_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (ddr2_ram_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (ddr2_ram_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (ddr2_ram_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (ddr2_ram_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (ddr2_ram_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (ddr2_ram_avl_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (ddr2_ram_avl_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (ddr2_ram_avl_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (ddr2_ram_avl_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (ddr2_ram_avl_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (ddr2_ram_avl_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (ddr2_ram_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (ddr2_ram_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (ddr2_ram_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (ddr2_ram_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (ddr2_ram_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (ddr2_ram_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (ddr2_ram_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (ddr2_ram_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (ddr2_ram_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (ddr2_ram_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (ddr2_ram_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr2_ram_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (ddr2_ram_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (378),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr2_ram_avl_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                      //       clk.clk
		.reset             (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr2_ram_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (ddr2_ram_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (ddr2_ram_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (ddr2_ram_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (ddr2_ram_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (ddr2_ram_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (ddr2_ram_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (ddr2_ram_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (ddr2_ram_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (ddr2_ram_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (376),
		.PKT_ORI_BURST_SIZE_L      (374),
		.PKT_RESPONSE_STATUS_H     (373),
		.PKT_RESPONSE_STATUS_L     (372),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (352),
		.PKT_PROTECTION_H          (367),
		.PKT_PROTECTION_L          (365),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (354),
		.PKT_DEST_ID_H             (363),
		.PKT_DEST_ID_L             (359),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (377),
		.AVS_BURSTCOUNT_W          (8),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr2_ram_1_avl_agent (
		.clk                     (ddr2_ram_1_afi_clk_clk),                                      //             clk.clk
		.reset                   (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr2_ram_1_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (ddr2_ram_1_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (ddr2_ram_1_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (ddr2_ram_1_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (ddr2_ram_1_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (ddr2_ram_1_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (ddr2_ram_1_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (ddr2_ram_1_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (ddr2_ram_1_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (ddr2_ram_1_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (ddr2_ram_1_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (ddr2_ram_1_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (ddr2_ram_1_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (ddr2_ram_1_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (ddr2_ram_1_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (ddr2_ram_1_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (ddr2_ram_1_avl_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (ddr2_ram_1_avl_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (ddr2_ram_1_avl_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (ddr2_ram_1_avl_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (ddr2_ram_1_avl_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (ddr2_ram_1_avl_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (ddr2_ram_1_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (ddr2_ram_1_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (ddr2_ram_1_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (ddr2_ram_1_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (ddr2_ram_1_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (ddr2_ram_1_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (ddr2_ram_1_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (ddr2_ram_1_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (ddr2_ram_1_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (ddr2_ram_1_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (ddr2_ram_1_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr2_ram_1_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (ddr2_ram_1_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (378),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr2_ram_1_avl_agent_rsp_fifo (
		.clk               (ddr2_ram_1_afi_clk_clk),                                      //       clk.clk
		.reset             (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr2_ram_1_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (ddr2_ram_1_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (ddr2_ram_1_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (ddr2_ram_1_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (ddr2_ram_1_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (ddr2_ram_1_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (ddr2_ram_1_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (ddr2_ram_1_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (ddr2_ram_1_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (ddr2_ram_1_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr2_ram_1_avl_agent_rdata_fifo (
		.clk               (ddr2_ram_1_afi_clk_clk),                                      //       clk.clk
		.reset             (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr2_ram_1_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (ddr2_ram_1_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (ddr2_ram_1_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (ddr2_ram_1_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (ddr2_ram_1_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (ddr2_ram_1_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) from_eth_to_ddr_eth_dma_csr_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                         //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (from_eth_to_ddr_eth_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (from_eth_to_ddr_eth_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (from_eth_to_ddr_eth_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (from_eth_to_ddr_eth_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (from_eth_to_ddr_eth_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (from_eth_to_ddr_eth_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (from_eth_to_ddr_eth_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (from_eth_to_ddr_eth_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (from_eth_to_ddr_eth_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (from_eth_to_ddr_eth_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (from_eth_to_ddr_eth_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (from_eth_to_ddr_eth_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (from_eth_to_ddr_eth_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (from_eth_to_ddr_eth_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (from_eth_to_ddr_eth_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (from_eth_to_ddr_eth_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                      //                .channel
		.rf_sink_ready           (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (from_eth_to_ddr_eth_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (from_eth_to_ddr_eth_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (from_eth_to_ddr_eth_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (from_eth_to_ddr_eth_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (from_eth_to_ddr_eth_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                         //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (from_eth_to_ddr_eth_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (from_eth_to_ddr_eth_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (from_eth_to_ddr_eth_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (from_eth_to_ddr_eth_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (from_eth_to_ddr_eth_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (from_eth_to_ddr_eth_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_BURST_SIZE_H          (203),
		.PKT_BURST_SIZE_L          (201),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (208),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURSTWRAP_H           (200),
		.PKT_BURSTWRAP_L           (198),
		.PKT_BYTE_CNT_H            (197),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (210),
		.PKT_DEST_ID_H             (219),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (233),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) from_eth_to_ddr_eth_dma_descriptor_slave_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                                      //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (from_eth_to_ddr_eth_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                                   //                .channel
		.rf_sink_ready           (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (234),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                                      //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_avalon_jtag_slave_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                    //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (jtag_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                 //                .channel
		.rf_sink_ready           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                    //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_cpu_debug_mem_slave_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                      //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios_cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                   //                .channel
		.rf_sink_ready           (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                      //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios_cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios_cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_susbystem_dma_csr_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                        //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (dma_fifo_susbystem_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_susbystem_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_susbystem_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_susbystem_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_susbystem_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_susbystem_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_susbystem_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_susbystem_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_susbystem_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_susbystem_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_susbystem_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_susbystem_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_susbystem_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_susbystem_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_susbystem_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_susbystem_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                     //                .channel
		.rf_sink_ready           (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_susbystem_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_susbystem_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_susbystem_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_susbystem_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_susbystem_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_susbystem_dma_csr_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                        //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (dma_fifo_susbystem_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_susbystem_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_susbystem_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_susbystem_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_susbystem_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_susbystem_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_subsystem_1_dma_csr_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                          //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (dma_fifo_subsystem_1_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_subsystem_1_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_subsystem_1_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_subsystem_1_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_subsystem_1_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_subsystem_1_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_subsystem_1_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_subsystem_1_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_subsystem_1_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_subsystem_1_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_subsystem_1_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_subsystem_1_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_subsystem_1_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_subsystem_1_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_subsystem_1_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_subsystem_1_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                       //                .channel
		.rf_sink_ready           (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_subsystem_1_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_subsystem_1_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_subsystem_1_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_subsystem_1_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_subsystem_1_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                          //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (dma_fifo_subsystem_1_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_subsystem_1_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_subsystem_1_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_subsystem_1_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_subsystem_1_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_subsystem_1_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_subsystem_2_dma_csr_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                          //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (dma_fifo_subsystem_2_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_subsystem_2_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_subsystem_2_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_subsystem_2_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_subsystem_2_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_subsystem_2_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_subsystem_2_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_subsystem_2_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_subsystem_2_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_subsystem_2_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_subsystem_2_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_subsystem_2_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_subsystem_2_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_subsystem_2_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_subsystem_2_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_subsystem_2_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                       //                .channel
		.rf_sink_ready           (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_subsystem_2_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_subsystem_2_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_subsystem_2_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_subsystem_2_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_subsystem_2_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                          //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (dma_fifo_subsystem_2_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_subsystem_2_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_subsystem_2_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_subsystem_2_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_subsystem_2_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_subsystem_2_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_subsystem_3_dma_csr_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                          //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (dma_fifo_subsystem_3_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_subsystem_3_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_subsystem_3_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_subsystem_3_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_subsystem_3_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_subsystem_3_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_subsystem_3_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_subsystem_3_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_subsystem_3_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_subsystem_3_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_subsystem_3_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_subsystem_3_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_subsystem_3_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_subsystem_3_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_subsystem_3_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_subsystem_3_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                       //                .channel
		.rf_sink_ready           (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_subsystem_3_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_subsystem_3_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_subsystem_3_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_subsystem_3_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_subsystem_3_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                          //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (dma_fifo_subsystem_3_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_subsystem_3_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_subsystem_3_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_subsystem_3_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_subsystem_3_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_subsystem_3_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_subsystem_4_dma_csr_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                          //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (dma_fifo_subsystem_4_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_subsystem_4_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_subsystem_4_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_subsystem_4_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_subsystem_4_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_subsystem_4_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_subsystem_4_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_subsystem_4_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_subsystem_4_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_subsystem_4_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_subsystem_4_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_subsystem_4_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_subsystem_4_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_subsystem_4_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_subsystem_4_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_subsystem_4_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                       //                .channel
		.rf_sink_ready           (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_subsystem_4_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_subsystem_4_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_subsystem_4_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_subsystem_4_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_subsystem_4_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                          //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (dma_fifo_subsystem_4_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_subsystem_4_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_subsystem_4_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_subsystem_4_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_subsystem_4_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_subsystem_4_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_BURST_SIZE_H          (203),
		.PKT_BURST_SIZE_L          (201),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (208),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURSTWRAP_H           (200),
		.PKT_BURSTWRAP_L           (198),
		.PKT_BYTE_CNT_H            (197),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (210),
		.PKT_DEST_ID_H             (219),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (233),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_susbystem_dma_descriptor_slave_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                                     //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                               //       clk_reset.reset
		.m0_address              (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_susbystem_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                                    //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                                  //                .channel
		.rf_sink_ready           (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (234),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                                     //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_data           (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_susbystem_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_susbystem_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_BURST_SIZE_H          (203),
		.PKT_BURST_SIZE_L          (201),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (208),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURSTWRAP_H           (200),
		.PKT_BURSTWRAP_L           (198),
		.PKT_BYTE_CNT_H            (197),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (210),
		.PKT_DEST_ID_H             (219),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (233),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_subsystem_1_dma_descriptor_slave_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                                       //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                                 //       clk_reset.reset
		.m0_address              (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_subsystem_1_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                                      //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                                    //                .channel
		.rf_sink_ready           (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (234),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                                       //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_BURST_SIZE_H          (203),
		.PKT_BURST_SIZE_L          (201),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (208),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURSTWRAP_H           (200),
		.PKT_BURSTWRAP_L           (198),
		.PKT_BYTE_CNT_H            (197),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (210),
		.PKT_DEST_ID_H             (219),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (233),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_subsystem_2_dma_descriptor_slave_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                                       //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                                 //       clk_reset.reset
		.m0_address              (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_subsystem_2_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                                      //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                                    //                .channel
		.rf_sink_ready           (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (234),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                                       //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_BURST_SIZE_H          (203),
		.PKT_BURST_SIZE_L          (201),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (208),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURSTWRAP_H           (200),
		.PKT_BURSTWRAP_L           (198),
		.PKT_BYTE_CNT_H            (197),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (210),
		.PKT_DEST_ID_H             (219),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (233),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_subsystem_3_dma_descriptor_slave_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                                       //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                                 //       clk_reset.reset
		.m0_address              (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_subsystem_3_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                                      //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                                                    //                .channel
		.rf_sink_ready           (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (234),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                                       //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_BURST_SIZE_H          (203),
		.PKT_BURST_SIZE_L          (201),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (208),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURSTWRAP_H           (200),
		.PKT_BURSTWRAP_L           (198),
		.PKT_BYTE_CNT_H            (197),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (210),
		.PKT_DEST_ID_H             (219),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (233),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_subsystem_4_dma_descriptor_slave_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                                                       //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),                                 //       clk_reset.reset
		.m0_address              (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (dma_fifo_subsystem_4_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                                      //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                                                    //                .channel
		.rf_sink_ready           (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (234),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                                                       //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) system_ram_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                           //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (system_ram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (system_ram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (system_ram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (system_ram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (system_ram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (system_ram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (system_ram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (system_ram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (system_ram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (system_ram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (system_ram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (system_ram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (system_ram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (system_ram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (system_ram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (system_ram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_016_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                        //                .channel
		.rf_sink_ready           (system_ram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (system_ram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (system_ram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (system_ram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (system_ram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (system_ram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (system_ram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (system_ram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (system_ram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (system_ram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),              //                .error
		.rdata_fifo_src_ready    (system_ram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_ram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (system_ram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_ram_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                           //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (system_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (system_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (system_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (system_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (system_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (system_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (system_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (system_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (system_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (system_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ctrl_sig_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                         //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (ctrl_sig_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ctrl_sig_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ctrl_sig_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ctrl_sig_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ctrl_sig_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ctrl_sig_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ctrl_sig_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ctrl_sig_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ctrl_sig_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ctrl_sig_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ctrl_sig_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ctrl_sig_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ctrl_sig_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ctrl_sig_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ctrl_sig_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ctrl_sig_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_017_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                      //                .channel
		.rf_sink_ready           (ctrl_sig_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ctrl_sig_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ctrl_sig_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ctrl_sig_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ctrl_sig_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ctrl_sig_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ctrl_sig_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ctrl_sig_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ctrl_sig_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ctrl_sig_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),            //                .error
		.rdata_fifo_src_ready    (ctrl_sig_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ctrl_sig_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ctrl_sig_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ctrl_sig_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                         //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ctrl_sig_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ctrl_sig_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ctrl_sig_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ctrl_sig_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ctrl_sig_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ctrl_sig_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ctrl_sig_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ctrl_sig_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ctrl_sig_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ctrl_sig_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_timer_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                          //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sys_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_018_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                       //                .channel
		.rf_sink_ready           (sys_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sys_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_timer_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                          //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sys_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sys_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pilot_sig_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                          //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pilot_sig_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pilot_sig_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pilot_sig_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pilot_sig_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pilot_sig_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pilot_sig_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pilot_sig_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pilot_sig_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pilot_sig_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pilot_sig_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pilot_sig_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pilot_sig_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pilot_sig_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pilot_sig_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pilot_sig_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pilot_sig_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_019_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                       //                .channel
		.rf_sink_ready           (pilot_sig_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pilot_sig_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pilot_sig_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pilot_sig_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pilot_sig_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pilot_sig_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pilot_sig_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pilot_sig_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pilot_sig_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pilot_sig_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),             //                .error
		.rdata_fifo_src_ready    (pilot_sig_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pilot_sig_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pilot_sig_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pilot_sig_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                          //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (pilot_sig_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pilot_sig_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pilot_sig_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pilot_sig_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pilot_sig_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pilot_sig_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pilot_sig_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pilot_sig_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pilot_sig_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pilot_sig_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) input_io_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                         //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (input_io_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (input_io_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (input_io_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (input_io_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (input_io_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (input_io_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (input_io_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (input_io_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (input_io_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (input_io_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (input_io_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (input_io_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (input_io_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (input_io_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (input_io_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (input_io_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_020_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                      //                .channel
		.rf_sink_ready           (input_io_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (input_io_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (input_io_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (input_io_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (input_io_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (input_io_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (input_io_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (input_io_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (input_io_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (input_io_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),            //                .error
		.rdata_fifo_src_ready    (input_io_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (input_io_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (input_io_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_io_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                         //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (input_io_s1_agent_rf_source_data),             //        in.data
		.in_valid          (input_io_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (input_io_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (input_io_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (input_io_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (input_io_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (input_io_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (input_io_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (input_io_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (input_io_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) input_io_0_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                           //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (input_io_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (input_io_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (input_io_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (input_io_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (input_io_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (input_io_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (input_io_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (input_io_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (input_io_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (input_io_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (input_io_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (input_io_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (input_io_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (input_io_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (input_io_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (input_io_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_021_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                        //                .channel
		.rf_sink_ready           (input_io_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (input_io_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (input_io_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (input_io_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (input_io_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (input_io_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (input_io_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (input_io_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (input_io_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (input_io_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),              //                .error
		.rdata_fifo_src_ready    (input_io_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (input_io_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (input_io_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_io_0_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                           //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (input_io_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (input_io_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (input_io_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (input_io_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (input_io_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (input_io_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (input_io_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (input_io_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (input_io_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (input_io_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) input_io_1_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                           //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (input_io_1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (input_io_1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (input_io_1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (input_io_1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (input_io_1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (input_io_1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (input_io_1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (input_io_1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (input_io_1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (input_io_1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (input_io_1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (input_io_1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (input_io_1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (input_io_1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (input_io_1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (input_io_1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_022_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                        //                .channel
		.rf_sink_ready           (input_io_1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (input_io_1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (input_io_1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (input_io_1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (input_io_1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (input_io_1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (input_io_1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (input_io_1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (input_io_1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (input_io_1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),              //                .error
		.rdata_fifo_src_ready    (input_io_1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (input_io_1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (input_io_1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_io_1_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                           //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (input_io_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (input_io_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (input_io_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (input_io_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (input_io_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (input_io_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (input_io_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (input_io_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (input_io_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (input_io_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) input_io_2_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                           //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (input_io_2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (input_io_2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (input_io_2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (input_io_2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (input_io_2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (input_io_2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (input_io_2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (input_io_2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (input_io_2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (input_io_2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (input_io_2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (input_io_2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (input_io_2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (input_io_2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (input_io_2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (input_io_2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_023_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                        //                .channel
		.rf_sink_ready           (input_io_2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (input_io_2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (input_io_2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (input_io_2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (input_io_2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (input_io_2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (input_io_2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (input_io_2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (input_io_2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (input_io_2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),              //                .error
		.rdata_fifo_src_ready    (input_io_2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (input_io_2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (input_io_2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_io_2_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                           //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (input_io_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (input_io_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (input_io_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (input_io_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (input_io_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (input_io_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (input_io_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (input_io_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (input_io_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (input_io_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) input_io_3_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                           //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (input_io_3_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (input_io_3_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (input_io_3_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (input_io_3_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (input_io_3_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (input_io_3_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (input_io_3_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (input_io_3_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (input_io_3_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (input_io_3_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (input_io_3_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (input_io_3_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (input_io_3_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (input_io_3_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (input_io_3_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (input_io_3_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_024_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                        //                .channel
		.rf_sink_ready           (input_io_3_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (input_io_3_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (input_io_3_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (input_io_3_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (input_io_3_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (input_io_3_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (input_io_3_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (input_io_3_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (input_io_3_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (input_io_3_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),              //                .error
		.rdata_fifo_src_ready    (input_io_3_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (input_io_3_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (input_io_3_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_io_3_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                           //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (input_io_3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (input_io_3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (input_io_3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (input_io_3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (input_io_3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (input_io_3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (input_io_3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (input_io_3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (input_io_3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (input_io_3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) input_io_4_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                           //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (input_io_4_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (input_io_4_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (input_io_4_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (input_io_4_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (input_io_4_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (input_io_4_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (input_io_4_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (input_io_4_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (input_io_4_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (input_io_4_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (input_io_4_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (input_io_4_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (input_io_4_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (input_io_4_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (input_io_4_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (input_io_4_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_025_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                        //                .channel
		.rf_sink_ready           (input_io_4_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (input_io_4_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (input_io_4_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (input_io_4_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (input_io_4_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (input_io_4_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (input_io_4_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (input_io_4_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (input_io_4_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (input_io_4_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),              //                .error
		.rdata_fifo_src_ready    (input_io_4_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (input_io_4_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (input_io_4_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_io_4_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                           //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (input_io_4_s1_agent_rf_source_data),             //        in.data
		.in_valid          (input_io_4_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (input_io_4_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (input_io_4_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (input_io_4_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (input_io_4_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (input_io_4_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (input_io_4_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (input_io_4_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (input_io_4_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (95),
		.PKT_BURST_SIZE_L          (93),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (100),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (92),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) input_io_5_s1_agent (
		.clk                     (ddr2_ram_afi_clk_clk),                           //             clk.clk
		.reset                   (nios_cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (input_io_5_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (input_io_5_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (input_io_5_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (input_io_5_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (input_io_5_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (input_io_5_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (input_io_5_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (input_io_5_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (input_io_5_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (input_io_5_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (input_io_5_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (input_io_5_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (input_io_5_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (input_io_5_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (input_io_5_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (input_io_5_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_026_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                        //                .channel
		.rf_sink_ready           (input_io_5_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (input_io_5_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (input_io_5_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (input_io_5_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (input_io_5_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (input_io_5_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (input_io_5_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (input_io_5_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (input_io_5_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (input_io_5_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),              //                .error
		.rdata_fifo_src_ready    (input_io_5_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (input_io_5_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (input_io_5_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_io_5_s1_agent_rsp_fifo (
		.clk               (ddr2_ram_afi_clk_clk),                           //       clk.clk
		.reset             (nios_cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (input_io_5_s1_agent_rf_source_data),             //        in.data
		.in_valid          (input_io_5_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (input_io_5_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (input_io_5_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (input_io_5_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (input_io_5_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (input_io_5_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (input_io_5_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (input_io_5_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (input_io_5_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	testbench_ls_mm_interconnect_0_router router (
		.sink_ready         (from_eth_to_ddr_eth_dma_mm_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (from_eth_to_ddr_eth_dma_mm_write_agent_cp_valid),         //          .valid
		.sink_data          (from_eth_to_ddr_eth_dma_mm_write_agent_cp_data),          //          .data
		.sink_startofpacket (from_eth_to_ddr_eth_dma_mm_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (from_eth_to_ddr_eth_dma_mm_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                    //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios_cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios_cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios_cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                        //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                        //       src.ready
		.src_valid          (router_001_src_valid),                        //          .valid
		.src_data           (router_001_src_data),                         //          .data
		.src_channel        (router_001_src_channel),                      //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                   //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (dma_fifo_susbystem_dma_mm_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_susbystem_dma_mm_read_agent_cp_valid),         //          .valid
		.sink_data          (dma_fifo_susbystem_dma_mm_read_agent_cp_data),          //          .data
		.sink_startofpacket (dma_fifo_susbystem_dma_mm_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_susbystem_dma_mm_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                  //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_002_src_ready),                                  //       src.ready
		.src_valid          (router_002_src_valid),                                  //          .valid
		.src_data           (router_002_src_data),                                   //          .data
		.src_channel        (router_002_src_channel),                                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (dma_fifo_subsystem_1_dma_mm_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_1_dma_mm_read_agent_cp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_1_dma_mm_read_agent_cp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_1_dma_mm_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_1_dma_mm_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                    //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (dma_fifo_subsystem_2_dma_mm_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_2_dma_mm_read_agent_cp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_2_dma_mm_read_agent_cp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_2_dma_mm_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_2_dma_mm_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                    //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (nios_cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios_cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios_cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                               //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (dma_fifo_subsystem_4_dma_mm_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_4_dma_mm_read_agent_cp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_4_dma_mm_read_agent_cp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_4_dma_mm_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_4_dma_mm_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                    //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_006_src_ready),                                    //       src.ready
		.src_valid          (router_006_src_valid),                                    //          .valid
		.src_data           (router_006_src_data),                                     //          .data
		.src_channel        (router_006_src_channel),                                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                               //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (dma_fifo_subsystem_3_dma_mm_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_3_dma_mm_read_agent_cp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_3_dma_mm_read_agent_cp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_3_dma_mm_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_3_dma_mm_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                    //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_007_src_ready),                                    //       src.ready
		.src_valid          (router_007_src_valid),                                    //          .valid
		.src_data           (router_007_src_data),                                     //          .data
		.src_channel        (router_007_src_channel),                                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                               //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (ddr2_ram_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (ddr2_ram_avl_agent_rp_valid),                               //          .valid
		.sink_data          (ddr2_ram_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (ddr2_ram_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (ddr2_ram_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                      //       clk.clk
		.reset              (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                      //       src.ready
		.src_valid          (router_008_src_valid),                                      //          .valid
		.src_data           (router_008_src_data),                                       //          .data
		.src_channel        (router_008_src_channel),                                    //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                 //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (ddr2_ram_1_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (ddr2_ram_1_avl_agent_rp_valid),                               //          .valid
		.sink_data          (ddr2_ram_1_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (ddr2_ram_1_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (ddr2_ram_1_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (ddr2_ram_1_afi_clk_clk),                                      //       clk.clk
		.reset              (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                        //       src.ready
		.src_valid          (router_009_src_valid),                                        //          .valid
		.src_data           (router_009_src_data),                                         //          .data
		.src_channel        (router_009_src_channel),                                      //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                   //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (from_eth_to_ddr_eth_dma_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (from_eth_to_ddr_eth_dma_csr_agent_rp_valid),         //          .valid
		.sink_data          (from_eth_to_ddr_eth_dma_csr_agent_rp_data),          //          .data
		.sink_startofpacket (from_eth_to_ddr_eth_dma_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (from_eth_to_ddr_eth_dma_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                               //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_010_src_ready),                               //       src.ready
		.src_valid          (router_010_src_valid),                               //          .valid
		.src_data           (router_010_src_data),                                //          .data
		.src_channel        (router_010_src_channel),                             //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                          //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                            //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_011_src_ready),                                            //       src.ready
		.src_valid          (router_011_src_valid),                                            //          .valid
		.src_data           (router_011_src_data),                                             //          .data
		.src_channel        (router_011_src_channel),                                          //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                       //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_012 (
		.sink_ready         (jtag_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                          //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_012_src_ready),                          //       src.ready
		.src_valid          (router_012_src_valid),                          //          .valid
		.src_data           (router_012_src_data),                           //          .data
		.src_channel        (router_012_src_channel),                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (nios_cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios_cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios_cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios_cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                            //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_013_src_ready),                            //       src.ready
		.src_valid          (router_013_src_valid),                            //          .valid
		.src_data           (router_013_src_data),                             //          .data
		.src_channel        (router_013_src_channel),                          //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                       //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_014 (
		.sink_ready         (dma_fifo_susbystem_dma_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_susbystem_dma_csr_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_susbystem_dma_csr_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_susbystem_dma_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_susbystem_dma_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                              //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_015 (
		.sink_ready         (dma_fifo_subsystem_1_dma_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_1_dma_csr_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_1_dma_csr_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_1_dma_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_1_dma_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_015_src_ready),                                //       src.ready
		.src_valid          (router_015_src_valid),                                //          .valid
		.src_data           (router_015_src_data),                                 //          .data
		.src_channel        (router_015_src_channel),                              //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                           //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_016 (
		.sink_ready         (dma_fifo_subsystem_2_dma_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_2_dma_csr_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_2_dma_csr_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_2_dma_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_2_dma_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_016_src_ready),                                //       src.ready
		.src_valid          (router_016_src_valid),                                //          .valid
		.src_data           (router_016_src_data),                                 //          .data
		.src_channel        (router_016_src_channel),                              //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                           //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_017 (
		.sink_ready         (dma_fifo_subsystem_3_dma_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_3_dma_csr_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_3_dma_csr_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_3_dma_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_3_dma_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_017_src_ready),                                //       src.ready
		.src_valid          (router_017_src_valid),                                //          .valid
		.src_data           (router_017_src_data),                                 //          .data
		.src_channel        (router_017_src_channel),                              //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                           //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_018 (
		.sink_ready         (dma_fifo_subsystem_4_dma_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_4_dma_csr_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_4_dma_csr_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_4_dma_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_4_dma_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_018_src_ready),                                //       src.ready
		.src_valid          (router_018_src_valid),                                //          .valid
		.src_data           (router_018_src_data),                                 //          .data
		.src_channel        (router_018_src_channel),                              //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                           //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_011 router_019 (
		.sink_ready         (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_susbystem_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                           //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready          (router_019_src_ready),                                           //       src.ready
		.src_valid          (router_019_src_valid),                                           //          .valid
		.src_data           (router_019_src_data),                                            //          .data
		.src_channel        (router_019_src_channel),                                         //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                      //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_011 router_020 (
		.sink_ready         (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                             //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready          (router_020_src_ready),                                             //       src.ready
		.src_valid          (router_020_src_valid),                                             //          .valid
		.src_data           (router_020_src_data),                                              //          .data
		.src_channel        (router_020_src_channel),                                           //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                        //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_011 router_021 (
		.sink_ready         (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                             //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready          (router_021_src_ready),                                             //       src.ready
		.src_valid          (router_021_src_valid),                                             //          .valid
		.src_data           (router_021_src_data),                                              //          .data
		.src_channel        (router_021_src_channel),                                           //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                        //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_011 router_022 (
		.sink_ready         (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                             //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready          (router_022_src_ready),                                             //       src.ready
		.src_valid          (router_022_src_valid),                                             //          .valid
		.src_data           (router_022_src_data),                                              //          .data
		.src_channel        (router_022_src_channel),                                           //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                        //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_011 router_023 (
		.sink_ready         (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                                             //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready          (router_023_src_ready),                                             //       src.ready
		.src_valid          (router_023_src_valid),                                             //          .valid
		.src_data           (router_023_src_data),                                              //          .data
		.src_channel        (router_023_src_channel),                                           //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                        //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_013 router_024 (
		.sink_ready         (system_ram_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (system_ram_s1_agent_rp_valid),               //          .valid
		.sink_data          (system_ram_s1_agent_rp_data),                //          .data
		.sink_startofpacket (system_ram_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (system_ram_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                       //       src.ready
		.src_valid          (router_024_src_valid),                       //          .valid
		.src_data           (router_024_src_data),                        //          .data
		.src_channel        (router_024_src_channel),                     //          .channel
		.src_startofpacket  (router_024_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_025 (
		.sink_ready         (ctrl_sig_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ctrl_sig_s1_agent_rp_valid),                 //          .valid
		.sink_data          (ctrl_sig_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (ctrl_sig_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ctrl_sig_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                       //       src.ready
		.src_valid          (router_025_src_valid),                       //          .valid
		.src_data           (router_025_src_data),                        //          .data
		.src_channel        (router_025_src_channel),                     //          .channel
		.src_startofpacket  (router_025_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_026 (
		.sink_ready         (sys_timer_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (sys_timer_s1_agent_rp_valid),                //          .valid
		.sink_data          (sys_timer_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (sys_timer_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sys_timer_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                       //       src.ready
		.src_valid          (router_026_src_valid),                       //          .valid
		.src_data           (router_026_src_data),                        //          .data
		.src_channel        (router_026_src_channel),                     //          .channel
		.src_startofpacket  (router_026_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_027 (
		.sink_ready         (pilot_sig_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (pilot_sig_s1_agent_rp_valid),                //          .valid
		.sink_data          (pilot_sig_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (pilot_sig_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (pilot_sig_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                       //       src.ready
		.src_valid          (router_027_src_valid),                       //          .valid
		.src_data           (router_027_src_data),                        //          .data
		.src_channel        (router_027_src_channel),                     //          .channel
		.src_startofpacket  (router_027_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_028 (
		.sink_ready         (input_io_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (input_io_s1_agent_rp_valid),                 //          .valid
		.sink_data          (input_io_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (input_io_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (input_io_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                       //       src.ready
		.src_valid          (router_028_src_valid),                       //          .valid
		.src_data           (router_028_src_data),                        //          .data
		.src_channel        (router_028_src_channel),                     //          .channel
		.src_startofpacket  (router_028_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_029 (
		.sink_ready         (input_io_0_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (input_io_0_s1_agent_rp_valid),               //          .valid
		.sink_data          (input_io_0_s1_agent_rp_data),                //          .data
		.sink_startofpacket (input_io_0_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (input_io_0_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                       //       src.ready
		.src_valid          (router_029_src_valid),                       //          .valid
		.src_data           (router_029_src_data),                        //          .data
		.src_channel        (router_029_src_channel),                     //          .channel
		.src_startofpacket  (router_029_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_030 (
		.sink_ready         (input_io_1_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (input_io_1_s1_agent_rp_valid),               //          .valid
		.sink_data          (input_io_1_s1_agent_rp_data),                //          .data
		.sink_startofpacket (input_io_1_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (input_io_1_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                       //       src.ready
		.src_valid          (router_030_src_valid),                       //          .valid
		.src_data           (router_030_src_data),                        //          .data
		.src_channel        (router_030_src_channel),                     //          .channel
		.src_startofpacket  (router_030_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_031 (
		.sink_ready         (input_io_2_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (input_io_2_s1_agent_rp_valid),               //          .valid
		.sink_data          (input_io_2_s1_agent_rp_data),                //          .data
		.sink_startofpacket (input_io_2_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (input_io_2_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                       //       src.ready
		.src_valid          (router_031_src_valid),                       //          .valid
		.src_data           (router_031_src_data),                        //          .data
		.src_channel        (router_031_src_channel),                     //          .channel
		.src_startofpacket  (router_031_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_032 (
		.sink_ready         (input_io_3_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (input_io_3_s1_agent_rp_valid),               //          .valid
		.sink_data          (input_io_3_s1_agent_rp_data),                //          .data
		.sink_startofpacket (input_io_3_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (input_io_3_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                       //       src.ready
		.src_valid          (router_032_src_valid),                       //          .valid
		.src_data           (router_032_src_data),                        //          .data
		.src_channel        (router_032_src_channel),                     //          .channel
		.src_startofpacket  (router_032_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_033 (
		.sink_ready         (input_io_4_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (input_io_4_s1_agent_rp_valid),               //          .valid
		.sink_data          (input_io_4_s1_agent_rp_data),                //          .data
		.sink_startofpacket (input_io_4_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (input_io_4_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                       //       src.ready
		.src_valid          (router_033_src_valid),                       //          .valid
		.src_data           (router_033_src_data),                        //          .data
		.src_channel        (router_033_src_channel),                     //          .channel
		.src_startofpacket  (router_033_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_router_010 router_034 (
		.sink_ready         (input_io_5_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (input_io_5_s1_agent_rp_valid),               //          .valid
		.sink_data          (input_io_5_s1_agent_rp_data),                //          .data
		.sink_startofpacket (input_io_5_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (input_io_5_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_034_src_ready),                       //       src.ready
		.src_valid          (router_034_src_valid),                       //          .valid
		.src_data           (router_034_src_data),                        //          .data
		.src_channel        (router_034_src_channel),                     //          .channel
		.src_startofpacket  (router_034_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (38),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (27),
		.VALID_WIDTH               (27),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios_cpu_data_master_limiter (
		.clk                    (ddr2_ram_afi_clk_clk),                               //       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                               //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                               //          .valid
		.cmd_sink_data          (router_001_src_data),                                //          .data
		.cmd_sink_channel       (router_001_src_channel),                             //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                       //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                         //          .endofpacket
		.cmd_src_ready          (nios_cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios_cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios_cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios_cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios_cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                              //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                            //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                               //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                        //          .endofpacket
		.rsp_src_ready          (nios_cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios_cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios_cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios_cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios_cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios_cpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios_cpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (102),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (27),
		.VALID_WIDTH               (27),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios_cpu_instruction_master_limiter (
		.clk                    (ddr2_ram_afi_clk_clk),                                      //       clk.clk
		.reset                  (nios_cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                                      //  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                                      //          .valid
		.cmd_sink_data          (router_005_src_data),                                       //          .data
		.cmd_sink_channel       (router_005_src_channel),                                    //          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                              //          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                                //          .endofpacket
		.cmd_src_ready          (nios_cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios_cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios_cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios_cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios_cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                                     //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                                     //          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                                   //          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                                      //          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                             //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                               //          .endofpacket
		.rsp_src_ready          (nios_cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios_cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios_cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios_cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios_cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios_cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios_cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (352),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_BURST_TYPE_H          (349),
		.PKT_BURST_TYPE_L          (348),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (377),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (333),
		.OUT_BURSTWRAP_H           (344),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) ddr2_ram_avl_burst_adapter (
		.clk                   (ddr2_ram_afi_clk_clk),                                      //       cr0.clk
		.reset                 (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                         //          .ready
		.source0_valid         (ddr2_ram_avl_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (ddr2_ram_avl_burst_adapter_source0_data),                   //          .data
		.source0_channel       (ddr2_ram_avl_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (ddr2_ram_avl_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (ddr2_ram_avl_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (ddr2_ram_avl_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (352),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (347),
		.PKT_BURST_SIZE_L          (345),
		.PKT_BURST_TYPE_H          (349),
		.PKT_BURST_TYPE_L          (348),
		.PKT_BURSTWRAP_H           (344),
		.PKT_BURSTWRAP_L           (342),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (377),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (333),
		.OUT_BURSTWRAP_H           (344),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) ddr2_ram_1_avl_burst_adapter (
		.clk                   (ddr2_ram_1_afi_clk_clk),                                      //       cr0.clk
		.reset                 (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                       //          .ready
		.source0_valid         (ddr2_ram_1_avl_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (ddr2_ram_1_avl_burst_adapter_source0_data),                   //          .data
		.source0_channel       (ddr2_ram_1_avl_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (ddr2_ram_1_avl_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (ddr2_ram_1_avl_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (ddr2_ram_1_avl_burst_adapter_source0_ready)                   //          .ready
	);

	testbench_ls_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                           //      sink.ready
		.sink_channel       (router_src_channel),                         //          .channel
		.sink_data          (router_src_data),                            //          .data
		.sink_startofpacket (router_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_src0_data),                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_src1_data),                        //          .data
		.src1_channel       (cmd_demux_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (ddr2_ram_afi_clk_clk),                               //        clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (nios_cpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (nios_cpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (nios_cpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (nios_cpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (nios_cpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (nios_cpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                           //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                           //           .valid
		.src0_data           (cmd_demux_001_src0_data),                            //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                         //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                   //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                     //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                           //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                           //           .valid
		.src1_data           (cmd_demux_001_src1_data),                            //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                         //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                   //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                     //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                           //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                           //           .valid
		.src2_data           (cmd_demux_001_src2_data),                            //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                         //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                   //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                     //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                           //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                           //           .valid
		.src3_data           (cmd_demux_001_src3_data),                            //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                         //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                   //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                     //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                           //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                           //           .valid
		.src4_data           (cmd_demux_001_src4_data),                            //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                         //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                   //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                     //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                           //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                           //           .valid
		.src5_data           (cmd_demux_001_src5_data),                            //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                         //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                   //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                     //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                           //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                           //           .valid
		.src6_data           (cmd_demux_001_src6_data),                            //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                         //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                   //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                     //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                           //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                           //           .valid
		.src7_data           (cmd_demux_001_src7_data),                            //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                         //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                   //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                     //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                           //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                           //           .valid
		.src8_data           (cmd_demux_001_src8_data),                            //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                         //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                   //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                     //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                           //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                           //           .valid
		.src9_data           (cmd_demux_001_src9_data),                            //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                         //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                   //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                     //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                          //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                          //           .valid
		.src10_data          (cmd_demux_001_src10_data),                           //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                        //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                  //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                    //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                          //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                          //           .valid
		.src11_data          (cmd_demux_001_src11_data),                           //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                        //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                  //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                    //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                          //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                          //           .valid
		.src12_data          (cmd_demux_001_src12_data),                           //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                        //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                  //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                    //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                          //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                          //           .valid
		.src13_data          (cmd_demux_001_src13_data),                           //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                        //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                  //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                    //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                          //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                          //           .valid
		.src14_data          (cmd_demux_001_src14_data),                           //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                        //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                  //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                    //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                          //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                          //           .valid
		.src15_data          (cmd_demux_001_src15_data),                           //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                        //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                  //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                    //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                          //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                          //           .valid
		.src16_data          (cmd_demux_001_src16_data),                           //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                        //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                  //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                    //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                          //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                          //           .valid
		.src17_data          (cmd_demux_001_src17_data),                           //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                        //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                  //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                    //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                          //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                          //           .valid
		.src18_data          (cmd_demux_001_src18_data),                           //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                        //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                  //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                    //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                          //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                          //           .valid
		.src19_data          (cmd_demux_001_src19_data),                           //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                        //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                  //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                    //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                          //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                          //           .valid
		.src20_data          (cmd_demux_001_src20_data),                           //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                        //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                  //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),                    //           .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                          //      src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                          //           .valid
		.src21_data          (cmd_demux_001_src21_data),                           //           .data
		.src21_channel       (cmd_demux_001_src21_channel),                        //           .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),                  //           .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),                    //           .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),                          //      src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),                          //           .valid
		.src22_data          (cmd_demux_001_src22_data),                           //           .data
		.src22_channel       (cmd_demux_001_src22_channel),                        //           .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),                  //           .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket),                    //           .endofpacket
		.src23_ready         (cmd_demux_001_src23_ready),                          //      src23.ready
		.src23_valid         (cmd_demux_001_src23_valid),                          //           .valid
		.src23_data          (cmd_demux_001_src23_data),                           //           .data
		.src23_channel       (cmd_demux_001_src23_channel),                        //           .channel
		.src23_startofpacket (cmd_demux_001_src23_startofpacket),                  //           .startofpacket
		.src23_endofpacket   (cmd_demux_001_src23_endofpacket),                    //           .endofpacket
		.src24_ready         (cmd_demux_001_src24_ready),                          //      src24.ready
		.src24_valid         (cmd_demux_001_src24_valid),                          //           .valid
		.src24_data          (cmd_demux_001_src24_data),                           //           .data
		.src24_channel       (cmd_demux_001_src24_channel),                        //           .channel
		.src24_startofpacket (cmd_demux_001_src24_startofpacket),                  //           .startofpacket
		.src24_endofpacket   (cmd_demux_001_src24_endofpacket),                    //           .endofpacket
		.src25_ready         (cmd_demux_001_src25_ready),                          //      src25.ready
		.src25_valid         (cmd_demux_001_src25_valid),                          //           .valid
		.src25_data          (cmd_demux_001_src25_data),                           //           .data
		.src25_channel       (cmd_demux_001_src25_channel),                        //           .channel
		.src25_startofpacket (cmd_demux_001_src25_startofpacket),                  //           .startofpacket
		.src25_endofpacket   (cmd_demux_001_src25_endofpacket),                    //           .endofpacket
		.src26_ready         (cmd_demux_001_src26_ready),                          //      src26.ready
		.src26_valid         (cmd_demux_001_src26_valid),                          //           .valid
		.src26_data          (cmd_demux_001_src26_data),                           //           .data
		.src26_channel       (cmd_demux_001_src26_channel),                        //           .channel
		.src26_startofpacket (cmd_demux_001_src26_startofpacket),                  //           .startofpacket
		.src26_endofpacket   (cmd_demux_001_src26_endofpacket)                     //           .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                       //      sink.ready
		.sink_channel       (router_002_src_channel),                     //          .channel
		.sink_data          (router_002_src_data),                        //          .data
		.sink_startofpacket (router_002_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_002_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_002_src0_data),                    //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                       //      sink.ready
		.sink_channel       (router_003_src_channel),                     //          .channel
		.sink_data          (router_003_src_data),                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_003_src0_data),                    //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_demux_002 cmd_demux_004 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                       //      sink.ready
		.sink_channel       (router_004_src_channel),                     //          .channel
		.sink_data          (router_004_src_data),                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_004_src0_data),                    //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_demux_005 cmd_demux_005 (
		.clk                (ddr2_ram_afi_clk_clk),                                      //        clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios_cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios_cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios_cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios_cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios_cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios_cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                                  //       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                  //           .valid
		.src0_data          (cmd_demux_005_src0_data),                                   //           .data
		.src0_channel       (cmd_demux_005_src0_channel),                                //           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                          //           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                            //           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                                  //       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                                  //           .valid
		.src1_data          (cmd_demux_005_src1_data),                                   //           .data
		.src1_channel       (cmd_demux_005_src1_channel),                                //           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                          //           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket)                             //           .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_demux_002 cmd_demux_006 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                       //      sink.ready
		.sink_channel       (router_006_src_channel),                     //          .channel
		.sink_data          (router_006_src_data),                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_006_src0_data),                    //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_demux_002 cmd_demux_007 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                       //      sink.ready
		.sink_channel       (router_007_src_channel),                     //          .channel
		.sink_data          (router_007_src_data),                        //          .data
		.sink_startofpacket (router_007_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_007_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_007_src0_data),                    //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (ddr2_ram_afi_clk_clk),                                                     //       clk.clk
		.reset               (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                        //          .valid
		.src_data            (cmd_mux_src_data),                                                         //          .data
		.src_channel         (cmd_mux_src_channel),                                                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                     //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                   //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                      //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready         (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                                 //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                                 //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                               //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                                  //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                                           //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                               //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                                               //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket)                                            //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (ddr2_ram_1_afi_clk_clk),                                      //       clk.clk
		.reset               (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                       //          .valid
		.src_data            (cmd_mux_001_src_data),                                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                           //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                           //          .valid
		.sink0_channel       (crosser_out_channel),                                         //          .channel
		.sink0_data          (crosser_out_data),                                            //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                     //          .endofpacket
		.sink1_ready         (crosser_006_out_ready),                                       //     sink1.ready
		.sink1_valid         (crosser_006_out_valid),                                       //          .valid
		.sink1_channel       (crosser_006_out_channel),                                     //          .channel
		.sink1_data          (crosser_006_out_data),                                        //          .data
		.sink1_startofpacket (crosser_006_out_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (crosser_006_out_endofpacket),                                 //          .endofpacket
		.sink2_ready         (crosser_001_out_ready),                                       //     sink2.ready
		.sink2_valid         (crosser_001_out_valid),                                       //          .valid
		.sink2_channel       (crosser_001_out_channel),                                     //          .channel
		.sink2_data          (crosser_001_out_data),                                        //          .data
		.sink2_startofpacket (crosser_001_out_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (crosser_001_out_endofpacket),                                 //          .endofpacket
		.sink3_ready         (crosser_002_out_ready),                                       //     sink3.ready
		.sink3_valid         (crosser_002_out_valid),                                       //          .valid
		.sink3_channel       (crosser_002_out_channel),                                     //          .channel
		.sink3_data          (crosser_002_out_data),                                        //          .data
		.sink3_startofpacket (crosser_002_out_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (crosser_002_out_endofpacket)                                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                      //          .valid
		.src_data            (cmd_mux_002_src_data),                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (ddr2_ram_afi_clk_clk),                                                                                 //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset),                                                           // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                                                //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                                                //          .valid
		.src_data            (cmd_mux_003_src_data),                                                                                 //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                                              //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                                                          //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                      //          .valid
		.src_data            (cmd_mux_004_src_data),                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_005 cmd_mux_005 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                      //          .valid
		.src_data            (cmd_mux_005_src_data),                       //          .data
		.src_channel         (cmd_mux_005_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_005_src0_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_005_src0_valid),                   //          .valid
		.sink1_channel       (cmd_demux_005_src0_channel),                 //          .channel
		.sink1_data          (cmd_demux_005_src0_data),                    //          .data
		.sink1_startofpacket (cmd_demux_005_src0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_006 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                      //          .valid
		.src_data            (cmd_mux_006_src_data),                       //          .data
		.src_channel         (cmd_mux_006_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_007 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                      //          .valid
		.src_data            (cmd_mux_007_src_data),                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                      //          .valid
		.src_data            (cmd_mux_008_src_data),                       //          .data
		.src_channel         (cmd_mux_008_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_009 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                      //          .valid
		.src_data            (cmd_mux_009_src_data),                       //          .data
		.src_channel         (cmd_mux_009_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_010 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                      //          .valid
		.src_data            (cmd_mux_010_src_data),                       //          .data
		.src_channel         (cmd_mux_010_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_003 cmd_mux_011 (
		.clk                 (ddr2_ram_afi_clk_clk),                                                                                //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset),                                                          // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                                                               //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                                                               //          .valid
		.src_data            (cmd_mux_011_src_data),                                                                                //          .data
		.src_channel         (cmd_mux_011_src_channel),                                                                             //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                                                         //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_003 cmd_mux_012 (
		.clk                 (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                                                                 //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                                                                 //          .valid
		.src_data            (cmd_mux_012_src_data),                                                                                  //          .data
		.src_channel         (cmd_mux_012_src_channel),                                                                               //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                                                           //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_003 cmd_mux_013 (
		.clk                 (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                                                                 //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                                                                 //          .valid
		.src_data            (cmd_mux_013_src_data),                                                                                  //          .data
		.src_channel         (cmd_mux_013_src_channel),                                                                               //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                                                           //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_003 cmd_mux_014 (
		.clk                 (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                                                                 //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                                                                 //          .valid
		.src_data            (cmd_mux_014_src_data),                                                                                  //          .data
		.src_channel         (cmd_mux_014_src_channel),                                                                               //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                                                           //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_003 cmd_mux_015 (
		.clk                 (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                                                                 //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                                                                 //          .valid
		.src_data            (cmd_mux_015_src_data),                                                                                  //          .data
		.src_channel         (cmd_mux_015_src_channel),                                                                               //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                                                           //          .endofpacket
		.sink0_ready         (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_005 cmd_mux_016 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                      //          .valid
		.src_data            (cmd_mux_016_src_data),                       //          .data
		.src_channel         (cmd_mux_016_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src16_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src16_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src16_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src16_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src16_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src16_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_005_src1_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_005_src1_valid),                   //          .valid
		.sink1_channel       (cmd_demux_005_src1_channel),                 //          .channel
		.sink1_data          (cmd_demux_005_src1_data),                    //          .data
		.sink1_startofpacket (cmd_demux_005_src1_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src1_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_017 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                      //          .valid
		.src_data            (cmd_mux_017_src_data),                       //          .data
		.src_channel         (cmd_mux_017_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src17_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src17_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src17_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src17_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src17_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src17_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_018 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                      //          .valid
		.src_data            (cmd_mux_018_src_data),                       //          .data
		.src_channel         (cmd_mux_018_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src18_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src18_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src18_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src18_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src18_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src18_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_019 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                      //          .valid
		.src_data            (cmd_mux_019_src_data),                       //          .data
		.src_channel         (cmd_mux_019_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src19_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src19_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src19_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src19_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src19_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src19_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_020 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                      //          .valid
		.src_data            (cmd_mux_020_src_data),                       //          .data
		.src_channel         (cmd_mux_020_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src20_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src20_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src20_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src20_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src20_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src20_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_021 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                      //          .valid
		.src_data            (cmd_mux_021_src_data),                       //          .data
		.src_channel         (cmd_mux_021_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src21_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src21_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src21_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src21_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src21_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src21_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_022 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                      //          .valid
		.src_data            (cmd_mux_022_src_data),                       //          .data
		.src_channel         (cmd_mux_022_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src22_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src22_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src22_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src22_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src22_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src22_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_023 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                      //          .valid
		.src_data            (cmd_mux_023_src_data),                       //          .data
		.src_channel         (cmd_mux_023_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src23_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src23_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src23_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src23_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src23_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src23_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_024 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                      //          .valid
		.src_data            (cmd_mux_024_src_data),                       //          .data
		.src_channel         (cmd_mux_024_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src24_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src24_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src24_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src24_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src24_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src24_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_025 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                      //          .valid
		.src_data            (cmd_mux_025_src_data),                       //          .data
		.src_channel         (cmd_mux_025_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src25_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src25_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src25_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src25_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src25_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src25_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_cmd_mux_002 cmd_mux_026 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                      //          .valid
		.src_data            (cmd_mux_026_src_data),                       //          .data
		.src_channel         (cmd_mux_026_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src26_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src26_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src26_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src26_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src26_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src26_endofpacket)             //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (ddr2_ram_afi_clk_clk),                                      //       clk.clk
		.reset              (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                      //      sink.ready
		.sink_channel       (router_008_src_channel),                                    //          .channel
		.sink_data          (router_008_src_data),                                       //          .data
		.sink_startofpacket (router_008_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_008_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                      //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                      //          .valid
		.src2_data          (rsp_demux_src2_data),                                       //          .data
		.src2_channel       (rsp_demux_src2_channel),                                    //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                              //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                                //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                      //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                      //          .valid
		.src3_data          (rsp_demux_src3_data),                                       //          .data
		.src3_channel       (rsp_demux_src3_channel),                                    //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                              //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),                                //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                                      //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                                      //          .valid
		.src4_data          (rsp_demux_src4_data),                                       //          .data
		.src4_channel       (rsp_demux_src4_channel),                                    //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),                              //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket)                                 //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (ddr2_ram_1_afi_clk_clk),                                      //       clk.clk
		.reset              (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                        //      sink.ready
		.sink_channel       (router_009_src_channel),                                      //          .channel
		.sink_data          (router_009_src_data),                                         //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_009_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                              //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                                    //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                                    //          .valid
		.src2_data          (rsp_demux_001_src2_data),                                     //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                                  //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                            //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket),                              //          .endofpacket
		.src3_ready         (rsp_demux_001_src3_ready),                                    //      src3.ready
		.src3_valid         (rsp_demux_001_src3_valid),                                    //          .valid
		.src3_data          (rsp_demux_001_src3_data),                                     //          .data
		.src3_channel       (rsp_demux_001_src3_channel),                                  //          .channel
		.src3_startofpacket (rsp_demux_001_src3_startofpacket),                            //          .startofpacket
		.src3_endofpacket   (rsp_demux_001_src3_endofpacket)                               //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                       //      sink.ready
		.sink_channel       (router_010_src_channel),                     //          .channel
		.sink_data          (router_010_src_data),                        //          .data
		.sink_startofpacket (router_010_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_010_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                       //      sink.ready
		.sink_channel       (router_011_src_channel),                     //          .channel
		.sink_data          (router_011_src_data),                        //          .data
		.sink_startofpacket (router_011_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_011_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_004 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                       //      sink.ready
		.sink_channel       (router_012_src_channel),                     //          .channel
		.sink_data          (router_012_src_data),                        //          .data
		.sink_startofpacket (router_012_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_012_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                       //      sink.ready
		.sink_channel       (router_013_src_channel),                     //          .channel
		.sink_data          (router_013_src_data),                        //          .data
		.sink_startofpacket (router_013_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_013_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_005_src1_data),                    //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_006 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                       //      sink.ready
		.sink_channel       (router_014_src_channel),                     //          .channel
		.sink_data          (router_014_src_data),                        //          .data
		.sink_startofpacket (router_014_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_014_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_007 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                       //      sink.ready
		.sink_channel       (router_015_src_channel),                     //          .channel
		.sink_data          (router_015_src_data),                        //          .data
		.sink_startofpacket (router_015_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_015_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_008 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                       //      sink.ready
		.sink_channel       (router_016_src_channel),                     //          .channel
		.sink_data          (router_016_src_data),                        //          .data
		.sink_startofpacket (router_016_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_016_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_008_src0_data),                    //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_009 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                       //      sink.ready
		.sink_channel       (router_017_src_channel),                     //          .channel
		.sink_data          (router_017_src_data),                        //          .data
		.sink_startofpacket (router_017_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_017_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_009_src0_data),                    //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_010 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                       //      sink.ready
		.sink_channel       (router_018_src_channel),                     //          .channel
		.sink_data          (router_018_src_data),                        //          .data
		.sink_startofpacket (router_018_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_018_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_010_src0_data),                    //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_003 rsp_demux_011 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                       //      sink.ready
		.sink_channel       (router_019_src_channel),                     //          .channel
		.sink_data          (router_019_src_data),                        //          .data
		.sink_startofpacket (router_019_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_019_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_011_src0_data),                    //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_003 rsp_demux_012 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                       //      sink.ready
		.sink_channel       (router_020_src_channel),                     //          .channel
		.sink_data          (router_020_src_data),                        //          .data
		.sink_startofpacket (router_020_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_020_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_012_src0_data),                    //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_003 rsp_demux_013 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                       //      sink.ready
		.sink_channel       (router_021_src_channel),                     //          .channel
		.sink_data          (router_021_src_data),                        //          .data
		.sink_startofpacket (router_021_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_021_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_013_src0_data),                    //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_003 rsp_demux_014 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                       //      sink.ready
		.sink_channel       (router_022_src_channel),                     //          .channel
		.sink_data          (router_022_src_data),                        //          .data
		.sink_startofpacket (router_022_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_022_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_014_src0_data),                    //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_003 rsp_demux_015 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                       //      sink.ready
		.sink_channel       (router_023_src_channel),                     //          .channel
		.sink_data          (router_023_src_data),                        //          .data
		.sink_startofpacket (router_023_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_023_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_015_src0_data),                    //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_005 rsp_demux_016 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                       //      sink.ready
		.sink_channel       (router_024_src_channel),                     //          .channel
		.sink_data          (router_024_src_data),                        //          .data
		.sink_startofpacket (router_024_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_024_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_016_src0_data),                    //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_016_src1_data),                    //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_017 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                       //      sink.ready
		.sink_channel       (router_025_src_channel),                     //          .channel
		.sink_data          (router_025_src_data),                        //          .data
		.sink_startofpacket (router_025_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_025_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_017_src0_data),                    //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_018 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                       //      sink.ready
		.sink_channel       (router_026_src_channel),                     //          .channel
		.sink_data          (router_026_src_data),                        //          .data
		.sink_startofpacket (router_026_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_026_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_018_src0_data),                    //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_019 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                       //      sink.ready
		.sink_channel       (router_027_src_channel),                     //          .channel
		.sink_data          (router_027_src_data),                        //          .data
		.sink_startofpacket (router_027_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_027_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_019_src0_data),                    //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_020 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                       //      sink.ready
		.sink_channel       (router_028_src_channel),                     //          .channel
		.sink_data          (router_028_src_data),                        //          .data
		.sink_startofpacket (router_028_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_028_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_020_src0_data),                    //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_021 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                       //      sink.ready
		.sink_channel       (router_029_src_channel),                     //          .channel
		.sink_data          (router_029_src_data),                        //          .data
		.sink_startofpacket (router_029_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_029_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_021_src0_data),                    //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_022 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                       //      sink.ready
		.sink_channel       (router_030_src_channel),                     //          .channel
		.sink_data          (router_030_src_data),                        //          .data
		.sink_startofpacket (router_030_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_030_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_022_src0_data),                    //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_023 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                       //      sink.ready
		.sink_channel       (router_031_src_channel),                     //          .channel
		.sink_data          (router_031_src_data),                        //          .data
		.sink_startofpacket (router_031_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_031_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_023_src0_data),                    //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_024 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                       //      sink.ready
		.sink_channel       (router_032_src_channel),                     //          .channel
		.sink_data          (router_032_src_data),                        //          .data
		.sink_startofpacket (router_032_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_032_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_024_src0_data),                    //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_025 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                       //      sink.ready
		.sink_channel       (router_033_src_channel),                     //          .channel
		.sink_data          (router_033_src_data),                        //          .data
		.sink_startofpacket (router_033_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_033_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_025_src0_data),                    //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_demux_002 rsp_demux_026 (
		.clk                (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset              (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                       //      sink.ready
		.sink_channel       (router_034_src_channel),                     //          .channel
		.sink_data          (router_034_src_data),                        //          .data
		.sink_startofpacket (router_034_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_034_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_026_src0_data),                    //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                          //          .valid
		.src_data            (rsp_mux_src_data),                           //          .data
		.src_channel         (rsp_mux_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                       //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                     //          .channel
		.sink0_data          (rsp_demux_src0_data),                        //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                      //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                      //          .valid
		.sink1_channel       (crosser_003_out_channel),                    //          .channel
		.sink1_data          (crosser_003_out_data),                       //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)                 //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                                                 //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                                                 //          .valid
		.src_data             (rsp_mux_001_src_data),                                                                                  //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                                               //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                                                         //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                                                           //          .endofpacket
		.sink0_ready          (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_ready),                                      //     sink0.ready
		.sink0_valid          (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_valid),                                      //          .valid
		.sink0_channel        (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_channel),                                    //          .channel
		.sink0_data           (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_data),                                       //          .data
		.sink0_startofpacket  (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket    (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),                                //          .endofpacket
		.sink1_ready          (crosser_007_out_ready),                                                                                 //     sink1.ready
		.sink1_valid          (crosser_007_out_valid),                                                                                 //          .valid
		.sink1_channel        (crosser_007_out_channel),                                                                               //          .channel
		.sink1_data           (crosser_007_out_data),                                                                                  //          .data
		.sink1_startofpacket  (crosser_007_out_startofpacket),                                                                         //          .startofpacket
		.sink1_endofpacket    (crosser_007_out_endofpacket),                                                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                                              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                                              //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                                                            //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                                               //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                                                      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                                                        //          .endofpacket
		.sink3_ready          (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),          //     sink3.ready
		.sink3_valid          (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),          //          .valid
		.sink3_channel        (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),        //          .channel
		.sink3_data           (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),           //          .data
		.sink3_startofpacket  (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink3_endofpacket    (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),    //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                                              //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                                              //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                                                            //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                                               //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                                                      //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                                                        //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                                              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                                              //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                                                            //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                                               //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                                                      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                                                        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                                              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                                              //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                                                            //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                                               //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                                                      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                                                        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                                              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                                              //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                                                            //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                                               //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                                                      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                                                        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                                              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                                              //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                                                            //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                                               //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                                                      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                                                        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                                              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                                              //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                                                            //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                                               //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                                                      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                                                        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                                              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                                              //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                                                            //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                                               //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                                                      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                                                        //          .endofpacket
		.sink11_ready         (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),           //    sink11.ready
		.sink11_valid         (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),           //          .valid
		.sink11_channel       (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),         //          .channel
		.sink11_data          (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),            //          .data
		.sink11_startofpacket (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink11_endofpacket   (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink12_ready         (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //    sink12.ready
		.sink12_valid         (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink12_channel       (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink12_data          (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink12_startofpacket (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink12_endofpacket   (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink13_ready         (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //    sink13.ready
		.sink13_valid         (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink13_channel       (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink13_data          (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink13_startofpacket (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink13_endofpacket   (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink14_ready         (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //    sink14.ready
		.sink14_valid         (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink14_channel       (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink14_data          (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink14_startofpacket (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink14_endofpacket   (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink15_ready         (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //    sink15.ready
		.sink15_valid         (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink15_channel       (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink15_data          (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink15_startofpacket (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink15_endofpacket   (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                                                              //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                                                              //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                                                            //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                                                               //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                                                      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                                                        //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                                                              //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                                                              //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                                                            //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                                                               //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                                                      //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                                                        //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                                                              //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                                                              //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                                                            //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                                                               //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                                                      //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                                                        //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                                                              //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                                                              //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                                                            //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                                                               //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                                                      //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                                                                        //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                                                              //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                                                              //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                                                            //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                                                               //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                                                                      //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                                                                        //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                                                                              //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                                                                              //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                                                                            //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                                                                               //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                                                                      //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                                                                        //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                                                                              //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                                                                              //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                                                                            //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                                                                               //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),                                                                      //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                                                                        //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                                                                              //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                                                                              //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                                                                            //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                                                                               //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),                                                                      //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                                                                        //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                                                                              //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                                                                              //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                                                                            //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                                                                               //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),                                                                      //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                                                                        //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                                                                              //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                                                                              //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                                                                            //          .channel
		.sink25_data          (rsp_demux_025_src0_data),                                                                               //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),                                                                      //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                                                                        //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                                                                              //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                                                                              //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                                                                            //          .channel
		.sink26_data          (rsp_demux_026_src0_data),                                                                               //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),                                                                      //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket)                                                                         //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                      //          .valid
		.src_data            (rsp_mux_002_src_data),                       //          .data
		.src_channel         (rsp_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                       //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                     //          .channel
		.sink0_data          (rsp_demux_src2_data),                        //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                      //          .valid
		.src_data            (rsp_mux_003_src_data),                       //          .data
		.src_channel         (rsp_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                       //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                     //          .channel
		.sink0_data          (rsp_demux_src3_data),                        //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_mux_002 rsp_mux_004 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                      //          .valid
		.src_data            (rsp_mux_004_src_data),                       //          .data
		.src_channel         (rsp_mux_004_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_src4_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_src4_valid),                       //          .valid
		.sink0_channel       (rsp_demux_src4_channel),                     //          .channel
		.sink0_data          (rsp_demux_src4_data),                        //          .data
		.sink0_startofpacket (rsp_demux_src4_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src4_endofpacket)                  //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_mux_005 rsp_mux_005 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                      //          .valid
		.src_data            (rsp_mux_005_src_data),                       //          .data
		.src_channel         (rsp_mux_005_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_005_src1_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_005_src1_valid),                   //          .valid
		.sink0_channel       (rsp_demux_005_src1_channel),                 //          .channel
		.sink0_data          (rsp_demux_005_src1_data),                    //          .data
		.sink0_startofpacket (rsp_demux_005_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src1_endofpacket),             //          .endofpacket
		.sink1_ready         (rsp_demux_016_src1_ready),                   //     sink1.ready
		.sink1_valid         (rsp_demux_016_src1_valid),                   //          .valid
		.sink1_channel       (rsp_demux_016_src1_channel),                 //          .channel
		.sink1_data          (rsp_demux_016_src1_data),                    //          .data
		.sink1_startofpacket (rsp_demux_016_src1_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_016_src1_endofpacket)              //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_mux_002 rsp_mux_006 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                      //          .valid
		.src_data            (rsp_mux_006_src_data),                       //          .data
		.src_channel         (rsp_mux_006_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                      //          .valid
		.sink0_channel       (crosser_004_out_channel),                    //          .channel
		.sink0_data          (crosser_004_out_data),                       //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                 //          .endofpacket
	);

	testbench_ls_mm_interconnect_0_rsp_mux_002 rsp_mux_007 (
		.clk                 (ddr2_ram_afi_clk_clk),                       //       clk.clk
		.reset               (nios_cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                      //          .valid
		.src_data            (rsp_mux_007_src_data),                       //          .data
		.src_channel         (rsp_mux_007_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                      //          .valid
		.sink0_channel       (crosser_005_out_channel),                    //          .channel
		.sink0_data          (crosser_005_out_data),                       //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (341),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (347),
		.OUT_PKT_BURST_SIZE_L          (345),
		.OUT_PKT_RESPONSE_STATUS_H     (373),
		.OUT_PKT_RESPONSE_STATUS_L     (372),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (349),
		.OUT_PKT_BURST_TYPE_L          (348),
		.OUT_PKT_ORI_BURST_SIZE_L      (374),
		.OUT_PKT_ORI_BURST_SIZE_H      (376),
		.OUT_ST_DATA_W                 (377),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                     //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                 //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                  //          .data
		.out_endofpacket      (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_ddr2_ram_avl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (341),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (347),
		.OUT_PKT_BURST_SIZE_L          (345),
		.OUT_PKT_RESPONSE_STATUS_H     (373),
		.OUT_PKT_RESPONSE_STATUS_L     (372),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (349),
		.OUT_PKT_BURST_TYPE_L          (348),
		.OUT_PKT_ORI_BURST_SIZE_L      (374),
		.OUT_PKT_ORI_BURST_SIZE_H      (376),
		.OUT_ST_DATA_W                 (377),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                       //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                   //          .ready
		.in_data              (cmd_demux_001_src1_data),                                                    //          .data
		.out_endofpacket      (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (197),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (203),
		.OUT_PKT_BURST_SIZE_L          (201),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (205),
		.OUT_PKT_BURST_TYPE_L          (204),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                 //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                           // clk_reset.reset
		.in_valid             (cmd_demux_001_src3_valid),                                                                             //      sink.valid
		.in_channel           (cmd_demux_001_src3_channel),                                                                           //          .channel
		.in_startofpacket     (cmd_demux_001_src3_startofpacket),                                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src3_endofpacket),                                                                       //          .endofpacket
		.in_ready             (cmd_demux_001_src3_ready),                                                                             //          .ready
		.in_data              (cmd_demux_001_src3_data),                                                                              //          .data
		.out_endofpacket      (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_from_eth_to_ddr_eth_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (197),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (203),
		.OUT_PKT_BURST_SIZE_L          (201),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (205),
		.OUT_PKT_BURST_TYPE_L          (204),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                          // clk_reset.reset
		.in_valid             (cmd_demux_001_src11_valid),                                                                           //      sink.valid
		.in_channel           (cmd_demux_001_src11_channel),                                                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src11_startofpacket),                                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src11_endofpacket),                                                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src11_ready),                                                                           //          .ready
		.in_data              (cmd_demux_001_src11_data),                                                                            //          .data
		.out_endofpacket      (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_dma_fifo_susbystem_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (197),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (203),
		.OUT_PKT_BURST_SIZE_L          (201),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (205),
		.OUT_PKT_BURST_TYPE_L          (204),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src12_valid),                                                                             //      sink.valid
		.in_channel           (cmd_demux_001_src12_channel),                                                                           //          .channel
		.in_startofpacket     (cmd_demux_001_src12_startofpacket),                                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src12_endofpacket),                                                                       //          .endofpacket
		.in_ready             (cmd_demux_001_src12_ready),                                                                             //          .ready
		.in_data              (cmd_demux_001_src12_data),                                                                              //          .data
		.out_endofpacket      (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_dma_fifo_subsystem_1_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (197),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (203),
		.OUT_PKT_BURST_SIZE_L          (201),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (205),
		.OUT_PKT_BURST_TYPE_L          (204),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src13_valid),                                                                             //      sink.valid
		.in_channel           (cmd_demux_001_src13_channel),                                                                           //          .channel
		.in_startofpacket     (cmd_demux_001_src13_startofpacket),                                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src13_endofpacket),                                                                       //          .endofpacket
		.in_ready             (cmd_demux_001_src13_ready),                                                                             //          .ready
		.in_data              (cmd_demux_001_src13_data),                                                                              //          .data
		.out_endofpacket      (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_dma_fifo_subsystem_2_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (197),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (203),
		.OUT_PKT_BURST_SIZE_L          (201),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (205),
		.OUT_PKT_BURST_TYPE_L          (204),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src14_valid),                                                                             //      sink.valid
		.in_channel           (cmd_demux_001_src14_channel),                                                                           //          .channel
		.in_startofpacket     (cmd_demux_001_src14_startofpacket),                                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src14_endofpacket),                                                                       //          .endofpacket
		.in_ready             (cmd_demux_001_src14_ready),                                                                             //          .ready
		.in_data              (cmd_demux_001_src14_data),                                                                              //          .data
		.out_endofpacket      (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_dma_fifo_subsystem_3_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (92),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (95),
		.IN_PKT_BURST_SIZE_L           (93),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (97),
		.IN_PKT_BURST_TYPE_L           (96),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (197),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (203),
		.OUT_PKT_BURST_SIZE_L          (201),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (205),
		.OUT_PKT_BURST_TYPE_L          (204),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_valid             (cmd_demux_001_src15_valid),                                                                             //      sink.valid
		.in_channel           (cmd_demux_001_src15_channel),                                                                           //          .channel
		.in_startofpacket     (cmd_demux_001_src15_startofpacket),                                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src15_endofpacket),                                                                       //          .endofpacket
		.in_ready             (cmd_demux_001_src15_ready),                                                                             //          .ready
		.in_data              (cmd_demux_001_src15_data),                                                                              //          .data
		.out_endofpacket      (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios_cpu_data_master_to_dma_fifo_subsystem_4_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (341),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (344),
		.IN_PKT_BURSTWRAP_L            (342),
		.IN_PKT_BURST_SIZE_H           (347),
		.IN_PKT_BURST_SIZE_L           (345),
		.IN_PKT_RESPONSE_STATUS_H      (373),
		.IN_PKT_RESPONSE_STATUS_L      (372),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (349),
		.IN_PKT_BURST_TYPE_L           (348),
		.IN_PKT_ORI_BURST_SIZE_L       (374),
		.IN_PKT_ORI_BURST_SIZE_H       (376),
		.IN_ST_DATA_W                  (377),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                     //       clk.clk
		.reset                (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                     //          .ready
		.in_data              (rsp_demux_src1_data),                                                      //          .data
		.out_endofpacket      (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr2_ram_avl_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (341),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (344),
		.IN_PKT_BURSTWRAP_L            (342),
		.IN_PKT_BURST_SIZE_H           (347),
		.IN_PKT_BURST_SIZE_L           (345),
		.IN_PKT_RESPONSE_STATUS_H      (373),
		.IN_PKT_RESPONSE_STATUS_L      (372),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (349),
		.IN_PKT_BURST_TYPE_L           (348),
		.IN_PKT_ORI_BURST_SIZE_L       (374),
		.IN_PKT_ORI_BURST_SIZE_H       (376),
		.IN_ST_DATA_W                  (377),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (ddr2_ram_1_afi_clk_clk),                                                     //       clk.clk
		.reset                (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                   //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                                 //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                             //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                   //          .ready
		.in_data              (rsp_demux_001_src1_data),                                                    //          .data
		.out_endofpacket      (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (197),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (200),
		.IN_PKT_BURSTWRAP_L            (198),
		.IN_PKT_BURST_SIZE_H           (203),
		.IN_PKT_BURST_SIZE_L           (201),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (205),
		.IN_PKT_BURST_TYPE_L           (204),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                 //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                           // clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                                                             //      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                                                           //          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                                                       //          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                                                             //          .ready
		.in_data              (rsp_demux_003_src0_data),                                                                              //          .data
		.out_endofpacket      (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (from_eth_to_ddr_eth_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (197),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (200),
		.IN_PKT_BURSTWRAP_L            (198),
		.IN_PKT_BURST_SIZE_H           (203),
		.IN_PKT_BURST_SIZE_L           (201),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (205),
		.IN_PKT_BURST_TYPE_L           (204),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                          // clk_reset.reset
		.in_valid             (rsp_demux_011_src0_valid),                                                                            //      sink.valid
		.in_channel           (rsp_demux_011_src0_channel),                                                                          //          .channel
		.in_startofpacket     (rsp_demux_011_src0_startofpacket),                                                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src0_endofpacket),                                                                      //          .endofpacket
		.in_ready             (rsp_demux_011_src0_ready),                                                                            //          .ready
		.in_data              (rsp_demux_011_src0_data),                                                                             //          .data
		.out_endofpacket      (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_fifo_susbystem_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (197),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (200),
		.IN_PKT_BURSTWRAP_L            (198),
		.IN_PKT_BURST_SIZE_H           (203),
		.IN_PKT_BURST_SIZE_L           (201),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (205),
		.IN_PKT_BURST_TYPE_L           (204),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_valid             (rsp_demux_012_src0_valid),                                                                              //      sink.valid
		.in_channel           (rsp_demux_012_src0_channel),                                                                            //          .channel
		.in_startofpacket     (rsp_demux_012_src0_startofpacket),                                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_012_src0_endofpacket),                                                                        //          .endofpacket
		.in_ready             (rsp_demux_012_src0_ready),                                                                              //          .ready
		.in_data              (rsp_demux_012_src0_data),                                                                               //          .data
		.out_endofpacket      (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_fifo_subsystem_1_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (197),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (200),
		.IN_PKT_BURSTWRAP_L            (198),
		.IN_PKT_BURST_SIZE_H           (203),
		.IN_PKT_BURST_SIZE_L           (201),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (205),
		.IN_PKT_BURST_TYPE_L           (204),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_valid             (rsp_demux_013_src0_valid),                                                                              //      sink.valid
		.in_channel           (rsp_demux_013_src0_channel),                                                                            //          .channel
		.in_startofpacket     (rsp_demux_013_src0_startofpacket),                                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_013_src0_endofpacket),                                                                        //          .endofpacket
		.in_ready             (rsp_demux_013_src0_ready),                                                                              //          .ready
		.in_data              (rsp_demux_013_src0_data),                                                                               //          .data
		.out_endofpacket      (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_fifo_subsystem_2_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (197),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (200),
		.IN_PKT_BURSTWRAP_L            (198),
		.IN_PKT_BURST_SIZE_H           (203),
		.IN_PKT_BURST_SIZE_L           (201),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (205),
		.IN_PKT_BURST_TYPE_L           (204),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_valid             (rsp_demux_014_src0_valid),                                                                              //      sink.valid
		.in_channel           (rsp_demux_014_src0_channel),                                                                            //          .channel
		.in_startofpacket     (rsp_demux_014_src0_startofpacket),                                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_014_src0_endofpacket),                                                                        //          .endofpacket
		.in_ready             (rsp_demux_014_src0_ready),                                                                              //          .ready
		.in_data              (rsp_demux_014_src0_data),                                                                               //          .data
		.out_endofpacket      (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_fifo_subsystem_3_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (197),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (200),
		.IN_PKT_BURSTWRAP_L            (198),
		.IN_PKT_BURST_SIZE_H           (203),
		.IN_PKT_BURST_SIZE_L           (201),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (205),
		.IN_PKT_BURST_TYPE_L           (204),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (95),
		.OUT_PKT_BURST_SIZE_L          (93),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (97),
		.OUT_PKT_BURST_TYPE_L          (96),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter (
		.clk                  (ddr2_ram_afi_clk_clk),                                                                                  //       clk.clk
		.reset                (nios_cpu_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_valid             (rsp_demux_015_src0_valid),                                                                              //      sink.valid
		.in_channel           (rsp_demux_015_src0_channel),                                                                            //          .channel
		.in_startofpacket     (rsp_demux_015_src0_startofpacket),                                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_015_src0_endofpacket),                                                                        //          .endofpacket
		.in_ready             (rsp_demux_015_src0_ready),                                                                              //          .ready
		.in_data              (rsp_demux_015_src0_data),                                                                               //          .data
		.out_endofpacket      (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_fifo_subsystem_4_dma_descriptor_slave_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                 // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (377),
		.BITS_PER_SYMBOL     (377),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (ddr2_ram_afi_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios_cpu_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (ddr2_ram_1_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                        //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                      //              .channel
		.in_data           (cmd_demux_src1_data),                                         //              .data
		.out_ready         (crosser_out_ready),                                           //           out.ready
		.out_valid         (crosser_out_valid),                                           //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                   //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                     //              .endofpacket
		.out_channel       (crosser_out_channel),                                         //              .channel
		.out_data          (crosser_out_data),                                            //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (377),
		.BITS_PER_SYMBOL     (377),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (ddr2_ram_afi_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios_cpu_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (ddr2_ram_1_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_006_src0_ready),                                    //            in.ready
		.in_valid          (cmd_demux_006_src0_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_006_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_006_src0_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_006_src0_channel),                                  //              .channel
		.in_data           (cmd_demux_006_src0_data),                                     //              .data
		.out_ready         (crosser_001_out_ready),                                       //           out.ready
		.out_valid         (crosser_001_out_valid),                                       //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                     //              .channel
		.out_data          (crosser_001_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (377),
		.BITS_PER_SYMBOL     (377),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (ddr2_ram_afi_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios_cpu_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (ddr2_ram_1_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_007_src0_ready),                                    //            in.ready
		.in_valid          (cmd_demux_007_src0_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_007_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_007_src0_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_007_src0_channel),                                  //              .channel
		.in_data           (cmd_demux_007_src0_data),                                     //              .data
		.out_ready         (crosser_002_out_ready),                                       //           out.ready
		.out_valid         (crosser_002_out_valid),                                       //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                     //              .channel
		.out_data          (crosser_002_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (377),
		.BITS_PER_SYMBOL     (377),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (ddr2_ram_1_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ddr2_ram_afi_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios_cpu_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                    //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                  //              .channel
		.in_data           (rsp_demux_001_src0_data),                                     //              .data
		.out_ready         (crosser_003_out_ready),                                       //           out.ready
		.out_valid         (crosser_003_out_valid),                                       //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                     //              .channel
		.out_data          (crosser_003_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (377),
		.BITS_PER_SYMBOL     (377),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (ddr2_ram_1_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ddr2_ram_afi_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios_cpu_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src2_ready),                                    //            in.ready
		.in_valid          (rsp_demux_001_src2_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_001_src2_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src2_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_001_src2_channel),                                  //              .channel
		.in_data           (rsp_demux_001_src2_data),                                     //              .data
		.out_ready         (crosser_004_out_ready),                                       //           out.ready
		.out_valid         (crosser_004_out_valid),                                       //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                     //              .channel
		.out_data          (crosser_004_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (377),
		.BITS_PER_SYMBOL     (377),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (ddr2_ram_1_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ddr2_ram_afi_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios_cpu_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src3_ready),                                    //            in.ready
		.in_valid          (rsp_demux_001_src3_valid),                                    //              .valid
		.in_startofpacket  (rsp_demux_001_src3_startofpacket),                            //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src3_endofpacket),                              //              .endofpacket
		.in_channel        (rsp_demux_001_src3_channel),                                  //              .channel
		.in_data           (rsp_demux_001_src3_data),                                     //              .data
		.out_ready         (crosser_005_out_ready),                                       //           out.ready
		.out_valid         (crosser_005_out_valid),                                       //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                     //              .channel
		.out_data          (crosser_005_out_data),                                        //              .data
		.in_empty          (1'b0),                                                        //   (terminated)
		.in_error          (1'b0),                                                        //   (terminated)
		.out_empty         (),                                                            //   (terminated)
		.out_error         ()                                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (377),
		.BITS_PER_SYMBOL     (377),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (ddr2_ram_afi_clk_clk),                                                       //        in_clk.clk
		.in_reset          (nios_cpu_reset_reset_bridge_in_reset_reset),                                 //  in_clk_reset.reset
		.out_clk           (ddr2_ram_1_afi_clk_clk),                                                     //       out_clk.clk
		.out_reset         (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (nios_cpu_data_master_to_ddr2_ram_1_avl_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_006_out_ready),                                                      //           out.ready
		.out_valid         (crosser_006_out_valid),                                                      //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                              //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                                //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                                    //              .channel
		.out_data          (crosser_006_out_data),                                                       //              .data
		.in_empty          (1'b0),                                                                       //   (terminated)
		.in_error          (1'b0),                                                                       //   (terminated)
		.out_empty         (),                                                                           //   (terminated)
		.out_error         ()                                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (ddr2_ram_1_afi_clk_clk),                                                     //        in_clk.clk
		.in_reset          (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (ddr2_ram_afi_clk_clk),                                                       //       out_clk.clk
		.out_reset         (nios_cpu_reset_reset_bridge_in_reset_reset),                                 // out_clk_reset.reset
		.in_ready          (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (ddr2_ram_1_avl_to_nios_cpu_data_master_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_007_out_ready),                                                      //           out.ready
		.out_valid         (crosser_007_out_valid),                                                      //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                              //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                                //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                                    //              .channel
		.out_data          (crosser_007_out_data),                                                       //              .data
		.in_empty          (1'b0),                                                                       //   (terminated)
		.in_error          (1'b0),                                                                       //   (terminated)
		.out_empty         (),                                                                           //   (terminated)
		.out_error         ()                                                                            //   (terminated)
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (ddr2_ram_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr2_ram_avl_agent_rdata_fifo_src_data),                    //     in_0.data
		.in_0_valid     (ddr2_ram_avl_agent_rdata_fifo_src_valid),                   //         .valid
		.in_0_ready     (ddr2_ram_avl_agent_rdata_fifo_src_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (ddr2_ram_1_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (ddr2_ram_1_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr2_ram_1_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (ddr2_ram_1_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (ddr2_ram_1_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (from_eth_to_ddr_eth_dma_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                       //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),                          // in_rst_0.reset
		.in_0_data      (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (from_eth_to_ddr_eth_dma_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                    //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                  //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios_cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                    //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_susbystem_dma_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                      //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_subsystem_1_dma_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                        //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_subsystem_2_dma_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                        //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_subsystem_3_dma_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                        //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_subsystem_4_dma_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                        //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),                         // in_rst_0.reset
		.in_0_data      (dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_susbystem_dma_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                   //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),                           // in_rst_0.reset
		.in_0_data      (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_subsystem_1_dma_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                                     //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),                           // in_rst_0.reset
		.in_0_data      (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_subsystem_2_dma_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                                     //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),                           // in_rst_0.reset
		.in_0_data      (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_subsystem_3_dma_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                                     //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset),                           // in_rst_0.reset
		.in_0_data      (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (dma_fifo_subsystem_4_dma_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                                     //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (system_ram_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (system_ram_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (system_ram_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ctrl_sig_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (ctrl_sig_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (ctrl_sig_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_timer_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (sys_timer_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (sys_timer_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pilot_sig_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (pilot_sig_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (pilot_sig_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (input_io_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (input_io_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (input_io_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (input_io_0_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (input_io_0_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (input_io_0_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (input_io_1_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (input_io_1_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (input_io_1_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (input_io_2_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (input_io_2_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (input_io_2_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (input_io_3_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (input_io_3_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (input_io_3_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (input_io_4_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (input_io_4_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (input_io_4_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)           //         .error
	);

	testbench_ls_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (ddr2_ram_afi_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (nios_cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (input_io_5_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (input_io_5_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (input_io_5_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)           //         .error
	);

endmodule
