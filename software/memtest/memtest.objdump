
memtest.elf:     file format elf32-littlenios2
memtest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8008018c

Program Header:
    LOAD off    0x00001000 vaddr 0x80080000 paddr 0x80080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x80080020 paddr 0x80080020 align 2**12
         filesz 0x0001ccbc memsz 0x0001ccbc flags r-x
    LOAD off    0x0001dcdc vaddr 0x8009ccdc paddr 0x8009ea20 align 2**12
         filesz 0x00001d44 memsz 0x00001d44 flags rw-
    LOAD off    0x00020764 vaddr 0x800a0764 paddr 0x800a0764 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  80080000  80080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  80080020  80080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b658  8008018c  8008018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000014f8  8009b7e4  8009b7e4  0001c7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d44  8009ccdc  8009ea20  0001dcdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  800a0764  800a0764  00020764  2**2
                  ALLOC, SMALL_DATA
  6 .ddr2_ram     00000000  00000000  00000000  0001fa20  2**0
                  CONTENTS
  7 .ddr2_ram_1   00000000  40000000  40000000  0001fa20  2**0
                  CONTENTS
  8 .system_ram   00000000  800a08cc  800a08cc  0001fa20  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0001fa20  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001400  00000000  00000000  0001fa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000397b4  00000000  00000000  00020e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000dc41  00000000  00000000  0005a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000126ae  00000000  00000000  0006823d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002db4  00000000  00000000  0007a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005500  00000000  00000000  0007d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00029bb6  00000000  00000000  00082ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000ac758  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000026c8  00000000  00000000  000ac7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000b3432  2**0
                  CONTENTS, READONLY
 20 .cpu          00000008  00000000  00000000  000b3435  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000b343d  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000b343e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  000b343f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  000b3443  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  000b3447  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  000b344b  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002c  00000000  00000000  000b3457  2**0
                  CONTENTS, READONLY
 28 .jdi          0000b8f8  00000000  00000000  000b3483  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00228673  00000000  00000000  000bed7b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80080000 l    d  .entry	00000000 .entry
80080020 l    d  .exceptions	00000000 .exceptions
8008018c l    d  .text	00000000 .text
8009b7e4 l    d  .rodata	00000000 .rodata
8009ccdc l    d  .rwdata	00000000 .rwdata
800a0764 l    d  .bss	00000000 .bss
00000000 l    d  .ddr2_ram	00000000 .ddr2_ram
40000000 l    d  .ddr2_ram_1	00000000 .ddr2_ram_1
800a08cc l    d  .system_ram	00000000 .system_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testbench_ls_bsp//obj/HAL/src/crt0.o
800801d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 memtest.c
800801d8 l     F .text	0000007c MenuHeader
80080254 l     F .text	00000058 MenuBegin
800802ac l     F .text	0000004c MenuItem
80080388 l     F .text	00000104 MenuEnd
800a0764 l     O .bss	00000004 entry.3380
800a0768 l     O .bss	00000001 ch.3381
8008048c l     F .text	00000114 MemGetAddressRange
800805a0 l     F .text	00000074 MemTestDataBus
80080614 l     F .text	000001e0 MemTestAddressBus
800807f4 l     F .text	00000220 MemTest8_16BitAccess
80080a14 l     F .text	000001a4 MemTestDevice
80080bb8 l     F .text	000001b4 TestRam
80080d6c l     F .text	00000148 FlashCheckIfBlockErased
80080eb4 l     F .text	0000030c FlashTestBlockWrite
800811c0 l     F .text	000002fc FlashTestReadWrite
800814bc l     F .text	000000f0 FlashTestBlockErase
800815ac l     F .text	0000012c FlashRunTests
800816d8 l     F .text	00000180 GetFlashName
80081858 l     F .text	00000330 FlashErase
80081b88 l     F .text	00000278 FlashFindErasedBlocks
80081e00 l     F .text	000001d0 TestFlash
80081fd0 l     F .text	00000170 TopMenu
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
8009ccdc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfscanf.c
8009c2ca l     O .rodata	00000022 basefix.4340
00000000 l    df *ABS*	00000000 vfprintf.c
8009c32e l     O .rodata	00000010 zeroes.4404
80086d08 l     F .text	000000bc __sbprintf
8009c33e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
8009c44f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
80086fcc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
80088afc l     F .text	00000008 __fp_unlock
80088b10 l     F .text	0000019c __sinit.part.1
80088cac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8009d528 l     O .rwdata	00000020 lc_ctype_charset
8009d508 l     O .rwdata	00000020 lc_message_charset
8009d548 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8009c5ec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
8008b8f0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8008bdcc l     F .text	00000064 sulp
8009c734 l     O .rodata	00000014 fpi.2737
8009c748 l     O .rodata	00000028 tinytens
8009c720 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfscanf.c
8009c770 l     O .rodata	00000022 basefix.3791
00000000 l    df *ABS*	00000000 vfprintf.c
8009c792 l     O .rodata	00000010 zeroes.4389
8009c7a2 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
8009176c l     F .text	000000fc __sprint_r.part.0
8009c7c2 l     O .rodata	00000010 blanks.4348
8009c7b2 l     O .rodata	00000010 zeroes.4349
80092cf8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
80093338 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8009c8e2 l     O .rodata	00000010 blanks.4332
8009c8d2 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
80098bc8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8009ea08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
8009d968 l     O .rwdata	00001060 jtag
8009d908 l     O .rwdata	00000060 dma_fifo_subsystem_1_dma
8009d8a8 l     O .rwdata	00000060 dma_fifo_subsystem_2_dma
8009d848 l     O .rwdata	00000060 dma_fifo_subsystem_3_dma
8009d7e8 l     O .rwdata	00000060 dma_fifo_subsystem_4_dma
8009d788 l     O .rwdata	00000060 dma_fifo_susbystem_dma
8009d728 l     O .rwdata	00000060 from_ETH_to_DDR_ETH_DMA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80099204 l     F .text	0000004c altera_avalon_jtag_uart_timeout
80099250 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
80099784 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
80099808 l     F .text	000000cc alt_msgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
800a07a0 g     O .bss	00000004 alt_instruction_exception_handler
8009a350 g     F .text	00000140 alt_msgdma_standard_descriptor_async_transfer
80082ea8 g     F .text	00000018 putchar
8008b04c g     F .text	00000074 _mprec_log10
8008b138 g     F .text	0000008c __any_on
80093ec4 g     F .text	00000054 _isatty_r
8009c5f8 g     O .rodata	00000028 __mprec_tinytens
80098e78 g     F .text	00000060 alt_main
80082ec0 g     F .text	000000c0 _puts_r
800a07cc g     O .bss	00000100 alt_irq
80089a20 g     F .text	00000060 _lseek_r
8009ea20 g       *ABS*	00000000 __flash_rwdata_start
80097490 g     F .text	00000088 .hidden __eqdf2
80099944 g     F .text	0000003c alt_msgdma_construct_standard_mm_to_mm_descriptor
800a08cc g       *ABS*	00000000 __alt_heap_start
80082e64 g     F .text	0000003c printf
800953f4 g     F .text	0000009c _wcrtomb_r
8008323c g     F .text	0000005c __sseek
80088e4c g     F .text	00000010 __sinit
80092db4 g     F .text	00000140 __swbuf_r
80089944 g     F .text	0000007c _setlocale_r
80088cb4 g     F .text	00000068 __sfmoreglue
80091754 g     F .text	00000018 ungetc
80098edc g     F .text	00000004 __malloc_unlock
8008be30 g     F .text	000015f8 _strtod_r
800802f8 g     F .text	00000090 GetInputString
8008e12c g     F .text	000000f4 _sfread_r
80089f44 g     F .text	0000015c memmove
80088e34 g     F .text	00000018 _cleanup
8008a1c8 g     F .text	000000a8 _Balloc
800998d4 g     F .text	00000038 alt_msgdma_construct_standard_st_to_mm_descriptor
80097518 g     F .text	000000dc .hidden __gtdf2
8009b324 g     F .text	00000008 altera_nios2_gen2_irq_init
80080000 g     F .entry	0000001c __reset
80080020 g       *ABS*	00000000 __flash_exceptions_start
800932dc g     F .text	0000005c _fstat_r
800a0778 g     O .bss	00000004 errno
80083008 g     F .text	00000014 __srget
800831b8 g     F .text	00000008 __seofread
800941b8 g     F .text	0000123c ___svfiprintf_internal_r
800a078c g     O .bss	00000004 alt_argv
800a69c8 g       *ABS*	00000000 _gp
80099ed8 g     F .text	0000005c alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8009d580 g     O .rwdata	00000180 alt_fd_list
80082344 g     F .text	00000070 _getc_r
800823b4 g     F .text	00000088 getc
80082ea0 g     F .text	00000008 _putchar_r
8009ac80 g     F .text	00000078 alt_find_dev
80082cec g     F .text	00000148 memcpy
80093c68 g     F .text	0000025c __hexnan
80088b04 g     F .text	0000000c _cleanup_r
8009877c g     F .text	000000dc .hidden __floatsidf
8009adf8 g     F .text	00000104 alt_io_redirect
800975f4 g     F .text	000000f4 .hidden __ltdf2
8009b7e4 g       *ABS*	00000000 __DTOR_END__
8009a18c g     F .text	00000084 alt_msgdma_start_prefetcher_with_extd_desc_list
8009a490 g     F .text	0000016c alt_msgdma_extended_descriptor_async_transfer
8009a340 g     F .text	00000010 alt_msgdma_register_callback
80082f80 g     F .text	00000014 puts
8009b478 g     F .text	00000074 alt_exception_cause_generated_bad_addr
80089ce8 g     F .text	000000d8 mbrtowc
8008bae0 g     F .text	00000074 __fpclassifyd
8008afa8 g     F .text	000000a4 __ratio
80092cdc g     F .text	0000001c __vfiprintf_internal
80099490 g     F .text	00000154 altera_avalon_jtag_uart_read
8008243c g     F .text	00000014 malloc
80099db0 g     F .text	00000060 alt_msgdma_prefetcher_add_standard_desc_to_list
80082e34 g     F .text	00000030 _printf_r
80082288 g     F .text	00000064 .hidden __udivsi3
80098cac g     F .text	00000084 isatty
80089914 g     F .text	00000030 iswspace
8009c648 g     O .rodata	000000c8 __mprec_tens
800899c0 g     F .text	0000000c __locale_charset
80096234 g     F .text	000000c8 .hidden __lesf2
800955dc g     F .text	00000074 .hidden __fixunsdfsi
8009b428 g     F .text	00000050 alt_icache_flush
800a0774 g     O .bss	00000004 __malloc_top_pad
8008e0bc g     F .text	00000070 __ssrefill_r
8008dcc0 g     F .text	0000001c strtoul
8009e9dc g     O .rwdata	00000004 __mb_cur_max
800899f0 g     F .text	0000000c _localeconv_r
8008dcdc g     F .text	000002d8 _strtoull_r
8008a5d4 g     F .text	0000003c __i2b
800892d0 g     F .text	000004bc __sfvwrite_r
8008301c g     F .text	00000054 _sbrk_r
8008b32c g     F .text	00000060 _read_r
8009e9e8 g     O .rwdata	00000004 alt_max_fd
80092fd0 g     F .text	000000f0 _fclose_r
80088acc g     F .text	00000030 fflush
800a0770 g     O .bss	00000004 __malloc_max_sbrked_mem
80083338 g     F .text	000017bc __ssvfscanf_r
800962fc g     F .text	000008ac .hidden __adddf3
80096100 g     F .text	00000078 .hidden __nesf2
8008ad50 g     F .text	0000010c __b2d
80099b50 g     F .text	00000048 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
80095bc8 g     F .text	00000538 .hidden __umoddi3
80098dfc g     F .text	0000007c lseek
8009e9c8 g     O .rwdata	00000004 _global_impure_ptr
8008b38c g     F .text	00000564 _realloc_r
800a08cc g       *ABS*	00000000 __bss_end
8009ad90 g     F .text	00000068 alt_iic_isr_register
8009b230 g     F .text	000000f4 alt_tick
8009c7d2 g     O .rodata	00000100 __hexdig
8009a260 g     F .text	000000e0 alt_msgdma_init
80095650 g     F .text	00000578 .hidden __udivdi3
80093238 g     F .text	00000024 _fputwc_r
8009c620 g     O .rodata	00000028 __mprec_bigtens
8008a3b8 g     F .text	00000104 __s2b
80098858 g     F .text	000000a8 .hidden __floatunsidf
8008aa90 g     F .text	00000060 __mcmp
8009a808 g     F .text	00000234 alt_msgdma_extended_descriptor_sync_transfer
80088e6c g     F .text	00000018 __fp_lock_all
8009ad78 g     F .text	00000018 alt_ic_irq_enabled
8009b1fc g     F .text	00000034 alt_alarm_stop
8008d778 g     F .text	0000001c strtol
800a0794 g     O .bss	00000004 alt_irq_active
800800fc g     F .exceptions	00000064 alt_irq_handler
8009d700 g     O .rwdata	00000028 alt_dev_null
800999f8 g     F .text	00000078 alt_msgdma_construct_extended_mm_to_st_descriptor
8009a044 g     F .text	00000148 alt_msgdma_start_prefetcher_with_std_desc_list
80080000 g       *ABS*	00000000 __alt_mem_system_ram
8009ab34 g     F .text	00000018 alt_dcache_flush_all
8008a4bc g     F .text	00000068 __hi0bits
800986fc g     F .text	00000080 .hidden __fixdfsi
8008d428 g     F .text	00000018 strtod
8009ea20 g       *ABS*	00000000 __ram_rwdata_end
8009e9ec g     O .rwdata	00000008 alt_dev_list
80099018 g     F .text	000000c4 write
8008b1c4 g     F .text	000000a0 _putc_r
80096178 g     F .text	000000bc .hidden __gtsf2
8009ccdc g       *ABS*	00000000 __ram_rodata_end
80098c34 g     F .text	00000078 fstat
800975f4 g     F .text	000000f4 .hidden __ledf2
8008a808 g     F .text	00000140 __pow5mult
80091880 g     F .text	0000145c ___vfiprintf_internal_r
800a0784 g     O .bss	00000004 __nlocale_changed
800822ec g     F .text	00000058 .hidden __umodsi3
80099b98 g     F .text	00000048 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
800a08cc g       *ABS*	00000000 end
80099358 g     F .text	00000078 altera_avalon_jtag_uart_init
80080160 g     F .exceptions	0000002c alt_instruction_exception_entry
8009b7e4 g       *ABS*	00000000 __CTOR_LIST__
800fd000 g       *ABS*	00000000 __alt_stack_pointer
800997c0 g     F .text	00000048 alt_avalon_timer_sc_init
80098aa8 g     F .text	00000064 .hidden __clzsi2
800995e4 g     F .text	000001a0 altera_avalon_jtag_uart_write
80088e5c g     F .text	00000004 __sfp_lock_acquire
80089e60 g     F .text	000000e4 memchr
80084af4 g     F .text	000021f8 ___vfprintf_internal_r
8008bc2c g     F .text	00000058 _sprintf_r
80088fc0 g     F .text	00000310 _free_r
8009b074 g     F .text	0000017c alt_printf
800899cc g     F .text	00000010 __locale_mb_cur_max
8009b650 g     F .text	00000180 __call_exitprocs
80082f94 g     F .text	00000074 __srget_r
8008dfb4 g     F .text	00000108 _sungetc_r
800a0780 g     O .bss	00000004 __mlocale_changed
8009e9d0 g     O .rwdata	00000004 __malloc_sbrk_base
8008018c g     F .text	0000004c _start
800a079c g     O .bss	00000004 _alt_tick_rate
8008d794 g     F .text	000002e0 _strtoll_r
8008a948 g     F .text	00000148 __lshift
800a0798 g     O .bss	00000004 _alt_nticks
8009990c g     F .text	00000038 alt_msgdma_construct_standard_mm_to_st_descriptor
80098ee0 g     F .text	000000c8 read
800990fc g     F .text	000000cc alt_sys_init
80093fe8 g     F .text	000001d0 __ssprint_r
8009b538 g     F .text	00000118 __register_exitproc
80093f18 g     F .text	000000d0 strncmp
8008a610 g     F .text	000001f8 __multiply
800993d0 g     F .text	0000004c altera_avalon_jtag_uart_close
8009ccdc g       *ABS*	00000000 __ram_rwdata_start
8009b7e4 g       *ABS*	00000000 __ram_rodata_start
800a07a4 g     O .bss	00000028 __malloc_current_mallinfo
80096100 g     F .text	00000078 .hidden __eqsf2
8008ae5c g     F .text	0000014c __d2b
800991c8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
8008da74 g     F .text	0000024c _strtoul_r
8009b3d8 g     F .text	00000050 alt_get_fd
8009aabc g     F .text	00000078 alt_busy_sleep
80086f78 g     F .text	00000054 _close_r
40000000 g       *ABS*	00000000 __alt_mem_ddr2_ram_1
80099b04 g     F .text	0000004c alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
80082c70 g     F .text	0000007c memcmp
800991e8 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
800a08cc g       *ABS*	00000000 __alt_stack_base
800991f8 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
80099be0 g     F .text	00000090 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
80083070 g     F .text	0000007c sscanf
80086e24 g     F .text	00000154 __swsetup_r
80096ba8 g     F .text	000008e8 .hidden __divdf3
80088d1c g     F .text	00000118 __sfp
8008b0c0 g     F .text	00000078 __copybits
8009d100 g     O .rwdata	00000408 __malloc_av_
80088e68 g     F .text	00000004 __sinit_lock_release
800976e8 g     F .text	00000718 .hidden __muldf3
80083164 g     F .text	00000054 __sread
8009b32c g     F .text	000000ac alt_find_file
8009ab4c g     F .text	0000006c alt_dev_llist_insert
80098ed8 g     F .text	00000004 __malloc_lock
80098fcc g     F .text	0000004c sbrk
8008f314 g     F .text	000021d8 ___svfprintf_internal_r
80088a70 g     F .text	0000005c _fflush_r
80092f0c g     F .text	000000c4 _calloc_r
8009ea00 g     O .rwdata	00000008 alt_flash_dev_list
800a0764 g       *ABS*	00000000 __bss_start
8008a0a0 g     F .text	00000128 memset
8009a210 g     F .text	00000050 alt_msgdma_open
80082140 g     F .text	00000050 main
800a0788 g     O .bss	00000004 alt_envp
800a076c g     O .bss	00000004 __malloc_max_total_mem
80099e10 g     F .text	00000084 alt_msgdma_prefetcher_add_extended_desc_to_list
800991d8 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
80092ef4 g     F .text	00000018 __swbuf
80096234 g     F .text	000000c8 .hidden __ltsf2
80083298 g     F .text	00000008 __sclose
800fd000 g       *ABS*	00000000 __alt_heap_limit
800930c0 g     F .text	00000014 fclose
8008d540 g     F .text	00000238 _strtol_r
80098900 g     F .text	000001a8 .hidden __truncdfsf2
800871cc g     F .text	00001688 _dtoa_r
80099f34 g     F .text	00000110 alt_msgdma_start_prefetcher_with_list_addr
80082464 g     F .text	0000080c _malloc_r
80095550 g     F .text	00000030 __ascii_wctomb
8009e9fc g     O .rwdata	00000004 alt_errno
80099d00 g     F .text	000000b0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
800914ec g     F .text	000000d4 __submore
8008978c g     F .text	000000c4 _fwalk
80089e04 g     F .text	0000005c _mbtowc_r
8008b264 g     F .text	000000c8 putc
80082190 g     F .text	00000084 .hidden __divsi3
80088e9c g     F .text	00000124 _malloc_trim_r
8009b7e4 g       *ABS*	00000000 __CTOR_END__
8008bcf0 g     F .text	000000dc strcmp
8009b7e4 g       *ABS*	00000000 __flash_rodata_start
8009b7e4 g       *ABS*	00000000 __DTOR_LIST__
80097490 g     F .text	00000088 .hidden __nedf2
800990dc g     F .text	00000020 alt_irq_init
80098fa8 g     F .text	00000024 alt_release_fd
8009a5fc g     F .text	0000020c alt_msgdma_standard_descriptor_sync_transfer
8008bc84 g     F .text	0000006c sprintf
8009c8f2 g     O .rodata	00000100 .hidden __clz_tab
800a077c g     O .bss	00000004 _PathLocale
8008d440 g     F .text	00000100 strtof
8009b4ec g     F .text	00000014 atexit
80096178 g     F .text	000000bc .hidden __gesf2
80086dc4 g     F .text	00000060 _write_r
800899fc g     F .text	00000018 setlocale
80099c70 g     F .text	00000090 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8008bc24 g     F .text	00000008 nanf
8009e9cc g     O .rwdata	00000004 _impure_ptr
800a0790 g     O .bss	00000004 alt_argc
80088854 g     F .text	0000021c __sflush_r
80089c3c g     F .text	000000ac _mbrtowc_r
8009ac1c g     F .text	00000064 _do_dtors
800899e8 g     F .text	00000008 __locale_cjk_lang
8008b90c g     F .text	000001d4 __srefill_r
80080020 g       .exceptions	00000000 alt_irq_entry
80089dc0 g     F .text	00000044 __ascii_mbtowc
8008acec g     F .text	00000064 __ulp
80088e84 g     F .text	00000018 __fp_unlock_all
8009e9f4 g     O .rwdata	00000008 alt_fs_list
8008e220 g     F .text	000010f4 __ssvfiscanf_r
80080020 g       *ABS*	00000000 __ram_exceptions_start
80089a14 g     F .text	0000000c localeconv
8009ad04 g     F .text	00000004 alt_ic_isr_register
800830ec g     F .text	00000078 _sscanf_r
8009ea20 g       *ABS*	00000000 _edata
800a08cc g       *ABS*	00000000 _end
80098bd0 g     F .text	00000050 alt_flash_open_dev
800930d4 g     F .text	00000164 __fputwc
8008018c g       *ABS*	00000000 __ram_exceptions_end
8009941c g     F .text	00000074 altera_avalon_jtag_uart_ioctl
8009ad40 g     F .text	00000038 alt_ic_irq_disable
800831c0 g     F .text	0000007c __swrite
8009e9d4 g     O .rwdata	00000004 __malloc_trim_threshold
800899dc g     F .text	0000000c __locale_msgcharset
8009b500 g     F .text	00000038 exit
80089850 g     F .text	000000c4 _fwalk_reent
80099e94 g     F .text	00000044 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8008aaf0 g     F .text	000001fc __mdiff
80098c20 g     F .text	00000014 alt_flash_close_dev
80082214 g     F .text	00000074 .hidden __modsi3
8009e9d8 g     O .rwdata	00000004 __ctype_ptr__
800fd000 g       *ABS*	00000000 __alt_data_end
80080020 g     F .exceptions	00000000 alt_exception
80088e60 g     F .text	00000004 __sfp_lock_release
80099a70 g     F .text	00000094 alt_msgdma_construct_extended_mm_to_mm_descriptor
8008bb54 g     F .text	000000d0 __sccl
8009c34e g     O .rodata	00000101 _ctype_
80099980 g     F .text	00000078 alt_msgdma_construct_extended_st_to_mm_descriptor
8009e9e0 g     O .rwdata	00000004 __mbtowc
8009b7d0 g     F .text	00000014 _exit
8009aa3c g     F .text	00000080 alt_alarm_start
00000000 g       *ABS*	00000000 __alt_mem_ddr2_ram
80089a80 g     F .text	000001bc __smakebuf_r
8009ea0c g     O .rwdata	00000008 alt_msgdma_list
800832a0 g     F .text	00000098 strlen
8009aefc g     F .text	00000178 open
80097518 g     F .text	000000dc .hidden __gedf2
8009b1f0 g     F .text	0000000c alt_putchar
80093438 g     F .text	00000830 __gethex
8009e9e4 g     O .rwdata	00000004 __wctomb
80091868 g     F .text	00000018 __sprint_r
8009acf8 g     F .text	0000000c alt_icache_flush_all
8009ea14 g     O .rwdata	00000004 alt_priority_mask
8009ad08 g     F .text	00000038 alt_ic_irq_enable
80086cec g     F .text	0000001c __vfprintf_internal
80095580 g     F .text	0000005c _wctomb_r
80097e00 g     F .text	000008fc .hidden __subdf3
8008a524 g     F .text	000000b0 __lo0bits
8009ea18 g     O .rwdata	00000008 alt_alarm_list
800915c0 g     F .text	00000194 _ungetc_r
8009abb8 g     F .text	00000064 _do_ctors
80095490 g     F .text	000000c0 wcrtomb
80098b0c g     F .text	000000bc close
80098d30 g     F .text	000000cc alt_load
8009325c g     F .text	00000080 fputwc
80082450 g     F .text	00000014 free
80088e64 g     F .text	00000004 __sinit_lock_acquire
8008a298 g     F .text	00000120 __multadd
8008a270 g     F .text	00000028 _Bfree



Disassembly of section .entry:

80080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
80080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
80080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
80080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
8008000c:	00bffd16 	blt	zero,r2,80080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
80080010:	00600234 	movhi	at,32776
    ori r1, r1, %lo(_start)
80080014:	08406314 	ori	at,at,396
    jmp r1
80080018:	0800683a 	jmp	at
8008001c:	00000000 	call	80000000 <__alt_mem_ddr2_ram_1+0x40000000>

Disassembly of section .exceptions:

80080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8008007c:	10000326 	beq	r2,zero,8008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80080080:	20000226 	beq	r4,zero,8008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80080084:	00800fc0 	call	800800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80080088:	00000706 	br	800800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8008008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80080098:	00801600 	call	80080160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8008009c:	1000021e 	bne	r2,zero,800800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
800800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
800800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
800800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
800800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
800800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
800800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
800800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
800800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
800800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
800800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
800800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
800800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
800800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
800800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
800800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
800800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
800800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
800800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
800800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
800800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
800800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
800800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
800800f8:	ef80083a 	eret

800800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
800800fc:	defffe04 	addi	sp,sp,-8
80080100:	dfc00115 	stw	ra,4(sp)
80080104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80080108:	000b313a 	rdctl	r5,ipending
8008010c:	042002b4 	movhi	r16,32778
80080110:	8401f304 	addi	r16,r16,1996
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
80080114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
80080118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8008011c:	1000051e 	bne	r2,zero,80080134 <alt_irq_handler+0x38>
80080120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
80080124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
80080128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
8008012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
80080130:	203ffc26 	beq	r4,zero,80080124 <alt_irq_handler+0x28>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
80080134:	180690fa 	slli	r3,r3,3
80080138:	80c7883a 	add	r3,r16,r3
8008013c:	18800017 	ldw	r2,0(r3)
80080140:	19000117 	ldw	r4,4(r3)
80080144:	103ee83a 	callr	r2
80080148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
8008014c:	283ff11e 	bne	r5,zero,80080114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
80080150:	dfc00117 	ldw	ra,4(sp)
80080154:	dc000017 	ldw	r16,0(sp)
80080158:	dec00204 	addi	sp,sp,8
8008015c:	f800283a 	ret

80080160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
80080160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
80080164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
80080168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8008016c:	d0a77617 	ldw	r2,-25128(gp)
80080170:	10000326 	beq	r2,zero,80080180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
80080174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
80080178:	2008d0ba 	srli	r4,r4,2
8008017c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80080180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
80080184:	0005883a 	mov	r2,zero
80080188:	f800283a 	ret

Disassembly of section .text:

8008018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
8008018c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
80080190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
80080194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
80080198:	00bffd16 	blt	zero,r2,80080190 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
8008019c:	06e003f4 	movhi	sp,32783
    ori sp, sp, %lo(__alt_stack_pointer)
800801a0:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
800801a4:	06a002b4 	movhi	gp,32778
    ori gp, gp, %lo(_gp)
800801a8:	d69a7214 	ori	gp,gp,27080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
800801ac:	00a002b4 	movhi	r2,32778
    ori r2, r2, %lo(__bss_start)
800801b0:	1081d914 	ori	r2,r2,1892

    movhi r3, %hi(__bss_end)
800801b4:	00e002b4 	movhi	r3,32778
    ori r3, r3, %lo(__bss_end)
800801b8:	18c23314 	ori	r3,r3,2252

    beq r2, r3, 1f
800801bc:	10c00326 	beq	r2,r3,800801cc <_start+0x40>

0:
    stw zero, (r2)
800801c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
800801c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
800801c8:	10fffd36 	bltu	r2,r3,800801c0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
800801cc:	0098d300 	call	80098d30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
800801d0:	0098e780 	call	80098e78 <alt_main>

800801d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
800801d4:	003fff06 	br	800801d4 <alt_after_alt_main>

800801d8 <MenuHeader>:
*
*  Purpose: Prints the menu header.
*
******************************************************************/
static void MenuHeader(void)
{
800801d8:	defffe04 	addi	sp,sp,-8
800801dc:	dfc00115 	stw	ra,4(sp)
800801e0:	df000015 	stw	fp,0(sp)
800801e4:	d839883a 	mov	fp,sp
  printf("\n\n");
800801e8:	012002b4 	movhi	r4,32778
800801ec:	212df904 	addi	r4,r4,-18460
800801f0:	0082f800 	call	80082f80 <puts>
  printf("             <---->   Nios II Memory Test.   <---->\n");
800801f4:	012002b4 	movhi	r4,32778
800801f8:	212dfa04 	addi	r4,r4,-18456
800801fc:	0082f800 	call	80082f80 <puts>
  printf("This software example tests the memory in your system to assure it\n");
80080200:	012002b4 	movhi	r4,32778
80080204:	212e0704 	addi	r4,r4,-18404
80080208:	0082f800 	call	80082f80 <puts>
  printf("is working properly.  This test is destructive to the contents of\n");
8008020c:	012002b4 	movhi	r4,32778
80080210:	212e1804 	addi	r4,r4,-18336
80080214:	0082f800 	call	80082f80 <puts>
  printf("the memory it tests. Assure the memory being tested does not contain\n");
80080218:	012002b4 	movhi	r4,32778
8008021c:	212e2904 	addi	r4,r4,-18268
80080220:	0082f800 	call	80082f80 <puts>
  printf("the executable or data sections of this code or the exception address\n");
80080224:	012002b4 	movhi	r4,32778
80080228:	212e3b04 	addi	r4,r4,-18196
8008022c:	0082f800 	call	80082f80 <puts>
  printf("of the system.\n");
80080230:	012002b4 	movhi	r4,32778
80080234:	212e4d04 	addi	r4,r4,-18124
80080238:	0082f800 	call	80082f80 <puts>
}
8008023c:	0001883a 	nop
80080240:	e037883a 	mov	sp,fp
80080244:	dfc00117 	ldw	ra,4(sp)
80080248:	df000017 	ldw	fp,0(sp)
8008024c:	dec00204 	addi	sp,sp,8
80080250:	f800283a 	ret

80080254 <MenuBegin>:
*
*  Purpose: Prints the top portion of the menu.
*
******************************************************************/
static void MenuBegin( char *title )
{
80080254:	defffd04 	addi	sp,sp,-12
80080258:	dfc00215 	stw	ra,8(sp)
8008025c:	df000115 	stw	fp,4(sp)
80080260:	df000104 	addi	fp,sp,4
80080264:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
80080268:	012002b4 	movhi	r4,32778
8008026c:	212df904 	addi	r4,r4,-18460
80080270:	0082f800 	call	80082f80 <puts>
  printf("----------------------------------\n");
80080274:	012002b4 	movhi	r4,32778
80080278:	212e5104 	addi	r4,r4,-18108
8008027c:	0082f800 	call	80082f80 <puts>
  printf("%s\n",title);
80080280:	e13fff17 	ldw	r4,-4(fp)
80080284:	0082f800 	call	80082f80 <puts>
  printf("----------------------------------\n");
80080288:	012002b4 	movhi	r4,32778
8008028c:	212e5104 	addi	r4,r4,-18108
80080290:	0082f800 	call	80082f80 <puts>
}
80080294:	0001883a 	nop
80080298:	e037883a 	mov	sp,fp
8008029c:	dfc00117 	ldw	ra,4(sp)
800802a0:	df000017 	ldw	fp,0(sp)
800802a4:	dec00204 	addi	sp,sp,8
800802a8:	f800283a 	ret

800802ac <MenuItem>:
*  Purpose: Prints selection items in the menu, enumerated by the 
*           specified letter.
*
******************************************************************/
static void MenuItem( char letter, char *name )
{
800802ac:	defffc04 	addi	sp,sp,-16
800802b0:	dfc00315 	stw	ra,12(sp)
800802b4:	df000215 	stw	fp,8(sp)
800802b8:	df000204 	addi	fp,sp,8
800802bc:	2005883a 	mov	r2,r4
800802c0:	e17fff15 	stw	r5,-4(fp)
800802c4:	e0bffe05 	stb	r2,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
800802c8:	e0bffe07 	ldb	r2,-8(fp)
800802cc:	e1bfff17 	ldw	r6,-4(fp)
800802d0:	100b883a 	mov	r5,r2
800802d4:	012002b4 	movhi	r4,32778
800802d8:	212e5a04 	addi	r4,r4,-18072
800802dc:	0082e640 	call	80082e64 <printf>
}
800802e0:	0001883a 	nop
800802e4:	e037883a 	mov	sp,fp
800802e8:	dfc00117 	ldw	ra,4(sp)
800802ec:	df000017 	ldw	fp,0(sp)
800802f0:	dec00204 	addi	sp,sp,8
800802f4:	f800283a 	ret

800802f8 <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
800802f8:	defff904 	addi	sp,sp,-28
800802fc:	dfc00615 	stw	ra,24(sp)
80080300:	df000515 	stw	fp,20(sp)
80080304:	df000504 	addi	fp,sp,20
80080308:	e13ffd15 	stw	r4,-12(fp)
8008030c:	e17ffe15 	stw	r5,-8(fp)
80080310:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
80080314:	e03ffc15 	stw	zero,-16(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
80080318:	e03ffb15 	stw	zero,-20(fp)
8008031c:	00000e06 	br	80080358 <GetInputString+0x60>
  {
    if( (ch = getc(stream)) != '\r')
80080320:	e13fff17 	ldw	r4,-4(fp)
80080324:	00823b40 	call	800823b4 <getc>
80080328:	e0bffc15 	stw	r2,-16(fp)
8008032c:	e0bffc17 	ldw	r2,-16(fp)
80080330:	10800360 	cmpeqi	r2,r2,13
80080334:	1000081e 	bne	r2,zero,80080358 <GetInputString+0x60>
    {
      entry[i] = ch;
80080338:	e0bffb17 	ldw	r2,-20(fp)
8008033c:	e0fffd17 	ldw	r3,-12(fp)
80080340:	1885883a 	add	r2,r3,r2
80080344:	e0fffc17 	ldw	r3,-16(fp)
80080348:	10c00005 	stb	r3,0(r2)
      i++;
8008034c:	e0bffb17 	ldw	r2,-20(fp)
80080350:	10800044 	addi	r2,r2,1
80080354:	e0bffb15 	stw	r2,-20(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
80080358:	e0bffc17 	ldw	r2,-16(fp)
8008035c:	108002a0 	cmpeqi	r2,r2,10
80080360:	1000031e 	bne	r2,zero,80080370 <GetInputString+0x78>
80080364:	e0fffb17 	ldw	r3,-20(fp)
80080368:	e0bffe17 	ldw	r2,-8(fp)
8008036c:	18bfec16 	blt	r3,r2,80080320 <GetInputString+0x28>
    {
      entry[i] = ch;
      i++;
    }
  }
}
80080370:	0001883a 	nop
80080374:	e037883a 	mov	sp,fp
80080378:	dfc00117 	ldw	ra,4(sp)
8008037c:	df000017 	ldw	fp,0(sp)
80080380:	dec00204 	addi	sp,sp,8
80080384:	f800283a 	ret

80080388 <MenuEnd>:
*  Purpose: Prints the end of the menu, then captures and returns
*           the user's selection.
*
******************************************************************/
static int MenuEnd( char lowLetter, char highLetter )
{
80080388:	defffc04 	addi	sp,sp,-16
8008038c:	dfc00315 	stw	ra,12(sp)
80080390:	df000215 	stw	fp,8(sp)
80080394:	df000204 	addi	fp,sp,8
80080398:	2007883a 	mov	r3,r4
8008039c:	2805883a 	mov	r2,r5
800803a0:	e0fffe05 	stb	r3,-8(fp)
800803a4:	e0bfff05 	stb	r2,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
800803a8:	012002b4 	movhi	r4,32778
800803ac:	212e5e04 	addi	r4,r4,-18056
800803b0:	0082f800 	call	80082f80 <puts>
  printf("----------------------------------\n");
800803b4:	012002b4 	movhi	r4,32778
800803b8:	212e5104 	addi	r4,r4,-18108
800803bc:	0082f800 	call	80082f80 <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
800803c0:	e0bffe07 	ldb	r2,-8(fp)
800803c4:	e0ffff07 	ldb	r3,-4(fp)
800803c8:	180d883a 	mov	r6,r3
800803cc:	100b883a 	mov	r5,r2
800803d0:	012002b4 	movhi	r4,32778
800803d4:	212e6204 	addi	r4,r4,-18040
800803d8:	0082e640 	call	80082e64 <printf>

  GetInputString( entry, sizeof(entry), stdin );
800803dc:	d0a00117 	ldw	r2,-32764(gp)
800803e0:	10800117 	ldw	r2,4(r2)
800803e4:	100d883a 	mov	r6,r2
800803e8:	01400104 	movi	r5,4
800803ec:	d1276704 	addi	r4,gp,-25188
800803f0:	00802f80 	call	800802f8 <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
800803f4:	d1a76804 	addi	r6,gp,-25184
800803f8:	016002b4 	movhi	r5,32778
800803fc:	296e6e04 	addi	r5,r5,-17992
80080400:	d1276704 	addi	r4,gp,-25188
80080404:	00830700 	call	80083070 <sscanf>
80080408:	10001726 	beq	r2,zero,80080468 <MenuEnd+0xe0>
  {
    if( ch >= 'A' && ch <= 'Z' )
8008040c:	d0a76803 	ldbu	r2,-25184(gp)
80080410:	10803fcc 	andi	r2,r2,255
80080414:	1080201c 	xori	r2,r2,128
80080418:	10bfe004 	addi	r2,r2,-128
8008041c:	10801050 	cmplti	r2,r2,65
80080420:	1000091e 	bne	r2,zero,80080448 <MenuEnd+0xc0>
80080424:	d0a76803 	ldbu	r2,-25184(gp)
80080428:	10803fcc 	andi	r2,r2,255
8008042c:	1080201c 	xori	r2,r2,128
80080430:	10bfe004 	addi	r2,r2,-128
80080434:	108016c8 	cmpgei	r2,r2,91
80080438:	1000031e 	bne	r2,zero,80080448 <MenuEnd+0xc0>
      ch += 'a' - 'A';
8008043c:	d0a76803 	ldbu	r2,-25184(gp)
80080440:	10800804 	addi	r2,r2,32
80080444:	d0a76805 	stb	r2,-25184(gp)
    if( ch == 27 )
80080448:	d0a76803 	ldbu	r2,-25184(gp)
8008044c:	10803fcc 	andi	r2,r2,255
80080450:	1080201c 	xori	r2,r2,128
80080454:	10bfe004 	addi	r2,r2,-128
80080458:	108006d8 	cmpnei	r2,r2,27
8008045c:	1000021e 	bne	r2,zero,80080468 <MenuEnd+0xe0>
      ch = 'q';
80080460:	00801c44 	movi	r2,113
80080464:	d0a76805 	stb	r2,-25184(gp)
  }
  return ch;
80080468:	d0a76803 	ldbu	r2,-25184(gp)
8008046c:	10803fcc 	andi	r2,r2,255
80080470:	1080201c 	xori	r2,r2,128
80080474:	10bfe004 	addi	r2,r2,-128
}
80080478:	e037883a 	mov	sp,fp
8008047c:	dfc00117 	ldw	ra,4(sp)
80080480:	df000017 	ldw	fp,0(sp)
80080484:	dec00204 	addi	sp,sp,8
80080488:	f800283a 	ret

8008048c <MemGetAddressRange>:
*
*  Purpose: Gathers a range of memory from the user.
*
******************************************************************/
static int MemGetAddressRange(int* base_address, int* end_address)
{
8008048c:	defff904 	addi	sp,sp,-28
80080490:	dfc00615 	stw	ra,24(sp)
80080494:	df000515 	stw	fp,20(sp)
80080498:	df000504 	addi	fp,sp,20
8008049c:	e13ffe15 	stw	r4,-8(fp)
800804a0:	e17fff15 	stw	r5,-4(fp)
  char line[12];

  while(1)
  {
    /* Get the base address */
    printf("Base address to start memory test: (i.e. 0x800000)\n");
800804a4:	012002b4 	movhi	r4,32778
800804a8:	212e6f04 	addi	r4,r4,-17988
800804ac:	0082f800 	call	80082f80 <puts>
    printf(">");
800804b0:	01000f84 	movi	r4,62
800804b4:	0082ea80 	call	80082ea8 <putchar>

    GetInputString( line, sizeof(line), stdin );
800804b8:	d0a00117 	ldw	r2,-32764(gp)
800804bc:	10800117 	ldw	r2,4(r2)
800804c0:	100d883a 	mov	r6,r2
800804c4:	01400304 	movi	r5,12
800804c8:	e13ffb04 	addi	r4,fp,-20
800804cc:	00802f80 	call	800802f8 <GetInputString>
   
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", base_address) != 1)
800804d0:	e1bffe17 	ldw	r6,-8(fp)
800804d4:	016002b4 	movhi	r5,32778
800804d8:	296e7c04 	addi	r5,r5,-17936
800804dc:	e13ffb04 	addi	r4,fp,-20
800804e0:	00830700 	call	80083070 <sscanf>
800804e4:	10800060 	cmpeqi	r2,r2,1
800804e8:	1000061e 	bne	r2,zero,80080504 <MemGetAddressRange+0x78>
    {
      printf("%s\n", line);
800804ec:	e13ffb04 	addi	r4,fp,-20
800804f0:	0082f800 	call	80082f80 <puts>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
800804f4:	012002b4 	movhi	r4,32778
800804f8:	212e7e04 	addi	r4,r4,-17928
800804fc:	0082f800 	call	80082f80 <puts>
      continue;
80080500:	00001f06 	br	80080580 <MemGetAddressRange+0xf4>
    }
    
    /* Get the end address */
    printf("End Address:\n");
80080504:	012002b4 	movhi	r4,32778
80080508:	212e9204 	addi	r4,r4,-17848
8008050c:	0082f800 	call	80082f80 <puts>
    printf(">");
80080510:	01000f84 	movi	r4,62
80080514:	0082ea80 	call	80082ea8 <putchar>

    GetInputString( line, sizeof(line), stdin );
80080518:	d0a00117 	ldw	r2,-32764(gp)
8008051c:	10800117 	ldw	r2,4(r2)
80080520:	100d883a 	mov	r6,r2
80080524:	01400304 	movi	r5,12
80080528:	e13ffb04 	addi	r4,fp,-20
8008052c:	00802f80 	call	800802f8 <GetInputString>
    
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", end_address) != 1)
80080530:	e1bfff17 	ldw	r6,-4(fp)
80080534:	016002b4 	movhi	r5,32778
80080538:	296e7c04 	addi	r5,r5,-17936
8008053c:	e13ffb04 	addi	r4,fp,-20
80080540:	00830700 	call	80083070 <sscanf>
80080544:	10800060 	cmpeqi	r2,r2,1
80080548:	1000041e 	bne	r2,zero,8008055c <MemGetAddressRange+0xd0>
    {
      printf(" -ERROR: Invalid end address entered.  Address must be in the form '0x8FFFFF'\n\n");
8008054c:	012002b4 	movhi	r4,32778
80080550:	212e9604 	addi	r4,r4,-17832
80080554:	0082f800 	call	80082f80 <puts>
      continue;
80080558:	00000906 	br	80080580 <MemGetAddressRange+0xf4>
    }
    
    /* Make sure end address is greater than base address. */
    if (*end_address <= *base_address)
8008055c:	e0bfff17 	ldw	r2,-4(fp)
80080560:	10800017 	ldw	r2,0(r2)
80080564:	e0fffe17 	ldw	r3,-8(fp)
80080568:	18c00017 	ldw	r3,0(r3)
8008056c:	18800516 	blt	r3,r2,80080584 <MemGetAddressRange+0xf8>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");
80080570:	012002b4 	movhi	r4,32778
80080574:	212eaa04 	addi	r4,r4,-17752
80080578:	0082f800 	call	80082f80 <puts>

      continue;
8008057c:	0001883a 	nop
    }
    break;
  }
80080580:	003fc806 	br	800804a4 <MemGetAddressRange+0x18>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");

      continue;
    }
    break;
80080584:	0001883a 	nop
  }

  return(0);
80080588:	0005883a 	mov	r2,zero
}
8008058c:	e037883a 	mov	sp,fp
80080590:	dfc00117 	ldw	ra,4(sp)
80080594:	df000017 	ldw	fp,0(sp)
80080598:	dec00204 	addi	sp,sp,8
8008059c:	f800283a 	ret

800805a0 <MemTestDataBus>:
*  Purpose: Tests that the data bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestDataBus(unsigned int address)
{
800805a0:	defffc04 	addi	sp,sp,-16
800805a4:	df000315 	stw	fp,12(sp)
800805a8:	df000304 	addi	fp,sp,12
800805ac:	e13fff15 	stw	r4,-4(fp)
  unsigned int pattern;
  unsigned int ret_code = 0x0;
800805b0:	e03ffe15 	stw	zero,-8(fp)

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
800805b4:	00800044 	movi	r2,1
800805b8:	e0bffd15 	stw	r2,-12(fp)
800805bc:	00000e06 	br	800805f8 <MemTestDataBus+0x58>
  {
    /* Write the test pattern. */
    IOWR_32DIRECT(address, 0, pattern);
800805c0:	e0bfff17 	ldw	r2,-4(fp)
800805c4:	e0fffd17 	ldw	r3,-12(fp)
800805c8:	10c00035 	stwio	r3,0(r2)

    /* Read it back (immediately is okay for this test). */
    if (IORD_32DIRECT(address, 0) != pattern)
800805cc:	e0bfff17 	ldw	r2,-4(fp)
800805d0:	10800037 	ldwio	r2,0(r2)
800805d4:	1007883a 	mov	r3,r2
800805d8:	e0bffd17 	ldw	r2,-12(fp)
800805dc:	18800326 	beq	r3,r2,800805ec <MemTestDataBus+0x4c>
    {
      ret_code = pattern;
800805e0:	e0bffd17 	ldw	r2,-12(fp)
800805e4:	e0bffe15 	stw	r2,-8(fp)
      break;
800805e8:	00000506 	br	80080600 <MemTestDataBus+0x60>
{
  unsigned int pattern;
  unsigned int ret_code = 0x0;

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
800805ec:	e0bffd17 	ldw	r2,-12(fp)
800805f0:	1085883a 	add	r2,r2,r2
800805f4:	e0bffd15 	stw	r2,-12(fp)
800805f8:	e0bffd17 	ldw	r2,-12(fp)
800805fc:	103ff01e 	bne	r2,zero,800805c0 <MemTestDataBus+0x20>
    {
      ret_code = pattern;
      break;
    }
  }
  return ret_code;
80080600:	e0bffe17 	ldw	r2,-8(fp)
}
80080604:	e037883a 	mov	sp,fp
80080608:	df000017 	ldw	fp,0(sp)
8008060c:	dec00104 	addi	sp,sp,4
80080610:	f800283a 	ret

80080614 <MemTestAddressBus>:
*  Purpose: Tests that the address bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestAddressBus(unsigned int memory_base, unsigned int nBytes)
{
80080614:	defff704 	addi	sp,sp,-36
80080618:	df000815 	stw	fp,32(sp)
8008061c:	df000804 	addi	fp,sp,32
80080620:	e13ffe15 	stw	r4,-8(fp)
80080624:	e17fff15 	stw	r5,-4(fp)
  unsigned int address_mask = (nBytes - 1);
80080628:	e0bfff17 	ldw	r2,-4(fp)
8008062c:	10bfffc4 	addi	r2,r2,-1
80080630:	e0bffb15 	stw	r2,-20(fp)
  unsigned int offset;
  unsigned int test_offset;

  unsigned int pattern     = 0xAAAAAAAA;
80080634:	00aaaaf4 	movhi	r2,43691
80080638:	10aaaa84 	addi	r2,r2,-21846
8008063c:	e0bffc15 	stw	r2,-16(fp)
  unsigned int antipattern  = 0x55555555;
80080640:	00955574 	movhi	r2,21845
80080644:	10955544 	addi	r2,r2,21845
80080648:	e0bffd15 	stw	r2,-12(fp)

  unsigned int ret_code = 0x0;
8008064c:	e03ffa15 	stw	zero,-24(fp)

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
80080650:	00800104 	movi	r2,4
80080654:	e0bff815 	stw	r2,-32(fp)
80080658:	00000906 	br	80080680 <MemTestAddressBus+0x6c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
8008065c:	e0fff817 	ldw	r3,-32(fp)
80080660:	e0bffe17 	ldw	r2,-8(fp)
80080664:	1885883a 	add	r2,r3,r2
80080668:	1007883a 	mov	r3,r2
8008066c:	e0bffc17 	ldw	r2,-16(fp)
80080670:	18800035 	stwio	r2,0(r3)
  unsigned int antipattern  = 0x55555555;

  unsigned int ret_code = 0x0;

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
80080674:	e0bff817 	ldw	r2,-32(fp)
80080678:	1085883a 	add	r2,r2,r2
8008067c:	e0bff815 	stw	r2,-32(fp)
80080680:	e0fff817 	ldw	r3,-32(fp)
80080684:	e0bffb17 	ldw	r2,-20(fp)
80080688:	1884703a 	and	r2,r3,r2
8008068c:	103ff31e 	bne	r2,zero,8008065c <MemTestAddressBus+0x48>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
80080690:	e03ff915 	stw	zero,-28(fp)
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
80080694:	e0fff917 	ldw	r3,-28(fp)
80080698:	e0bffe17 	ldw	r2,-8(fp)
8008069c:	1885883a 	add	r2,r3,r2
800806a0:	1007883a 	mov	r3,r2
800806a4:	e0bffd17 	ldw	r2,-12(fp)
800806a8:	18800035 	stwio	r2,0(r3)
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
800806ac:	00800104 	movi	r2,4
800806b0:	e0bff815 	stw	r2,-32(fp)
800806b4:	00000f06 	br	800806f4 <MemTestAddressBus+0xe0>
  {
     if (IORD_32DIRECT(memory_base, offset) != pattern)
800806b8:	e0fff817 	ldw	r3,-32(fp)
800806bc:	e0bffe17 	ldw	r2,-8(fp)
800806c0:	1885883a 	add	r2,r3,r2
800806c4:	10800037 	ldwio	r2,0(r2)
800806c8:	1007883a 	mov	r3,r2
800806cc:	e0bffc17 	ldw	r2,-16(fp)
800806d0:	18800526 	beq	r3,r2,800806e8 <MemTestAddressBus+0xd4>
     {
        ret_code = (memory_base+offset);
800806d4:	e0fffe17 	ldw	r3,-8(fp)
800806d8:	e0bff817 	ldw	r2,-32(fp)
800806dc:	1885883a 	add	r2,r3,r2
800806e0:	e0bffa15 	stw	r2,-24(fp)
        break;
800806e4:	00000706 	br	80080704 <MemTestAddressBus+0xf0>
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
800806e8:	e0bff817 	ldw	r2,-32(fp)
800806ec:	1085883a 	add	r2,r2,r2
800806f0:	e0bff815 	stw	r2,-32(fp)
800806f4:	e0fff817 	ldw	r3,-32(fp)
800806f8:	e0bffb17 	ldw	r2,-20(fp)
800806fc:	1884703a 	and	r2,r3,r2
80080700:	103fed1e 	bne	r2,zero,800806b8 <MemTestAddressBus+0xa4>
        break;
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
80080704:	e0fff917 	ldw	r3,-28(fp)
80080708:	e0bffe17 	ldw	r2,-8(fp)
8008070c:	1885883a 	add	r2,r3,r2
80080710:	1007883a 	mov	r3,r2
80080714:	e0bffc17 	ldw	r2,-16(fp)
80080718:	18800035 	stwio	r2,0(r3)
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
8008071c:	00800104 	movi	r2,4
80080720:	e0bff915 	stw	r2,-28(fp)
80080724:	00002a06 	br	800807d0 <MemTestAddressBus+0x1bc>
  {
    if (!ret_code)
80080728:	e0bffa17 	ldw	r2,-24(fp)
8008072c:	1000251e 	bne	r2,zero,800807c4 <MemTestAddressBus+0x1b0>
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
80080730:	e0fff917 	ldw	r3,-28(fp)
80080734:	e0bffe17 	ldw	r2,-8(fp)
80080738:	1885883a 	add	r2,r3,r2
8008073c:	1007883a 	mov	r3,r2
80080740:	e0bffd17 	ldw	r2,-12(fp)
80080744:	18800035 	stwio	r2,0(r3)
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
80080748:	00800104 	movi	r2,4
8008074c:	e0bff815 	stw	r2,-32(fp)
80080750:	00001206 	br	8008079c <MemTestAddressBus+0x188>
      {
        if ((IORD_32DIRECT(memory_base, offset) != pattern) && (offset != test_offset))
80080754:	e0fff817 	ldw	r3,-32(fp)
80080758:	e0bffe17 	ldw	r2,-8(fp)
8008075c:	1885883a 	add	r2,r3,r2
80080760:	10800037 	ldwio	r2,0(r2)
80080764:	1007883a 	mov	r3,r2
80080768:	e0bffc17 	ldw	r2,-16(fp)
8008076c:	18800826 	beq	r3,r2,80080790 <MemTestAddressBus+0x17c>
80080770:	e0fff817 	ldw	r3,-32(fp)
80080774:	e0bff917 	ldw	r2,-28(fp)
80080778:	18800526 	beq	r3,r2,80080790 <MemTestAddressBus+0x17c>
        {
          ret_code = (memory_base + test_offset);
8008077c:	e0fffe17 	ldw	r3,-8(fp)
80080780:	e0bff917 	ldw	r2,-28(fp)
80080784:	1885883a 	add	r2,r3,r2
80080788:	e0bffa15 	stw	r2,-24(fp)
          break;
8008078c:	00000706 	br	800807ac <MemTestAddressBus+0x198>
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
  {
    if (!ret_code)
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
80080790:	e0bff817 	ldw	r2,-32(fp)
80080794:	1085883a 	add	r2,r2,r2
80080798:	e0bff815 	stw	r2,-32(fp)
8008079c:	e0fff817 	ldw	r3,-32(fp)
800807a0:	e0bffb17 	ldw	r2,-20(fp)
800807a4:	1884703a 	and	r2,r3,r2
800807a8:	103fea1e 	bne	r2,zero,80080754 <MemTestAddressBus+0x140>
        {
          ret_code = (memory_base + test_offset);
          break;
        }
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
800807ac:	e0fff917 	ldw	r3,-28(fp)
800807b0:	e0bffe17 	ldw	r2,-8(fp)
800807b4:	1885883a 	add	r2,r3,r2
800807b8:	1007883a 	mov	r3,r2
800807bc:	e0bffc17 	ldw	r2,-16(fp)
800807c0:	18800035 	stwio	r2,0(r3)
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
800807c4:	e0bff917 	ldw	r2,-28(fp)
800807c8:	1085883a 	add	r2,r2,r2
800807cc:	e0bff915 	stw	r2,-28(fp)
800807d0:	e0fff917 	ldw	r3,-28(fp)
800807d4:	e0bffb17 	ldw	r2,-20(fp)
800807d8:	1884703a 	and	r2,r3,r2
800807dc:	103fd21e 	bne	r2,zero,80080728 <MemTestAddressBus+0x114>
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
    }
  }

  return ret_code;
800807e0:	e0bffa17 	ldw	r2,-24(fp)
}
800807e4:	e037883a 	mov	sp,fp
800807e8:	df000017 	ldw	fp,0(sp)
800807ec:	dec00104 	addi	sp,sp,4
800807f0:	f800283a 	ret

800807f4 <MemTest8_16BitAccess>:
*           can be read and written in both byte and half-word 
*           modes.
*
******************************************************************/
static int MemTest8_16BitAccess(unsigned int memory_base)
{
800807f4:	defffd04 	addi	sp,sp,-12
800807f8:	df000215 	stw	fp,8(sp)
800807fc:	df000204 	addi	fp,sp,8
80080800:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0x0;
80080804:	e03ffe15 	stw	zero,-8(fp)

  /* Write 4 bytes */
  IOWR_8DIRECT(memory_base, 0, 0x0A);
80080808:	e0bfff17 	ldw	r2,-4(fp)
8008080c:	00c00284 	movi	r3,10
80080810:	10c00025 	stbio	r3,0(r2)
  IOWR_8DIRECT(memory_base, 1, 0x05);
80080814:	e0bfff17 	ldw	r2,-4(fp)
80080818:	10800044 	addi	r2,r2,1
8008081c:	1007883a 	mov	r3,r2
80080820:	00800144 	movi	r2,5
80080824:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 2, 0xA0);
80080828:	e0bfff17 	ldw	r2,-4(fp)
8008082c:	10800084 	addi	r2,r2,2
80080830:	1007883a 	mov	r3,r2
80080834:	00bfe804 	movi	r2,-96
80080838:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 3, 0x50);
8008083c:	e0bfff17 	ldw	r2,-4(fp)
80080840:	108000c4 	addi	r2,r2,3
80080844:	1007883a 	mov	r3,r2
80080848:	00801404 	movi	r2,80
8008084c:	18800025 	stbio	r2,0(r3)

  /* Read it back as one word */
  if(IORD_32DIRECT(memory_base, 0) != 0x50A0050A)
80080850:	e0bfff17 	ldw	r2,-4(fp)
80080854:	10c00037 	ldwio	r3,0(r2)
80080858:	00942834 	movhi	r2,20640
8008085c:	10814284 	addi	r2,r2,1290
80080860:	18800226 	beq	r3,r2,8008086c <MemTest8_16BitAccess+0x78>
  {
    ret_code = memory_base;
80080864:	e0bfff17 	ldw	r2,-4(fp)
80080868:	e0bffe15 	stw	r2,-8(fp)
  }

  /* Read it back as two half-words */
  if (!ret_code)
8008086c:	e0bffe17 	ldw	r2,-8(fp)
80080870:	10000d1e 	bne	r2,zero,800808a8 <MemTest8_16BitAccess+0xb4>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
80080874:	e0bfff17 	ldw	r2,-4(fp)
80080878:	10800084 	addi	r2,r2,2
8008087c:	1080002b 	ldhuio	r2,0(r2)
80080880:	10bfffcc 	andi	r2,r2,65535
80080884:	10942818 	cmpnei	r2,r2,20640
80080888:	1000051e 	bne	r2,zero,800808a0 <MemTest8_16BitAccess+0xac>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
8008088c:	e0bfff17 	ldw	r2,-4(fp)
80080890:	1080002b 	ldhuio	r2,0(r2)
80080894:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
80080898:	108142a0 	cmpeqi	r2,r2,1290
8008089c:	1000021e 	bne	r2,zero,800808a8 <MemTest8_16BitAccess+0xb4>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
    {
      ret_code = memory_base;
800808a0:	e0bfff17 	ldw	r2,-4(fp)
800808a4:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
800808a8:	e0bffe17 	ldw	r2,-8(fp)
800808ac:	1000191e 	bne	r2,zero,80080914 <MemTest8_16BitAccess+0x120>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
800808b0:	e0bfff17 	ldw	r2,-4(fp)
800808b4:	108000c4 	addi	r2,r2,3
800808b8:	10800023 	ldbuio	r2,0(r2)
800808bc:	10803fcc 	andi	r2,r2,255
800808c0:	10801418 	cmpnei	r2,r2,80
800808c4:	1000111e 	bne	r2,zero,8008090c <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
800808c8:	e0bfff17 	ldw	r2,-4(fp)
800808cc:	10800084 	addi	r2,r2,2
800808d0:	10800023 	ldbuio	r2,0(r2)
800808d4:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
800808d8:	10802818 	cmpnei	r2,r2,160
800808dc:	10000b1e 	bne	r2,zero,8008090c <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
800808e0:	e0bfff17 	ldw	r2,-4(fp)
800808e4:	10800044 	addi	r2,r2,1
800808e8:	10800023 	ldbuio	r2,0(r2)
800808ec:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
800808f0:	10800158 	cmpnei	r2,r2,5
800808f4:	1000051e 	bne	r2,zero,8008090c <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
800808f8:	e0bfff17 	ldw	r2,-4(fp)
800808fc:	10800023 	ldbuio	r2,0(r2)
80080900:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
80080904:	108002a0 	cmpeqi	r2,r2,10
80080908:	1000021e 	bne	r2,zero,80080914 <MemTest8_16BitAccess+0x120>
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
    {
    ret_code = memory_base;
8008090c:	e0bfff17 	ldw	r2,-4(fp)
80080910:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Write 2 half-words */
  if (!ret_code)
80080914:	e0bffe17 	ldw	r2,-8(fp)
80080918:	10000f1e 	bne	r2,zero,80080958 <MemTest8_16BitAccess+0x164>
  {
    IOWR_16DIRECT(memory_base, 0, 0x50A0);
8008091c:	e0bfff17 	ldw	r2,-4(fp)
80080920:	00d42804 	movi	r3,20640
80080924:	10c0002d 	sthio	r3,0(r2)
    IOWR_16DIRECT(memory_base, 2, 0x050A);
80080928:	e0bfff17 	ldw	r2,-4(fp)
8008092c:	10800084 	addi	r2,r2,2
80080930:	1007883a 	mov	r3,r2
80080934:	00814284 	movi	r2,1290
80080938:	1880002d 	sthio	r2,0(r3)

    /* Read it back as one word */
    if(IORD_32DIRECT(memory_base, 0) != 0x050A50A0)
8008093c:	e0bfff17 	ldw	r2,-4(fp)
80080940:	10c00037 	ldwio	r3,0(r2)
80080944:	008142b4 	movhi	r2,1290
80080948:	10942804 	addi	r2,r2,20640
8008094c:	18800226 	beq	r3,r2,80080958 <MemTest8_16BitAccess+0x164>
    {
      ret_code = memory_base;
80080950:	e0bfff17 	ldw	r2,-4(fp)
80080954:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as two half-words */
  if (!ret_code)
80080958:	e0bffe17 	ldw	r2,-8(fp)
8008095c:	10000d1e 	bne	r2,zero,80080994 <MemTest8_16BitAccess+0x1a0>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
80080960:	e0bfff17 	ldw	r2,-4(fp)
80080964:	10800084 	addi	r2,r2,2
80080968:	1080002b 	ldhuio	r2,0(r2)
8008096c:	10bfffcc 	andi	r2,r2,65535
80080970:	10814298 	cmpnei	r2,r2,1290
80080974:	1000051e 	bne	r2,zero,8008098c <MemTest8_16BitAccess+0x198>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
80080978:	e0bfff17 	ldw	r2,-4(fp)
8008097c:	1080002b 	ldhuio	r2,0(r2)
80080980:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
80080984:	10942820 	cmpeqi	r2,r2,20640
80080988:	1000021e 	bne	r2,zero,80080994 <MemTest8_16BitAccess+0x1a0>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
    {
      ret_code = memory_base;
8008098c:	e0bfff17 	ldw	r2,-4(fp)
80080990:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
80080994:	e0bffe17 	ldw	r2,-8(fp)
80080998:	1000191e 	bne	r2,zero,80080a00 <MemTest8_16BitAccess+0x20c>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
8008099c:	e0bfff17 	ldw	r2,-4(fp)
800809a0:	108000c4 	addi	r2,r2,3
800809a4:	10800023 	ldbuio	r2,0(r2)
800809a8:	10803fcc 	andi	r2,r2,255
800809ac:	10800158 	cmpnei	r2,r2,5
800809b0:	1000111e 	bne	r2,zero,800809f8 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
800809b4:	e0bfff17 	ldw	r2,-4(fp)
800809b8:	10800084 	addi	r2,r2,2
800809bc:	10800023 	ldbuio	r2,0(r2)
800809c0:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
800809c4:	10800298 	cmpnei	r2,r2,10
800809c8:	10000b1e 	bne	r2,zero,800809f8 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
800809cc:	e0bfff17 	ldw	r2,-4(fp)
800809d0:	10800044 	addi	r2,r2,1
800809d4:	10800023 	ldbuio	r2,0(r2)
800809d8:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
800809dc:	10801418 	cmpnei	r2,r2,80
800809e0:	1000051e 	bne	r2,zero,800809f8 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
800809e4:	e0bfff17 	ldw	r2,-4(fp)
800809e8:	10800023 	ldbuio	r2,0(r2)
800809ec:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
800809f0:	10802820 	cmpeqi	r2,r2,160
800809f4:	1000021e 	bne	r2,zero,80080a00 <MemTest8_16BitAccess+0x20c>
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
    {
      ret_code = memory_base;
800809f8:	e0bfff17 	ldw	r2,-4(fp)
800809fc:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return(ret_code);
80080a00:	e0bffe17 	ldw	r2,-8(fp)
}
80080a04:	e037883a 	mov	sp,fp
80080a08:	df000017 	ldw	fp,0(sp)
80080a0c:	dec00104 	addi	sp,sp,4
80080a10:	f800283a 	ret

80080a14 <MemTestDevice>:
*  Purpose: Tests that every bit in the memory device within the 
*           specified address range can store both a '1' and a '0'.
*
******************************************************************/
static int MemTestDevice(unsigned int memory_base, unsigned int nBytes)
{
80080a14:	defff804 	addi	sp,sp,-32
80080a18:	dfc00715 	stw	ra,28(sp)
80080a1c:	df000615 	stw	fp,24(sp)
80080a20:	df000604 	addi	fp,sp,24
80080a24:	e13ffe15 	stw	r4,-8(fp)
80080a28:	e17fff15 	stw	r5,-4(fp)
  unsigned int offset;
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;
80080a2c:	e03ffc15 	stw	zero,-16(fp)

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080a30:	00800044 	movi	r2,1
80080a34:	e0bffb15 	stw	r2,-20(fp)
80080a38:	e03ffa15 	stw	zero,-24(fp)
80080a3c:	00000c06 	br	80080a70 <MemTestDevice+0x5c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
80080a40:	e0fffa17 	ldw	r3,-24(fp)
80080a44:	e0bffe17 	ldw	r2,-8(fp)
80080a48:	1885883a 	add	r2,r3,r2
80080a4c:	1007883a 	mov	r3,r2
80080a50:	e0bffb17 	ldw	r2,-20(fp)
80080a54:	18800035 	stwio	r2,0(r3)
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080a58:	e0bffb17 	ldw	r2,-20(fp)
80080a5c:	10800044 	addi	r2,r2,1
80080a60:	e0bffb15 	stw	r2,-20(fp)
80080a64:	e0bffa17 	ldw	r2,-24(fp)
80080a68:	10800104 	addi	r2,r2,4
80080a6c:	e0bffa15 	stw	r2,-24(fp)
80080a70:	e0fffa17 	ldw	r3,-24(fp)
80080a74:	e0bfff17 	ldw	r2,-4(fp)
80080a78:	18bff136 	bltu	r3,r2,80080a40 <MemTestDevice+0x2c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  printf(" .");
80080a7c:	012002b4 	movhi	r4,32778
80080a80:	212eba04 	addi	r4,r4,-17688
80080a84:	0082e640 	call	80082e64 <printf>

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080a88:	00800044 	movi	r2,1
80080a8c:	e0bffb15 	stw	r2,-20(fp)
80080a90:	e03ffa15 	stw	zero,-24(fp)
80080a94:	00001b06 	br	80080b04 <MemTestDevice+0xf0>
  {
    if (IORD_32DIRECT(memory_base, offset) != pattern)
80080a98:	e0fffa17 	ldw	r3,-24(fp)
80080a9c:	e0bffe17 	ldw	r2,-8(fp)
80080aa0:	1885883a 	add	r2,r3,r2
80080aa4:	10800037 	ldwio	r2,0(r2)
80080aa8:	1007883a 	mov	r3,r2
80080aac:	e0bffb17 	ldw	r2,-20(fp)
80080ab0:	18800526 	beq	r3,r2,80080ac8 <MemTestDevice+0xb4>
    {
      ret_code = (memory_base + offset);
80080ab4:	e0fffe17 	ldw	r3,-8(fp)
80080ab8:	e0bffa17 	ldw	r2,-24(fp)
80080abc:	1885883a 	add	r2,r3,r2
80080ac0:	e0bffc15 	stw	r2,-16(fp)
      break;
80080ac4:	00001206 	br	80080b10 <MemTestDevice+0xfc>
    }
    antipattern = ~pattern;
80080ac8:	e0bffb17 	ldw	r2,-20(fp)
80080acc:	0084303a 	nor	r2,zero,r2
80080ad0:	e0bffd15 	stw	r2,-12(fp)
    IOWR_32DIRECT(memory_base, offset, antipattern);
80080ad4:	e0fffa17 	ldw	r3,-24(fp)
80080ad8:	e0bffe17 	ldw	r2,-8(fp)
80080adc:	1885883a 	add	r2,r3,r2
80080ae0:	1007883a 	mov	r3,r2
80080ae4:	e0bffd17 	ldw	r2,-12(fp)
80080ae8:	18800035 	stwio	r2,0(r3)
  }

  printf(" .");

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080aec:	e0bffb17 	ldw	r2,-20(fp)
80080af0:	10800044 	addi	r2,r2,1
80080af4:	e0bffb15 	stw	r2,-20(fp)
80080af8:	e0bffa17 	ldw	r2,-24(fp)
80080afc:	10800104 	addi	r2,r2,4
80080b00:	e0bffa15 	stw	r2,-24(fp)
80080b04:	e0fffa17 	ldw	r3,-24(fp)
80080b08:	e0bfff17 	ldw	r2,-4(fp)
80080b0c:	18bfe236 	bltu	r3,r2,80080a98 <MemTestDevice+0x84>
    }
    antipattern = ~pattern;
    IOWR_32DIRECT(memory_base, offset, antipattern);
  }

  printf(" .");
80080b10:	012002b4 	movhi	r4,32778
80080b14:	212eba04 	addi	r4,r4,-17688
80080b18:	0082e640 	call	80082e64 <printf>

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080b1c:	00800044 	movi	r2,1
80080b20:	e0bffb15 	stw	r2,-20(fp)
80080b24:	e03ffa15 	stw	zero,-24(fp)
80080b28:	00001a06 	br	80080b94 <MemTestDevice+0x180>
  {
    antipattern = ~pattern;
80080b2c:	e0bffb17 	ldw	r2,-20(fp)
80080b30:	0084303a 	nor	r2,zero,r2
80080b34:	e0bffd15 	stw	r2,-12(fp)
    if (IORD_32DIRECT(memory_base, offset) != antipattern)
80080b38:	e0fffa17 	ldw	r3,-24(fp)
80080b3c:	e0bffe17 	ldw	r2,-8(fp)
80080b40:	1885883a 	add	r2,r3,r2
80080b44:	10800037 	ldwio	r2,0(r2)
80080b48:	1007883a 	mov	r3,r2
80080b4c:	e0bffd17 	ldw	r2,-12(fp)
80080b50:	18800526 	beq	r3,r2,80080b68 <MemTestDevice+0x154>
    {
      ret_code = (memory_base + offset);
80080b54:	e0fffe17 	ldw	r3,-8(fp)
80080b58:	e0bffa17 	ldw	r2,-24(fp)
80080b5c:	1885883a 	add	r2,r3,r2
80080b60:	e0bffc15 	stw	r2,-16(fp)
      break;
80080b64:	00000e06 	br	80080ba0 <MemTestDevice+0x18c>
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
80080b68:	e0fffa17 	ldw	r3,-24(fp)
80080b6c:	e0bffe17 	ldw	r2,-8(fp)
80080b70:	1885883a 	add	r2,r3,r2
80080b74:	0007883a 	mov	r3,zero
80080b78:	10c00035 	stwio	r3,0(r2)
  }

  printf(" .");

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
80080b7c:	e0bffb17 	ldw	r2,-20(fp)
80080b80:	10800044 	addi	r2,r2,1
80080b84:	e0bffb15 	stw	r2,-20(fp)
80080b88:	e0bffa17 	ldw	r2,-24(fp)
80080b8c:	10800104 	addi	r2,r2,4
80080b90:	e0bffa15 	stw	r2,-24(fp)
80080b94:	e0fffa17 	ldw	r3,-24(fp)
80080b98:	e0bfff17 	ldw	r2,-4(fp)
80080b9c:	18bfe336 	bltu	r3,r2,80080b2c <MemTestDevice+0x118>
      ret_code = (memory_base + offset);
      break;
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
  }
  return ret_code;
80080ba0:	e0bffc17 	ldw	r2,-16(fp)
}
80080ba4:	e037883a 	mov	sp,fp
80080ba8:	dfc00117 	ldw	ra,4(sp)
80080bac:	df000017 	ldw	fp,0(sp)
80080bb0:	dec00204 	addi	sp,sp,8
80080bb4:	f800283a 	ret

80080bb8 <TestRam>:
*             - MemTestDevice
*             - MemDMATest
*
******************************************************************/
static void TestRam(void)
{
80080bb8:	defffa04 	addi	sp,sp,-24
80080bbc:	dfc00515 	stw	ra,20(sp)
80080bc0:	df000415 	stw	fp,16(sp)
80080bc4:	df000404 	addi	fp,sp,16
  
  int memory_base, memory_end, memory_size;
  int ret_code = 0x0;
80080bc8:	e03ffc15 	stw	zero,-16(fp)

  /* Find out what range of memory we are testing */
  MemGetAddressRange(&memory_base, &memory_end);
80080bcc:	e0ffff04 	addi	r3,fp,-4
80080bd0:	e0bffe04 	addi	r2,fp,-8
80080bd4:	180b883a 	mov	r5,r3
80080bd8:	1009883a 	mov	r4,r2
80080bdc:	008048c0 	call	8008048c <MemGetAddressRange>
  memory_size = (memory_end - memory_base);
80080be0:	e0ffff17 	ldw	r3,-4(fp)
80080be4:	e0bffe17 	ldw	r2,-8(fp)
80080be8:	1885c83a 	sub	r2,r3,r2
80080bec:	e0bffd15 	stw	r2,-12(fp)

  printf("\n");
80080bf0:	01000284 	movi	r4,10
80080bf4:	0082ea80 	call	80082ea8 <putchar>
  printf("Testing RAM from 0x%X to 0x%X\n", memory_base, (memory_base + memory_size));
80080bf8:	e13ffe17 	ldw	r4,-8(fp)
80080bfc:	e0fffe17 	ldw	r3,-8(fp)
80080c00:	e0bffd17 	ldw	r2,-12(fp)
80080c04:	1885883a 	add	r2,r3,r2
80080c08:	100d883a 	mov	r6,r2
80080c0c:	200b883a 	mov	r5,r4
80080c10:	012002b4 	movhi	r4,32778
80080c14:	212ebb04 	addi	r4,r4,-17684
80080c18:	0082e640 	call	80082e64 <printf>

  /* Test Data Bus. */
  ret_code = MemTestDataBus(memory_base);
80080c1c:	e0bffe17 	ldw	r2,-8(fp)
80080c20:	1009883a 	mov	r4,r2
80080c24:	00805a00 	call	800805a0 <MemTestDataBus>
80080c28:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code)
80080c2c:	e0bffc17 	ldw	r2,-16(fp)
80080c30:	10000526 	beq	r2,zero,80080c48 <TestRam+0x90>
   printf(" -Data bus test failed at bit 0x%X", (int)ret_code);
80080c34:	e17ffc17 	ldw	r5,-16(fp)
80080c38:	012002b4 	movhi	r4,32778
80080c3c:	212ec304 	addi	r4,r4,-17652
80080c40:	0082e640 	call	80082e64 <printf>
80080c44:	00000306 	br	80080c54 <TestRam+0x9c>
  else
    printf(" -Data bus test passed\n");
80080c48:	012002b4 	movhi	r4,32778
80080c4c:	212ecc04 	addi	r4,r4,-17616
80080c50:	0082f800 	call	80082f80 <puts>

  /* Test Address Bus. */
  if (!ret_code)
80080c54:	e0bffc17 	ldw	r2,-16(fp)
80080c58:	1000111e 	bne	r2,zero,80080ca0 <TestRam+0xe8>
  {
    ret_code  = MemTestAddressBus(memory_base, memory_size);
80080c5c:	e0bffe17 	ldw	r2,-8(fp)
80080c60:	1007883a 	mov	r3,r2
80080c64:	e0bffd17 	ldw	r2,-12(fp)
80080c68:	100b883a 	mov	r5,r2
80080c6c:	1809883a 	mov	r4,r3
80080c70:	00806140 	call	80080614 <MemTestAddressBus>
80080c74:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
80080c78:	e0bffc17 	ldw	r2,-16(fp)
80080c7c:	10000526 	beq	r2,zero,80080c94 <TestRam+0xdc>
      printf(" -Address bus test failed at address 0x%X", (int)ret_code);
80080c80:	e17ffc17 	ldw	r5,-16(fp)
80080c84:	012002b4 	movhi	r4,32778
80080c88:	212ed204 	addi	r4,r4,-17592
80080c8c:	0082e640 	call	80082e64 <printf>
80080c90:	00000306 	br	80080ca0 <TestRam+0xe8>
    else
      printf(" -Address bus test passed\n");
80080c94:	012002b4 	movhi	r4,32778
80080c98:	212edd04 	addi	r4,r4,-17548
80080c9c:	0082f800 	call	80082f80 <puts>
  }

  /* Test byte and half-word access. */
  if (!ret_code)
80080ca0:	e0bffc17 	ldw	r2,-16(fp)
80080ca4:	10000e1e 	bne	r2,zero,80080ce0 <TestRam+0x128>
  {
    ret_code = MemTest8_16BitAccess(memory_base);
80080ca8:	e0bffe17 	ldw	r2,-8(fp)
80080cac:	1009883a 	mov	r4,r2
80080cb0:	00807f40 	call	800807f4 <MemTest8_16BitAccess>
80080cb4:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
80080cb8:	e0bffc17 	ldw	r2,-16(fp)
80080cbc:	10000526 	beq	r2,zero,80080cd4 <TestRam+0x11c>
      printf(" -Byte and half-word access test failed at address 0x%X", (int)ret_code);
80080cc0:	e17ffc17 	ldw	r5,-16(fp)
80080cc4:	012002b4 	movhi	r4,32778
80080cc8:	212ee404 	addi	r4,r4,-17520
80080ccc:	0082e640 	call	80082e64 <printf>
80080cd0:	00000306 	br	80080ce0 <TestRam+0x128>
    else
      printf(" -Byte and half-word access test passed\n");
80080cd4:	012002b4 	movhi	r4,32778
80080cd8:	212ef204 	addi	r4,r4,-17464
80080cdc:	0082f800 	call	80082f80 <puts>
  }

  /* Test that each bit in the device can store both 1 and 0. */
  if (!ret_code)
80080ce0:	e0bffc17 	ldw	r2,-16(fp)
80080ce4:	1000141e 	bne	r2,zero,80080d38 <TestRam+0x180>
  {
    printf(" -Testing each bit in memory device.");
80080ce8:	012002b4 	movhi	r4,32778
80080cec:	212efc04 	addi	r4,r4,-17424
80080cf0:	0082e640 	call	80082e64 <printf>
    ret_code = MemTestDevice(memory_base, memory_size);
80080cf4:	e0bffe17 	ldw	r2,-8(fp)
80080cf8:	1007883a 	mov	r3,r2
80080cfc:	e0bffd17 	ldw	r2,-12(fp)
80080d00:	100b883a 	mov	r5,r2
80080d04:	1809883a 	mov	r4,r3
80080d08:	0080a140 	call	80080a14 <MemTestDevice>
80080d0c:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
80080d10:	e0bffc17 	ldw	r2,-16(fp)
80080d14:	10000526 	beq	r2,zero,80080d2c <TestRam+0x174>
      printf("  failed at address 0x%X", (int)ret_code);
80080d18:	e17ffc17 	ldw	r5,-16(fp)
80080d1c:	012002b4 	movhi	r4,32778
80080d20:	212f0604 	addi	r4,r4,-17384
80080d24:	0082e640 	call	80082e64 <printf>
80080d28:	00000306 	br	80080d38 <TestRam+0x180>
    else
      printf("  passed\n");
80080d2c:	012002b4 	movhi	r4,32778
80080d30:	212f0d04 	addi	r4,r4,-17356
80080d34:	0082f800 	call	80082f80 <puts>
    else
      printf("  passed\n");
  }
#endif /* DMA_NAME */
      
  if (!ret_code)
80080d38:	e0bffc17 	ldw	r2,-16(fp)
80080d3c:	1000051e 	bne	r2,zero,80080d54 <TestRam+0x19c>
    printf("Memory at 0x%X Okay\n", memory_base);
80080d40:	e0bffe17 	ldw	r2,-8(fp)
80080d44:	100b883a 	mov	r5,r2
80080d48:	012002b4 	movhi	r4,32778
80080d4c:	212f1004 	addi	r4,r4,-17344
80080d50:	0082e640 	call	80082e64 <printf>
}
80080d54:	0001883a 	nop
80080d58:	e037883a 	mov	sp,fp
80080d5c:	dfc00117 	ldw	ra,4(sp)
80080d60:	df000017 	ldw	fp,0(sp)
80080d64:	dec00204 	addi	sp,sp,8
80080d68:	f800283a 	ret

80080d6c <FlashCheckIfBlockErased>:
*  Purpose: Checks the specified flash block to see if it is 
*           completely erased (all 0xFFFFFFFF).
*
******************************************************************/
static int FlashCheckIfBlockErased(alt_flash_fd* fd, int block, flash_region* regions)
{
80080d6c:	defff204 	addi	sp,sp,-56
80080d70:	dfc00d15 	stw	ra,52(sp)
80080d74:	df000c15 	stw	fp,48(sp)
80080d78:	df000c04 	addi	fp,sp,48
80080d7c:	e13ffd15 	stw	r4,-12(fp)
80080d80:	e17ffe15 	stw	r5,-8(fp)
80080d84:	e1bfff15 	stw	r6,-4(fp)
  int i, j;
  int ret_code = 0x0;
80080d88:	e03ff615 	stw	zero,-40(fp)
  char block_is_erased = 0x1;
80080d8c:	00800044 	movi	r2,1
80080d90:	e0bff705 	stb	r2,-36(fp)
  alt_u8 *data_read;
 
  /* Get a buffer */
  data_read = malloc(64);
80080d94:	01001004 	movi	r4,64
80080d98:	008243c0 	call	8008243c <malloc>
80080d9c:	e0bff815 	stw	r2,-32(fp)
  
  /* Initialize the flag */
  block_is_erased = 0x1;
80080da0:	00800044 	movi	r2,1
80080da4:	e0bff705 	stb	r2,-36(fp)

  for(i = 0; i < regions->block_size; i += 64)
80080da8:	e03ff415 	stw	zero,-48(fp)
80080dac:	00002b06 	br	80080e5c <FlashCheckIfBlockErased+0xf0>
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);
80080db0:	e0bfff17 	ldw	r2,-4(fp)
80080db4:	10c00317 	ldw	r3,12(r2)
80080db8:	e0bffe17 	ldw	r2,-8(fp)
80080dbc:	1887383a 	mul	r3,r3,r2
80080dc0:	e0bff417 	ldw	r2,-48(fp)
80080dc4:	1885883a 	add	r2,r3,r2
80080dc8:	e0fffd17 	ldw	r3,-12(fp)
80080dcc:	e0fff915 	stw	r3,-28(fp)
80080dd0:	e0bffa15 	stw	r2,-24(fp)
80080dd4:	e0bff817 	ldw	r2,-32(fp)
80080dd8:	e0bffb15 	stw	r2,-20(fp)
80080ddc:	00801004 	movi	r2,64
80080de0:	e0bffc15 	stw	r2,-16(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
80080de4:	e0bff917 	ldw	r2,-28(fp)
80080de8:	10800617 	ldw	r2,24(r2)
80080dec:	e1fffc17 	ldw	r7,-16(fp)
80080df0:	e1bffb17 	ldw	r6,-20(fp)
80080df4:	e17ffa17 	ldw	r5,-24(fp)
80080df8:	e13ff917 	ldw	r4,-28(fp)
80080dfc:	103ee83a 	callr	r2
80080e00:	e0bff615 	stw	r2,-40(fp)

    for(j=0; j < 64; j+=1)
80080e04:	e03ff515 	stw	zero,-44(fp)
80080e08:	00000c06 	br	80080e3c <FlashCheckIfBlockErased+0xd0>
    {
      if(*(data_read+j) != 0xFF)
80080e0c:	e0bff517 	ldw	r2,-44(fp)
80080e10:	e0fff817 	ldw	r3,-32(fp)
80080e14:	1885883a 	add	r2,r3,r2
80080e18:	10800003 	ldbu	r2,0(r2)
80080e1c:	10803fcc 	andi	r2,r2,255
80080e20:	10803fe0 	cmpeqi	r2,r2,255
80080e24:	1000021e 	bne	r2,zero,80080e30 <FlashCheckIfBlockErased+0xc4>
      {
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
80080e28:	e03ff705 	stb	zero,-36(fp)
        break;
80080e2c:	00000606 	br	80080e48 <FlashCheckIfBlockErased+0xdc>

  for(i = 0; i < regions->block_size; i += 64)
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);

    for(j=0; j < 64; j+=1)
80080e30:	e0bff517 	ldw	r2,-44(fp)
80080e34:	10800044 	addi	r2,r2,1
80080e38:	e0bff515 	stw	r2,-44(fp)
80080e3c:	e0bff517 	ldw	r2,-44(fp)
80080e40:	10801010 	cmplti	r2,r2,64
80080e44:	103ff11e 	bne	r2,zero,80080e0c <FlashCheckIfBlockErased+0xa0>
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
80080e48:	e0bff707 	ldb	r2,-36(fp)
80080e4c:	10000826 	beq	r2,zero,80080e70 <FlashCheckIfBlockErased+0x104>
  data_read = malloc(64);
  
  /* Initialize the flag */
  block_is_erased = 0x1;

  for(i = 0; i < regions->block_size; i += 64)
80080e50:	e0bff417 	ldw	r2,-48(fp)
80080e54:	10801004 	addi	r2,r2,64
80080e58:	e0bff415 	stw	r2,-48(fp)
80080e5c:	e0bfff17 	ldw	r2,-4(fp)
80080e60:	10800317 	ldw	r2,12(r2)
80080e64:	e0fff417 	ldw	r3,-48(fp)
80080e68:	18bfd116 	blt	r3,r2,80080db0 <FlashCheckIfBlockErased+0x44>
80080e6c:	00000106 	br	80080e74 <FlashCheckIfBlockErased+0x108>
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
      break;
80080e70:	0001883a 	nop
  }
  /* Block is erased if we indexed through all block locations */
  if(i == regions->block_size)
80080e74:	e0bfff17 	ldw	r2,-4(fp)
80080e78:	10c00317 	ldw	r3,12(r2)
80080e7c:	e0bff417 	ldw	r2,-48(fp)
80080e80:	1880031e 	bne	r3,r2,80080e90 <FlashCheckIfBlockErased+0x124>
    ret_code = 1;
80080e84:	00800044 	movi	r2,1
80080e88:	e0bff615 	stw	r2,-40(fp)
80080e8c:	00000106 	br	80080e94 <FlashCheckIfBlockErased+0x128>
  else
    ret_code = 0;
80080e90:	e03ff615 	stw	zero,-40(fp)
  
  free(data_read);
80080e94:	e13ff817 	ldw	r4,-32(fp)
80080e98:	00824500 	call	80082450 <free>
 
  return ret_code;
80080e9c:	e0bff617 	ldw	r2,-40(fp)
}
80080ea0:	e037883a 	mov	sp,fp
80080ea4:	dfc00117 	ldw	ra,4(sp)
80080ea8:	df000017 	ldw	fp,0(sp)
80080eac:	dec00204 	addi	sp,sp,8
80080eb0:	f800283a 	ret

80080eb4 <FlashTestBlockWrite>:
*  Purpose: Tests that the function alt_write_flash_block is
*           is working properly.
*
******************************************************************/
static int FlashTestBlockWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
80080eb4:	deffdc04 	addi	sp,sp,-144
80080eb8:	dfc02315 	stw	ra,140(sp)
80080ebc:	df002215 	stw	fp,136(sp)
80080ec0:	df002204 	addi	fp,sp,136
80080ec4:	e13ffc15 	stw	r4,-16(fp)
80080ec8:	e17ffd15 	stw	r5,-12(fp)
80080ecc:	e1bffe15 	stw	r6,-8(fp)
80080ed0:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
80080ed4:	e03fe015 	stw	zero,-128(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;


  /* Get a couple buffers for the test */
  data_written = malloc(100);
80080ed8:	01001904 	movi	r4,100
80080edc:	008243c0 	call	8008243c <malloc>
80080ee0:	e0bfe115 	stw	r2,-124(fp)
  data_read = malloc(100);
80080ee4:	01001904 	movi	r4,100
80080ee8:	008243c0 	call	8008243c <malloc>
80080eec:	e0bfe215 	stw	r2,-120(fp)

  test_offset = (regions->offset + (block * regions->block_size));
80080ef0:	e0bfff17 	ldw	r2,-4(fp)
80080ef4:	10c00017 	ldw	r3,0(r2)
80080ef8:	e0bfff17 	ldw	r2,-4(fp)
80080efc:	11000317 	ldw	r4,12(r2)
80080f00:	e0bffc17 	ldw	r2,-16(fp)
80080f04:	2085383a 	mul	r2,r4,r2
80080f08:	1885883a 	add	r2,r3,r2
80080f0c:	e0bfe315 	stw	r2,-116(fp)

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
80080f10:	e03fdf15 	stw	zero,-132(fp)
80080f14:	00000c06 	br	80080f48 <FlashTestBlockWrite+0x94>
    *(data_written + i) = (i * 3);
80080f18:	e0bfdf17 	ldw	r2,-132(fp)
80080f1c:	e0ffe117 	ldw	r3,-124(fp)
80080f20:	1887883a 	add	r3,r3,r2
80080f24:	e0bfdf17 	ldw	r2,-132(fp)
80080f28:	1009883a 	mov	r4,r2
80080f2c:	2005883a 	mov	r2,r4
80080f30:	1085883a 	add	r2,r2,r2
80080f34:	1105883a 	add	r2,r2,r4
80080f38:	18800005 	stb	r2,0(r3)
  data_read = malloc(100);

  test_offset = (regions->offset + (block * regions->block_size));

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
80080f3c:	e0bfdf17 	ldw	r2,-132(fp)
80080f40:	10800044 	addi	r2,r2,1
80080f44:	e0bfdf15 	stw	r2,-132(fp)
80080f48:	e0bfdf17 	ldw	r2,-132(fp)
80080f4c:	10801910 	cmplti	r2,r2,100
80080f50:	103ff11e 	bne	r2,zero,80080f18 <FlashTestBlockWrite+0x64>
    *(data_written + i) = (i * 3);

  /* Write the buffer to flash starting 0x40 bytes from the beginning of the block. */
  printf(" -Testing \"alt_write_flash_block\".");
80080f54:	012002b4 	movhi	r4,32778
80080f58:	212f1604 	addi	r4,r4,-17320
80080f5c:	0082e640 	call	80082e64 <printf>
  ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x40), data_written, 100);
80080f60:	e0bfe317 	ldw	r2,-116(fp)
80080f64:	10801004 	addi	r2,r2,64
80080f68:	e0fffe17 	ldw	r3,-8(fp)
80080f6c:	e0ffe815 	stw	r3,-96(fp)
80080f70:	e0ffe317 	ldw	r3,-116(fp)
80080f74:	e0ffe915 	stw	r3,-92(fp)
80080f78:	e0bfea15 	stw	r2,-88(fp)
80080f7c:	e0bfe117 	ldw	r2,-124(fp)
80080f80:	e0bfeb15 	stw	r2,-84(fp)
80080f84:	00801904 	movi	r2,100
80080f88:	e0bfec15 	stw	r2,-80(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
80080f8c:	e0bfe817 	ldw	r2,-96(fp)
80080f90:	10800917 	ldw	r2,36(r2)
80080f94:	e0ffec17 	ldw	r3,-80(fp)
80080f98:	d8c00015 	stw	r3,0(sp)
80080f9c:	e1ffeb17 	ldw	r7,-84(fp)
80080fa0:	e1bfea17 	ldw	r6,-88(fp)
80080fa4:	e17fe917 	ldw	r5,-92(fp)
80080fa8:	e13fe817 	ldw	r4,-96(fp)
80080fac:	103ee83a 	callr	r2
80080fb0:	e0bfed15 	stw	r2,-76(fp)

/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
*/
  return ret_code;
80080fb4:	e0bfed17 	ldw	r2,-76(fp)
80080fb8:	e0bfe015 	stw	r2,-128(fp)
  if (!ret_code)
80080fbc:	e0bfe017 	ldw	r2,-128(fp)
80080fc0:	1000241e 	bne	r2,zero,80081054 <FlashTestBlockWrite+0x1a0>
  {
    /* Now read it back into the read_buffer */
    ret_code = alt_read_flash(fd, (test_offset + 0x40), data_read, 100);
80080fc4:	e0bfe317 	ldw	r2,-116(fp)
80080fc8:	10801004 	addi	r2,r2,64
80080fcc:	e0fffe17 	ldw	r3,-8(fp)
80080fd0:	e0ffe415 	stw	r3,-112(fp)
80080fd4:	e0bfee15 	stw	r2,-72(fp)
80080fd8:	e0bfe217 	ldw	r2,-120(fp)
80080fdc:	e0bfef15 	stw	r2,-68(fp)
80080fe0:	00801904 	movi	r2,100
80080fe4:	e0bff015 	stw	r2,-64(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
80080fe8:	e0bfe417 	ldw	r2,-112(fp)
80080fec:	10800617 	ldw	r2,24(r2)
80080ff0:	e1fff017 	ldw	r7,-64(fp)
80080ff4:	e1bfef17 	ldw	r6,-68(fp)
80080ff8:	e17fee17 	ldw	r5,-72(fp)
80080ffc:	e13fe417 	ldw	r4,-112(fp)
80081000:	103ee83a 	callr	r2
80081004:	e0bfe015 	stw	r2,-128(fp)
    if(!ret_code)
80081008:	e0bfe017 	ldw	r2,-128(fp)
8008100c:	1000111e 	bne	r2,zero,80081054 <FlashTestBlockWrite+0x1a0>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, 100))
80081010:	01801904 	movi	r6,100
80081014:	e17fe217 	ldw	r5,-120(fp)
80081018:	e13fe117 	ldw	r4,-124(fp)
8008101c:	0082c700 	call	80082c70 <memcmp>
80081020:	10000926 	beq	r2,zero,80081048 <FlashTestBlockWrite+0x194>
      {
        printf("  FAILED.\n");
80081024:	012002b4 	movhi	r4,32778
80081028:	212f1f04 	addi	r4,r4,-17284
8008102c:	0082f800 	call	80082f80 <puts>
        (*error)++;
80081030:	e0bffd17 	ldw	r2,-12(fp)
80081034:	10800017 	ldw	r2,0(r2)
80081038:	10c00044 	addi	r3,r2,1
8008103c:	e0bffd17 	ldw	r2,-12(fp)
80081040:	10c00015 	stw	r3,0(r2)
80081044:	00000306 	br	80081054 <FlashTestBlockWrite+0x1a0>
      }
      else
        printf("  passed.\n");
80081048:	012002b4 	movhi	r4,32778
8008104c:	212f2204 	addi	r4,r4,-17272
80081050:	0082f800 	call	80082f80 <puts>
    }
  }

  /* Test unaligned writes */
  if(!ret_code)
80081054:	e0bfe017 	ldw	r2,-128(fp)
80081058:	10004f1e 	bne	r2,zero,80081198 <FlashTestBlockWrite+0x2e4>
  {
    /* Erase the block */
    ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
8008105c:	e0bfff17 	ldw	r2,-4(fp)
80081060:	10800317 	ldw	r2,12(r2)
80081064:	e0fffe17 	ldw	r3,-8(fp)
80081068:	e0ffe715 	stw	r3,-100(fp)
8008106c:	e0ffe317 	ldw	r3,-116(fp)
80081070:	e0fff615 	stw	r3,-40(fp)
80081074:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
80081078:	e0bfe717 	ldw	r2,-100(fp)
8008107c:	10800817 	ldw	r2,32(r2)
80081080:	e17ff617 	ldw	r5,-40(fp)
80081084:	e13fe717 	ldw	r4,-100(fp)
80081088:	103ee83a 	callr	r2
8008108c:	e0bff815 	stw	r2,-32(fp)
  
/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
*/
  return ret_code;
80081090:	e0bff817 	ldw	r2,-32(fp)
80081094:	e0bfe015 	stw	r2,-128(fp)
  
    /* Write the buffer to flash on an unaligned address. */
    printf(" -Testing unaligned writes.");
80081098:	012002b4 	movhi	r4,32778
8008109c:	212f2504 	addi	r4,r4,-17260
800810a0:	0082e640 	call	80082e64 <printf>
    ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x43), data_written, 100);
800810a4:	e0bfe317 	ldw	r2,-116(fp)
800810a8:	108010c4 	addi	r2,r2,67
800810ac:	e0fffe17 	ldw	r3,-8(fp)
800810b0:	e0ffe515 	stw	r3,-108(fp)
800810b4:	e0ffe317 	ldw	r3,-116(fp)
800810b8:	e0fff115 	stw	r3,-60(fp)
800810bc:	e0bff215 	stw	r2,-56(fp)
800810c0:	e0bfe117 	ldw	r2,-124(fp)
800810c4:	e0bff315 	stw	r2,-52(fp)
800810c8:	00801904 	movi	r2,100
800810cc:	e0bff415 	stw	r2,-48(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
800810d0:	e0bfe517 	ldw	r2,-108(fp)
800810d4:	10800917 	ldw	r2,36(r2)
800810d8:	e0fff417 	ldw	r3,-48(fp)
800810dc:	d8c00015 	stw	r3,0(sp)
800810e0:	e1fff317 	ldw	r7,-52(fp)
800810e4:	e1bff217 	ldw	r6,-56(fp)
800810e8:	e17ff117 	ldw	r5,-60(fp)
800810ec:	e13fe517 	ldw	r4,-108(fp)
800810f0:	103ee83a 	callr	r2
800810f4:	e0bff515 	stw	r2,-44(fp)

/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
*/
  return ret_code;
800810f8:	e0bff517 	ldw	r2,-44(fp)
800810fc:	e0bfe015 	stw	r2,-128(fp)
    if (!ret_code)
80081100:	e0bfe017 	ldw	r2,-128(fp)
80081104:	1000241e 	bne	r2,zero,80081198 <FlashTestBlockWrite+0x2e4>
    {
      /* Now read it back into the read_buffer */
      ret_code = alt_read_flash(fd, (test_offset + 0x43), data_read, 100);
80081108:	e0bfe317 	ldw	r2,-116(fp)
8008110c:	108010c4 	addi	r2,r2,67
80081110:	e0fffe17 	ldw	r3,-8(fp)
80081114:	e0ffe615 	stw	r3,-104(fp)
80081118:	e0bff915 	stw	r2,-28(fp)
8008111c:	e0bfe217 	ldw	r2,-120(fp)
80081120:	e0bffa15 	stw	r2,-24(fp)
80081124:	00801904 	movi	r2,100
80081128:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
8008112c:	e0bfe617 	ldw	r2,-104(fp)
80081130:	10800617 	ldw	r2,24(r2)
80081134:	e1fffb17 	ldw	r7,-20(fp)
80081138:	e1bffa17 	ldw	r6,-24(fp)
8008113c:	e17ff917 	ldw	r5,-28(fp)
80081140:	e13fe617 	ldw	r4,-104(fp)
80081144:	103ee83a 	callr	r2
80081148:	e0bfe015 	stw	r2,-128(fp)
      if(!ret_code)
8008114c:	e0bfe017 	ldw	r2,-128(fp)
80081150:	1000111e 	bne	r2,zero,80081198 <FlashTestBlockWrite+0x2e4>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, 100))
80081154:	01801904 	movi	r6,100
80081158:	e17fe217 	ldw	r5,-120(fp)
8008115c:	e13fe117 	ldw	r4,-124(fp)
80081160:	0082c700 	call	80082c70 <memcmp>
80081164:	10000926 	beq	r2,zero,8008118c <FlashTestBlockWrite+0x2d8>
        {
          printf("  FAILED.\n");
80081168:	012002b4 	movhi	r4,32778
8008116c:	212f1f04 	addi	r4,r4,-17284
80081170:	0082f800 	call	80082f80 <puts>
          (*error)++;
80081174:	e0bffd17 	ldw	r2,-12(fp)
80081178:	10800017 	ldw	r2,0(r2)
8008117c:	10c00044 	addi	r3,r2,1
80081180:	e0bffd17 	ldw	r2,-12(fp)
80081184:	10c00015 	stw	r3,0(r2)
80081188:	00000306 	br	80081198 <FlashTestBlockWrite+0x2e4>
        }
        else
          printf("  passed.\n");
8008118c:	012002b4 	movhi	r4,32778
80081190:	212f2204 	addi	r4,r4,-17272
80081194:	0082f800 	call	80082f80 <puts>
      }
    }
  }

  /* Free up the buffers we allocated. */
  free(data_written);
80081198:	e13fe117 	ldw	r4,-124(fp)
8008119c:	00824500 	call	80082450 <free>
  free(data_read);
800811a0:	e13fe217 	ldw	r4,-120(fp)
800811a4:	00824500 	call	80082450 <free>
  
  return ret_code;
800811a8:	e0bfe017 	ldw	r2,-128(fp)
}
800811ac:	e037883a 	mov	sp,fp
800811b0:	dfc00117 	ldw	ra,4(sp)
800811b4:	df000017 	ldw	fp,0(sp)
800811b8:	dec00204 	addi	sp,sp,8
800811bc:	f800283a 	ret

800811c0 <FlashTestReadWrite>:
*           that every bit in the specified block can store both
*           a '1' and '0'.
*
******************************************************************/
static int FlashTestReadWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
800811c0:	deffe504 	addi	sp,sp,-108
800811c4:	dfc01a15 	stw	ra,104(sp)
800811c8:	df001915 	stw	fp,100(sp)
800811cc:	df001904 	addi	fp,sp,100
800811d0:	e13ffc15 	stw	r4,-16(fp)
800811d4:	e17ffd15 	stw	r5,-12(fp)
800811d8:	e1bffe15 	stw	r6,-8(fp)
800811dc:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
800811e0:	e03fe815 	stw	zero,-96(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;
 

  /* Get a couple buffers for the tests */
  data_written = malloc(regions->block_size);
800811e4:	e0bfff17 	ldw	r2,-4(fp)
800811e8:	10800317 	ldw	r2,12(r2)
800811ec:	1009883a 	mov	r4,r2
800811f0:	008243c0 	call	8008243c <malloc>
800811f4:	e0bfe915 	stw	r2,-92(fp)
  data_read = malloc(regions->block_size);
800811f8:	e0bfff17 	ldw	r2,-4(fp)
800811fc:	10800317 	ldw	r2,12(r2)
80081200:	1009883a 	mov	r4,r2
80081204:	008243c0 	call	8008243c <malloc>
80081208:	e0bfea15 	stw	r2,-88(fp)
 
  /* Calculate the offset at which the block lives */
  test_offset = (regions->offset + (block * regions->block_size));
8008120c:	e0bfff17 	ldw	r2,-4(fp)
80081210:	10c00017 	ldw	r3,0(r2)
80081214:	e0bfff17 	ldw	r2,-4(fp)
80081218:	11000317 	ldw	r4,12(r2)
8008121c:	e0bffc17 	ldw	r2,-16(fp)
80081220:	2085383a 	mul	r2,r4,r2
80081224:	1885883a 	add	r2,r3,r2
80081228:	e0bfeb15 	stw	r2,-84(fp)

  printf("\n -Starting Flash Test.\n");
8008122c:	012002b4 	movhi	r4,32778
80081230:	212f2c04 	addi	r4,r4,-17232
80081234:	0082f800 	call	80082f80 <puts>
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
80081238:	012002b4 	movhi	r4,32778
8008123c:	212f3204 	addi	r4,r4,-17208
80081240:	0082f800 	call	80082f80 <puts>
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
80081244:	e03fe715 	stw	zero,-100(fp)
80081248:	00000806 	br	8008126c <FlashTestReadWrite+0xac>
    *(data_written + i) = i;
8008124c:	e0bfe717 	ldw	r2,-100(fp)
80081250:	e0ffe917 	ldw	r3,-92(fp)
80081254:	1885883a 	add	r2,r3,r2
80081258:	e0ffe717 	ldw	r3,-100(fp)
8008125c:	10c00005 	stb	r3,0(r2)

  printf("\n -Starting Flash Test.\n");
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
80081260:	e0bfe717 	ldw	r2,-100(fp)
80081264:	10800044 	addi	r2,r2,1
80081268:	e0bfe715 	stw	r2,-100(fp)
8008126c:	e0bfff17 	ldw	r2,-4(fp)
80081270:	10800317 	ldw	r2,12(r2)
80081274:	e0ffe717 	ldw	r3,-100(fp)
80081278:	18bff416 	blt	r3,r2,8008124c <FlashTestReadWrite+0x8c>
    *(data_written + i) = i;

  /* Write the buffer to flash block */
  ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
8008127c:	e0bfff17 	ldw	r2,-4(fp)
80081280:	10800317 	ldw	r2,12(r2)
80081284:	e0fffe17 	ldw	r3,-8(fp)
80081288:	e0ffef15 	stw	r3,-68(fp)
8008128c:	e0ffeb17 	ldw	r3,-84(fp)
80081290:	e0fff015 	stw	r3,-64(fp)
80081294:	e0ffe917 	ldw	r3,-92(fp)
80081298:	e0fff115 	stw	r3,-60(fp)
8008129c:	e0bff215 	stw	r2,-56(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
800812a0:	e0bfef17 	ldw	r2,-68(fp)
800812a4:	10800517 	ldw	r2,20(r2)
800812a8:	e1fff217 	ldw	r7,-56(fp)
800812ac:	e1bff117 	ldw	r6,-60(fp)
800812b0:	e17ff017 	ldw	r5,-64(fp)
800812b4:	e13fef17 	ldw	r4,-68(fp)
800812b8:	103ee83a 	callr	r2
800812bc:	e0bfe815 	stw	r2,-96(fp)
     
  if (!ret_code)
800812c0:	e0bfe817 	ldw	r2,-96(fp)
800812c4:	1000731e 	bne	r2,zero,80081494 <FlashTestReadWrite+0x2d4>
  {
    /* Read flash block into read buffer */
    ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
800812c8:	e0bfff17 	ldw	r2,-4(fp)
800812cc:	10800317 	ldw	r2,12(r2)
800812d0:	e0fffe17 	ldw	r3,-8(fp)
800812d4:	e0ffec15 	stw	r3,-80(fp)
800812d8:	e0ffeb17 	ldw	r3,-84(fp)
800812dc:	e0fff315 	stw	r3,-52(fp)
800812e0:	e0ffea17 	ldw	r3,-88(fp)
800812e4:	e0fff415 	stw	r3,-48(fp)
800812e8:	e0bff515 	stw	r2,-44(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
800812ec:	e0bfec17 	ldw	r2,-80(fp)
800812f0:	10800617 	ldw	r2,24(r2)
800812f4:	e1fff517 	ldw	r7,-44(fp)
800812f8:	e1bff417 	ldw	r6,-48(fp)
800812fc:	e17ff317 	ldw	r5,-52(fp)
80081300:	e13fec17 	ldw	r4,-80(fp)
80081304:	103ee83a 	callr	r2
80081308:	e0bfe815 	stw	r2,-96(fp)
    if(!ret_code)
8008130c:	e0bfe817 	ldw	r2,-96(fp)
80081310:	1000131e 	bne	r2,zero,80081360 <FlashTestReadWrite+0x1a0>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, regions->block_size))
80081314:	e0bfff17 	ldw	r2,-4(fp)
80081318:	10800317 	ldw	r2,12(r2)
8008131c:	100d883a 	mov	r6,r2
80081320:	e17fea17 	ldw	r5,-88(fp)
80081324:	e13fe917 	ldw	r4,-92(fp)
80081328:	0082c700 	call	80082c70 <memcmp>
8008132c:	10000926 	beq	r2,zero,80081354 <FlashTestReadWrite+0x194>
      {
        printf("    pass 1 - FAILED.\n");
80081330:	012002b4 	movhi	r4,32778
80081334:	212f3f04 	addi	r4,r4,-17156
80081338:	0082f800 	call	80082f80 <puts>
        (*error)++;
8008133c:	e0bffd17 	ldw	r2,-12(fp)
80081340:	10800017 	ldw	r2,0(r2)
80081344:	10c00044 	addi	r3,r2,1
80081348:	e0bffd17 	ldw	r2,-12(fp)
8008134c:	10c00015 	stw	r3,0(r2)
80081350:	00000306 	br	80081360 <FlashTestReadWrite+0x1a0>
      }
      else
        printf("    pass 1 - passed.\n");
80081354:	012002b4 	movhi	r4,32778
80081358:	212f4504 	addi	r4,r4,-17132
8008135c:	0082f800 	call	80082f80 <puts>
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
80081360:	e03fe715 	stw	zero,-100(fp)
80081364:	00000906 	br	8008138c <FlashTestReadWrite+0x1cc>
      *(data_written + i) = ~((alt_u8)(i));
80081368:	e0bfe717 	ldw	r2,-100(fp)
8008136c:	e0ffe917 	ldw	r3,-92(fp)
80081370:	1885883a 	add	r2,r3,r2
80081374:	e0ffe717 	ldw	r3,-100(fp)
80081378:	00c6303a 	nor	r3,zero,r3
8008137c:	10c00005 	stb	r3,0(r2)
      else
        printf("    pass 1 - passed.\n");
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
80081380:	e0bfe717 	ldw	r2,-100(fp)
80081384:	10800044 	addi	r2,r2,1
80081388:	e0bfe715 	stw	r2,-100(fp)
8008138c:	e0bfff17 	ldw	r2,-4(fp)
80081390:	10800317 	ldw	r2,12(r2)
80081394:	e0ffe717 	ldw	r3,-100(fp)
80081398:	18bff316 	blt	r3,r2,80081368 <FlashTestReadWrite+0x1a8>
      *(data_written + i) = ~((alt_u8)(i));
 
    /* Write the buffer to flash block */
    ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
8008139c:	e0bfff17 	ldw	r2,-4(fp)
800813a0:	10800317 	ldw	r2,12(r2)
800813a4:	e0fffe17 	ldw	r3,-8(fp)
800813a8:	e0ffed15 	stw	r3,-76(fp)
800813ac:	e0ffeb17 	ldw	r3,-84(fp)
800813b0:	e0fff615 	stw	r3,-40(fp)
800813b4:	e0ffe917 	ldw	r3,-92(fp)
800813b8:	e0fff715 	stw	r3,-36(fp)
800813bc:	e0bff815 	stw	r2,-32(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
800813c0:	e0bfed17 	ldw	r2,-76(fp)
800813c4:	10800517 	ldw	r2,20(r2)
800813c8:	e1fff817 	ldw	r7,-32(fp)
800813cc:	e1bff717 	ldw	r6,-36(fp)
800813d0:	e17ff617 	ldw	r5,-40(fp)
800813d4:	e13fed17 	ldw	r4,-76(fp)
800813d8:	103ee83a 	callr	r2
800813dc:	e0bfe815 	stw	r2,-96(fp)
    
    if (!ret_code)
800813e0:	e0bfe817 	ldw	r2,-96(fp)
800813e4:	1000261e 	bne	r2,zero,80081480 <FlashTestReadWrite+0x2c0>
    {
      /* Read flash block into read buffer */
      ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
800813e8:	e0bfff17 	ldw	r2,-4(fp)
800813ec:	10800317 	ldw	r2,12(r2)
800813f0:	e0fffe17 	ldw	r3,-8(fp)
800813f4:	e0ffee15 	stw	r3,-72(fp)
800813f8:	e0ffeb17 	ldw	r3,-84(fp)
800813fc:	e0fff915 	stw	r3,-28(fp)
80081400:	e0ffea17 	ldw	r3,-88(fp)
80081404:	e0fffa15 	stw	r3,-24(fp)
80081408:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
8008140c:	e0bfee17 	ldw	r2,-72(fp)
80081410:	10800617 	ldw	r2,24(r2)
80081414:	e1fffb17 	ldw	r7,-20(fp)
80081418:	e1bffa17 	ldw	r6,-24(fp)
8008141c:	e17ff917 	ldw	r5,-28(fp)
80081420:	e13fee17 	ldw	r4,-72(fp)
80081424:	103ee83a 	callr	r2
80081428:	e0bfe815 	stw	r2,-96(fp)
      if(!ret_code)
8008142c:	e0bfe817 	ldw	r2,-96(fp)
80081430:	1000131e 	bne	r2,zero,80081480 <FlashTestReadWrite+0x2c0>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, regions->block_size))
80081434:	e0bfff17 	ldw	r2,-4(fp)
80081438:	10800317 	ldw	r2,12(r2)
8008143c:	100d883a 	mov	r6,r2
80081440:	e17fea17 	ldw	r5,-88(fp)
80081444:	e13fe917 	ldw	r4,-92(fp)
80081448:	0082c700 	call	80082c70 <memcmp>
8008144c:	10000926 	beq	r2,zero,80081474 <FlashTestReadWrite+0x2b4>
        {
          printf("    pass 2 - FAILED.\n");
80081450:	012002b4 	movhi	r4,32778
80081454:	212f4b04 	addi	r4,r4,-17108
80081458:	0082f800 	call	80082f80 <puts>
          (*error)++;
8008145c:	e0bffd17 	ldw	r2,-12(fp)
80081460:	10800017 	ldw	r2,0(r2)
80081464:	10c00044 	addi	r3,r2,1
80081468:	e0bffd17 	ldw	r2,-12(fp)
8008146c:	10c00015 	stw	r3,0(r2)
80081470:	00000306 	br	80081480 <FlashTestReadWrite+0x2c0>
        }
        else
          printf("    pass 2 - passed.\n");
80081474:	012002b4 	movhi	r4,32778
80081478:	212f5104 	addi	r4,r4,-17084
8008147c:	0082f800 	call	80082f80 <puts>
      }
    }
    if (*error)
80081480:	e0bffd17 	ldw	r2,-12(fp)
80081484:	10800017 	ldw	r2,0(r2)
80081488:	10000226 	beq	r2,zero,80081494 <FlashTestReadWrite+0x2d4>
      ret_code = 1;
8008148c:	00800044 	movi	r2,1
80081490:	e0bfe815 	stw	r2,-96(fp)
  }

  /* Free up the buffers we allocated */
  free(data_written);
80081494:	e13fe917 	ldw	r4,-92(fp)
80081498:	00824500 	call	80082450 <free>
  free(data_read);
8008149c:	e13fea17 	ldw	r4,-88(fp)
800814a0:	00824500 	call	80082450 <free>
  
  return ret_code;
800814a4:	e0bfe817 	ldw	r2,-96(fp)
}
800814a8:	e037883a 	mov	sp,fp
800814ac:	dfc00117 	ldw	ra,4(sp)
800814b0:	df000017 	ldw	fp,0(sp)
800814b4:	dec00204 	addi	sp,sp,8
800814b8:	f800283a 	ret

800814bc <FlashTestBlockErase>:
*           flash block contains some non-0xFFFFFFFF data before
*           this function is called.
*
******************************************************************/
static int FlashTestBlockErase(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
800814bc:	defff404 	addi	sp,sp,-48
800814c0:	dfc00b15 	stw	ra,44(sp)
800814c4:	df000a15 	stw	fp,40(sp)
800814c8:	df000a04 	addi	fp,sp,40
800814cc:	e13ffc15 	stw	r4,-16(fp)
800814d0:	e17ffd15 	stw	r5,-12(fp)
800814d4:	e1bffe15 	stw	r6,-8(fp)
800814d8:	e1ffff15 	stw	r7,-4(fp)

  int ret_code = 0x0;
800814dc:	e03ff615 	stw	zero,-40(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
800814e0:	e0bfff17 	ldw	r2,-4(fp)
800814e4:	10c00017 	ldw	r3,0(r2)
800814e8:	e0bfff17 	ldw	r2,-4(fp)
800814ec:	11000317 	ldw	r4,12(r2)
800814f0:	e0bffc17 	ldw	r2,-16(fp)
800814f4:	2085383a 	mul	r2,r4,r2
800814f8:	1885883a 	add	r2,r3,r2
800814fc:	e0bff715 	stw	r2,-36(fp)

  printf(" -Testing \"alt_erase_flash_block\".");
80081500:	012002b4 	movhi	r4,32778
80081504:	212f5704 	addi	r4,r4,-17060
80081508:	0082e640 	call	80082e64 <printf>
  ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
8008150c:	e0bfff17 	ldw	r2,-4(fp)
80081510:	10800317 	ldw	r2,12(r2)
80081514:	e0fffe17 	ldw	r3,-8(fp)
80081518:	e0fff815 	stw	r3,-32(fp)
8008151c:	e0fff717 	ldw	r3,-36(fp)
80081520:	e0fff915 	stw	r3,-28(fp)
80081524:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
80081528:	e0bff817 	ldw	r2,-32(fp)
8008152c:	10800817 	ldw	r2,32(r2)
80081530:	e17ff917 	ldw	r5,-28(fp)
80081534:	e13ff817 	ldw	r4,-32(fp)
80081538:	103ee83a 	callr	r2
8008153c:	e0bffb15 	stw	r2,-20(fp)
  
/* remove dcache_flush call for FB330552  
  if(!ret_code)
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
*/
  return ret_code;
80081540:	e0bffb17 	ldw	r2,-20(fp)
80081544:	e0bff615 	stw	r2,-40(fp)
  /* Check that the erase was successful. */
  if (!ret_code)
80081548:	e0bff617 	ldw	r2,-40(fp)
8008154c:	1000111e 	bne	r2,zero,80081594 <FlashTestBlockErase+0xd8>
  {
    if(FlashCheckIfBlockErased(fd, block, regions))
80081550:	e1bfff17 	ldw	r6,-4(fp)
80081554:	e17ffc17 	ldw	r5,-16(fp)
80081558:	e13ffe17 	ldw	r4,-8(fp)
8008155c:	0080d6c0 	call	80080d6c <FlashCheckIfBlockErased>
80081560:	10000426 	beq	r2,zero,80081574 <FlashTestBlockErase+0xb8>
      printf("  passed.\n");
80081564:	012002b4 	movhi	r4,32778
80081568:	212f2204 	addi	r4,r4,-17272
8008156c:	0082f800 	call	80082f80 <puts>
80081570:	00000806 	br	80081594 <FlashTestBlockErase+0xd8>
    else
    {
      printf("  FAILED\n");  
80081574:	012002b4 	movhi	r4,32778
80081578:	212f6004 	addi	r4,r4,-17024
8008157c:	0082f800 	call	80082f80 <puts>
      (*error)++;
80081580:	e0bffd17 	ldw	r2,-12(fp)
80081584:	10800017 	ldw	r2,0(r2)
80081588:	10c00044 	addi	r3,r2,1
8008158c:	e0bffd17 	ldw	r2,-12(fp)
80081590:	10c00015 	stw	r3,0(r2)
    }
  }
  
  return ret_code;
80081594:	e0bff617 	ldw	r2,-40(fp)
}
80081598:	e037883a 	mov	sp,fp
8008159c:	dfc00117 	ldw	ra,4(sp)
800815a0:	df000017 	ldw	fp,0(sp)
800815a4:	dec00204 	addi	sp,sp,8
800815a8:	f800283a 	ret

800815ac <FlashRunTests>:
*             - alt_erase_flash_block
*             - alt_write_flash_block
* 
******************************************************************/
static void FlashRunTests(alt_flash_fd* fd, int block, flash_region* regions)
{
800815ac:	defff404 	addi	sp,sp,-48
800815b0:	dfc00b15 	stw	ra,44(sp)
800815b4:	df000a15 	stw	fp,40(sp)
800815b8:	df000a04 	addi	fp,sp,40
800815bc:	e13ffd15 	stw	r4,-12(fp)
800815c0:	e17ffe15 	stw	r5,-8(fp)
800815c4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0x0;
800815c8:	e03ff615 	stw	zero,-40(fp)
  int error = 0x0;
800815cc:	e03ffc15 	stw	zero,-16(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
800815d0:	e0bfff17 	ldw	r2,-4(fp)
800815d4:	10c00017 	ldw	r3,0(r2)
800815d8:	e0bfff17 	ldw	r2,-4(fp)
800815dc:	11000317 	ldw	r4,12(r2)
800815e0:	e0bffe17 	ldw	r2,-8(fp)
800815e4:	2085383a 	mul	r2,r4,r2
800815e8:	1885883a 	add	r2,r3,r2
800815ec:	e0bff715 	stw	r2,-36(fp)
  
  /* Test reading and writing functions */
  ret_code = FlashTestReadWrite(block, &error, fd, regions);
800815f0:	e0bffc04 	addi	r2,fp,-16
800815f4:	e1ffff17 	ldw	r7,-4(fp)
800815f8:	e1bffd17 	ldw	r6,-12(fp)
800815fc:	100b883a 	mov	r5,r2
80081600:	e13ffe17 	ldw	r4,-8(fp)
80081604:	00811c00 	call	800811c0 <FlashTestReadWrite>
80081608:	e0bff615 	stw	r2,-40(fp)
 
  /* Test the erase function */
  if (!ret_code)
8008160c:	e0bff617 	ldw	r2,-40(fp)
80081610:	1000071e 	bne	r2,zero,80081630 <FlashRunTests+0x84>
  {
    ret_code = FlashTestBlockErase(block, &error, fd, regions);
80081614:	e0bffc04 	addi	r2,fp,-16
80081618:	e1ffff17 	ldw	r7,-4(fp)
8008161c:	e1bffd17 	ldw	r6,-12(fp)
80081620:	100b883a 	mov	r5,r2
80081624:	e13ffe17 	ldw	r4,-8(fp)
80081628:	00814bc0 	call	800814bc <FlashTestBlockErase>
8008162c:	e0bff615 	stw	r2,-40(fp)
  }
  /* Test the block write function */
  if (!ret_code)
80081630:	e0bff617 	ldw	r2,-40(fp)
80081634:	1000071e 	bne	r2,zero,80081654 <FlashRunTests+0xa8>
  {
    ret_code = FlashTestBlockWrite(block, &error, fd, regions);
80081638:	e0bffc04 	addi	r2,fp,-16
8008163c:	e1ffff17 	ldw	r7,-4(fp)
80081640:	e1bffd17 	ldw	r6,-12(fp)
80081644:	100b883a 	mov	r5,r2
80081648:	e13ffe17 	ldw	r4,-8(fp)
8008164c:	0080eb40 	call	80080eb4 <FlashTestBlockWrite>
80081650:	e0bff615 	stw	r2,-40(fp)
  }

  /* Erase the block so we dont fill one up each time we run the test */
  printf(" -Returning block %d to its erased state.\n", block);
80081654:	e17ffe17 	ldw	r5,-8(fp)
80081658:	012002b4 	movhi	r4,32778
8008165c:	212f6304 	addi	r4,r4,-17012
80081660:	0082e640 	call	80082e64 <printf>
  alt_erase_flash_block(fd, test_offset, regions->block_size);
80081664:	e0bfff17 	ldw	r2,-4(fp)
80081668:	10800317 	ldw	r2,12(r2)
8008166c:	e0fffd17 	ldw	r3,-12(fp)
80081670:	e0fff815 	stw	r3,-32(fp)
80081674:	e0fff717 	ldw	r3,-36(fp)
80081678:	e0fff915 	stw	r3,-28(fp)
8008167c:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
80081680:	e0bff817 	ldw	r2,-32(fp)
80081684:	10800817 	ldw	r2,32(r2)
80081688:	e17ff917 	ldw	r5,-28(fp)
8008168c:	e13ff817 	ldw	r4,-32(fp)
80081690:	103ee83a 	callr	r2
80081694:	e0bffb15 	stw	r2,-20(fp)
 
  printf(" -Flash tests complete.\n");
80081698:	012002b4 	movhi	r4,32778
8008169c:	212f6e04 	addi	r4,r4,-16968
800816a0:	0082f800 	call	80082f80 <puts>
  if(ret_code || error)
800816a4:	e0bff617 	ldw	r2,-40(fp)
800816a8:	1000021e 	bne	r2,zero,800816b4 <FlashRunTests+0x108>
800816ac:	e0bffc17 	ldw	r2,-16(fp)
800816b0:	10000326 	beq	r2,zero,800816c0 <FlashRunTests+0x114>
  {
    printf(" -At least one test failed.\n\n");
800816b4:	012002b4 	movhi	r4,32778
800816b8:	212f7404 	addi	r4,r4,-16944
800816bc:	0082f800 	call	80082f80 <puts>
  }
}
800816c0:	0001883a 	nop
800816c4:	e037883a 	mov	sp,fp
800816c8:	dfc00117 	ldw	ra,4(sp)
800816cc:	df000017 	ldw	fp,0(sp)
800816d0:	dec00204 	addi	sp,sp,8
800816d4:	f800283a 	ret

800816d8 <GetFlashName>:
*           Defaults to "/dev/ext_flash", the name of the flash
*           component in the Nios II example designs.
* 
******************************************************************/
static int GetFlashName(char line[30], int flash_type)
{
800816d8:	defffa04 	addi	sp,sp,-24
800816dc:	dfc00515 	stw	ra,20(sp)
800816e0:	df000415 	stw	fp,16(sp)
800816e4:	df000404 	addi	fp,sp,16
800816e8:	e13ffe15 	stw	r4,-8(fp)
800816ec:	e17fff15 	stw	r5,-4(fp)

  char ch = 0x0;
800816f0:	e03ffc05 	stb	zero,-16(fp)
  int i;

  if (flash_type == CFI)
800816f4:	e0bfff17 	ldw	r2,-4(fp)
800816f8:	108000d8 	cmpnei	r2,r2,3
800816fc:	1000091e 	bne	r2,zero,80081724 <GetFlashName+0x4c>
  { 
    printf("\nEnter the name of the CFI flash device to be opened,\n");
80081700:	012002b4 	movhi	r4,32778
80081704:	212f7c04 	addi	r4,r4,-16912
80081708:	0082f800 	call	80082f80 <puts>
    printf("or just press <enter> to open \"/dev/ext_flash\"\n");
8008170c:	012002b4 	movhi	r4,32778
80081710:	212f8a04 	addi	r4,r4,-16856
80081714:	0082f800 	call	80082f80 <puts>
    printf(">");
80081718:	01000f84 	movi	r4,62
8008171c:	0082ea80 	call	80082ea8 <putchar>
80081720:	00000b06 	br	80081750 <GetFlashName+0x78>
  }
  else if (flash_type == EPCS)
80081724:	e0bfff17 	ldw	r2,-4(fp)
80081728:	10800118 	cmpnei	r2,r2,4
8008172c:	1000081e 	bne	r2,zero,80081750 <GetFlashName+0x78>
  {
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
80081730:	012002b4 	movhi	r4,32778
80081734:	212f9604 	addi	r4,r4,-16808
80081738:	0082f800 	call	80082f80 <puts>
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
8008173c:	012002b4 	movhi	r4,32778
80081740:	212fa404 	addi	r4,r4,-16752
80081744:	0082f800 	call	80082f80 <puts>
    printf(">");
80081748:	01000f84 	movi	r4,62
8008174c:	0082ea80 	call	80082ea8 <putchar>
  }
 
  for(i = 0; ch != '\n'; i++)
80081750:	e03ffd15 	stw	zero,-12(fp)
80081754:	00003706 	br	80081834 <GetFlashName+0x15c>
  {
    ch = getc(stdin);
80081758:	d0a00117 	ldw	r2,-32764(gp)
8008175c:	10800117 	ldw	r2,4(r2)
80081760:	1009883a 	mov	r4,r2
80081764:	00823b40 	call	800823b4 <getc>
80081768:	e0bffc05 	stb	r2,-16(fp)
    if(ch == '\r' || ch == '\n')
8008176c:	e0bffc07 	ldb	r2,-16(fp)
80081770:	10800360 	cmpeqi	r2,r2,13
80081774:	1000031e 	bne	r2,zero,80081784 <GetFlashName+0xac>
80081778:	e0bffc07 	ldb	r2,-16(fp)
8008177c:	10800298 	cmpnei	r2,r2,10
80081780:	1000221e 	bne	r2,zero,8008180c <GetFlashName+0x134>
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
80081784:	e0bffd17 	ldw	r2,-12(fp)
80081788:	10800088 	cmpgei	r2,r2,2
8008178c:	10001a1e 	bne	r2,zero,800817f8 <GetFlashName+0x120>
      {
        if (flash_type == CFI)
80081790:	e0bfff17 	ldw	r2,-4(fp)
80081794:	108000d8 	cmpnei	r2,r2,3
80081798:	10000a1e 	bne	r2,zero,800817c4 <GetFlashName+0xec>
          strcpy(line, "/dev/ext_flash\0");
8008179c:	e0fffe17 	ldw	r3,-8(fp)
800817a0:	00a002b4 	movhi	r2,32778
800817a4:	10afb204 	addi	r2,r2,-16696
800817a8:	1009883a 	mov	r4,r2
800817ac:	008003c4 	movi	r2,15
800817b0:	100d883a 	mov	r6,r2
800817b4:	200b883a 	mov	r5,r4
800817b8:	1809883a 	mov	r4,r3
800817bc:	0082cec0 	call	80082cec <memcpy>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
800817c0:	00001806 	br	80081824 <GetFlashName+0x14c>
      {
        if (flash_type == CFI)
          strcpy(line, "/dev/ext_flash\0");
        else if (flash_type == EPCS)
800817c4:	e0bfff17 	ldw	r2,-4(fp)
800817c8:	10800118 	cmpnei	r2,r2,4
800817cc:	1000151e 	bne	r2,zero,80081824 <GetFlashName+0x14c>
          strcpy(line, "/dev/epcs_controller\0");
800817d0:	e0fffe17 	ldw	r3,-8(fp)
800817d4:	00a002b4 	movhi	r2,32778
800817d8:	10afb604 	addi	r2,r2,-16680
800817dc:	1009883a 	mov	r4,r2
800817e0:	00800544 	movi	r2,21
800817e4:	100d883a 	mov	r6,r2
800817e8:	200b883a 	mov	r5,r4
800817ec:	1809883a 	mov	r4,r3
800817f0:	0082cec0 	call	80082cec <memcpy>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
800817f4:	00000b06 	br	80081824 <GetFlashName+0x14c>
          strcpy(line, "/dev/epcs_controller\0");
      }
         
      else
        /* Properly terminate the string. */
        line[i] = '\0';
800817f8:	e0bffd17 	ldw	r2,-12(fp)
800817fc:	e0fffe17 	ldw	r3,-8(fp)
80081800:	1885883a 	add	r2,r3,r2
80081804:	10000005 	stb	zero,0(r2)
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
80081808:	00000606 	br	80081824 <GetFlashName+0x14c>
      else
        /* Properly terminate the string. */
        line[i] = '\0';
    }
    else
     line[i] = ch;
8008180c:	e0bffd17 	ldw	r2,-12(fp)
80081810:	e0fffe17 	ldw	r3,-8(fp)
80081814:	1885883a 	add	r2,r3,r2
80081818:	e0fffc03 	ldbu	r3,-16(fp)
8008181c:	10c00005 	stb	r3,0(r2)
80081820:	00000106 	br	80081828 <GetFlashName+0x150>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
80081824:	0001883a 	nop
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
    printf(">");
  }
 
  for(i = 0; ch != '\n'; i++)
80081828:	e0bffd17 	ldw	r2,-12(fp)
8008182c:	10800044 	addi	r2,r2,1
80081830:	e0bffd15 	stw	r2,-12(fp)
80081834:	e0bffc07 	ldb	r2,-16(fp)
80081838:	10800298 	cmpnei	r2,r2,10
8008183c:	103fc61e 	bne	r2,zero,80081758 <GetFlashName+0x80>
    }
    else
     line[i] = ch;
  }
 
  return 0;
80081840:	0005883a 	mov	r2,zero
}
80081844:	e037883a 	mov	sp,fp
80081848:	dfc00117 	ldw	ra,4(sp)
8008184c:	df000017 	ldw	fp,0(sp)
80081850:	dec00204 	addi	sp,sp,8
80081854:	f800283a 	ret

80081858 <FlashErase>:
*
*  Purpose: Erases 1 or all blocks in the specified flash device.
* 
******************************************************************/
static void FlashErase(int flash_type)
{
80081858:	deffe304 	addi	sp,sp,-116
8008185c:	dfc01c15 	stw	ra,112(sp)
80081860:	df001b15 	stw	fp,108(sp)
80081864:	df001b04 	addi	fp,sp,108
80081868:	e13fff15 	stw	r4,-4(fp)
  char entry[4];
  char flashname[30];
  unsigned int block;
 
  /* Get the name of the flash we are erasing */
  ret_code = GetFlashName(flashname, flash_type);
8008186c:	e0bff604 	addi	r2,fp,-40
80081870:	e17fff17 	ldw	r5,-4(fp)
80081874:	1009883a 	mov	r4,r2
80081878:	00816d80 	call	800816d8 <GetFlashName>
8008187c:	e0bfe515 	stw	r2,-108(fp)
 
  fd = alt_flash_open_dev(flashname);
80081880:	e0bff604 	addi	r2,fp,-40
80081884:	1009883a 	mov	r4,r2
80081888:	0098bd00 	call	80098bd0 <alt_flash_open_dev>
8008188c:	e0bfe615 	stw	r2,-104(fp)
  if (fd)
80081890:	e0bfe617 	ldw	r2,-104(fp)
80081894:	1000b626 	beq	r2,zero,80081b70 <FlashErase+0x318>
80081898:	e0bfe617 	ldw	r2,-104(fp)
8008189c:	e0bfea15 	stw	r2,-88(fp)
800818a0:	e0bff304 	addi	r2,fp,-52
800818a4:	e0bfeb15 	stw	r2,-84(fp)
800818a8:	e0bff404 	addi	r2,fp,-48
800818ac:	e0bfec15 	stw	r2,-80(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
800818b0:	e0bfea17 	ldw	r2,-88(fp)
800818b4:	10800717 	ldw	r2,28(r2)
800818b8:	e1bfec17 	ldw	r6,-80(fp)
800818bc:	e17feb17 	ldw	r5,-84(fp)
800818c0:	e13fea17 	ldw	r4,-88(fp)
800818c4:	103ee83a 	callr	r2
  {
    /* Find out some useful stuff about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
800818c8:	e0bfe515 	stw	r2,-108(fp)
    if (!ret_code)
800818cc:	e0bfe517 	ldw	r2,-108(fp)
800818d0:	1000a01e 	bne	r2,zero,80081b54 <FlashErase+0x2fc>
    {
      printf(" -Region has %d blocks.\n", regions->number_of_blocks);
800818d4:	e0bff317 	ldw	r2,-52(fp)
800818d8:	10800217 	ldw	r2,8(r2)
800818dc:	100b883a 	mov	r5,r2
800818e0:	012002b4 	movhi	r4,32778
800818e4:	212fbc04 	addi	r4,r4,-16656
800818e8:	0082e640 	call	80082e64 <printf>
      printf(" -Which block would you like to erase?\n");
800818ec:	012002b4 	movhi	r4,32778
800818f0:	212fc304 	addi	r4,r4,-16628
800818f4:	0082f800 	call	80082f80 <puts>
      printf(" -> ");
800818f8:	012002b4 	movhi	r4,32778
800818fc:	212fcd04 	addi	r4,r4,-16588
80081900:	0082e640 	call	80082e64 <printf>
      
      GetInputString( entry, sizeof(entry), stdin );
80081904:	d0a00117 	ldw	r2,-32764(gp)
80081908:	10c00117 	ldw	r3,4(r2)
8008190c:	e0bff504 	addi	r2,fp,-44
80081910:	180d883a 	mov	r6,r3
80081914:	01400104 	movi	r5,4
80081918:	1009883a 	mov	r4,r2
8008191c:	00802f80 	call	800802f8 <GetInputString>

      if(entry[0] == 'a')
80081920:	e0bff503 	ldbu	r2,-44(fp)
80081924:	10803fcc 	andi	r2,r2,255
80081928:	1080201c 	xori	r2,r2,128
8008192c:	10bfe004 	addi	r2,r2,-128
80081930:	10801858 	cmpnei	r2,r2,97
80081934:	1000501e 	bne	r2,zero,80081a78 <FlashErase+0x220>
      {
        printf(" -Erase ALL blocks? (y/n) ");
80081938:	012002b4 	movhi	r4,32778
8008193c:	212fcf04 	addi	r4,r4,-16580
80081940:	0082e640 	call	80082e64 <printf>

        GetInputString( entry, sizeof(entry), stdin );
80081944:	d0a00117 	ldw	r2,-32764(gp)
80081948:	10c00117 	ldw	r3,4(r2)
8008194c:	e0bff504 	addi	r2,fp,-44
80081950:	180d883a 	mov	r6,r3
80081954:	01400104 	movi	r5,4
80081958:	1009883a 	mov	r4,r2
8008195c:	00802f80 	call	800802f8 <GetInputString>
        
        if(entry[0] == 'y')
80081960:	e0bff503 	ldbu	r2,-44(fp)
80081964:	10803fcc 	andi	r2,r2,255
80081968:	1080201c 	xori	r2,r2,128
8008196c:	10bfe004 	addi	r2,r2,-128
80081970:	10801e58 	cmpnei	r2,r2,121
80081974:	10003d1e 	bne	r2,zero,80081a6c <FlashErase+0x214>
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
80081978:	e0bff317 	ldw	r2,-52(fp)
8008197c:	10800217 	ldw	r2,8(r2)
80081980:	100b883a 	mov	r5,r2
80081984:	012002b4 	movhi	r4,32778
80081988:	212fd604 	addi	r4,r4,-16552
8008198c:	0082e640 	call	80082e64 <printf>
          for(block = 0; block < regions->number_of_blocks; block++)
80081990:	e03ffe15 	stw	zero,-8(fp)
80081994:	00002c06 	br	80081a48 <FlashErase+0x1f0>
          {
            /* Dont erase it if it's already erased silly. */
            if ((FlashCheckIfBlockErased(fd, block, regions)) == 0)
80081998:	e0bffe17 	ldw	r2,-8(fp)
8008199c:	1007883a 	mov	r3,r2
800819a0:	e0bff317 	ldw	r2,-52(fp)
800819a4:	100d883a 	mov	r6,r2
800819a8:	180b883a 	mov	r5,r3
800819ac:	e13fe617 	ldw	r4,-104(fp)
800819b0:	0080d6c0 	call	80080d6c <FlashCheckIfBlockErased>
800819b4:	1000171e 	bne	r2,zero,80081a14 <FlashErase+0x1bc>
            {
              test_offset = (regions->offset + (block * regions->block_size));
800819b8:	e0bff317 	ldw	r2,-52(fp)
800819bc:	10800017 	ldw	r2,0(r2)
800819c0:	1007883a 	mov	r3,r2
800819c4:	e0bff317 	ldw	r2,-52(fp)
800819c8:	10800317 	ldw	r2,12(r2)
800819cc:	1009883a 	mov	r4,r2
800819d0:	e0bffe17 	ldw	r2,-8(fp)
800819d4:	2085383a 	mul	r2,r4,r2
800819d8:	1885883a 	add	r2,r3,r2
800819dc:	e0bfe815 	stw	r2,-96(fp)
              alt_erase_flash_block(fd, test_offset, regions->block_size);
800819e0:	e0bff317 	ldw	r2,-52(fp)
800819e4:	10800317 	ldw	r2,12(r2)
800819e8:	e0ffe617 	ldw	r3,-104(fp)
800819ec:	e0ffe715 	stw	r3,-100(fp)
800819f0:	e0ffe817 	ldw	r3,-96(fp)
800819f4:	e0ffed15 	stw	r3,-76(fp)
800819f8:	e0bfee15 	stw	r2,-72(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
800819fc:	e0bfe717 	ldw	r2,-100(fp)
80081a00:	10800817 	ldw	r2,32(r2)
80081a04:	e17fed17 	ldw	r5,-76(fp)
80081a08:	e13fe717 	ldw	r4,-100(fp)
80081a0c:	103ee83a 	callr	r2
80081a10:	e0bfef15 	stw	r2,-68(fp)
            }
            /* Just a simple progress meter so we dont get bored waiting for the flash to erase. */
            printf(".");
80081a14:	01000b84 	movi	r4,46
80081a18:	0082ea80 	call	80082ea8 <putchar>
            if(((block + 1) % 80) == 0)
80081a1c:	e0bffe17 	ldw	r2,-8(fp)
80081a20:	10800044 	addi	r2,r2,1
80081a24:	01401404 	movi	r5,80
80081a28:	1009883a 	mov	r4,r2
80081a2c:	00822ec0 	call	800822ec <__umodsi3>
80081a30:	1000021e 	bne	r2,zero,80081a3c <FlashErase+0x1e4>
            {
              printf("\n");
80081a34:	01000284 	movi	r4,10
80081a38:	0082ea80 	call	80082ea8 <putchar>
        
        if(entry[0] == 'y')
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
          for(block = 0; block < regions->number_of_blocks; block++)
80081a3c:	e0bffe17 	ldw	r2,-8(fp)
80081a40:	10800044 	addi	r2,r2,1
80081a44:	e0bffe15 	stw	r2,-8(fp)
80081a48:	e0bff317 	ldw	r2,-52(fp)
80081a4c:	10800217 	ldw	r2,8(r2)
80081a50:	1007883a 	mov	r3,r2
80081a54:	e0bffe17 	ldw	r2,-8(fp)
80081a58:	10ffcf36 	bltu	r2,r3,80081998 <FlashErase+0x140>
            if(((block + 1) % 80) == 0)
            {
              printf("\n");
            }
          }
          printf("\n -All Blocks Erased.\n");
80081a5c:	012002b4 	movhi	r4,32778
80081a60:	212fdf04 	addi	r4,r4,-16516
80081a64:	0082f800 	call	80082f80 <puts>
80081a68:	00000306 	br	80081a78 <FlashErase+0x220>
        }
        else
        {
          printf("Erased zero blocks.\n");
80081a6c:	012002b4 	movhi	r4,32778
80081a70:	212fe504 	addi	r4,r4,-16492
80081a74:	0082f800 	call	80082f80 <puts>
        }
      }
      /* Just erase one block */
      if(sscanf(entry, "%d\n", &block))
80081a78:	e0fffe04 	addi	r3,fp,-8
80081a7c:	e0bff504 	addi	r2,fp,-44
80081a80:	180d883a 	mov	r6,r3
80081a84:	016002b4 	movhi	r5,32778
80081a88:	296fea04 	addi	r5,r5,-16472
80081a8c:	1009883a 	mov	r4,r2
80081a90:	00830700 	call	80083070 <sscanf>
80081a94:	10002f26 	beq	r2,zero,80081b54 <FlashErase+0x2fc>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
80081a98:	e0bff317 	ldw	r2,-52(fp)
80081a9c:	10800217 	ldw	r2,8(r2)
80081aa0:	10bfffc4 	addi	r2,r2,-1
80081aa4:	1007883a 	mov	r3,r2
80081aa8:	e0bffe17 	ldw	r2,-8(fp)
80081aac:	18801d36 	bltu	r3,r2,80081b24 <FlashErase+0x2cc>
        {
          test_offset = (regions->offset + (block * regions->block_size));
80081ab0:	e0bff317 	ldw	r2,-52(fp)
80081ab4:	10800017 	ldw	r2,0(r2)
80081ab8:	1007883a 	mov	r3,r2
80081abc:	e0bff317 	ldw	r2,-52(fp)
80081ac0:	10800317 	ldw	r2,12(r2)
80081ac4:	1009883a 	mov	r4,r2
80081ac8:	e0bffe17 	ldw	r2,-8(fp)
80081acc:	2085383a 	mul	r2,r4,r2
80081ad0:	1885883a 	add	r2,r3,r2
80081ad4:	e0bfe815 	stw	r2,-96(fp)
          alt_erase_flash_block(fd, test_offset, regions->block_size);
80081ad8:	e0bff317 	ldw	r2,-52(fp)
80081adc:	10800317 	ldw	r2,12(r2)
80081ae0:	e0ffe617 	ldw	r3,-104(fp)
80081ae4:	e0ffe915 	stw	r3,-92(fp)
80081ae8:	e0ffe817 	ldw	r3,-96(fp)
80081aec:	e0fff015 	stw	r3,-64(fp)
80081af0:	e0bff115 	stw	r2,-60(fp)
80081af4:	e0bfe917 	ldw	r2,-92(fp)
80081af8:	10800817 	ldw	r2,32(r2)
80081afc:	e17ff017 	ldw	r5,-64(fp)
80081b00:	e13fe917 	ldw	r4,-92(fp)
80081b04:	103ee83a 	callr	r2
80081b08:	e0bff215 	stw	r2,-56(fp)
          printf(" -Block %d erased.\n", block);
80081b0c:	e0bffe17 	ldw	r2,-8(fp)
80081b10:	100b883a 	mov	r5,r2
80081b14:	012002b4 	movhi	r4,32778
80081b18:	212feb04 	addi	r4,r4,-16468
80081b1c:	0082e640 	call	80082e64 <printf>
80081b20:	00000c06 	br	80081b54 <FlashErase+0x2fc>
        }
        else
        {
          printf(" -Block number entered is %d\n", block);
80081b24:	e0bffe17 	ldw	r2,-8(fp)
80081b28:	100b883a 	mov	r5,r2
80081b2c:	012002b4 	movhi	r4,32778
80081b30:	212ff004 	addi	r4,r4,-16448
80081b34:	0082e640 	call	80082e64 <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
80081b38:	e0bff317 	ldw	r2,-52(fp)
80081b3c:	10800217 	ldw	r2,8(r2)
80081b40:	10bfffc4 	addi	r2,r2,-1
80081b44:	100b883a 	mov	r5,r2
80081b48:	012002b4 	movhi	r4,32778
80081b4c:	212ff804 	addi	r4,r4,-16416
80081b50:	0082e640 	call	80082e64 <printf>
        }
      }
    }
    printf(" -Closing flash \"%s\".\n", flashname);
80081b54:	e0bff604 	addi	r2,fp,-40
80081b58:	100b883a 	mov	r5,r2
80081b5c:	012002b4 	movhi	r4,32778
80081b60:	21300304 	addi	r4,r4,-16372
80081b64:	0082e640 	call	80082e64 <printf>
    alt_flash_close_dev(fd);
80081b68:	e13fe617 	ldw	r4,-104(fp)
80081b6c:	0098c200 	call	80098c20 <alt_flash_close_dev>
  }
}
80081b70:	0001883a 	nop
80081b74:	e037883a 	mov	sp,fp
80081b78:	dfc00117 	ldw	ra,4(sp)
80081b7c:	df000017 	ldw	fp,0(sp)
80081b80:	dec00204 	addi	sp,sp,8
80081b84:	f800283a 	ret

80081b88 <FlashFindErasedBlocks>:
*           parameter is SHOWMAP, the function prints a list of 
*           all blocks, indicating which ones are erased.
* 
******************************************************************/
static int FlashFindErasedBlocks(alt_flash_fd* fd, flash_region* regions, int number_of_regions, int mode)
{ 
80081b88:	defff404 	addi	sp,sp,-48
80081b8c:	dfc00b15 	stw	ra,44(sp)
80081b90:	df000a15 	stw	fp,40(sp)
80081b94:	df000a04 	addi	fp,sp,40
80081b98:	e13ffc15 	stw	r4,-16(fp)
80081b9c:	e17ffd15 	stw	r5,-12(fp)
80081ba0:	e1bffe15 	stw	r6,-8(fp)
80081ba4:	e1ffff15 	stw	r7,-4(fp)
  int region_index, block_index;
  int block_erased = 0x0;
80081ba8:	e03ff815 	stw	zero,-32(fp)
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
80081bac:	e03ff615 	stw	zero,-40(fp)
80081bb0:	00008806 	br	80081dd4 <FlashFindErasedBlocks+0x24c>
  {
    printf(" -Checking Region %d for erased blocks.\n", region_index);
80081bb4:	e17ff617 	ldw	r5,-40(fp)
80081bb8:	012002b4 	movhi	r4,32778
80081bbc:	21300904 	addi	r4,r4,-16348
80081bc0:	0082e640 	call	80082e64 <printf>
    /* SHOWMAP mode has a legend reminding us what little plus and minus signs mean */
    if(mode == SHOWMAP)
80081bc4:	e0bfff17 	ldw	r2,-4(fp)
80081bc8:	10800098 	cmpnei	r2,r2,2
80081bcc:	1000061e 	bne	r2,zero,80081be8 <FlashFindErasedBlocks+0x60>
    {
      printf("            erased block = '-'\n");     
80081bd0:	012002b4 	movhi	r4,32778
80081bd4:	21301404 	addi	r4,r4,-16304
80081bd8:	0082f800 	call	80082f80 <puts>
      printf("          unerased block = '+'\n\n");     
80081bdc:	012002b4 	movhi	r4,32778
80081be0:	21301c04 	addi	r4,r4,-16272
80081be4:	0082f800 	call	80082f80 <puts>
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
80081be8:	e03ff715 	stw	zero,-36(fp)
80081bec:	00003006 	br	80081cb0 <FlashFindErasedBlocks+0x128>
    {
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
80081bf0:	e1bffd17 	ldw	r6,-12(fp)
80081bf4:	e17ff717 	ldw	r5,-36(fp)
80081bf8:	e13ffc17 	ldw	r4,-16(fp)
80081bfc:	0080d6c0 	call	80080d6c <FlashCheckIfBlockErased>
80081c00:	e0bff815 	stw	r2,-32(fp)
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
80081c04:	e0bff817 	ldw	r2,-32(fp)
80081c08:	10000326 	beq	r2,zero,80081c18 <FlashFindErasedBlocks+0x90>
80081c0c:	e0bfff17 	ldw	r2,-4(fp)
80081c10:	10800060 	cmpeqi	r2,r2,1
80081c14:	10002a1e 	bne	r2,zero,80081cc0 <FlashFindErasedBlocks+0x138>
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
80081c18:	e0bff817 	ldw	r2,-32(fp)
80081c1c:	10001026 	beq	r2,zero,80081c60 <FlashFindErasedBlocks+0xd8>
80081c20:	e0bfff17 	ldw	r2,-4(fp)
80081c24:	10800098 	cmpnei	r2,r2,2
80081c28:	10000d1e 	bne	r2,zero,80081c60 <FlashFindErasedBlocks+0xd8>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
80081c2c:	e0bffd17 	ldw	r2,-12(fp)
80081c30:	10c00017 	ldw	r3,0(r2)
80081c34:	e0bffd17 	ldw	r2,-12(fp)
80081c38:	11000317 	ldw	r4,12(r2)
80081c3c:	e0bff717 	ldw	r2,-36(fp)
80081c40:	2085383a 	mul	r2,r4,r2
80081c44:	1885883a 	add	r2,r3,r2
80081c48:	100d883a 	mov	r6,r2
80081c4c:	e17ff717 	ldw	r5,-36(fp)
80081c50:	012002b4 	movhi	r4,32778
80081c54:	21302404 	addi	r4,r4,-16240
80081c58:	0082e640 	call	80082e64 <printf>
80081c5c:	00001106 	br	80081ca4 <FlashFindErasedBlocks+0x11c>
      else if(!block_erased && (mode == SHOWMAP))
80081c60:	e0bff817 	ldw	r2,-32(fp)
80081c64:	10000f1e 	bne	r2,zero,80081ca4 <FlashFindErasedBlocks+0x11c>
80081c68:	e0bfff17 	ldw	r2,-4(fp)
80081c6c:	10800098 	cmpnei	r2,r2,2
80081c70:	10000c1e 	bne	r2,zero,80081ca4 <FlashFindErasedBlocks+0x11c>
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
80081c74:	e0bffd17 	ldw	r2,-12(fp)
80081c78:	10c00017 	ldw	r3,0(r2)
80081c7c:	e0bffd17 	ldw	r2,-12(fp)
80081c80:	11000317 	ldw	r4,12(r2)
80081c84:	e0bff717 	ldw	r2,-36(fp)
80081c88:	2085383a 	mul	r2,r4,r2
80081c8c:	1885883a 	add	r2,r3,r2
80081c90:	100d883a 	mov	r6,r2
80081c94:	e17ff717 	ldw	r5,-36(fp)
80081c98:	012002b4 	movhi	r4,32778
80081c9c:	21302b04 	addi	r4,r4,-16212
80081ca0:	0082e640 	call	80082e64 <printf>
    {
      printf("            erased block = '-'\n");     
      printf("          unerased block = '+'\n\n");     
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
80081ca4:	e0bff717 	ldw	r2,-36(fp)
80081ca8:	10800044 	addi	r2,r2,1
80081cac:	e0bff715 	stw	r2,-36(fp)
80081cb0:	e0bffd17 	ldw	r2,-12(fp)
80081cb4:	10800217 	ldw	r2,8(r2)
80081cb8:	e0fff717 	ldw	r3,-36(fp)
80081cbc:	18bfcc16 	blt	r3,r2,80081bf0 <FlashFindErasedBlocks+0x68>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
    }
    /* Special case if no blocks are erased (TEST mode only)*/
    if(( block_index == ( regions->number_of_blocks )) && ( mode == TEST ))
80081cc0:	e0bffd17 	ldw	r2,-12(fp)
80081cc4:	10c00217 	ldw	r3,8(r2)
80081cc8:	e0bff717 	ldw	r2,-36(fp)
80081ccc:	1880391e 	bne	r3,r2,80081db4 <FlashFindErasedBlocks+0x22c>
80081cd0:	e0bfff17 	ldw	r2,-4(fp)
80081cd4:	10800058 	cmpnei	r2,r2,1
80081cd8:	1000361e 	bne	r2,zero,80081db4 <FlashFindErasedBlocks+0x22c>
    {
      printf(" -Found no erased blocks.  Please enter the number of the block\n");
80081cdc:	012002b4 	movhi	r4,32778
80081ce0:	21303204 	addi	r4,r4,-16184
80081ce4:	0082f800 	call	80082f80 <puts>
      printf("  you would like to test.  Enter 'q' to quit without testing flash.\n");
80081ce8:	012002b4 	movhi	r4,32778
80081cec:	21304204 	addi	r4,r4,-16120
80081cf0:	0082f800 	call	80082f80 <puts>
      printf(" -> ");
80081cf4:	012002b4 	movhi	r4,32778
80081cf8:	212fcd04 	addi	r4,r4,-16588
80081cfc:	0082e640 	call	80082e64 <printf>

      GetInputString( entry, sizeof(entry), stdin );
80081d00:	d0a00117 	ldw	r2,-32764(gp)
80081d04:	10c00117 	ldw	r3,4(r2)
80081d08:	e0bff904 	addi	r2,fp,-28
80081d0c:	180d883a 	mov	r6,r3
80081d10:	01400144 	movi	r5,5
80081d14:	1009883a 	mov	r4,r2
80081d18:	00802f80 	call	800802f8 <GetInputString>

      if(entry[0] == 'q')
80081d1c:	e0bff903 	ldbu	r2,-28(fp)
80081d20:	10803fcc 	andi	r2,r2,255
80081d24:	1080201c 	xori	r2,r2,128
80081d28:	10bfe004 	addi	r2,r2,-128
80081d2c:	10801c58 	cmpnei	r2,r2,113
80081d30:	1000031e 	bne	r2,zero,80081d40 <FlashFindErasedBlocks+0x1b8>
      {
    		block_index = QUIT_WITHOUT_TESTING;
80081d34:	00bfffc4 	movi	r2,-1
80081d38:	e0bff715 	stw	r2,-36(fp)
    		break;
80081d3c:	00002a06 	br	80081de8 <FlashFindErasedBlocks+0x260>
    	}
      else if(sscanf(entry, "%d\n", &block))
80081d40:	e0fffb04 	addi	r3,fp,-20
80081d44:	e0bff904 	addi	r2,fp,-28
80081d48:	180d883a 	mov	r6,r3
80081d4c:	016002b4 	movhi	r5,32778
80081d50:	296fea04 	addi	r5,r5,-16472
80081d54:	1009883a 	mov	r4,r2
80081d58:	00830700 	call	80083070 <sscanf>
80081d5c:	10001526 	beq	r2,zero,80081db4 <FlashFindErasedBlocks+0x22c>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
80081d60:	e0bffd17 	ldw	r2,-12(fp)
80081d64:	10800217 	ldw	r2,8(r2)
80081d68:	10bfffc4 	addi	r2,r2,-1
80081d6c:	1007883a 	mov	r3,r2
80081d70:	e0bffb17 	ldw	r2,-20(fp)
80081d74:	18800336 	bltu	r3,r2,80081d84 <FlashFindErasedBlocks+0x1fc>
        {
        	block_index = block;
80081d78:	e0bffb17 	ldw	r2,-20(fp)
80081d7c:	e0bff715 	stw	r2,-36(fp)
        	break;
80081d80:	00001906 	br	80081de8 <FlashFindErasedBlocks+0x260>
        }
        else 
        {
          printf(" -Block number entered is %d\n", block);
80081d84:	e0bffb17 	ldw	r2,-20(fp)
80081d88:	100b883a 	mov	r5,r2
80081d8c:	012002b4 	movhi	r4,32778
80081d90:	212ff004 	addi	r4,r4,-16448
80081d94:	0082e640 	call	80082e64 <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
80081d98:	e0bffd17 	ldw	r2,-12(fp)
80081d9c:	10800217 	ldw	r2,8(r2)
80081da0:	10bfffc4 	addi	r2,r2,-1
80081da4:	100b883a 	mov	r5,r2
80081da8:	012002b4 	movhi	r4,32778
80081dac:	212ff804 	addi	r4,r4,-16416
80081db0:	0082e640 	call	80082e64 <printf>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
80081db4:	e0bff817 	ldw	r2,-32(fp)
80081db8:	10000326 	beq	r2,zero,80081dc8 <FlashFindErasedBlocks+0x240>
80081dbc:	e0bfff17 	ldw	r2,-4(fp)
80081dc0:	10800058 	cmpnei	r2,r2,1
80081dc4:	10000726 	beq	r2,zero,80081de4 <FlashFindErasedBlocks+0x25c>
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
80081dc8:	e0bff617 	ldw	r2,-40(fp)
80081dcc:	10800044 	addi	r2,r2,1
80081dd0:	e0bff615 	stw	r2,-40(fp)
80081dd4:	e0fff617 	ldw	r3,-40(fp)
80081dd8:	e0bffe17 	ldw	r2,-8(fp)
80081ddc:	18bf7516 	blt	r3,r2,80081bb4 <FlashFindErasedBlocks+0x2c>
80081de0:	00000106 	br	80081de8 <FlashFindErasedBlocks+0x260>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
      break;
80081de4:	0001883a 	nop
  }

  return block_index;
80081de8:	e0bff717 	ldw	r2,-36(fp)
}
80081dec:	e037883a 	mov	sp,fp
80081df0:	dfc00117 	ldw	ra,4(sp)
80081df4:	df000017 	ldw	fp,0(sp)
80081df8:	dec00204 	addi	sp,sp,8
80081dfc:	f800283a 	ret

80081e00 <TestFlash>:
*           indicates which ones are erased.  The flash is closed
*           at the end of the function.
* 
******************************************************************/
static void TestFlash(int mode, int flash_type)
{
80081e00:	deffeb04 	addi	sp,sp,-84
80081e04:	dfc01415 	stw	ra,80(sp)
80081e08:	df001315 	stw	fp,76(sp)
80081e0c:	df001304 	addi	fp,sp,76
80081e10:	e13ffe15 	stw	r4,-8(fp)
80081e14:	e17fff15 	stw	r5,-4(fp)
  alt_flash_fd* fd;
  int number_of_regions;
  int block;
  flash_region* regions;
  int ret_code = 0x0;
80081e18:	e03fed15 	stw	zero,-76(fp)
  char entry[4];
  char flashname[30];
  
  ret_code = GetFlashName(flashname, flash_type);
80081e1c:	e0bff604 	addi	r2,fp,-40
80081e20:	e17fff17 	ldw	r5,-4(fp)
80081e24:	1009883a 	mov	r4,r2
80081e28:	00816d80 	call	800816d8 <GetFlashName>
80081e2c:	e0bfed15 	stw	r2,-76(fp)

  fd = alt_flash_open_dev(flashname);
80081e30:	e0bff604 	addi	r2,fp,-40
80081e34:	1009883a 	mov	r4,r2
80081e38:	0098bd00 	call	80098bd0 <alt_flash_open_dev>
80081e3c:	e0bfee15 	stw	r2,-72(fp)
  if (fd)
80081e40:	e0bfee17 	ldw	r2,-72(fp)
80081e44:	10005726 	beq	r2,zero,80081fa4 <TestFlash+0x1a4>
  {
    printf(" -Successfully opened %s\n", flashname);
80081e48:	e0bff604 	addi	r2,fp,-40
80081e4c:	100b883a 	mov	r5,r2
80081e50:	012002b4 	movhi	r4,32778
80081e54:	21305304 	addi	r4,r4,-16052
80081e58:	0082e640 	call	80082e64 <printf>
80081e5c:	e0bfee17 	ldw	r2,-72(fp)
80081e60:	e0bff015 	stw	r2,-64(fp)
80081e64:	e0bff404 	addi	r2,fp,-48
80081e68:	e0bff115 	stw	r2,-60(fp)
80081e6c:	e0bff304 	addi	r2,fp,-52
80081e70:	e0bff215 	stw	r2,-56(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
80081e74:	e0bff017 	ldw	r2,-64(fp)
80081e78:	10800717 	ldw	r2,28(r2)
80081e7c:	e1bff217 	ldw	r6,-56(fp)
80081e80:	e17ff117 	ldw	r5,-60(fp)
80081e84:	e13ff017 	ldw	r4,-64(fp)
80081e88:	103ee83a 	callr	r2
    
    /* Get some useful info about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
80081e8c:	e0bfed15 	stw	r2,-76(fp)
      
    if (!ret_code)
80081e90:	e0bfed17 	ldw	r2,-76(fp)
80081e94:	1000481e 	bne	r2,zero,80081fb8 <TestFlash+0x1b8>
    {
      printf(" -Region 0 contains %d blocks.\n", regions->number_of_blocks);
80081e98:	e0bff417 	ldw	r2,-48(fp)
80081e9c:	10800217 	ldw	r2,8(r2)
80081ea0:	100b883a 	mov	r5,r2
80081ea4:	012002b4 	movhi	r4,32778
80081ea8:	21305a04 	addi	r4,r4,-16024
80081eac:	0082e640 	call	80082e64 <printf>
      
      block = FlashFindErasedBlocks(fd, regions, number_of_regions, mode);
80081eb0:	e0bff417 	ldw	r2,-48(fp)
80081eb4:	e0fff317 	ldw	r3,-52(fp)
80081eb8:	e1fffe17 	ldw	r7,-8(fp)
80081ebc:	180d883a 	mov	r6,r3
80081ec0:	100b883a 	mov	r5,r2
80081ec4:	e13fee17 	ldw	r4,-72(fp)
80081ec8:	0081b880 	call	80081b88 <FlashFindErasedBlocks>
80081ecc:	e0bfef15 	stw	r2,-68(fp)

      /* If we're in TEST mode, ask if this block is okay to test. */
      if(( mode == TEST ) && ( block != QUIT_WITHOUT_TESTING ))
80081ed0:	e0bffe17 	ldw	r2,-8(fp)
80081ed4:	10800058 	cmpnei	r2,r2,1
80081ed8:	1000371e 	bne	r2,zero,80081fb8 <TestFlash+0x1b8>
80081edc:	e0bfef17 	ldw	r2,-68(fp)
80081ee0:	10bfffe0 	cmpeqi	r2,r2,-1
80081ee4:	1000341e 	bne	r2,zero,80081fb8 <TestFlash+0x1b8>
      {
        printf(" -Block %d, at address 0x%X identified.\n", block, (regions->offset + (block * regions->block_size)));
80081ee8:	e0bff417 	ldw	r2,-48(fp)
80081eec:	10c00017 	ldw	r3,0(r2)
80081ef0:	e0bff417 	ldw	r2,-48(fp)
80081ef4:	11000317 	ldw	r4,12(r2)
80081ef8:	e0bfef17 	ldw	r2,-68(fp)
80081efc:	2085383a 	mul	r2,r4,r2
80081f00:	1885883a 	add	r2,r3,r2
80081f04:	100d883a 	mov	r6,r2
80081f08:	e17fef17 	ldw	r5,-68(fp)
80081f0c:	012002b4 	movhi	r4,32778
80081f10:	21306204 	addi	r4,r4,-15992
80081f14:	0082e640 	call	80082e64 <printf>
        printf(" -Would you like to test this block? (y/n)");
80081f18:	012002b4 	movhi	r4,32778
80081f1c:	21306d04 	addi	r4,r4,-15948
80081f20:	0082e640 	call	80082e64 <printf>

        GetInputString(entry, sizeof(entry), stdin);
80081f24:	d0a00117 	ldw	r2,-32764(gp)
80081f28:	10c00117 	ldw	r3,4(r2)
80081f2c:	e0bff504 	addi	r2,fp,-44
80081f30:	180d883a 	mov	r6,r3
80081f34:	01400104 	movi	r5,4
80081f38:	1009883a 	mov	r4,r2
80081f3c:	00802f80 	call	800802f8 <GetInputString>

        if ( entry[0] == 'y' && entry[1] == '\n' )
80081f40:	e0bff503 	ldbu	r2,-44(fp)
80081f44:	10803fcc 	andi	r2,r2,255
80081f48:	1080201c 	xori	r2,r2,128
80081f4c:	10bfe004 	addi	r2,r2,-128
80081f50:	10801e58 	cmpnei	r2,r2,121
80081f54:	1000181e 	bne	r2,zero,80081fb8 <TestFlash+0x1b8>
80081f58:	e0bff543 	ldbu	r2,-43(fp)
80081f5c:	10803fcc 	andi	r2,r2,255
80081f60:	1080201c 	xori	r2,r2,128
80081f64:	10bfe004 	addi	r2,r2,-128
80081f68:	10800298 	cmpnei	r2,r2,10
80081f6c:	1000121e 	bne	r2,zero,80081fb8 <TestFlash+0x1b8>
        {
          /* Test that Flash! */
          FlashRunTests(fd, block, regions);
80081f70:	e0bff417 	ldw	r2,-48(fp)
80081f74:	100d883a 	mov	r6,r2
80081f78:	e17fef17 	ldw	r5,-68(fp)
80081f7c:	e13fee17 	ldw	r4,-72(fp)
80081f80:	00815ac0 	call	800815ac <FlashRunTests>
          printf(" -Closing flash device \"%s\".\n", flashname);
80081f84:	e0bff604 	addi	r2,fp,-40
80081f88:	100b883a 	mov	r5,r2
80081f8c:	012002b4 	movhi	r4,32778
80081f90:	21307804 	addi	r4,r4,-15904
80081f94:	0082e640 	call	80082e64 <printf>
          alt_flash_close_dev(fd);
80081f98:	e13fee17 	ldw	r4,-72(fp)
80081f9c:	0098c200 	call	80098c20 <alt_flash_close_dev>
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
  }
}
80081fa0:	00000506 	br	80081fb8 <TestFlash+0x1b8>
      }
    }
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
80081fa4:	e0bff604 	addi	r2,fp,-40
80081fa8:	100b883a 	mov	r5,r2
80081fac:	012002b4 	movhi	r4,32778
80081fb0:	21308004 	addi	r4,r4,-15872
80081fb4:	0082e640 	call	80082e64 <printf>
  }
}
80081fb8:	0001883a 	nop
80081fbc:	e037883a 	mov	sp,fp
80081fc0:	dfc00117 	ldw	ra,4(sp)
80081fc4:	df000017 	ldw	fp,0(sp)
80081fc8:	dec00204 	addi	sp,sp,8
80081fcc:	f800283a 	ret

80081fd0 <TopMenu>:
*
*  Purpose: Generates the top level menu.
* 
******************************************************************/
static int TopMenu( void )
{
80081fd0:	defffd04 	addi	sp,sp,-12
80081fd4:	dfc00215 	stw	ra,8(sp)
80081fd8:	df000115 	stw	fp,4(sp)
80081fdc:	df000104 	addi	fp,sp,4
  char ch;

  /* Print the top-level menu to stdout */
  while (1)
  {
    MenuBegin("      Memory Test Main Menu");
80081fe0:	012002b4 	movhi	r4,32778
80081fe4:	21308704 	addi	r4,r4,-15844
80081fe8:	00802540 	call	80080254 <MenuBegin>
    MenuItem( 'a', "Test RAM" );
80081fec:	016002b4 	movhi	r5,32778
80081ff0:	29708e04 	addi	r5,r5,-15816
80081ff4:	01001844 	movi	r4,97
80081ff8:	00802ac0 	call	800802ac <MenuItem>
    MenuItem( 'b', "Test Flash");
80081ffc:	016002b4 	movhi	r5,32778
80082000:	29709104 	addi	r5,r5,-15804
80082004:	01001884 	movi	r4,98
80082008:	00802ac0 	call	800802ac <MenuItem>
#ifdef EPCS_CONTROLLER_NAME    
    MenuItem( 'c', "Test EPCS Serial Flash");
    ch = MenuEnd( 'a', 'c' );    
#else
    ch = MenuEnd( 'a', 'b' );
8008200c:	01401884 	movi	r5,98
80082010:	01001844 	movi	r4,97
80082014:	00803880 	call	80080388 <MenuEnd>
80082018:	e0bfff05 	stb	r2,-4(fp)
#endif /* EPCS_CONTROLLER_NAME */

    switch(ch)
8008201c:	e0bfff07 	ldb	r2,-4(fp)
80082020:	10bfe7c4 	addi	r2,r2,-97
80082024:	10c00468 	cmpgeui	r3,r2,17
80082028:	1800241e 	bne	r3,zero,800820bc <TopMenu+0xec>
8008202c:	100690ba 	slli	r3,r2,2
80082030:	00a00234 	movhi	r2,32776
80082034:	10881104 	addi	r2,r2,8260
80082038:	1885883a 	add	r2,r3,r2
8008203c:	10800017 	ldw	r2,0(r2)
80082040:	1000683a 	jmp	r2
80082044:	80082088 	cmpgei	zero,r16,8322
80082048:	80082090 	cmplti	zero,r16,8322
8008204c:	800820bc 	xorhi	zero,r16,8322
80082050:	800820bc 	xorhi	zero,r16,8322
80082054:	800820a0 	cmpeqi	zero,r16,8322
80082058:	800820bc 	xorhi	zero,r16,8322
8008205c:	800820bc 	xorhi	zero,r16,8322
80082060:	800820bc 	xorhi	zero,r16,8322
80082064:	800820bc 	xorhi	zero,r16,8322
80082068:	800820bc 	xorhi	zero,r16,8322
8008206c:	800820bc 	xorhi	zero,r16,8322
80082070:	800820bc 	xorhi	zero,r16,8322
80082074:	800820ac 	andhi	zero,r16,8322
80082078:	800820bc 	xorhi	zero,r16,8322
8008207c:	800820bc 	xorhi	zero,r16,8322
80082080:	800820bc 	xorhi	zero,r16,8322
80082084:	800820d4 	ori	zero,r16,8323
    {
      MenuCase('a',TestRam());
80082088:	0080bb80 	call	80080bb8 <TestRam>
8008208c:	00001206 	br	800820d8 <TopMenu+0x108>
      MenuCase('b',TestFlash(TEST, CFI));
80082090:	014000c4 	movi	r5,3
80082094:	01000044 	movi	r4,1
80082098:	0081e000 	call	80081e00 <TestFlash>
8008209c:	00000e06 	br	800820d8 <TopMenu+0x108>
      MenuCase('e',FlashErase(CFI));       /* hidden option */
800820a0:	010000c4 	movi	r4,3
800820a4:	00818580 	call	80081858 <FlashErase>
800820a8:	00000b06 	br	800820d8 <TopMenu+0x108>
      MenuCase('m',TestFlash(SHOWMAP, CFI)); /* hidden option */
800820ac:	014000c4 	movi	r5,3
800820b0:	01000084 	movi	r4,2
800820b4:	0081e000 	call	80081e00 <TestFlash>
800820b8:	00000706 	br	800820d8 <TopMenu+0x108>
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
800820bc:	e0bfff07 	ldb	r2,-4(fp)
800820c0:	100b883a 	mov	r5,r2
800820c4:	012002b4 	movhi	r4,32778
800820c8:	21309404 	addi	r4,r4,-15792
800820cc:	0082e640 	call	80082e64 <printf>
800820d0:	00000106 	br	800820d8 <TopMenu+0x108>
#ifdef EPCS_CONTROLLER_NAME    
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
800820d4:	0001883a 	nop
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
    }
    if (ch == 'q')
800820d8:	e0bfff07 	ldb	r2,-4(fp)
800820dc:	10801c58 	cmpnei	r2,r2,113
800820e0:	10001026 	beq	r2,zero,80082124 <TopMenu+0x154>
      break;
    printf("\nPress enter to continue...\n");
800820e4:	012002b4 	movhi	r4,32778
800820e8:	2130a204 	addi	r4,r4,-15736
800820ec:	0082f800 	call	80082f80 <puts>
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));
800820f0:	0001883a 	nop
800820f4:	d0a00117 	ldw	r2,-32764(gp)
800820f8:	10800117 	ldw	r2,4(r2)
800820fc:	1009883a 	mov	r4,r2
80082100:	00823b40 	call	800823b4 <getc>
80082104:	e0bfff05 	stb	r2,-4(fp)
80082108:	e0bfff07 	ldb	r2,-4(fp)
8008210c:	108002a0 	cmpeqi	r2,r2,10
80082110:	103fb31e 	bne	r2,zero,80081fe0 <TopMenu+0x10>
80082114:	e0bfff07 	ldb	r2,-4(fp)
80082118:	10bfffd8 	cmpnei	r2,r2,-1
8008211c:	103ff51e 	bne	r2,zero,800820f4 <TopMenu+0x124>

  }
80082120:	003faf06 	br	80081fe0 <TopMenu+0x10>
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
    }
    if (ch == 'q')
      break;
80082124:	0001883a 	nop
    printf("\nPress enter to continue...\n");
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));

  }
  return (ch);
80082128:	e0bfff07 	ldb	r2,-4(fp)
}
8008212c:	e037883a 	mov	sp,fp
80082130:	dfc00117 	ldw	ra,4(sp)
80082134:	df000017 	ldw	fp,0(sp)
80082138:	dec00204 	addi	sp,sp,8
8008213c:	f800283a 	ret

80082140 <main>:
*  Purpose: Continually prints the menu and performs the actions
*           requested by the user.
* 
******************************************************************/
int main(void)
{
80082140:	defffd04 	addi	sp,sp,-12
80082144:	dfc00215 	stw	ra,8(sp)
80082148:	df000115 	stw	fp,4(sp)
8008214c:	df000104 	addi	fp,sp,4

  int ch;

  /* Print the Header */
  MenuHeader();
80082150:	00801d80 	call	800801d8 <MenuHeader>
  /* Print the menu and do what the user requests, until they hit 'q' */
  while (1)
  {
    ch = TopMenu();
80082154:	0081fd00 	call	80081fd0 <TopMenu>
80082158:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
8008215c:	e0bfff17 	ldw	r2,-4(fp)
80082160:	10801c58 	cmpnei	r2,r2,113
80082164:	103ffb1e 	bne	r2,zero,80082154 <main+0x14>
    {
      printf( "\nExiting from Memory Test.\n");
80082168:	012002b4 	movhi	r4,32778
8008216c:	2130a904 	addi	r4,r4,-15708
80082170:	0082f800 	call	80082f80 <puts>
      break;
80082174:	0001883a 	nop
    }
  }
  return (0);
80082178:	0005883a 	mov	r2,zero
}
8008217c:	e037883a 	mov	sp,fp
80082180:	dfc00117 	ldw	ra,4(sp)
80082184:	df000017 	ldw	fp,0(sp)
80082188:	dec00204 	addi	sp,sp,8
8008218c:	f800283a 	ret

80082190 <__divsi3>:
80082190:	20001b16 	blt	r4,zero,80082200 <__divsi3+0x70>
80082194:	000f883a 	mov	r7,zero
80082198:	28001616 	blt	r5,zero,800821f4 <__divsi3+0x64>
8008219c:	200d883a 	mov	r6,r4
800821a0:	29001a2e 	bgeu	r5,r4,8008220c <__divsi3+0x7c>
800821a4:	00800804 	movi	r2,32
800821a8:	00c00044 	movi	r3,1
800821ac:	00000106 	br	800821b4 <__divsi3+0x24>
800821b0:	10000d26 	beq	r2,zero,800821e8 <__divsi3+0x58>
800821b4:	294b883a 	add	r5,r5,r5
800821b8:	10bfffc4 	addi	r2,r2,-1
800821bc:	18c7883a 	add	r3,r3,r3
800821c0:	293ffb36 	bltu	r5,r4,800821b0 <__divsi3+0x20>
800821c4:	0005883a 	mov	r2,zero
800821c8:	18000726 	beq	r3,zero,800821e8 <__divsi3+0x58>
800821cc:	0005883a 	mov	r2,zero
800821d0:	31400236 	bltu	r6,r5,800821dc <__divsi3+0x4c>
800821d4:	314dc83a 	sub	r6,r6,r5
800821d8:	10c4b03a 	or	r2,r2,r3
800821dc:	1806d07a 	srli	r3,r3,1
800821e0:	280ad07a 	srli	r5,r5,1
800821e4:	183ffa1e 	bne	r3,zero,800821d0 <__divsi3+0x40>
800821e8:	38000126 	beq	r7,zero,800821f0 <__divsi3+0x60>
800821ec:	0085c83a 	sub	r2,zero,r2
800821f0:	f800283a 	ret
800821f4:	014bc83a 	sub	r5,zero,r5
800821f8:	39c0005c 	xori	r7,r7,1
800821fc:	003fe706 	br	8008219c <__divsi3+0xc>
80082200:	0109c83a 	sub	r4,zero,r4
80082204:	01c00044 	movi	r7,1
80082208:	003fe306 	br	80082198 <__divsi3+0x8>
8008220c:	00c00044 	movi	r3,1
80082210:	003fee06 	br	800821cc <__divsi3+0x3c>

80082214 <__modsi3>:
80082214:	20001716 	blt	r4,zero,80082274 <__modsi3+0x60>
80082218:	000f883a 	mov	r7,zero
8008221c:	2005883a 	mov	r2,r4
80082220:	28001216 	blt	r5,zero,8008226c <__modsi3+0x58>
80082224:	2900162e 	bgeu	r5,r4,80082280 <__modsi3+0x6c>
80082228:	01800804 	movi	r6,32
8008222c:	00c00044 	movi	r3,1
80082230:	00000106 	br	80082238 <__modsi3+0x24>
80082234:	30000a26 	beq	r6,zero,80082260 <__modsi3+0x4c>
80082238:	294b883a 	add	r5,r5,r5
8008223c:	31bfffc4 	addi	r6,r6,-1
80082240:	18c7883a 	add	r3,r3,r3
80082244:	293ffb36 	bltu	r5,r4,80082234 <__modsi3+0x20>
80082248:	18000526 	beq	r3,zero,80082260 <__modsi3+0x4c>
8008224c:	1806d07a 	srli	r3,r3,1
80082250:	11400136 	bltu	r2,r5,80082258 <__modsi3+0x44>
80082254:	1145c83a 	sub	r2,r2,r5
80082258:	280ad07a 	srli	r5,r5,1
8008225c:	183ffb1e 	bne	r3,zero,8008224c <__modsi3+0x38>
80082260:	38000126 	beq	r7,zero,80082268 <__modsi3+0x54>
80082264:	0085c83a 	sub	r2,zero,r2
80082268:	f800283a 	ret
8008226c:	014bc83a 	sub	r5,zero,r5
80082270:	003fec06 	br	80082224 <__modsi3+0x10>
80082274:	0109c83a 	sub	r4,zero,r4
80082278:	01c00044 	movi	r7,1
8008227c:	003fe706 	br	8008221c <__modsi3+0x8>
80082280:	00c00044 	movi	r3,1
80082284:	003ff106 	br	8008224c <__modsi3+0x38>

80082288 <__udivsi3>:
80082288:	200d883a 	mov	r6,r4
8008228c:	2900152e 	bgeu	r5,r4,800822e4 <__udivsi3+0x5c>
80082290:	28001416 	blt	r5,zero,800822e4 <__udivsi3+0x5c>
80082294:	00800804 	movi	r2,32
80082298:	00c00044 	movi	r3,1
8008229c:	00000206 	br	800822a8 <__udivsi3+0x20>
800822a0:	10000e26 	beq	r2,zero,800822dc <__udivsi3+0x54>
800822a4:	28000516 	blt	r5,zero,800822bc <__udivsi3+0x34>
800822a8:	294b883a 	add	r5,r5,r5
800822ac:	10bfffc4 	addi	r2,r2,-1
800822b0:	18c7883a 	add	r3,r3,r3
800822b4:	293ffa36 	bltu	r5,r4,800822a0 <__udivsi3+0x18>
800822b8:	18000826 	beq	r3,zero,800822dc <__udivsi3+0x54>
800822bc:	0005883a 	mov	r2,zero
800822c0:	31400236 	bltu	r6,r5,800822cc <__udivsi3+0x44>
800822c4:	314dc83a 	sub	r6,r6,r5
800822c8:	10c4b03a 	or	r2,r2,r3
800822cc:	1806d07a 	srli	r3,r3,1
800822d0:	280ad07a 	srli	r5,r5,1
800822d4:	183ffa1e 	bne	r3,zero,800822c0 <__udivsi3+0x38>
800822d8:	f800283a 	ret
800822dc:	0005883a 	mov	r2,zero
800822e0:	f800283a 	ret
800822e4:	00c00044 	movi	r3,1
800822e8:	003ff406 	br	800822bc <__udivsi3+0x34>

800822ec <__umodsi3>:
800822ec:	2005883a 	mov	r2,r4
800822f0:	2900122e 	bgeu	r5,r4,8008233c <__umodsi3+0x50>
800822f4:	28001116 	blt	r5,zero,8008233c <__umodsi3+0x50>
800822f8:	01800804 	movi	r6,32
800822fc:	00c00044 	movi	r3,1
80082300:	00000206 	br	8008230c <__umodsi3+0x20>
80082304:	30000c26 	beq	r6,zero,80082338 <__umodsi3+0x4c>
80082308:	28000516 	blt	r5,zero,80082320 <__umodsi3+0x34>
8008230c:	294b883a 	add	r5,r5,r5
80082310:	31bfffc4 	addi	r6,r6,-1
80082314:	18c7883a 	add	r3,r3,r3
80082318:	293ffa36 	bltu	r5,r4,80082304 <__umodsi3+0x18>
8008231c:	18000626 	beq	r3,zero,80082338 <__umodsi3+0x4c>
80082320:	1806d07a 	srli	r3,r3,1
80082324:	11400136 	bltu	r2,r5,8008232c <__umodsi3+0x40>
80082328:	1145c83a 	sub	r2,r2,r5
8008232c:	280ad07a 	srli	r5,r5,1
80082330:	183ffb1e 	bne	r3,zero,80082320 <__umodsi3+0x34>
80082334:	f800283a 	ret
80082338:	f800283a 	ret
8008233c:	00c00044 	movi	r3,1
80082340:	003ff706 	br	80082320 <__umodsi3+0x34>

80082344 <_getc_r>:
80082344:	defffd04 	addi	sp,sp,-12
80082348:	dc000115 	stw	r16,4(sp)
8008234c:	dfc00215 	stw	ra,8(sp)
80082350:	2021883a 	mov	r16,r4
80082354:	20000226 	beq	r4,zero,80082360 <_getc_r+0x1c>
80082358:	20800e17 	ldw	r2,56(r4)
8008235c:	10000c26 	beq	r2,zero,80082390 <_getc_r+0x4c>
80082360:	28800117 	ldw	r2,4(r5)
80082364:	10bfffc4 	addi	r2,r2,-1
80082368:	28800115 	stw	r2,4(r5)
8008236c:	10000c16 	blt	r2,zero,800823a0 <_getc_r+0x5c>
80082370:	28800017 	ldw	r2,0(r5)
80082374:	10c00044 	addi	r3,r2,1
80082378:	28c00015 	stw	r3,0(r5)
8008237c:	10800003 	ldbu	r2,0(r2)
80082380:	dfc00217 	ldw	ra,8(sp)
80082384:	dc000117 	ldw	r16,4(sp)
80082388:	dec00304 	addi	sp,sp,12
8008238c:	f800283a 	ret
80082390:	d9400015 	stw	r5,0(sp)
80082394:	0088e4c0 	call	80088e4c <__sinit>
80082398:	d9400017 	ldw	r5,0(sp)
8008239c:	003ff006 	br	80082360 <_getc_r+0x1c>
800823a0:	8009883a 	mov	r4,r16
800823a4:	dfc00217 	ldw	ra,8(sp)
800823a8:	dc000117 	ldw	r16,4(sp)
800823ac:	dec00304 	addi	sp,sp,12
800823b0:	0082f941 	jmpi	80082f94 <__srget_r>

800823b4 <getc>:
800823b4:	00a002b4 	movhi	r2,32778
800823b8:	defffd04 	addi	sp,sp,-12
800823bc:	10ba7304 	addi	r2,r2,-5684
800823c0:	dc400115 	stw	r17,4(sp)
800823c4:	14400017 	ldw	r17,0(r2)
800823c8:	dc000015 	stw	r16,0(sp)
800823cc:	dfc00215 	stw	ra,8(sp)
800823d0:	2021883a 	mov	r16,r4
800823d4:	88000226 	beq	r17,zero,800823e0 <getc+0x2c>
800823d8:	88800e17 	ldw	r2,56(r17)
800823dc:	10000d26 	beq	r2,zero,80082414 <getc+0x60>
800823e0:	80800117 	ldw	r2,4(r16)
800823e4:	10bfffc4 	addi	r2,r2,-1
800823e8:	80800115 	stw	r2,4(r16)
800823ec:	10000c16 	blt	r2,zero,80082420 <getc+0x6c>
800823f0:	80800017 	ldw	r2,0(r16)
800823f4:	10c00044 	addi	r3,r2,1
800823f8:	80c00015 	stw	r3,0(r16)
800823fc:	10800003 	ldbu	r2,0(r2)
80082400:	dfc00217 	ldw	ra,8(sp)
80082404:	dc400117 	ldw	r17,4(sp)
80082408:	dc000017 	ldw	r16,0(sp)
8008240c:	dec00304 	addi	sp,sp,12
80082410:	f800283a 	ret
80082414:	8809883a 	mov	r4,r17
80082418:	0088e4c0 	call	80088e4c <__sinit>
8008241c:	003ff006 	br	800823e0 <getc+0x2c>
80082420:	800b883a 	mov	r5,r16
80082424:	8809883a 	mov	r4,r17
80082428:	dfc00217 	ldw	ra,8(sp)
8008242c:	dc400117 	ldw	r17,4(sp)
80082430:	dc000017 	ldw	r16,0(sp)
80082434:	dec00304 	addi	sp,sp,12
80082438:	0082f941 	jmpi	80082f94 <__srget_r>

8008243c <malloc>:
8008243c:	00a002b4 	movhi	r2,32778
80082440:	10ba7304 	addi	r2,r2,-5684
80082444:	200b883a 	mov	r5,r4
80082448:	11000017 	ldw	r4,0(r2)
8008244c:	00824641 	jmpi	80082464 <_malloc_r>

80082450 <free>:
80082450:	00a002b4 	movhi	r2,32778
80082454:	10ba7304 	addi	r2,r2,-5684
80082458:	200b883a 	mov	r5,r4
8008245c:	11000017 	ldw	r4,0(r2)
80082460:	0088fc01 	jmpi	80088fc0 <_free_r>

80082464 <_malloc_r>:
80082464:	defff504 	addi	sp,sp,-44
80082468:	dc800315 	stw	r18,12(sp)
8008246c:	dfc00a15 	stw	ra,40(sp)
80082470:	df000915 	stw	fp,36(sp)
80082474:	ddc00815 	stw	r23,32(sp)
80082478:	dd800715 	stw	r22,28(sp)
8008247c:	dd400615 	stw	r21,24(sp)
80082480:	dd000515 	stw	r20,20(sp)
80082484:	dcc00415 	stw	r19,16(sp)
80082488:	dc400215 	stw	r17,8(sp)
8008248c:	dc000115 	stw	r16,4(sp)
80082490:	288002c4 	addi	r2,r5,11
80082494:	00c00584 	movi	r3,22
80082498:	2025883a 	mov	r18,r4
8008249c:	18807f2e 	bgeu	r3,r2,8008269c <_malloc_r+0x238>
800824a0:	047ffe04 	movi	r17,-8
800824a4:	1462703a 	and	r17,r2,r17
800824a8:	8800a316 	blt	r17,zero,80082738 <_malloc_r+0x2d4>
800824ac:	8940a236 	bltu	r17,r5,80082738 <_malloc_r+0x2d4>
800824b0:	0098ed80 	call	80098ed8 <__malloc_lock>
800824b4:	00807dc4 	movi	r2,503
800824b8:	1441e92e 	bgeu	r2,r17,80082c60 <_malloc_r+0x7fc>
800824bc:	8804d27a 	srli	r2,r17,9
800824c0:	1000a126 	beq	r2,zero,80082748 <_malloc_r+0x2e4>
800824c4:	00c00104 	movi	r3,4
800824c8:	18811e36 	bltu	r3,r2,80082944 <_malloc_r+0x4e0>
800824cc:	8804d1ba 	srli	r2,r17,6
800824d0:	12000e44 	addi	r8,r2,57
800824d4:	11c00e04 	addi	r7,r2,56
800824d8:	4209883a 	add	r4,r8,r8
800824dc:	04e002b4 	movhi	r19,32778
800824e0:	2109883a 	add	r4,r4,r4
800824e4:	9cf44004 	addi	r19,r19,-12032
800824e8:	2109883a 	add	r4,r4,r4
800824ec:	9909883a 	add	r4,r19,r4
800824f0:	24000117 	ldw	r16,4(r4)
800824f4:	213ffe04 	addi	r4,r4,-8
800824f8:	24009726 	beq	r4,r16,80082758 <_malloc_r+0x2f4>
800824fc:	80800117 	ldw	r2,4(r16)
80082500:	01bfff04 	movi	r6,-4
80082504:	014003c4 	movi	r5,15
80082508:	1184703a 	and	r2,r2,r6
8008250c:	1447c83a 	sub	r3,r2,r17
80082510:	28c00716 	blt	r5,r3,80082530 <_malloc_r+0xcc>
80082514:	1800920e 	bge	r3,zero,80082760 <_malloc_r+0x2fc>
80082518:	84000317 	ldw	r16,12(r16)
8008251c:	24008e26 	beq	r4,r16,80082758 <_malloc_r+0x2f4>
80082520:	80800117 	ldw	r2,4(r16)
80082524:	1184703a 	and	r2,r2,r6
80082528:	1447c83a 	sub	r3,r2,r17
8008252c:	28fff90e 	bge	r5,r3,80082514 <_malloc_r+0xb0>
80082530:	3809883a 	mov	r4,r7
80082534:	01a002b4 	movhi	r6,32778
80082538:	9c000417 	ldw	r16,16(r19)
8008253c:	31b44004 	addi	r6,r6,-12032
80082540:	32000204 	addi	r8,r6,8
80082544:	82013426 	beq	r16,r8,80082a18 <_malloc_r+0x5b4>
80082548:	80c00117 	ldw	r3,4(r16)
8008254c:	00bfff04 	movi	r2,-4
80082550:	188e703a 	and	r7,r3,r2
80082554:	3c45c83a 	sub	r2,r7,r17
80082558:	00c003c4 	movi	r3,15
8008255c:	18811f16 	blt	r3,r2,800829dc <_malloc_r+0x578>
80082560:	32000515 	stw	r8,20(r6)
80082564:	32000415 	stw	r8,16(r6)
80082568:	10007f0e 	bge	r2,zero,80082768 <_malloc_r+0x304>
8008256c:	00807fc4 	movi	r2,511
80082570:	11c0fd36 	bltu	r2,r7,80082968 <_malloc_r+0x504>
80082574:	3806d0fa 	srli	r3,r7,3
80082578:	01c00044 	movi	r7,1
8008257c:	30800117 	ldw	r2,4(r6)
80082580:	19400044 	addi	r5,r3,1
80082584:	294b883a 	add	r5,r5,r5
80082588:	1807d0ba 	srai	r3,r3,2
8008258c:	294b883a 	add	r5,r5,r5
80082590:	294b883a 	add	r5,r5,r5
80082594:	298b883a 	add	r5,r5,r6
80082598:	38c6983a 	sll	r3,r7,r3
8008259c:	29c00017 	ldw	r7,0(r5)
800825a0:	2a7ffe04 	addi	r9,r5,-8
800825a4:	1886b03a 	or	r3,r3,r2
800825a8:	82400315 	stw	r9,12(r16)
800825ac:	81c00215 	stw	r7,8(r16)
800825b0:	30c00115 	stw	r3,4(r6)
800825b4:	2c000015 	stw	r16,0(r5)
800825b8:	3c000315 	stw	r16,12(r7)
800825bc:	2005d0ba 	srai	r2,r4,2
800825c0:	01400044 	movi	r5,1
800825c4:	288a983a 	sll	r5,r5,r2
800825c8:	19406f36 	bltu	r3,r5,80082788 <_malloc_r+0x324>
800825cc:	28c4703a 	and	r2,r5,r3
800825d0:	10000a1e 	bne	r2,zero,800825fc <_malloc_r+0x198>
800825d4:	00bfff04 	movi	r2,-4
800825d8:	294b883a 	add	r5,r5,r5
800825dc:	2088703a 	and	r4,r4,r2
800825e0:	28c4703a 	and	r2,r5,r3
800825e4:	21000104 	addi	r4,r4,4
800825e8:	1000041e 	bne	r2,zero,800825fc <_malloc_r+0x198>
800825ec:	294b883a 	add	r5,r5,r5
800825f0:	28c4703a 	and	r2,r5,r3
800825f4:	21000104 	addi	r4,r4,4
800825f8:	103ffc26 	beq	r2,zero,800825ec <_malloc_r+0x188>
800825fc:	02bfff04 	movi	r10,-4
80082600:	024003c4 	movi	r9,15
80082604:	21800044 	addi	r6,r4,1
80082608:	318d883a 	add	r6,r6,r6
8008260c:	318d883a 	add	r6,r6,r6
80082610:	318d883a 	add	r6,r6,r6
80082614:	998d883a 	add	r6,r19,r6
80082618:	333ffe04 	addi	r12,r6,-8
8008261c:	2017883a 	mov	r11,r4
80082620:	31800104 	addi	r6,r6,4
80082624:	34000017 	ldw	r16,0(r6)
80082628:	31fffd04 	addi	r7,r6,-12
8008262c:	81c0041e 	bne	r16,r7,80082640 <_malloc_r+0x1dc>
80082630:	0000fb06 	br	80082a20 <_malloc_r+0x5bc>
80082634:	1801030e 	bge	r3,zero,80082a44 <_malloc_r+0x5e0>
80082638:	84000317 	ldw	r16,12(r16)
8008263c:	81c0f826 	beq	r16,r7,80082a20 <_malloc_r+0x5bc>
80082640:	80800117 	ldw	r2,4(r16)
80082644:	1284703a 	and	r2,r2,r10
80082648:	1447c83a 	sub	r3,r2,r17
8008264c:	48fff90e 	bge	r9,r3,80082634 <_malloc_r+0x1d0>
80082650:	80800317 	ldw	r2,12(r16)
80082654:	81000217 	ldw	r4,8(r16)
80082658:	89400054 	ori	r5,r17,1
8008265c:	81400115 	stw	r5,4(r16)
80082660:	20800315 	stw	r2,12(r4)
80082664:	11000215 	stw	r4,8(r2)
80082668:	8463883a 	add	r17,r16,r17
8008266c:	9c400515 	stw	r17,20(r19)
80082670:	9c400415 	stw	r17,16(r19)
80082674:	18800054 	ori	r2,r3,1
80082678:	88800115 	stw	r2,4(r17)
8008267c:	8a000315 	stw	r8,12(r17)
80082680:	8a000215 	stw	r8,8(r17)
80082684:	88e3883a 	add	r17,r17,r3
80082688:	88c00015 	stw	r3,0(r17)
8008268c:	9009883a 	mov	r4,r18
80082690:	0098edc0 	call	80098edc <__malloc_unlock>
80082694:	80800204 	addi	r2,r16,8
80082698:	00001b06 	br	80082708 <_malloc_r+0x2a4>
8008269c:	04400404 	movi	r17,16
800826a0:	89402536 	bltu	r17,r5,80082738 <_malloc_r+0x2d4>
800826a4:	0098ed80 	call	80098ed8 <__malloc_lock>
800826a8:	00800184 	movi	r2,6
800826ac:	01000084 	movi	r4,2
800826b0:	04e002b4 	movhi	r19,32778
800826b4:	1085883a 	add	r2,r2,r2
800826b8:	9cf44004 	addi	r19,r19,-12032
800826bc:	1085883a 	add	r2,r2,r2
800826c0:	9885883a 	add	r2,r19,r2
800826c4:	14000117 	ldw	r16,4(r2)
800826c8:	10fffe04 	addi	r3,r2,-8
800826cc:	80c0d926 	beq	r16,r3,80082a34 <_malloc_r+0x5d0>
800826d0:	80c00117 	ldw	r3,4(r16)
800826d4:	81000317 	ldw	r4,12(r16)
800826d8:	00bfff04 	movi	r2,-4
800826dc:	1884703a 	and	r2,r3,r2
800826e0:	81400217 	ldw	r5,8(r16)
800826e4:	8085883a 	add	r2,r16,r2
800826e8:	10c00117 	ldw	r3,4(r2)
800826ec:	29000315 	stw	r4,12(r5)
800826f0:	21400215 	stw	r5,8(r4)
800826f4:	18c00054 	ori	r3,r3,1
800826f8:	10c00115 	stw	r3,4(r2)
800826fc:	9009883a 	mov	r4,r18
80082700:	0098edc0 	call	80098edc <__malloc_unlock>
80082704:	80800204 	addi	r2,r16,8
80082708:	dfc00a17 	ldw	ra,40(sp)
8008270c:	df000917 	ldw	fp,36(sp)
80082710:	ddc00817 	ldw	r23,32(sp)
80082714:	dd800717 	ldw	r22,28(sp)
80082718:	dd400617 	ldw	r21,24(sp)
8008271c:	dd000517 	ldw	r20,20(sp)
80082720:	dcc00417 	ldw	r19,16(sp)
80082724:	dc800317 	ldw	r18,12(sp)
80082728:	dc400217 	ldw	r17,8(sp)
8008272c:	dc000117 	ldw	r16,4(sp)
80082730:	dec00b04 	addi	sp,sp,44
80082734:	f800283a 	ret
80082738:	00800304 	movi	r2,12
8008273c:	90800015 	stw	r2,0(r18)
80082740:	0005883a 	mov	r2,zero
80082744:	003ff006 	br	80082708 <_malloc_r+0x2a4>
80082748:	01002004 	movi	r4,128
8008274c:	02001004 	movi	r8,64
80082750:	01c00fc4 	movi	r7,63
80082754:	003f6106 	br	800824dc <_malloc_r+0x78>
80082758:	4009883a 	mov	r4,r8
8008275c:	003f7506 	br	80082534 <_malloc_r+0xd0>
80082760:	81000317 	ldw	r4,12(r16)
80082764:	003fde06 	br	800826e0 <_malloc_r+0x27c>
80082768:	81c5883a 	add	r2,r16,r7
8008276c:	11400117 	ldw	r5,4(r2)
80082770:	9009883a 	mov	r4,r18
80082774:	29400054 	ori	r5,r5,1
80082778:	11400115 	stw	r5,4(r2)
8008277c:	0098edc0 	call	80098edc <__malloc_unlock>
80082780:	80800204 	addi	r2,r16,8
80082784:	003fe006 	br	80082708 <_malloc_r+0x2a4>
80082788:	9c000217 	ldw	r16,8(r19)
8008278c:	00bfff04 	movi	r2,-4
80082790:	85800117 	ldw	r22,4(r16)
80082794:	b0ac703a 	and	r22,r22,r2
80082798:	b4400336 	bltu	r22,r17,800827a8 <_malloc_r+0x344>
8008279c:	b445c83a 	sub	r2,r22,r17
800827a0:	00c003c4 	movi	r3,15
800827a4:	18805d16 	blt	r3,r2,8008291c <_malloc_r+0x4b8>
800827a8:	05e002b4 	movhi	r23,32778
800827ac:	00a002b4 	movhi	r2,32778
800827b0:	1081dd04 	addi	r2,r2,1908
800827b4:	bdfa7404 	addi	r23,r23,-5680
800827b8:	15400017 	ldw	r21,0(r2)
800827bc:	b8c00017 	ldw	r3,0(r23)
800827c0:	00bfffc4 	movi	r2,-1
800827c4:	858d883a 	add	r6,r16,r22
800827c8:	8d6b883a 	add	r21,r17,r21
800827cc:	1880ea26 	beq	r3,r2,80082b78 <_malloc_r+0x714>
800827d0:	ad4403c4 	addi	r21,r21,4111
800827d4:	00bc0004 	movi	r2,-4096
800827d8:	a8aa703a 	and	r21,r21,r2
800827dc:	a80b883a 	mov	r5,r21
800827e0:	9009883a 	mov	r4,r18
800827e4:	d9800015 	stw	r6,0(sp)
800827e8:	008301c0 	call	8008301c <_sbrk_r>
800827ec:	1029883a 	mov	r20,r2
800827f0:	00bfffc4 	movi	r2,-1
800827f4:	d9800017 	ldw	r6,0(sp)
800827f8:	a080e826 	beq	r20,r2,80082b9c <_malloc_r+0x738>
800827fc:	a180a636 	bltu	r20,r6,80082a98 <_malloc_r+0x634>
80082800:	072002b4 	movhi	fp,32778
80082804:	e701e904 	addi	fp,fp,1956
80082808:	e0800017 	ldw	r2,0(fp)
8008280c:	a887883a 	add	r3,r21,r2
80082810:	e0c00015 	stw	r3,0(fp)
80082814:	3500e626 	beq	r6,r20,80082bb0 <_malloc_r+0x74c>
80082818:	b9000017 	ldw	r4,0(r23)
8008281c:	00bfffc4 	movi	r2,-1
80082820:	2080ee26 	beq	r4,r2,80082bdc <_malloc_r+0x778>
80082824:	a185c83a 	sub	r2,r20,r6
80082828:	10c5883a 	add	r2,r2,r3
8008282c:	e0800015 	stw	r2,0(fp)
80082830:	a0c001cc 	andi	r3,r20,7
80082834:	1800bc26 	beq	r3,zero,80082b28 <_malloc_r+0x6c4>
80082838:	a0e9c83a 	sub	r20,r20,r3
8008283c:	00840204 	movi	r2,4104
80082840:	a5000204 	addi	r20,r20,8
80082844:	10c7c83a 	sub	r3,r2,r3
80082848:	a545883a 	add	r2,r20,r21
8008284c:	1083ffcc 	andi	r2,r2,4095
80082850:	18abc83a 	sub	r21,r3,r2
80082854:	a80b883a 	mov	r5,r21
80082858:	9009883a 	mov	r4,r18
8008285c:	008301c0 	call	8008301c <_sbrk_r>
80082860:	00ffffc4 	movi	r3,-1
80082864:	10c0e126 	beq	r2,r3,80082bec <_malloc_r+0x788>
80082868:	1505c83a 	sub	r2,r2,r20
8008286c:	1545883a 	add	r2,r2,r21
80082870:	10800054 	ori	r2,r2,1
80082874:	e0c00017 	ldw	r3,0(fp)
80082878:	9d000215 	stw	r20,8(r19)
8008287c:	a0800115 	stw	r2,4(r20)
80082880:	a8c7883a 	add	r3,r21,r3
80082884:	e0c00015 	stw	r3,0(fp)
80082888:	84c00e26 	beq	r16,r19,800828c4 <_malloc_r+0x460>
8008288c:	018003c4 	movi	r6,15
80082890:	3580a72e 	bgeu	r6,r22,80082b30 <_malloc_r+0x6cc>
80082894:	81400117 	ldw	r5,4(r16)
80082898:	013ffe04 	movi	r4,-8
8008289c:	b0bffd04 	addi	r2,r22,-12
800828a0:	1104703a 	and	r2,r2,r4
800828a4:	2900004c 	andi	r4,r5,1
800828a8:	2088b03a 	or	r4,r4,r2
800828ac:	81000115 	stw	r4,4(r16)
800828b0:	01400144 	movi	r5,5
800828b4:	8089883a 	add	r4,r16,r2
800828b8:	21400115 	stw	r5,4(r4)
800828bc:	21400215 	stw	r5,8(r4)
800828c0:	3080cd36 	bltu	r6,r2,80082bf8 <_malloc_r+0x794>
800828c4:	00a002b4 	movhi	r2,32778
800828c8:	1081dc04 	addi	r2,r2,1904
800828cc:	11000017 	ldw	r4,0(r2)
800828d0:	20c0012e 	bgeu	r4,r3,800828d8 <_malloc_r+0x474>
800828d4:	10c00015 	stw	r3,0(r2)
800828d8:	00a002b4 	movhi	r2,32778
800828dc:	1081db04 	addi	r2,r2,1900
800828e0:	11000017 	ldw	r4,0(r2)
800828e4:	9c000217 	ldw	r16,8(r19)
800828e8:	20c0012e 	bgeu	r4,r3,800828f0 <_malloc_r+0x48c>
800828ec:	10c00015 	stw	r3,0(r2)
800828f0:	80c00117 	ldw	r3,4(r16)
800828f4:	00bfff04 	movi	r2,-4
800828f8:	1886703a 	and	r3,r3,r2
800828fc:	1c45c83a 	sub	r2,r3,r17
80082900:	1c400236 	bltu	r3,r17,8008290c <_malloc_r+0x4a8>
80082904:	00c003c4 	movi	r3,15
80082908:	18800416 	blt	r3,r2,8008291c <_malloc_r+0x4b8>
8008290c:	9009883a 	mov	r4,r18
80082910:	0098edc0 	call	80098edc <__malloc_unlock>
80082914:	0005883a 	mov	r2,zero
80082918:	003f7b06 	br	80082708 <_malloc_r+0x2a4>
8008291c:	88c00054 	ori	r3,r17,1
80082920:	80c00115 	stw	r3,4(r16)
80082924:	8463883a 	add	r17,r16,r17
80082928:	10800054 	ori	r2,r2,1
8008292c:	9c400215 	stw	r17,8(r19)
80082930:	88800115 	stw	r2,4(r17)
80082934:	9009883a 	mov	r4,r18
80082938:	0098edc0 	call	80098edc <__malloc_unlock>
8008293c:	80800204 	addi	r2,r16,8
80082940:	003f7106 	br	80082708 <_malloc_r+0x2a4>
80082944:	00c00504 	movi	r3,20
80082948:	18804a2e 	bgeu	r3,r2,80082a74 <_malloc_r+0x610>
8008294c:	00c01504 	movi	r3,84
80082950:	18806e36 	bltu	r3,r2,80082b0c <_malloc_r+0x6a8>
80082954:	8804d33a 	srli	r2,r17,12
80082958:	12001bc4 	addi	r8,r2,111
8008295c:	11c01b84 	addi	r7,r2,110
80082960:	4209883a 	add	r4,r8,r8
80082964:	003edd06 	br	800824dc <_malloc_r+0x78>
80082968:	3804d27a 	srli	r2,r7,9
8008296c:	00c00104 	movi	r3,4
80082970:	1880442e 	bgeu	r3,r2,80082a84 <_malloc_r+0x620>
80082974:	00c00504 	movi	r3,20
80082978:	18808136 	bltu	r3,r2,80082b80 <_malloc_r+0x71c>
8008297c:	11401704 	addi	r5,r2,92
80082980:	10c016c4 	addi	r3,r2,91
80082984:	294b883a 	add	r5,r5,r5
80082988:	294b883a 	add	r5,r5,r5
8008298c:	294b883a 	add	r5,r5,r5
80082990:	994b883a 	add	r5,r19,r5
80082994:	28800017 	ldw	r2,0(r5)
80082998:	01a002b4 	movhi	r6,32778
8008299c:	297ffe04 	addi	r5,r5,-8
800829a0:	31b44004 	addi	r6,r6,-12032
800829a4:	28806526 	beq	r5,r2,80082b3c <_malloc_r+0x6d8>
800829a8:	01bfff04 	movi	r6,-4
800829ac:	10c00117 	ldw	r3,4(r2)
800829b0:	1986703a 	and	r3,r3,r6
800829b4:	38c0022e 	bgeu	r7,r3,800829c0 <_malloc_r+0x55c>
800829b8:	10800217 	ldw	r2,8(r2)
800829bc:	28bffb1e 	bne	r5,r2,800829ac <_malloc_r+0x548>
800829c0:	11400317 	ldw	r5,12(r2)
800829c4:	98c00117 	ldw	r3,4(r19)
800829c8:	81400315 	stw	r5,12(r16)
800829cc:	80800215 	stw	r2,8(r16)
800829d0:	2c000215 	stw	r16,8(r5)
800829d4:	14000315 	stw	r16,12(r2)
800829d8:	003ef806 	br	800825bc <_malloc_r+0x158>
800829dc:	88c00054 	ori	r3,r17,1
800829e0:	80c00115 	stw	r3,4(r16)
800829e4:	8463883a 	add	r17,r16,r17
800829e8:	34400515 	stw	r17,20(r6)
800829ec:	34400415 	stw	r17,16(r6)
800829f0:	10c00054 	ori	r3,r2,1
800829f4:	8a000315 	stw	r8,12(r17)
800829f8:	8a000215 	stw	r8,8(r17)
800829fc:	88c00115 	stw	r3,4(r17)
80082a00:	88a3883a 	add	r17,r17,r2
80082a04:	88800015 	stw	r2,0(r17)
80082a08:	9009883a 	mov	r4,r18
80082a0c:	0098edc0 	call	80098edc <__malloc_unlock>
80082a10:	80800204 	addi	r2,r16,8
80082a14:	003f3c06 	br	80082708 <_malloc_r+0x2a4>
80082a18:	30c00117 	ldw	r3,4(r6)
80082a1c:	003ee706 	br	800825bc <_malloc_r+0x158>
80082a20:	5ac00044 	addi	r11,r11,1
80082a24:	588000cc 	andi	r2,r11,3
80082a28:	31800204 	addi	r6,r6,8
80082a2c:	103efd1e 	bne	r2,zero,80082624 <_malloc_r+0x1c0>
80082a30:	00002406 	br	80082ac4 <_malloc_r+0x660>
80082a34:	14000317 	ldw	r16,12(r2)
80082a38:	143f251e 	bne	r2,r16,800826d0 <_malloc_r+0x26c>
80082a3c:	21000084 	addi	r4,r4,2
80082a40:	003ebc06 	br	80082534 <_malloc_r+0xd0>
80082a44:	8085883a 	add	r2,r16,r2
80082a48:	10c00117 	ldw	r3,4(r2)
80082a4c:	81000317 	ldw	r4,12(r16)
80082a50:	81400217 	ldw	r5,8(r16)
80082a54:	18c00054 	ori	r3,r3,1
80082a58:	10c00115 	stw	r3,4(r2)
80082a5c:	29000315 	stw	r4,12(r5)
80082a60:	21400215 	stw	r5,8(r4)
80082a64:	9009883a 	mov	r4,r18
80082a68:	0098edc0 	call	80098edc <__malloc_unlock>
80082a6c:	80800204 	addi	r2,r16,8
80082a70:	003f2506 	br	80082708 <_malloc_r+0x2a4>
80082a74:	12001704 	addi	r8,r2,92
80082a78:	11c016c4 	addi	r7,r2,91
80082a7c:	4209883a 	add	r4,r8,r8
80082a80:	003e9606 	br	800824dc <_malloc_r+0x78>
80082a84:	3804d1ba 	srli	r2,r7,6
80082a88:	11400e44 	addi	r5,r2,57
80082a8c:	10c00e04 	addi	r3,r2,56
80082a90:	294b883a 	add	r5,r5,r5
80082a94:	003fbc06 	br	80082988 <_malloc_r+0x524>
80082a98:	84ff5926 	beq	r16,r19,80082800 <_malloc_r+0x39c>
80082a9c:	00a002b4 	movhi	r2,32778
80082aa0:	10b44004 	addi	r2,r2,-12032
80082aa4:	14000217 	ldw	r16,8(r2)
80082aa8:	00bfff04 	movi	r2,-4
80082aac:	80c00117 	ldw	r3,4(r16)
80082ab0:	1886703a 	and	r3,r3,r2
80082ab4:	003f9106 	br	800828fc <_malloc_r+0x498>
80082ab8:	60800217 	ldw	r2,8(r12)
80082abc:	213fffc4 	addi	r4,r4,-1
80082ac0:	1300651e 	bne	r2,r12,80082c58 <_malloc_r+0x7f4>
80082ac4:	208000cc 	andi	r2,r4,3
80082ac8:	633ffe04 	addi	r12,r12,-8
80082acc:	103ffa1e 	bne	r2,zero,80082ab8 <_malloc_r+0x654>
80082ad0:	98800117 	ldw	r2,4(r19)
80082ad4:	0146303a 	nor	r3,zero,r5
80082ad8:	1884703a 	and	r2,r3,r2
80082adc:	98800115 	stw	r2,4(r19)
80082ae0:	294b883a 	add	r5,r5,r5
80082ae4:	117f2836 	bltu	r2,r5,80082788 <_malloc_r+0x324>
80082ae8:	283f2726 	beq	r5,zero,80082788 <_malloc_r+0x324>
80082aec:	2886703a 	and	r3,r5,r2
80082af0:	5809883a 	mov	r4,r11
80082af4:	183ec31e 	bne	r3,zero,80082604 <_malloc_r+0x1a0>
80082af8:	294b883a 	add	r5,r5,r5
80082afc:	2886703a 	and	r3,r5,r2
80082b00:	21000104 	addi	r4,r4,4
80082b04:	183ffc26 	beq	r3,zero,80082af8 <_malloc_r+0x694>
80082b08:	003ebe06 	br	80082604 <_malloc_r+0x1a0>
80082b0c:	00c05504 	movi	r3,340
80082b10:	18801236 	bltu	r3,r2,80082b5c <_malloc_r+0x6f8>
80082b14:	8804d3fa 	srli	r2,r17,15
80082b18:	12001e04 	addi	r8,r2,120
80082b1c:	11c01dc4 	addi	r7,r2,119
80082b20:	4209883a 	add	r4,r8,r8
80082b24:	003e6d06 	br	800824dc <_malloc_r+0x78>
80082b28:	00c40004 	movi	r3,4096
80082b2c:	003f4606 	br	80082848 <_malloc_r+0x3e4>
80082b30:	00800044 	movi	r2,1
80082b34:	a0800115 	stw	r2,4(r20)
80082b38:	003f7406 	br	8008290c <_malloc_r+0x4a8>
80082b3c:	1805d0ba 	srai	r2,r3,2
80082b40:	01c00044 	movi	r7,1
80082b44:	30c00117 	ldw	r3,4(r6)
80082b48:	388e983a 	sll	r7,r7,r2
80082b4c:	2805883a 	mov	r2,r5
80082b50:	38c6b03a 	or	r3,r7,r3
80082b54:	30c00115 	stw	r3,4(r6)
80082b58:	003f9b06 	br	800829c8 <_malloc_r+0x564>
80082b5c:	00c15504 	movi	r3,1364
80082b60:	18801a36 	bltu	r3,r2,80082bcc <_malloc_r+0x768>
80082b64:	8804d4ba 	srli	r2,r17,18
80082b68:	12001f44 	addi	r8,r2,125
80082b6c:	11c01f04 	addi	r7,r2,124
80082b70:	4209883a 	add	r4,r8,r8
80082b74:	003e5906 	br	800824dc <_malloc_r+0x78>
80082b78:	ad400404 	addi	r21,r21,16
80082b7c:	003f1706 	br	800827dc <_malloc_r+0x378>
80082b80:	00c01504 	movi	r3,84
80082b84:	18802336 	bltu	r3,r2,80082c14 <_malloc_r+0x7b0>
80082b88:	3804d33a 	srli	r2,r7,12
80082b8c:	11401bc4 	addi	r5,r2,111
80082b90:	10c01b84 	addi	r3,r2,110
80082b94:	294b883a 	add	r5,r5,r5
80082b98:	003f7b06 	br	80082988 <_malloc_r+0x524>
80082b9c:	9c000217 	ldw	r16,8(r19)
80082ba0:	00bfff04 	movi	r2,-4
80082ba4:	80c00117 	ldw	r3,4(r16)
80082ba8:	1886703a 	and	r3,r3,r2
80082bac:	003f5306 	br	800828fc <_malloc_r+0x498>
80082bb0:	3083ffcc 	andi	r2,r6,4095
80082bb4:	103f181e 	bne	r2,zero,80082818 <_malloc_r+0x3b4>
80082bb8:	99000217 	ldw	r4,8(r19)
80082bbc:	b545883a 	add	r2,r22,r21
80082bc0:	10800054 	ori	r2,r2,1
80082bc4:	20800115 	stw	r2,4(r4)
80082bc8:	003f3e06 	br	800828c4 <_malloc_r+0x460>
80082bcc:	01003f84 	movi	r4,254
80082bd0:	02001fc4 	movi	r8,127
80082bd4:	01c01f84 	movi	r7,126
80082bd8:	003e4006 	br	800824dc <_malloc_r+0x78>
80082bdc:	00a002b4 	movhi	r2,32778
80082be0:	10ba7404 	addi	r2,r2,-5680
80082be4:	15000015 	stw	r20,0(r2)
80082be8:	003f1106 	br	80082830 <_malloc_r+0x3cc>
80082bec:	00800044 	movi	r2,1
80082bf0:	002b883a 	mov	r21,zero
80082bf4:	003f1f06 	br	80082874 <_malloc_r+0x410>
80082bf8:	81400204 	addi	r5,r16,8
80082bfc:	9009883a 	mov	r4,r18
80082c00:	0088fc00 	call	80088fc0 <_free_r>
80082c04:	00a002b4 	movhi	r2,32778
80082c08:	1081e904 	addi	r2,r2,1956
80082c0c:	10c00017 	ldw	r3,0(r2)
80082c10:	003f2c06 	br	800828c4 <_malloc_r+0x460>
80082c14:	00c05504 	movi	r3,340
80082c18:	18800536 	bltu	r3,r2,80082c30 <_malloc_r+0x7cc>
80082c1c:	3804d3fa 	srli	r2,r7,15
80082c20:	11401e04 	addi	r5,r2,120
80082c24:	10c01dc4 	addi	r3,r2,119
80082c28:	294b883a 	add	r5,r5,r5
80082c2c:	003f5606 	br	80082988 <_malloc_r+0x524>
80082c30:	00c15504 	movi	r3,1364
80082c34:	18800536 	bltu	r3,r2,80082c4c <_malloc_r+0x7e8>
80082c38:	3804d4ba 	srli	r2,r7,18
80082c3c:	11401f44 	addi	r5,r2,125
80082c40:	10c01f04 	addi	r3,r2,124
80082c44:	294b883a 	add	r5,r5,r5
80082c48:	003f4f06 	br	80082988 <_malloc_r+0x524>
80082c4c:	01403f84 	movi	r5,254
80082c50:	00c01f84 	movi	r3,126
80082c54:	003f4c06 	br	80082988 <_malloc_r+0x524>
80082c58:	98800117 	ldw	r2,4(r19)
80082c5c:	003fa006 	br	80082ae0 <_malloc_r+0x67c>
80082c60:	8808d0fa 	srli	r4,r17,3
80082c64:	20800044 	addi	r2,r4,1
80082c68:	1085883a 	add	r2,r2,r2
80082c6c:	003e9006 	br	800826b0 <_malloc_r+0x24c>

80082c70 <memcmp>:
80082c70:	01c000c4 	movi	r7,3
80082c74:	3980192e 	bgeu	r7,r6,80082cdc <memcmp+0x6c>
80082c78:	2144b03a 	or	r2,r4,r5
80082c7c:	11c4703a 	and	r2,r2,r7
80082c80:	10000f26 	beq	r2,zero,80082cc0 <memcmp+0x50>
80082c84:	20800003 	ldbu	r2,0(r4)
80082c88:	28c00003 	ldbu	r3,0(r5)
80082c8c:	10c0151e 	bne	r2,r3,80082ce4 <memcmp+0x74>
80082c90:	31bfff84 	addi	r6,r6,-2
80082c94:	01ffffc4 	movi	r7,-1
80082c98:	00000406 	br	80082cac <memcmp+0x3c>
80082c9c:	20800003 	ldbu	r2,0(r4)
80082ca0:	28c00003 	ldbu	r3,0(r5)
80082ca4:	31bfffc4 	addi	r6,r6,-1
80082ca8:	10c00e1e 	bne	r2,r3,80082ce4 <memcmp+0x74>
80082cac:	21000044 	addi	r4,r4,1
80082cb0:	29400044 	addi	r5,r5,1
80082cb4:	31fff91e 	bne	r6,r7,80082c9c <memcmp+0x2c>
80082cb8:	0005883a 	mov	r2,zero
80082cbc:	f800283a 	ret
80082cc0:	20c00017 	ldw	r3,0(r4)
80082cc4:	28800017 	ldw	r2,0(r5)
80082cc8:	18bfee1e 	bne	r3,r2,80082c84 <memcmp+0x14>
80082ccc:	31bfff04 	addi	r6,r6,-4
80082cd0:	21000104 	addi	r4,r4,4
80082cd4:	29400104 	addi	r5,r5,4
80082cd8:	39bff936 	bltu	r7,r6,80082cc0 <memcmp+0x50>
80082cdc:	303fe91e 	bne	r6,zero,80082c84 <memcmp+0x14>
80082ce0:	003ff506 	br	80082cb8 <memcmp+0x48>
80082ce4:	10c5c83a 	sub	r2,r2,r3
80082ce8:	f800283a 	ret

80082cec <memcpy>:
80082cec:	defffd04 	addi	sp,sp,-12
80082cf0:	dfc00215 	stw	ra,8(sp)
80082cf4:	dc400115 	stw	r17,4(sp)
80082cf8:	dc000015 	stw	r16,0(sp)
80082cfc:	00c003c4 	movi	r3,15
80082d00:	2005883a 	mov	r2,r4
80082d04:	1980452e 	bgeu	r3,r6,80082e1c <memcpy+0x130>
80082d08:	2906b03a 	or	r3,r5,r4
80082d0c:	18c000cc 	andi	r3,r3,3
80082d10:	1800441e 	bne	r3,zero,80082e24 <memcpy+0x138>
80082d14:	347ffc04 	addi	r17,r6,-16
80082d18:	8822d13a 	srli	r17,r17,4
80082d1c:	28c00104 	addi	r3,r5,4
80082d20:	23400104 	addi	r13,r4,4
80082d24:	8820913a 	slli	r16,r17,4
80082d28:	2b000204 	addi	r12,r5,8
80082d2c:	22c00204 	addi	r11,r4,8
80082d30:	84000504 	addi	r16,r16,20
80082d34:	2a800304 	addi	r10,r5,12
80082d38:	22400304 	addi	r9,r4,12
80082d3c:	2c21883a 	add	r16,r5,r16
80082d40:	2811883a 	mov	r8,r5
80082d44:	200f883a 	mov	r7,r4
80082d48:	41000017 	ldw	r4,0(r8)
80082d4c:	1fc00017 	ldw	ra,0(r3)
80082d50:	63c00017 	ldw	r15,0(r12)
80082d54:	39000015 	stw	r4,0(r7)
80082d58:	53800017 	ldw	r14,0(r10)
80082d5c:	6fc00015 	stw	ra,0(r13)
80082d60:	5bc00015 	stw	r15,0(r11)
80082d64:	4b800015 	stw	r14,0(r9)
80082d68:	18c00404 	addi	r3,r3,16
80082d6c:	39c00404 	addi	r7,r7,16
80082d70:	42000404 	addi	r8,r8,16
80082d74:	6b400404 	addi	r13,r13,16
80082d78:	63000404 	addi	r12,r12,16
80082d7c:	5ac00404 	addi	r11,r11,16
80082d80:	52800404 	addi	r10,r10,16
80082d84:	4a400404 	addi	r9,r9,16
80082d88:	1c3fef1e 	bne	r3,r16,80082d48 <memcpy+0x5c>
80082d8c:	89c00044 	addi	r7,r17,1
80082d90:	380e913a 	slli	r7,r7,4
80082d94:	310003cc 	andi	r4,r6,15
80082d98:	02c000c4 	movi	r11,3
80082d9c:	11c7883a 	add	r3,r2,r7
80082da0:	29cb883a 	add	r5,r5,r7
80082da4:	5900212e 	bgeu	r11,r4,80082e2c <memcpy+0x140>
80082da8:	1813883a 	mov	r9,r3
80082dac:	2811883a 	mov	r8,r5
80082db0:	200f883a 	mov	r7,r4
80082db4:	42800017 	ldw	r10,0(r8)
80082db8:	4a400104 	addi	r9,r9,4
80082dbc:	39ffff04 	addi	r7,r7,-4
80082dc0:	4abfff15 	stw	r10,-4(r9)
80082dc4:	42000104 	addi	r8,r8,4
80082dc8:	59fffa36 	bltu	r11,r7,80082db4 <memcpy+0xc8>
80082dcc:	213fff04 	addi	r4,r4,-4
80082dd0:	2008d0ba 	srli	r4,r4,2
80082dd4:	318000cc 	andi	r6,r6,3
80082dd8:	21000044 	addi	r4,r4,1
80082ddc:	2109883a 	add	r4,r4,r4
80082de0:	2109883a 	add	r4,r4,r4
80082de4:	1907883a 	add	r3,r3,r4
80082de8:	290b883a 	add	r5,r5,r4
80082dec:	30000626 	beq	r6,zero,80082e08 <memcpy+0x11c>
80082df0:	198d883a 	add	r6,r3,r6
80082df4:	29c00003 	ldbu	r7,0(r5)
80082df8:	18c00044 	addi	r3,r3,1
80082dfc:	29400044 	addi	r5,r5,1
80082e00:	19ffffc5 	stb	r7,-1(r3)
80082e04:	19bffb1e 	bne	r3,r6,80082df4 <memcpy+0x108>
80082e08:	dfc00217 	ldw	ra,8(sp)
80082e0c:	dc400117 	ldw	r17,4(sp)
80082e10:	dc000017 	ldw	r16,0(sp)
80082e14:	dec00304 	addi	sp,sp,12
80082e18:	f800283a 	ret
80082e1c:	2007883a 	mov	r3,r4
80082e20:	003ff206 	br	80082dec <memcpy+0x100>
80082e24:	2007883a 	mov	r3,r4
80082e28:	003ff106 	br	80082df0 <memcpy+0x104>
80082e2c:	200d883a 	mov	r6,r4
80082e30:	003fee06 	br	80082dec <memcpy+0x100>

80082e34 <_printf_r>:
80082e34:	defffd04 	addi	sp,sp,-12
80082e38:	2805883a 	mov	r2,r5
80082e3c:	dfc00015 	stw	ra,0(sp)
80082e40:	d9800115 	stw	r6,4(sp)
80082e44:	d9c00215 	stw	r7,8(sp)
80082e48:	21400217 	ldw	r5,8(r4)
80082e4c:	d9c00104 	addi	r7,sp,4
80082e50:	100d883a 	mov	r6,r2
80082e54:	0084af40 	call	80084af4 <___vfprintf_internal_r>
80082e58:	dfc00017 	ldw	ra,0(sp)
80082e5c:	dec00304 	addi	sp,sp,12
80082e60:	f800283a 	ret

80082e64 <printf>:
80082e64:	defffc04 	addi	sp,sp,-16
80082e68:	dfc00015 	stw	ra,0(sp)
80082e6c:	d9400115 	stw	r5,4(sp)
80082e70:	d9800215 	stw	r6,8(sp)
80082e74:	d9c00315 	stw	r7,12(sp)
80082e78:	00a002b4 	movhi	r2,32778
80082e7c:	10ba7304 	addi	r2,r2,-5684
80082e80:	10800017 	ldw	r2,0(r2)
80082e84:	200b883a 	mov	r5,r4
80082e88:	d9800104 	addi	r6,sp,4
80082e8c:	11000217 	ldw	r4,8(r2)
80082e90:	0086cec0 	call	80086cec <__vfprintf_internal>
80082e94:	dfc00017 	ldw	ra,0(sp)
80082e98:	dec00404 	addi	sp,sp,16
80082e9c:	f800283a 	ret

80082ea0 <_putchar_r>:
80082ea0:	21800217 	ldw	r6,8(r4)
80082ea4:	008b1c41 	jmpi	8008b1c4 <_putc_r>

80082ea8 <putchar>:
80082ea8:	00a002b4 	movhi	r2,32778
80082eac:	10ba7304 	addi	r2,r2,-5684
80082eb0:	200b883a 	mov	r5,r4
80082eb4:	11000017 	ldw	r4,0(r2)
80082eb8:	21800217 	ldw	r6,8(r4)
80082ebc:	008b1c41 	jmpi	8008b1c4 <_putc_r>

80082ec0 <_puts_r>:
80082ec0:	defff604 	addi	sp,sp,-40
80082ec4:	dc000715 	stw	r16,28(sp)
80082ec8:	2021883a 	mov	r16,r4
80082ecc:	2809883a 	mov	r4,r5
80082ed0:	dc400815 	stw	r17,32(sp)
80082ed4:	dfc00915 	stw	ra,36(sp)
80082ed8:	2823883a 	mov	r17,r5
80082edc:	00832a00 	call	800832a0 <strlen>
80082ee0:	10c00044 	addi	r3,r2,1
80082ee4:	d8800115 	stw	r2,4(sp)
80082ee8:	00a002b4 	movhi	r2,32778
80082eec:	10b2ee04 	addi	r2,r2,-13384
80082ef0:	d8800215 	stw	r2,8(sp)
80082ef4:	00800044 	movi	r2,1
80082ef8:	d8800315 	stw	r2,12(sp)
80082efc:	00800084 	movi	r2,2
80082f00:	dc400015 	stw	r17,0(sp)
80082f04:	d8c00615 	stw	r3,24(sp)
80082f08:	dec00415 	stw	sp,16(sp)
80082f0c:	d8800515 	stw	r2,20(sp)
80082f10:	80000226 	beq	r16,zero,80082f1c <_puts_r+0x5c>
80082f14:	80800e17 	ldw	r2,56(r16)
80082f18:	10001426 	beq	r2,zero,80082f6c <_puts_r+0xac>
80082f1c:	81400217 	ldw	r5,8(r16)
80082f20:	2880030b 	ldhu	r2,12(r5)
80082f24:	10c8000c 	andi	r3,r2,8192
80082f28:	1800061e 	bne	r3,zero,80082f44 <_puts_r+0x84>
80082f2c:	29001917 	ldw	r4,100(r5)
80082f30:	00f7ffc4 	movi	r3,-8193
80082f34:	10880014 	ori	r2,r2,8192
80082f38:	20c6703a 	and	r3,r4,r3
80082f3c:	2880030d 	sth	r2,12(r5)
80082f40:	28c01915 	stw	r3,100(r5)
80082f44:	d9800404 	addi	r6,sp,16
80082f48:	8009883a 	mov	r4,r16
80082f4c:	00892d00 	call	800892d0 <__sfvwrite_r>
80082f50:	1000091e 	bne	r2,zero,80082f78 <_puts_r+0xb8>
80082f54:	00800284 	movi	r2,10
80082f58:	dfc00917 	ldw	ra,36(sp)
80082f5c:	dc400817 	ldw	r17,32(sp)
80082f60:	dc000717 	ldw	r16,28(sp)
80082f64:	dec00a04 	addi	sp,sp,40
80082f68:	f800283a 	ret
80082f6c:	8009883a 	mov	r4,r16
80082f70:	0088e4c0 	call	80088e4c <__sinit>
80082f74:	003fe906 	br	80082f1c <_puts_r+0x5c>
80082f78:	00bfffc4 	movi	r2,-1
80082f7c:	003ff606 	br	80082f58 <_puts_r+0x98>

80082f80 <puts>:
80082f80:	00a002b4 	movhi	r2,32778
80082f84:	10ba7304 	addi	r2,r2,-5684
80082f88:	200b883a 	mov	r5,r4
80082f8c:	11000017 	ldw	r4,0(r2)
80082f90:	0082ec01 	jmpi	80082ec0 <_puts_r>

80082f94 <__srget_r>:
80082f94:	defffd04 	addi	sp,sp,-12
80082f98:	dc400115 	stw	r17,4(sp)
80082f9c:	dc000015 	stw	r16,0(sp)
80082fa0:	dfc00215 	stw	ra,8(sp)
80082fa4:	2023883a 	mov	r17,r4
80082fa8:	2821883a 	mov	r16,r5
80082fac:	20000226 	beq	r4,zero,80082fb8 <__srget_r+0x24>
80082fb0:	20800e17 	ldw	r2,56(r4)
80082fb4:	10001026 	beq	r2,zero,80082ff8 <__srget_r+0x64>
80082fb8:	800b883a 	mov	r5,r16
80082fbc:	8809883a 	mov	r4,r17
80082fc0:	008b90c0 	call	8008b90c <__srefill_r>
80082fc4:	10000e1e 	bne	r2,zero,80083000 <__srget_r+0x6c>
80082fc8:	80c00017 	ldw	r3,0(r16)
80082fcc:	80800117 	ldw	r2,4(r16)
80082fd0:	19000044 	addi	r4,r3,1
80082fd4:	10bfffc4 	addi	r2,r2,-1
80082fd8:	80800115 	stw	r2,4(r16)
80082fdc:	81000015 	stw	r4,0(r16)
80082fe0:	18800003 	ldbu	r2,0(r3)
80082fe4:	dfc00217 	ldw	ra,8(sp)
80082fe8:	dc400117 	ldw	r17,4(sp)
80082fec:	dc000017 	ldw	r16,0(sp)
80082ff0:	dec00304 	addi	sp,sp,12
80082ff4:	f800283a 	ret
80082ff8:	0088e4c0 	call	80088e4c <__sinit>
80082ffc:	003fee06 	br	80082fb8 <__srget_r+0x24>
80083000:	00bfffc4 	movi	r2,-1
80083004:	003ff706 	br	80082fe4 <__srget_r+0x50>

80083008 <__srget>:
80083008:	00a002b4 	movhi	r2,32778
8008300c:	10ba7304 	addi	r2,r2,-5684
80083010:	200b883a 	mov	r5,r4
80083014:	11000017 	ldw	r4,0(r2)
80083018:	0082f941 	jmpi	80082f94 <__srget_r>

8008301c <_sbrk_r>:
8008301c:	defffd04 	addi	sp,sp,-12
80083020:	dc000015 	stw	r16,0(sp)
80083024:	042002b4 	movhi	r16,32778
80083028:	dc400115 	stw	r17,4(sp)
8008302c:	8401de04 	addi	r16,r16,1912
80083030:	2023883a 	mov	r17,r4
80083034:	2809883a 	mov	r4,r5
80083038:	dfc00215 	stw	ra,8(sp)
8008303c:	80000015 	stw	zero,0(r16)
80083040:	0098fcc0 	call	80098fcc <sbrk>
80083044:	00ffffc4 	movi	r3,-1
80083048:	10c00526 	beq	r2,r3,80083060 <_sbrk_r+0x44>
8008304c:	dfc00217 	ldw	ra,8(sp)
80083050:	dc400117 	ldw	r17,4(sp)
80083054:	dc000017 	ldw	r16,0(sp)
80083058:	dec00304 	addi	sp,sp,12
8008305c:	f800283a 	ret
80083060:	80c00017 	ldw	r3,0(r16)
80083064:	183ff926 	beq	r3,zero,8008304c <_sbrk_r+0x30>
80083068:	88c00015 	stw	r3,0(r17)
8008306c:	003ff706 	br	8008304c <_sbrk_r+0x30>

80083070 <sscanf>:
80083070:	deffe204 	addi	sp,sp,-120
80083074:	dc001a15 	stw	r16,104(sp)
80083078:	2821883a 	mov	r16,r5
8008307c:	dfc01b15 	stw	ra,108(sp)
80083080:	d9801c15 	stw	r6,112(sp)
80083084:	d9c01d15 	stw	r7,116(sp)
80083088:	00c08104 	movi	r3,516
8008308c:	d8c0030d 	sth	r3,12(sp)
80083090:	d9000015 	stw	r4,0(sp)
80083094:	d9000415 	stw	r4,16(sp)
80083098:	00832a00 	call	800832a0 <strlen>
8008309c:	00e002b4 	movhi	r3,32778
800830a0:	18fa7304 	addi	r3,r3,-5684
800830a4:	d8800115 	stw	r2,4(sp)
800830a8:	d8800515 	stw	r2,20(sp)
800830ac:	19000017 	ldw	r4,0(r3)
800830b0:	00a00234 	movhi	r2,32776
800830b4:	108c6e04 	addi	r2,r2,12728
800830b8:	d8800815 	stw	r2,32(sp)
800830bc:	d9c01c04 	addi	r7,sp,112
800830c0:	800d883a 	mov	r6,r16
800830c4:	d80b883a 	mov	r5,sp
800830c8:	00bfffc4 	movi	r2,-1
800830cc:	d8000c15 	stw	zero,48(sp)
800830d0:	d8001115 	stw	zero,68(sp)
800830d4:	d880038d 	sth	r2,14(sp)
800830d8:	00833380 	call	80083338 <__ssvfscanf_r>
800830dc:	dfc01b17 	ldw	ra,108(sp)
800830e0:	dc001a17 	ldw	r16,104(sp)
800830e4:	dec01e04 	addi	sp,sp,120
800830e8:	f800283a 	ret

800830ec <_sscanf_r>:
800830ec:	deffe204 	addi	sp,sp,-120
800830f0:	dc001b15 	stw	r16,108(sp)
800830f4:	2021883a 	mov	r16,r4
800830f8:	dfc01c15 	stw	ra,112(sp)
800830fc:	d9c01d15 	stw	r7,116(sp)
80083100:	00808104 	movi	r2,516
80083104:	2809883a 	mov	r4,r5
80083108:	d9400015 	stw	r5,0(sp)
8008310c:	d9400415 	stw	r5,16(sp)
80083110:	d9801a15 	stw	r6,104(sp)
80083114:	d880030d 	sth	r2,12(sp)
80083118:	00832a00 	call	800832a0 <strlen>
8008311c:	d8800115 	stw	r2,4(sp)
80083120:	d8800515 	stw	r2,20(sp)
80083124:	d9801a17 	ldw	r6,104(sp)
80083128:	00a00234 	movhi	r2,32776
8008312c:	108c6e04 	addi	r2,r2,12728
80083130:	d8800815 	stw	r2,32(sp)
80083134:	d9c01d04 	addi	r7,sp,116
80083138:	d80b883a 	mov	r5,sp
8008313c:	8009883a 	mov	r4,r16
80083140:	00bfffc4 	movi	r2,-1
80083144:	d8000c15 	stw	zero,48(sp)
80083148:	d8001115 	stw	zero,68(sp)
8008314c:	d880038d 	sth	r2,14(sp)
80083150:	00833380 	call	80083338 <__ssvfscanf_r>
80083154:	dfc01c17 	ldw	ra,112(sp)
80083158:	dc001b17 	ldw	r16,108(sp)
8008315c:	dec01e04 	addi	sp,sp,120
80083160:	f800283a 	ret

80083164 <__sread>:
80083164:	defffe04 	addi	sp,sp,-8
80083168:	dc000015 	stw	r16,0(sp)
8008316c:	2821883a 	mov	r16,r5
80083170:	2940038f 	ldh	r5,14(r5)
80083174:	dfc00115 	stw	ra,4(sp)
80083178:	008b32c0 	call	8008b32c <_read_r>
8008317c:	10000716 	blt	r2,zero,8008319c <__sread+0x38>
80083180:	80c01417 	ldw	r3,80(r16)
80083184:	1887883a 	add	r3,r3,r2
80083188:	80c01415 	stw	r3,80(r16)
8008318c:	dfc00117 	ldw	ra,4(sp)
80083190:	dc000017 	ldw	r16,0(sp)
80083194:	dec00204 	addi	sp,sp,8
80083198:	f800283a 	ret
8008319c:	80c0030b 	ldhu	r3,12(r16)
800831a0:	18fbffcc 	andi	r3,r3,61439
800831a4:	80c0030d 	sth	r3,12(r16)
800831a8:	dfc00117 	ldw	ra,4(sp)
800831ac:	dc000017 	ldw	r16,0(sp)
800831b0:	dec00204 	addi	sp,sp,8
800831b4:	f800283a 	ret

800831b8 <__seofread>:
800831b8:	0005883a 	mov	r2,zero
800831bc:	f800283a 	ret

800831c0 <__swrite>:
800831c0:	2880030b 	ldhu	r2,12(r5)
800831c4:	defffb04 	addi	sp,sp,-20
800831c8:	dcc00315 	stw	r19,12(sp)
800831cc:	dc800215 	stw	r18,8(sp)
800831d0:	dc400115 	stw	r17,4(sp)
800831d4:	dc000015 	stw	r16,0(sp)
800831d8:	dfc00415 	stw	ra,16(sp)
800831dc:	10c0400c 	andi	r3,r2,256
800831e0:	2821883a 	mov	r16,r5
800831e4:	2023883a 	mov	r17,r4
800831e8:	3025883a 	mov	r18,r6
800831ec:	3827883a 	mov	r19,r7
800831f0:	18000526 	beq	r3,zero,80083208 <__swrite+0x48>
800831f4:	2940038f 	ldh	r5,14(r5)
800831f8:	01c00084 	movi	r7,2
800831fc:	000d883a 	mov	r6,zero
80083200:	0089a200 	call	80089a20 <_lseek_r>
80083204:	8080030b 	ldhu	r2,12(r16)
80083208:	8140038f 	ldh	r5,14(r16)
8008320c:	10bbffcc 	andi	r2,r2,61439
80083210:	980f883a 	mov	r7,r19
80083214:	900d883a 	mov	r6,r18
80083218:	8809883a 	mov	r4,r17
8008321c:	8080030d 	sth	r2,12(r16)
80083220:	dfc00417 	ldw	ra,16(sp)
80083224:	dcc00317 	ldw	r19,12(sp)
80083228:	dc800217 	ldw	r18,8(sp)
8008322c:	dc400117 	ldw	r17,4(sp)
80083230:	dc000017 	ldw	r16,0(sp)
80083234:	dec00504 	addi	sp,sp,20
80083238:	0086dc41 	jmpi	80086dc4 <_write_r>

8008323c <__sseek>:
8008323c:	defffe04 	addi	sp,sp,-8
80083240:	dc000015 	stw	r16,0(sp)
80083244:	2821883a 	mov	r16,r5
80083248:	2940038f 	ldh	r5,14(r5)
8008324c:	dfc00115 	stw	ra,4(sp)
80083250:	0089a200 	call	80089a20 <_lseek_r>
80083254:	00ffffc4 	movi	r3,-1
80083258:	10c00826 	beq	r2,r3,8008327c <__sseek+0x40>
8008325c:	80c0030b 	ldhu	r3,12(r16)
80083260:	80801415 	stw	r2,80(r16)
80083264:	18c40014 	ori	r3,r3,4096
80083268:	80c0030d 	sth	r3,12(r16)
8008326c:	dfc00117 	ldw	ra,4(sp)
80083270:	dc000017 	ldw	r16,0(sp)
80083274:	dec00204 	addi	sp,sp,8
80083278:	f800283a 	ret
8008327c:	80c0030b 	ldhu	r3,12(r16)
80083280:	18fbffcc 	andi	r3,r3,61439
80083284:	80c0030d 	sth	r3,12(r16)
80083288:	dfc00117 	ldw	ra,4(sp)
8008328c:	dc000017 	ldw	r16,0(sp)
80083290:	dec00204 	addi	sp,sp,8
80083294:	f800283a 	ret

80083298 <__sclose>:
80083298:	2940038f 	ldh	r5,14(r5)
8008329c:	0086f781 	jmpi	80086f78 <_close_r>

800832a0 <strlen>:
800832a0:	208000cc 	andi	r2,r4,3
800832a4:	10002026 	beq	r2,zero,80083328 <strlen+0x88>
800832a8:	20800007 	ldb	r2,0(r4)
800832ac:	10002026 	beq	r2,zero,80083330 <strlen+0x90>
800832b0:	2005883a 	mov	r2,r4
800832b4:	00000206 	br	800832c0 <strlen+0x20>
800832b8:	10c00007 	ldb	r3,0(r2)
800832bc:	18001826 	beq	r3,zero,80083320 <strlen+0x80>
800832c0:	10800044 	addi	r2,r2,1
800832c4:	10c000cc 	andi	r3,r2,3
800832c8:	183ffb1e 	bne	r3,zero,800832b8 <strlen+0x18>
800832cc:	10c00017 	ldw	r3,0(r2)
800832d0:	01ffbff4 	movhi	r7,65279
800832d4:	39ffbfc4 	addi	r7,r7,-257
800832d8:	00ca303a 	nor	r5,zero,r3
800832dc:	01a02074 	movhi	r6,32897
800832e0:	19c7883a 	add	r3,r3,r7
800832e4:	31a02004 	addi	r6,r6,-32640
800832e8:	1946703a 	and	r3,r3,r5
800832ec:	1986703a 	and	r3,r3,r6
800832f0:	1800091e 	bne	r3,zero,80083318 <strlen+0x78>
800832f4:	10800104 	addi	r2,r2,4
800832f8:	10c00017 	ldw	r3,0(r2)
800832fc:	19cb883a 	add	r5,r3,r7
80083300:	00c6303a 	nor	r3,zero,r3
80083304:	28c6703a 	and	r3,r5,r3
80083308:	1986703a 	and	r3,r3,r6
8008330c:	183ff926 	beq	r3,zero,800832f4 <strlen+0x54>
80083310:	00000106 	br	80083318 <strlen+0x78>
80083314:	10800044 	addi	r2,r2,1
80083318:	10c00007 	ldb	r3,0(r2)
8008331c:	183ffd1e 	bne	r3,zero,80083314 <strlen+0x74>
80083320:	1105c83a 	sub	r2,r2,r4
80083324:	f800283a 	ret
80083328:	2005883a 	mov	r2,r4
8008332c:	003fe706 	br	800832cc <strlen+0x2c>
80083330:	0005883a 	mov	r2,zero
80083334:	f800283a 	ret

80083338 <__ssvfscanf_r>:
80083338:	2880030b 	ldhu	r2,12(r5)
8008333c:	deff4b04 	addi	sp,sp,-724
80083340:	df00b315 	stw	fp,716(sp)
80083344:	dd80b115 	stw	r22,708(sp)
80083348:	dfc0b415 	stw	ra,720(sp)
8008334c:	ddc0b215 	stw	r23,712(sp)
80083350:	dd40b015 	stw	r21,704(sp)
80083354:	dd00af15 	stw	r20,700(sp)
80083358:	dcc0ae15 	stw	r19,696(sp)
8008335c:	dc80ad15 	stw	r18,692(sp)
80083360:	dc40ac15 	stw	r17,688(sp)
80083364:	dc00ab15 	stw	r16,684(sp)
80083368:	10c8000c 	andi	r3,r2,8192
8008336c:	d9c09c15 	stw	r7,624(sp)
80083370:	2839883a 	mov	fp,r5
80083374:	202d883a 	mov	r22,r4
80083378:	1800061e 	bne	r3,zero,80083394 <__ssvfscanf_r+0x5c>
8008337c:	29001917 	ldw	r4,100(r5)
80083380:	00f7ffc4 	movi	r3,-8193
80083384:	10880014 	ori	r2,r2,8192
80083388:	20c6703a 	and	r3,r4,r3
8008338c:	2880030d 	sth	r2,12(r5)
80083390:	28c01915 	stw	r3,100(r5)
80083394:	30800003 	ldbu	r2,0(r6)
80083398:	0021883a 	mov	r16,zero
8008339c:	05e002b4 	movhi	r23,32778
800833a0:	d800a115 	stw	zero,644(sp)
800833a4:	d8009e15 	stw	zero,632(sp)
800833a8:	d800a015 	stw	zero,640(sp)
800833ac:	d8809b15 	stw	r2,620(sp)
800833b0:	bdfa7604 	addi	r23,r23,-5672
800833b4:	8025883a 	mov	r18,r16
800833b8:	35000044 	addi	r20,r6,1
800833bc:	10001e26 	beq	r2,zero,80083438 <__ssvfscanf_r+0x100>
800833c0:	b9c00017 	ldw	r7,0(r23)
800833c4:	3887883a 	add	r3,r7,r2
800833c8:	18c00043 	ldbu	r3,1(r3)
800833cc:	18c0020c 	andi	r3,r3,8
800833d0:	18001b26 	beq	r3,zero,80083440 <__ssvfscanf_r+0x108>
800833d4:	e0800117 	ldw	r2,4(fp)
800833d8:	00800e0e 	bge	zero,r2,80083414 <__ssvfscanf_r+0xdc>
800833dc:	e0c00017 	ldw	r3,0(fp)
800833e0:	b9000017 	ldw	r4,0(r23)
800833e4:	18800003 	ldbu	r2,0(r3)
800833e8:	2085883a 	add	r2,r4,r2
800833ec:	10800043 	ldbu	r2,1(r2)
800833f0:	1080020c 	andi	r2,r2,8
800833f4:	10000b26 	beq	r2,zero,80083424 <__ssvfscanf_r+0xec>
800833f8:	e0800117 	ldw	r2,4(fp)
800833fc:	18c00044 	addi	r3,r3,1
80083400:	e0c00015 	stw	r3,0(fp)
80083404:	10bfffc4 	addi	r2,r2,-1
80083408:	e0800115 	stw	r2,4(fp)
8008340c:	94800044 	addi	r18,r18,1
80083410:	00bff216 	blt	zero,r2,800833dc <__ssvfscanf_r+0xa4>
80083414:	e00b883a 	mov	r5,fp
80083418:	b009883a 	mov	r4,r22
8008341c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083420:	103fee26 	beq	r2,zero,800833dc <__ssvfscanf_r+0xa4>
80083424:	a00d883a 	mov	r6,r20
80083428:	30800003 	ldbu	r2,0(r6)
8008342c:	35000044 	addi	r20,r6,1
80083430:	d8809b15 	stw	r2,620(sp)
80083434:	103fe21e 	bne	r2,zero,800833c0 <__ssvfscanf_r+0x88>
80083438:	d880a017 	ldw	r2,640(sp)
8008343c:	00009906 	br	800836a4 <__ssvfscanf_r+0x36c>
80083440:	00c00944 	movi	r3,37
80083444:	10c0881e 	bne	r2,r3,80083668 <__ssvfscanf_r+0x330>
80083448:	30c00043 	ldbu	r3,1(r6)
8008344c:	0023883a 	mov	r17,zero
80083450:	0027883a 	mov	r19,zero
80083454:	01001e04 	movi	r4,120
80083458:	01401b04 	movi	r5,108
8008345c:	a1800044 	addi	r6,r20,1
80083460:	20c0a236 	bltu	r4,r3,800836ec <__ssvfscanf_r+0x3b4>
80083464:	180490ba 	slli	r2,r3,2
80083468:	02200234 	movhi	r8,32776
8008346c:	420d1f04 	addi	r8,r8,13436
80083470:	1205883a 	add	r2,r2,r8
80083474:	10800017 	ldw	r2,0(r2)
80083478:	1000683a 	jmp	r2
8008347c:	800836a0 	cmpeqi	zero,r16,8410
80083480:	800836ec 	andhi	zero,r16,8411
80083484:	800836ec 	andhi	zero,r16,8411
80083488:	800836ec 	andhi	zero,r16,8411
8008348c:	800836ec 	andhi	zero,r16,8411
80083490:	800836ec 	andhi	zero,r16,8411
80083494:	800836ec 	andhi	zero,r16,8411
80083498:	800836ec 	andhi	zero,r16,8411
8008349c:	800836ec 	andhi	zero,r16,8411
800834a0:	800836ec 	andhi	zero,r16,8411
800834a4:	800836ec 	andhi	zero,r16,8411
800834a8:	800836ec 	andhi	zero,r16,8411
800834ac:	800836ec 	andhi	zero,r16,8411
800834b0:	800836ec 	andhi	zero,r16,8411
800834b4:	800836ec 	andhi	zero,r16,8411
800834b8:	800836ec 	andhi	zero,r16,8411
800834bc:	800836ec 	andhi	zero,r16,8411
800834c0:	800836ec 	andhi	zero,r16,8411
800834c4:	800836ec 	andhi	zero,r16,8411
800834c8:	800836ec 	andhi	zero,r16,8411
800834cc:	800836ec 	andhi	zero,r16,8411
800834d0:	800836ec 	andhi	zero,r16,8411
800834d4:	800836ec 	andhi	zero,r16,8411
800834d8:	800836ec 	andhi	zero,r16,8411
800834dc:	800836ec 	andhi	zero,r16,8411
800834e0:	800836ec 	andhi	zero,r16,8411
800834e4:	800836ec 	andhi	zero,r16,8411
800834e8:	800836ec 	andhi	zero,r16,8411
800834ec:	800836ec 	andhi	zero,r16,8411
800834f0:	800836ec 	andhi	zero,r16,8411
800834f4:	800836ec 	andhi	zero,r16,8411
800834f8:	800836ec 	andhi	zero,r16,8411
800834fc:	800836ec 	andhi	zero,r16,8411
80083500:	800836ec 	andhi	zero,r16,8411
80083504:	800836ec 	andhi	zero,r16,8411
80083508:	800836ec 	andhi	zero,r16,8411
8008350c:	800836ec 	andhi	zero,r16,8411
80083510:	80083660 	cmpeqi	zero,r16,8409
80083514:	800836ec 	andhi	zero,r16,8411
80083518:	800836ec 	andhi	zero,r16,8411
8008351c:	800836ec 	andhi	zero,r16,8411
80083520:	800836ec 	andhi	zero,r16,8411
80083524:	800836d4 	ori	zero,r16,8411
80083528:	800836ec 	andhi	zero,r16,8411
8008352c:	800836ec 	andhi	zero,r16,8411
80083530:	800836ec 	andhi	zero,r16,8411
80083534:	800836ec 	andhi	zero,r16,8411
80083538:	800836ec 	andhi	zero,r16,8411
8008353c:	80083808 	cmpgei	zero,r16,8416
80083540:	80083808 	cmpgei	zero,r16,8416
80083544:	80083808 	cmpgei	zero,r16,8416
80083548:	80083808 	cmpgei	zero,r16,8416
8008354c:	80083808 	cmpgei	zero,r16,8416
80083550:	80083808 	cmpgei	zero,r16,8416
80083554:	80083808 	cmpgei	zero,r16,8416
80083558:	80083808 	cmpgei	zero,r16,8416
8008355c:	80083808 	cmpgei	zero,r16,8416
80083560:	80083808 	cmpgei	zero,r16,8416
80083564:	800836ec 	andhi	zero,r16,8411
80083568:	800836ec 	andhi	zero,r16,8411
8008356c:	800836ec 	andhi	zero,r16,8411
80083570:	800836ec 	andhi	zero,r16,8411
80083574:	800836ec 	andhi	zero,r16,8411
80083578:	800836ec 	andhi	zero,r16,8411
8008357c:	800836ec 	andhi	zero,r16,8411
80083580:	800836ec 	andhi	zero,r16,8411
80083584:	800836ec 	andhi	zero,r16,8411
80083588:	800836ec 	andhi	zero,r16,8411
8008358c:	800837dc 	xori	zero,r16,8415
80083590:	8008388c 	andi	zero,r16,8418
80083594:	800836ec 	andhi	zero,r16,8411
80083598:	8008388c 	andi	zero,r16,8418
8008359c:	800836ec 	andhi	zero,r16,8411
800835a0:	800836ec 	andhi	zero,r16,8411
800835a4:	800836ec 	andhi	zero,r16,8411
800835a8:	800836ec 	andhi	zero,r16,8411
800835ac:	80083878 	rdprs	zero,r16,8417
800835b0:	800836ec 	andhi	zero,r16,8411
800835b4:	800836ec 	andhi	zero,r16,8411
800835b8:	8008384c 	andi	zero,r16,8417
800835bc:	800836ec 	andhi	zero,r16,8411
800835c0:	800836ec 	andhi	zero,r16,8411
800835c4:	800836ec 	andhi	zero,r16,8411
800835c8:	800836ec 	andhi	zero,r16,8411
800835cc:	800836ec 	andhi	zero,r16,8411
800835d0:	800836ec 	andhi	zero,r16,8411
800835d4:	800836ec 	andhi	zero,r16,8411
800835d8:	800836ec 	andhi	zero,r16,8411
800835dc:	80083824 	muli	zero,r16,8416
800835e0:	800836ec 	andhi	zero,r16,8411
800835e4:	800836ec 	andhi	zero,r16,8411
800835e8:	800839c0 	call	8800839c <__alt_data_end+0x7f0b39c>
800835ec:	800836ec 	andhi	zero,r16,8411
800835f0:	800836ec 	andhi	zero,r16,8411
800835f4:	800836ec 	andhi	zero,r16,8411
800835f8:	800836ec 	andhi	zero,r16,8411
800835fc:	800836ec 	andhi	zero,r16,8411
80083600:	800836ec 	andhi	zero,r16,8411
80083604:	800836ec 	andhi	zero,r16,8411
80083608:	80083944 	addi	zero,r16,8421
8008360c:	8008391c 	xori	zero,r16,8420
80083610:	8008388c 	andi	zero,r16,8418
80083614:	8008388c 	andi	zero,r16,8418
80083618:	8008388c 	andi	zero,r16,8418
8008361c:	80083908 	cmpgei	zero,r16,8420
80083620:	80083a4c 	andi	zero,r16,8425
80083624:	800836ec 	andhi	zero,r16,8411
80083628:	800836ec 	andhi	zero,r16,8411
8008362c:	800838f4 	orhi	zero,r16,8419
80083630:	800836ec 	andhi	zero,r16,8411
80083634:	800838c4 	addi	zero,r16,8419
80083638:	800838a0 	cmpeqi	zero,r16,8418
8008363c:	800837b0 	cmpltui	zero,r16,8414
80083640:	800836ec 	andhi	zero,r16,8411
80083644:	800836ec 	andhi	zero,r16,8411
80083648:	8008379c 	xori	zero,r16,8414
8008364c:	800836ec 	andhi	zero,r16,8411
80083650:	80083724 	muli	zero,r16,8412
80083654:	800836ec 	andhi	zero,r16,8411
80083658:	800836ec 	andhi	zero,r16,8411
8008365c:	80083824 	muli	zero,r16,8416
80083660:	d9809d15 	stw	r6,628(sp)
80083664:	3029883a 	mov	r20,r6
80083668:	e0800117 	ldw	r2,4(fp)
8008366c:	0081aa0e 	bge	zero,r2,80083d18 <__ssvfscanf_r+0x9e0>
80083670:	e0800017 	ldw	r2,0(fp)
80083674:	a0ffffc3 	ldbu	r3,-1(r20)
80083678:	11000003 	ldbu	r4,0(r2)
8008367c:	20ff6e1e 	bne	r4,r3,80083438 <__ssvfscanf_r+0x100>
80083680:	e0c00117 	ldw	r3,4(fp)
80083684:	10800044 	addi	r2,r2,1
80083688:	e0800015 	stw	r2,0(fp)
8008368c:	18bfffc4 	addi	r2,r3,-1
80083690:	e0800115 	stw	r2,4(fp)
80083694:	94800044 	addi	r18,r18,1
80083698:	a00d883a 	mov	r6,r20
8008369c:	003f6206 	br	80083428 <__ssvfscanf_r+0xf0>
800836a0:	00bfffc4 	movi	r2,-1
800836a4:	dfc0b417 	ldw	ra,720(sp)
800836a8:	df00b317 	ldw	fp,716(sp)
800836ac:	ddc0b217 	ldw	r23,712(sp)
800836b0:	dd80b117 	ldw	r22,708(sp)
800836b4:	dd40b017 	ldw	r21,704(sp)
800836b8:	dd00af17 	ldw	r20,700(sp)
800836bc:	dcc0ae17 	ldw	r19,696(sp)
800836c0:	dc80ad17 	ldw	r18,692(sp)
800836c4:	dc40ac17 	ldw	r17,688(sp)
800836c8:	dc00ab17 	ldw	r16,684(sp)
800836cc:	dec0b504 	addi	sp,sp,724
800836d0:	f800283a 	ret
800836d4:	a0800043 	ldbu	r2,1(r20)
800836d8:	3029883a 	mov	r20,r6
800836dc:	8c400414 	ori	r17,r17,16
800836e0:	10c03fcc 	andi	r3,r2,255
800836e4:	a1800044 	addi	r6,r20,1
800836e8:	20ff5e2e 	bgeu	r4,r3,80083464 <__ssvfscanf_r+0x12c>
800836ec:	38c7883a 	add	r3,r7,r3
800836f0:	18800043 	ldbu	r2,1(r3)
800836f4:	d9809d15 	stw	r6,628(sp)
800836f8:	00c00044 	movi	r3,1
800836fc:	108000cc 	andi	r2,r2,3
80083700:	10c18f26 	beq	r2,r3,80083d40 <__ssvfscanf_r+0xa08>
80083704:	e0800117 	ldw	r2,4(fp)
80083708:	00808716 	blt	zero,r2,80083928 <__ssvfscanf_r+0x5f0>
8008370c:	e00b883a 	mov	r5,fp
80083710:	b009883a 	mov	r4,r22
80083714:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083718:	1001431e 	bne	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
8008371c:	b9c00017 	ldw	r7,0(r23)
80083720:	00008106 	br	80083928 <__ssvfscanf_r+0x5f0>
80083724:	e0800117 	ldw	r2,4(fp)
80083728:	d9809d15 	stw	r6,628(sp)
8008372c:	0081a30e 	bge	zero,r2,80083dbc <__ssvfscanf_r+0xa84>
80083730:	00a00274 	movhi	r2,32777
80083734:	10b69d04 	addi	r2,r2,-9612
80083738:	02000284 	movi	r8,10
8008373c:	d880a115 	stw	r2,644(sp)
80083740:	da009e15 	stw	r8,632(sp)
80083744:	050000c4 	movi	r20,3
80083748:	e0c00017 	ldw	r3,0(fp)
8008374c:	00000206 	br	80083758 <__ssvfscanf_r+0x420>
80083750:	18c00044 	addi	r3,r3,1
80083754:	e0c00015 	stw	r3,0(fp)
80083758:	19000003 	ldbu	r4,0(r3)
8008375c:	20803fcc 	andi	r2,r4,255
80083760:	3885883a 	add	r2,r7,r2
80083764:	10800043 	ldbu	r2,1(r2)
80083768:	1140020c 	andi	r5,r2,8
8008376c:	2801ab26 	beq	r5,zero,80083e1c <__ssvfscanf_r+0xae4>
80083770:	e0800117 	ldw	r2,4(fp)
80083774:	94800044 	addi	r18,r18,1
80083778:	10bfffc4 	addi	r2,r2,-1
8008377c:	e0800115 	stw	r2,4(fp)
80083780:	00bff316 	blt	zero,r2,80083750 <__ssvfscanf_r+0x418>
80083784:	e00b883a 	mov	r5,fp
80083788:	b009883a 	mov	r4,r22
8008378c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083790:	1001251e 	bne	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
80083794:	b9c00017 	ldw	r7,0(r23)
80083798:	003feb06 	br	80083748 <__ssvfscanf_r+0x410>
8008379c:	e0800117 	ldw	r2,4(fp)
800837a0:	d9809d15 	stw	r6,628(sp)
800837a4:	00818b0e 	bge	zero,r2,80083dd4 <__ssvfscanf_r+0xa9c>
800837a8:	05000084 	movi	r20,2
800837ac:	003fe606 	br	80083748 <__ssvfscanf_r+0x410>
800837b0:	e0800117 	ldw	r2,4(fp)
800837b4:	d9809d15 	stw	r6,628(sp)
800837b8:	8c408814 	ori	r17,r17,544
800837bc:	00801d0e 	bge	zero,r2,80083834 <__ssvfscanf_r+0x4fc>
800837c0:	00a00274 	movhi	r2,32777
800837c4:	10b69d04 	addi	r2,r2,-9612
800837c8:	02000404 	movi	r8,16
800837cc:	d880a115 	stw	r2,644(sp)
800837d0:	da009e15 	stw	r8,632(sp)
800837d4:	050000c4 	movi	r20,3
800837d8:	003fdb06 	br	80083748 <__ssvfscanf_r+0x410>
800837dc:	e0800117 	ldw	r2,4(fp)
800837e0:	d9809d15 	stw	r6,628(sp)
800837e4:	8c400054 	ori	r17,r17,1
800837e8:	00bfc80e 	bge	zero,r2,8008370c <__ssvfscanf_r+0x3d4>
800837ec:	00e00274 	movhi	r3,32777
800837f0:	18f55004 	addi	r3,r3,-10944
800837f4:	02000284 	movi	r8,10
800837f8:	d8c0a115 	stw	r3,644(sp)
800837fc:	da009e15 	stw	r8,632(sp)
80083800:	050000c4 	movi	r20,3
80083804:	003fd006 	br	80083748 <__ssvfscanf_r+0x410>
80083808:	9cc002a4 	muli	r19,r19,10
8008380c:	a0800043 	ldbu	r2,1(r20)
80083810:	3029883a 	mov	r20,r6
80083814:	98e7883a 	add	r19,r19,r3
80083818:	9cfff404 	addi	r19,r19,-48
8008381c:	10c03fcc 	andi	r3,r2,255
80083820:	003f0e06 	br	8008345c <__ssvfscanf_r+0x124>
80083824:	e0800117 	ldw	r2,4(fp)
80083828:	d9809d15 	stw	r6,628(sp)
8008382c:	8c408014 	ori	r17,r17,512
80083830:	00bfe316 	blt	zero,r2,800837c0 <__ssvfscanf_r+0x488>
80083834:	e00b883a 	mov	r5,fp
80083838:	b009883a 	mov	r4,r22
8008383c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083840:	1000f91e 	bne	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
80083844:	b9c00017 	ldw	r7,0(r23)
80083848:	003fdd06 	br	800837c0 <__ssvfscanf_r+0x488>
8008384c:	e0800117 	ldw	r2,4(fp)
80083850:	d9809d15 	stw	r6,628(sp)
80083854:	8c400054 	ori	r17,r17,1
80083858:	0080140e 	bge	zero,r2,800838ac <__ssvfscanf_r+0x574>
8008385c:	00a00274 	movhi	r2,32777
80083860:	10b69d04 	addi	r2,r2,-9612
80083864:	02000204 	movi	r8,8
80083868:	d880a115 	stw	r2,644(sp)
8008386c:	da009e15 	stw	r8,632(sp)
80083870:	050000c4 	movi	r20,3
80083874:	003fb406 	br	80083748 <__ssvfscanf_r+0x410>
80083878:	a0800043 	ldbu	r2,1(r20)
8008387c:	8c400094 	ori	r17,r17,2
80083880:	3029883a 	mov	r20,r6
80083884:	10c03fcc 	andi	r3,r2,255
80083888:	003ef406 	br	8008345c <__ssvfscanf_r+0x124>
8008388c:	e0800117 	ldw	r2,4(fp)
80083890:	d9809d15 	stw	r6,628(sp)
80083894:	0081420e 	bge	zero,r2,80083da0 <__ssvfscanf_r+0xa68>
80083898:	05000104 	movi	r20,4
8008389c:	003faa06 	br	80083748 <__ssvfscanf_r+0x410>
800838a0:	e0800117 	ldw	r2,4(fp)
800838a4:	d9809d15 	stw	r6,628(sp)
800838a8:	00bfec16 	blt	zero,r2,8008385c <__ssvfscanf_r+0x524>
800838ac:	e00b883a 	mov	r5,fp
800838b0:	b009883a 	mov	r4,r22
800838b4:	008e0bc0 	call	8008e0bc <__ssrefill_r>
800838b8:	1000db1e 	bne	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
800838bc:	b9c00017 	ldw	r7,0(r23)
800838c0:	003fe606 	br	8008385c <__ssvfscanf_r+0x524>
800838c4:	d9809d15 	stw	r6,628(sp)
800838c8:	8880040c 	andi	r2,r17,16
800838cc:	10009c1e 	bne	r2,zero,80083b40 <__ssvfscanf_r+0x808>
800838d0:	8880010c 	andi	r2,r17,4
800838d4:	10011e26 	beq	r2,zero,80083d50 <__ssvfscanf_r+0xa18>
800838d8:	da009c17 	ldw	r8,624(sp)
800838dc:	3029883a 	mov	r20,r6
800838e0:	40800017 	ldw	r2,0(r8)
800838e4:	42000104 	addi	r8,r8,4
800838e8:	da009c15 	stw	r8,624(sp)
800838ec:	1480000d 	sth	r18,0(r2)
800838f0:	003ecc06 	br	80083424 <__ssvfscanf_r+0xec>
800838f4:	a0c00043 	ldbu	r3,1(r20)
800838f8:	19410c26 	beq	r3,r5,80083d2c <__ssvfscanf_r+0x9f4>
800838fc:	8c400054 	ori	r17,r17,1
80083900:	3029883a 	mov	r20,r6
80083904:	003ed506 	br	8008345c <__ssvfscanf_r+0x124>
80083908:	a0800043 	ldbu	r2,1(r20)
8008390c:	8c400114 	ori	r17,r17,4
80083910:	3029883a 	mov	r20,r6
80083914:	10c03fcc 	andi	r3,r2,255
80083918:	003ed006 	br	8008345c <__ssvfscanf_r+0x124>
8008391c:	e0800117 	ldw	r2,4(fp)
80083920:	d9809d15 	stw	r6,628(sp)
80083924:	00bf790e 	bge	zero,r2,8008370c <__ssvfscanf_r+0x3d4>
80083928:	00a00274 	movhi	r2,32777
8008392c:	10b55004 	addi	r2,r2,-10944
80083930:	02000284 	movi	r8,10
80083934:	d880a115 	stw	r2,644(sp)
80083938:	da009e15 	stw	r8,632(sp)
8008393c:	050000c4 	movi	r20,3
80083940:	003f8106 	br	80083748 <__ssvfscanf_r+0x410>
80083944:	e0800117 	ldw	r2,4(fp)
80083948:	d9809d15 	stw	r6,628(sp)
8008394c:	0080c40e 	bge	zero,r2,80083c60 <__ssvfscanf_r+0x928>
80083950:	9800011e 	bne	r19,zero,80083958 <__ssvfscanf_r+0x620>
80083954:	04c00044 	movi	r19,1
80083958:	8880004c 	andi	r2,r17,1
8008395c:	1000441e 	bne	r2,zero,80083a70 <__ssvfscanf_r+0x738>
80083960:	8c40040c 	andi	r17,r17,16
80083964:	8800da26 	beq	r17,zero,80083cd0 <__ssvfscanf_r+0x998>
80083968:	0021883a 	mov	r16,zero
8008396c:	00000806 	br	80083990 <__ssvfscanf_r+0x658>
80083970:	1887883a 	add	r3,r3,r2
80083974:	e00b883a 	mov	r5,fp
80083978:	b009883a 	mov	r4,r22
8008397c:	e0c00015 	stw	r3,0(fp)
80083980:	80a1883a 	add	r16,r16,r2
80083984:	98a7c83a 	sub	r19,r19,r2
80083988:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008398c:	1000ca1e 	bne	r2,zero,80083cb8 <__ssvfscanf_r+0x980>
80083990:	e0800117 	ldw	r2,4(fp)
80083994:	e0c00017 	ldw	r3,0(fp)
80083998:	14fff516 	blt	r2,r19,80083970 <__ssvfscanf_r+0x638>
8008399c:	14c5c83a 	sub	r2,r2,r19
800839a0:	1cd5883a 	add	r10,r3,r19
800839a4:	84e1883a 	add	r16,r16,r19
800839a8:	e0800115 	stw	r2,4(fp)
800839ac:	e2800015 	stw	r10,0(fp)
800839b0:	dd009d17 	ldw	r20,628(sp)
800839b4:	9425883a 	add	r18,r18,r16
800839b8:	a00d883a 	mov	r6,r20
800839bc:	003e9a06 	br	80083428 <__ssvfscanf_r+0xf0>
800839c0:	300b883a 	mov	r5,r6
800839c4:	d9005884 	addi	r4,sp,354
800839c8:	d9809d15 	stw	r6,628(sp)
800839cc:	008bb540 	call	8008bb54 <__sccl>
800839d0:	1029883a 	mov	r20,r2
800839d4:	e0800117 	ldw	r2,4(fp)
800839d8:	0081050e 	bge	zero,r2,80083df0 <__ssvfscanf_r+0xab8>
800839dc:	e1000017 	ldw	r4,0(fp)
800839e0:	20800003 	ldbu	r2,0(r4)
800839e4:	98005926 	beq	r19,zero,80083b4c <__ssvfscanf_r+0x814>
800839e8:	8c40040c 	andi	r17,r17,16
800839ec:	88005a26 	beq	r17,zero,80083b58 <__ssvfscanf_r+0x820>
800839f0:	9823883a 	mov	r17,r19
800839f4:	0021883a 	mov	r16,zero
800839f8:	00000106 	br	80083a00 <__ssvfscanf_r+0x6c8>
800839fc:	20800003 	ldbu	r2,0(r4)
80083a00:	10803fcc 	andi	r2,r2,255
80083a04:	d8c05884 	addi	r3,sp,354
80083a08:	1885883a 	add	r2,r3,r2
80083a0c:	10800007 	ldb	r2,0(r2)
80083a10:	1000ad26 	beq	r2,zero,80083cc8 <__ssvfscanf_r+0x990>
80083a14:	e0800117 	ldw	r2,4(fp)
80083a18:	21000044 	addi	r4,r4,1
80083a1c:	84000044 	addi	r16,r16,1
80083a20:	10bfffc4 	addi	r2,r2,-1
80083a24:	e0800115 	stw	r2,4(fp)
80083a28:	e1000015 	stw	r4,0(fp)
80083a2c:	84c0a026 	beq	r16,r19,80083cb0 <__ssvfscanf_r+0x978>
80083a30:	00bff216 	blt	zero,r2,800839fc <__ssvfscanf_r+0x6c4>
80083a34:	e00b883a 	mov	r5,fp
80083a38:	b009883a 	mov	r4,r22
80083a3c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083a40:	10009a1e 	bne	r2,zero,80083cac <__ssvfscanf_r+0x974>
80083a44:	e1000017 	ldw	r4,0(fp)
80083a48:	003fec06 	br	800839fc <__ssvfscanf_r+0x6c4>
80083a4c:	e0800117 	ldw	r2,4(fp)
80083a50:	d9809d15 	stw	r6,628(sp)
80083a54:	0080eb0e 	bge	zero,r2,80083e04 <__ssvfscanf_r+0xacc>
80083a58:	00a00274 	movhi	r2,32777
80083a5c:	10b55004 	addi	r2,r2,-10944
80083a60:	d880a115 	stw	r2,644(sp)
80083a64:	d8009e15 	stw	zero,632(sp)
80083a68:	050000c4 	movi	r20,3
80083a6c:	003f3606 	br	80083748 <__ssvfscanf_r+0x410>
80083a70:	dd409904 	addi	r21,sp,612
80083a74:	8c40040c 	andi	r17,r17,16
80083a78:	01800204 	movi	r6,8
80083a7c:	000b883a 	mov	r5,zero
80083a80:	a809883a 	mov	r4,r21
80083a84:	dc409f15 	stw	r17,636(sp)
80083a88:	008a0a00 	call	8008a0a0 <memset>
80083a8c:	dc409f17 	ldw	r17,636(sp)
80083a90:	88006e26 	beq	r17,zero,80083c4c <__ssvfscanf_r+0x914>
80083a94:	0029883a 	mov	r20,zero
80083a98:	0023883a 	mov	r17,zero
80083a9c:	00899cc0 	call	800899cc <__locale_mb_cur_max>
80083aa0:	14406126 	beq	r2,r17,80083c28 <__ssvfscanf_r+0x8f0>
80083aa4:	e0800017 	ldw	r2,0(fp)
80083aa8:	e0c00117 	ldw	r3,4(fp)
80083aac:	d9000104 	addi	r4,sp,4
80083ab0:	12000003 	ldbu	r8,0(r2)
80083ab4:	18ffffc4 	addi	r3,r3,-1
80083ab8:	10800044 	addi	r2,r2,1
80083abc:	e0c00115 	stw	r3,4(fp)
80083ac0:	e0800015 	stw	r2,0(fp)
80083ac4:	8c000044 	addi	r16,r17,1
80083ac8:	dd400015 	stw	r21,0(sp)
80083acc:	2463883a 	add	r17,r4,r17
80083ad0:	200d883a 	mov	r6,r4
80083ad4:	a00b883a 	mov	r5,r20
80083ad8:	800f883a 	mov	r7,r16
80083adc:	b009883a 	mov	r4,r22
80083ae0:	8a000005 	stb	r8,0(r17)
80083ae4:	0089c3c0 	call	80089c3c <_mbrtowc_r>
80083ae8:	017fffc4 	movi	r5,-1
80083aec:	11404e26 	beq	r2,r5,80083c28 <__ssvfscanf_r+0x8f0>
80083af0:	1000601e 	bne	r2,zero,80083c74 <__ssvfscanf_r+0x93c>
80083af4:	da009f17 	ldw	r8,636(sp)
80083af8:	4000641e 	bne	r8,zero,80083c8c <__ssvfscanf_r+0x954>
80083afc:	a0000015 	stw	zero,0(r20)
80083b00:	9425883a 	add	r18,r18,r16
80083b04:	9967883a 	add	r19,r19,r5
80083b08:	a5000104 	addi	r20,r20,4
80083b0c:	e0800117 	ldw	r2,4(fp)
80083b10:	0023883a 	mov	r17,zero
80083b14:	00804b16 	blt	zero,r2,80083c44 <__ssvfscanf_r+0x90c>
80083b18:	e00b883a 	mov	r5,fp
80083b1c:	b009883a 	mov	r4,r22
80083b20:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083b24:	10004726 	beq	r2,zero,80083c44 <__ssvfscanf_r+0x90c>
80083b28:	88003f1e 	bne	r17,zero,80083c28 <__ssvfscanf_r+0x8f0>
80083b2c:	d8c09f17 	ldw	r3,636(sp)
80083b30:	1800031e 	bne	r3,zero,80083b40 <__ssvfscanf_r+0x808>
80083b34:	da00a017 	ldw	r8,640(sp)
80083b38:	42000044 	addi	r8,r8,1
80083b3c:	da00a015 	stw	r8,640(sp)
80083b40:	dd009d17 	ldw	r20,628(sp)
80083b44:	a00d883a 	mov	r6,r20
80083b48:	003e3706 	br	80083428 <__ssvfscanf_r+0xf0>
80083b4c:	8c40040c 	andi	r17,r17,16
80083b50:	04ffffc4 	movi	r19,-1
80083b54:	883fa61e 	bne	r17,zero,800839f0 <__ssvfscanf_r+0x6b8>
80083b58:	da009c17 	ldw	r8,624(sp)
80083b5c:	9abfffc4 	addi	r10,r19,-1
80083b60:	44000017 	ldw	r16,0(r8)
80083b64:	44400104 	addi	r17,r8,4
80083b68:	8007883a 	mov	r3,r16
80083b6c:	82ab883a 	add	r21,r16,r10
80083b70:	00000306 	br	80083b80 <__ssvfscanf_r+0x848>
80083b74:	e1000017 	ldw	r4,0(fp)
80083b78:	9807883a 	mov	r3,r19
80083b7c:	20800003 	ldbu	r2,0(r4)
80083b80:	10803fcc 	andi	r2,r2,255
80083b84:	d9405884 	addi	r5,sp,354
80083b88:	2885883a 	add	r2,r5,r2
80083b8c:	10800007 	ldb	r2,0(r2)
80083b90:	10004b26 	beq	r2,zero,80083cc0 <__ssvfscanf_r+0x988>
80083b94:	e0800117 	ldw	r2,4(fp)
80083b98:	21400044 	addi	r5,r4,1
80083b9c:	e1400015 	stw	r5,0(fp)
80083ba0:	10bfffc4 	addi	r2,r2,-1
80083ba4:	e0800115 	stw	r2,4(fp)
80083ba8:	20800003 	ldbu	r2,0(r4)
80083bac:	1cc00044 	addi	r19,r3,1
80083bb0:	18800005 	stb	r2,0(r3)
80083bb4:	1d400726 	beq	r3,r21,80083bd4 <__ssvfscanf_r+0x89c>
80083bb8:	e0800117 	ldw	r2,4(fp)
80083bbc:	00bfed16 	blt	zero,r2,80083b74 <__ssvfscanf_r+0x83c>
80083bc0:	e00b883a 	mov	r5,fp
80083bc4:	b009883a 	mov	r4,r22
80083bc8:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083bcc:	103fe926 	beq	r2,zero,80083b74 <__ssvfscanf_r+0x83c>
80083bd0:	84c01526 	beq	r16,r19,80083c28 <__ssvfscanf_r+0x8f0>
80083bd4:	9c21c83a 	sub	r16,r19,r16
80083bd8:	803e1726 	beq	r16,zero,80083438 <__ssvfscanf_r+0x100>
80083bdc:	da00a017 	ldw	r8,640(sp)
80083be0:	98000005 	stb	zero,0(r19)
80083be4:	dc409c15 	stw	r17,624(sp)
80083be8:	42000044 	addi	r8,r8,1
80083bec:	da00a015 	stw	r8,640(sp)
80083bf0:	9425883a 	add	r18,r18,r16
80083bf4:	a00d883a 	mov	r6,r20
80083bf8:	003e0b06 	br	80083428 <__ssvfscanf_r+0xf0>
80083bfc:	017fff84 	movi	r5,-2
80083c00:	11439b1e 	bne	r2,r5,80084a70 <__ssvfscanf_r+0x1738>
80083c04:	8821883a 	mov	r16,r17
80083c08:	e0800117 	ldw	r2,4(fp)
80083c0c:	0082e516 	blt	zero,r2,800847a4 <__ssvfscanf_r+0x146c>
80083c10:	e00b883a 	mov	r5,fp
80083c14:	b009883a 	mov	r4,r22
80083c18:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083c1c:	1002e126 	beq	r2,zero,800847a4 <__ssvfscanf_r+0x146c>
80083c20:	dc409f17 	ldw	r17,636(sp)
80083c24:	8002e826 	beq	r16,zero,800847c8 <__ssvfscanf_r+0x1490>
80083c28:	da00a017 	ldw	r8,640(sp)
80083c2c:	403e9c26 	beq	r8,zero,800836a0 <__ssvfscanf_r+0x368>
80083c30:	e080030b 	ldhu	r2,12(fp)
80083c34:	1080100c 	andi	r2,r2,64
80083c38:	103e991e 	bne	r2,zero,800836a0 <__ssvfscanf_r+0x368>
80083c3c:	4005883a 	mov	r2,r8
80083c40:	003e9806 	br	800836a4 <__ssvfscanf_r+0x36c>
80083c44:	983f951e 	bne	r19,zero,80083a9c <__ssvfscanf_r+0x764>
80083c48:	003fb806 	br	80083b2c <__ssvfscanf_r+0x7f4>
80083c4c:	da009c17 	ldw	r8,624(sp)
80083c50:	45000017 	ldw	r20,0(r8)
80083c54:	42000104 	addi	r8,r8,4
80083c58:	da009c15 	stw	r8,624(sp)
80083c5c:	003f8e06 	br	80083a98 <__ssvfscanf_r+0x760>
80083c60:	e00b883a 	mov	r5,fp
80083c64:	b009883a 	mov	r4,r22
80083c68:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083c6c:	103f3826 	beq	r2,zero,80083950 <__ssvfscanf_r+0x618>
80083c70:	003fed06 	br	80083c28 <__ssvfscanf_r+0x8f0>
80083c74:	00ffff84 	movi	r3,-2
80083c78:	10c0071e 	bne	r2,r3,80083c98 <__ssvfscanf_r+0x960>
80083c7c:	e0800117 	ldw	r2,4(fp)
80083c80:	8023883a 	mov	r17,r16
80083c84:	00bf8516 	blt	zero,r2,80083a9c <__ssvfscanf_r+0x764>
80083c88:	003fa306 	br	80083b18 <__ssvfscanf_r+0x7e0>
80083c8c:	9425883a 	add	r18,r18,r16
80083c90:	9cffffc4 	addi	r19,r19,-1
80083c94:	003f9d06 	br	80083b0c <__ssvfscanf_r+0x7d4>
80083c98:	da009f17 	ldw	r8,636(sp)
80083c9c:	9425883a 	add	r18,r18,r16
80083ca0:	9cffffc4 	addi	r19,r19,-1
80083ca4:	403f9826 	beq	r8,zero,80083b08 <__ssvfscanf_r+0x7d0>
80083ca8:	003f9806 	br	80083b0c <__ssvfscanf_r+0x7d4>
80083cac:	8023883a 	mov	r17,r16
80083cb0:	8821883a 	mov	r16,r17
80083cb4:	003fce06 	br	80083bf0 <__ssvfscanf_r+0x8b8>
80083cb8:	803f3d1e 	bne	r16,zero,800839b0 <__ssvfscanf_r+0x678>
80083cbc:	003fda06 	br	80083c28 <__ssvfscanf_r+0x8f0>
80083cc0:	1827883a 	mov	r19,r3
80083cc4:	003fc306 	br	80083bd4 <__ssvfscanf_r+0x89c>
80083cc8:	803fc91e 	bne	r16,zero,80083bf0 <__ssvfscanf_r+0x8b8>
80083ccc:	003dda06 	br	80083438 <__ssvfscanf_r+0x100>
80083cd0:	da009c17 	ldw	r8,624(sp)
80083cd4:	df000015 	stw	fp,0(sp)
80083cd8:	980f883a 	mov	r7,r19
80083cdc:	41400017 	ldw	r5,0(r8)
80083ce0:	01800044 	movi	r6,1
80083ce4:	b009883a 	mov	r4,r22
80083ce8:	008e12c0 	call	8008e12c <_sfread_r>
80083cec:	da009c17 	ldw	r8,624(sp)
80083cf0:	40c00104 	addi	r3,r8,4
80083cf4:	103fcc26 	beq	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
80083cf8:	da00a017 	ldw	r8,640(sp)
80083cfc:	dd009d17 	ldw	r20,628(sp)
80083d00:	90a5883a 	add	r18,r18,r2
80083d04:	42000044 	addi	r8,r8,1
80083d08:	da00a015 	stw	r8,640(sp)
80083d0c:	d8c09c15 	stw	r3,624(sp)
80083d10:	a00d883a 	mov	r6,r20
80083d14:	003dc406 	br	80083428 <__ssvfscanf_r+0xf0>
80083d18:	e00b883a 	mov	r5,fp
80083d1c:	b009883a 	mov	r4,r22
80083d20:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083d24:	103e5226 	beq	r2,zero,80083670 <__ssvfscanf_r+0x338>
80083d28:	003fbf06 	br	80083c28 <__ssvfscanf_r+0x8f0>
80083d2c:	a0800083 	ldbu	r2,2(r20)
80083d30:	8c400094 	ori	r17,r17,2
80083d34:	a5000084 	addi	r20,r20,2
80083d38:	10c03fcc 	andi	r3,r2,255
80083d3c:	003dc706 	br	8008345c <__ssvfscanf_r+0x124>
80083d40:	e0800117 	ldw	r2,4(fp)
80083d44:	88e2b03a 	or	r17,r17,r3
80083d48:	00bef716 	blt	zero,r2,80083928 <__ssvfscanf_r+0x5f0>
80083d4c:	003e6f06 	br	8008370c <__ssvfscanf_r+0x3d4>
80083d50:	8880004c 	andi	r2,r17,1
80083d54:	10000b1e 	bne	r2,zero,80083d84 <__ssvfscanf_r+0xa4c>
80083d58:	8c40008c 	andi	r17,r17,2
80083d5c:	88000926 	beq	r17,zero,80083d84 <__ssvfscanf_r+0xa4c>
80083d60:	da009c17 	ldw	r8,624(sp)
80083d64:	9007d7fa 	srai	r3,r18,31
80083d68:	dd009d17 	ldw	r20,628(sp)
80083d6c:	40800017 	ldw	r2,0(r8)
80083d70:	42000104 	addi	r8,r8,4
80083d74:	da009c15 	stw	r8,624(sp)
80083d78:	14800015 	stw	r18,0(r2)
80083d7c:	10c00115 	stw	r3,4(r2)
80083d80:	003da806 	br	80083424 <__ssvfscanf_r+0xec>
80083d84:	da009c17 	ldw	r8,624(sp)
80083d88:	dd009d17 	ldw	r20,628(sp)
80083d8c:	40800017 	ldw	r2,0(r8)
80083d90:	42000104 	addi	r8,r8,4
80083d94:	da009c15 	stw	r8,624(sp)
80083d98:	14800015 	stw	r18,0(r2)
80083d9c:	003da106 	br	80083424 <__ssvfscanf_r+0xec>
80083da0:	e00b883a 	mov	r5,fp
80083da4:	b009883a 	mov	r4,r22
80083da8:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083dac:	103f9e1e 	bne	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
80083db0:	b9c00017 	ldw	r7,0(r23)
80083db4:	05000104 	movi	r20,4
80083db8:	003e6306 	br	80083748 <__ssvfscanf_r+0x410>
80083dbc:	e00b883a 	mov	r5,fp
80083dc0:	b009883a 	mov	r4,r22
80083dc4:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083dc8:	103f971e 	bne	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
80083dcc:	b9c00017 	ldw	r7,0(r23)
80083dd0:	003e5706 	br	80083730 <__ssvfscanf_r+0x3f8>
80083dd4:	e00b883a 	mov	r5,fp
80083dd8:	b009883a 	mov	r4,r22
80083ddc:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083de0:	103f911e 	bne	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
80083de4:	b9c00017 	ldw	r7,0(r23)
80083de8:	05000084 	movi	r20,2
80083dec:	003e5606 	br	80083748 <__ssvfscanf_r+0x410>
80083df0:	e00b883a 	mov	r5,fp
80083df4:	b009883a 	mov	r4,r22
80083df8:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083dfc:	103ef726 	beq	r2,zero,800839dc <__ssvfscanf_r+0x6a4>
80083e00:	003f8906 	br	80083c28 <__ssvfscanf_r+0x8f0>
80083e04:	e00b883a 	mov	r5,fp
80083e08:	b009883a 	mov	r4,r22
80083e0c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80083e10:	103f851e 	bne	r2,zero,80083c28 <__ssvfscanf_r+0x8f0>
80083e14:	b9c00017 	ldw	r7,0(r23)
80083e18:	003f0f06 	br	80083a58 <__ssvfscanf_r+0x720>
80083e1c:	014000c4 	movi	r5,3
80083e20:	a1414a26 	beq	r20,r5,8008434c <__ssvfscanf_r+0x1014>
80083e24:	01000104 	movi	r4,4
80083e28:	a101f11e 	bne	r20,r4,800845f0 <__ssvfscanf_r+0x12b8>
80083e2c:	b009883a 	mov	r4,r22
80083e30:	00899f00 	call	800899f0 <_localeconv_r>
80083e34:	10800017 	ldw	r2,0(r2)
80083e38:	98ffffc4 	addi	r3,r19,-1
80083e3c:	d880a315 	stw	r2,652(sp)
80083e40:	00805704 	movi	r2,348
80083e44:	10c21e2e 	bgeu	r2,r3,800846c0 <__ssvfscanf_r+0x1388>
80083e48:	9cffa8c4 	addi	r19,r19,-349
80083e4c:	dcc0a215 	stw	r19,648(sp)
80083e50:	04c05744 	movi	r19,349
80083e54:	8d01e014 	ori	r20,r17,1920
80083e58:	0023883a 	mov	r17,zero
80083e5c:	dc000104 	addi	r16,sp,4
80083e60:	8805883a 	mov	r2,r17
80083e64:	0019883a 	mov	r12,zero
80083e68:	8023883a 	mov	r17,r16
80083e6c:	b007883a 	mov	r3,r22
80083e70:	9821883a 	mov	r16,r19
80083e74:	002b883a 	mov	r21,zero
80083e78:	d800a515 	stw	zero,660(sp)
80083e7c:	d800a415 	stw	zero,656(sp)
80083e80:	d8009f15 	stw	zero,636(sp)
80083e84:	01c01384 	movi	r7,78
80083e88:	602d883a 	mov	r22,r12
80083e8c:	1027883a 	mov	r19,r2
80083e90:	e1000017 	ldw	r4,0(fp)
80083e94:	21400003 	ldbu	r5,0(r4)
80083e98:	28bff544 	addi	r2,r5,-43
80083e9c:	10803fcc 	andi	r2,r2,255
80083ea0:	38810e36 	bltu	r7,r2,800842dc <__ssvfscanf_r+0xfa4>
80083ea4:	100490ba 	slli	r2,r2,2
80083ea8:	01a00234 	movhi	r6,32776
80083eac:	318faf04 	addi	r6,r6,16060
80083eb0:	1185883a 	add	r2,r2,r6
80083eb4:	10800017 	ldw	r2,0(r2)
80083eb8:	1000683a 	jmp	r2
80083ebc:	800841b4 	orhi	zero,r16,8454
80083ec0:	800842dc 	xori	zero,r16,8459
80083ec4:	800841b4 	orhi	zero,r16,8454
80083ec8:	800842dc 	xori	zero,r16,8459
80083ecc:	800842dc 	xori	zero,r16,8459
80083ed0:	80084188 	cmpgei	zero,r16,8454
80083ed4:	80083ff8 	rdprs	zero,r16,8447
80083ed8:	80083ff8 	rdprs	zero,r16,8447
80083edc:	80083ff8 	rdprs	zero,r16,8447
80083ee0:	80083ff8 	rdprs	zero,r16,8447
80083ee4:	80083ff8 	rdprs	zero,r16,8447
80083ee8:	80083ff8 	rdprs	zero,r16,8447
80083eec:	80083ff8 	rdprs	zero,r16,8447
80083ef0:	80083ff8 	rdprs	zero,r16,8447
80083ef4:	80083ff8 	rdprs	zero,r16,8447
80083ef8:	800842dc 	xori	zero,r16,8459
80083efc:	800842dc 	xori	zero,r16,8459
80083f00:	800842dc 	xori	zero,r16,8459
80083f04:	800842dc 	xori	zero,r16,8459
80083f08:	800842dc 	xori	zero,r16,8459
80083f0c:	800842dc 	xori	zero,r16,8459
80083f10:	800842dc 	xori	zero,r16,8459
80083f14:	800842cc 	andi	zero,r16,8459
80083f18:	800842dc 	xori	zero,r16,8459
80083f1c:	800842dc 	xori	zero,r16,8459
80083f20:	800842dc 	xori	zero,r16,8459
80083f24:	80084288 	cmpgei	zero,r16,8458
80083f28:	8008426c 	andhi	zero,r16,8457
80083f2c:	800842dc 	xori	zero,r16,8459
80083f30:	800842dc 	xori	zero,r16,8459
80083f34:	80084238 	rdprs	zero,r16,8456
80083f38:	800842dc 	xori	zero,r16,8459
80083f3c:	800842dc 	xori	zero,r16,8459
80083f40:	800842dc 	xori	zero,r16,8459
80083f44:	800842dc 	xori	zero,r16,8459
80083f48:	80084200 	call	88008420 <__alt_data_end+0x7f0b420>
80083f4c:	800842dc 	xori	zero,r16,8459
80083f50:	800842dc 	xori	zero,r16,8459
80083f54:	800842dc 	xori	zero,r16,8459
80083f58:	800842dc 	xori	zero,r16,8459
80083f5c:	800842dc 	xori	zero,r16,8459
80083f60:	800841e4 	muli	zero,r16,8455
80083f64:	800842dc 	xori	zero,r16,8459
80083f68:	800842dc 	xori	zero,r16,8459
80083f6c:	800842dc 	xori	zero,r16,8459
80083f70:	800842dc 	xori	zero,r16,8459
80083f74:	800841c8 	cmpgei	zero,r16,8455
80083f78:	800842dc 	xori	zero,r16,8459
80083f7c:	800842dc 	xori	zero,r16,8459
80083f80:	800842dc 	xori	zero,r16,8459
80083f84:	800842dc 	xori	zero,r16,8459
80083f88:	800842dc 	xori	zero,r16,8459
80083f8c:	800842dc 	xori	zero,r16,8459
80083f90:	800842dc 	xori	zero,r16,8459
80083f94:	800842cc 	andi	zero,r16,8459
80083f98:	800842dc 	xori	zero,r16,8459
80083f9c:	800842dc 	xori	zero,r16,8459
80083fa0:	800842dc 	xori	zero,r16,8459
80083fa4:	80084288 	cmpgei	zero,r16,8458
80083fa8:	8008426c 	andhi	zero,r16,8457
80083fac:	800842dc 	xori	zero,r16,8459
80083fb0:	800842dc 	xori	zero,r16,8459
80083fb4:	80084238 	rdprs	zero,r16,8456
80083fb8:	800842dc 	xori	zero,r16,8459
80083fbc:	800842dc 	xori	zero,r16,8459
80083fc0:	800842dc 	xori	zero,r16,8459
80083fc4:	800842dc 	xori	zero,r16,8459
80083fc8:	80084200 	call	88008420 <__alt_data_end+0x7f0b420>
80083fcc:	800842dc 	xori	zero,r16,8459
80083fd0:	800842dc 	xori	zero,r16,8459
80083fd4:	800842dc 	xori	zero,r16,8459
80083fd8:	800842dc 	xori	zero,r16,8459
80083fdc:	800842dc 	xori	zero,r16,8459
80083fe0:	800841e4 	muli	zero,r16,8455
80083fe4:	800842dc 	xori	zero,r16,8459
80083fe8:	800842dc 	xori	zero,r16,8459
80083fec:	800842dc 	xori	zero,r16,8459
80083ff0:	800842dc 	xori	zero,r16,8459
80083ff4:	800841c8 	cmpgei	zero,r16,8455
80083ff8:	a8803fcc 	andi	r2,r21,255
80083ffc:	1080201c 	xori	r2,r2,128
80084000:	10bfe004 	addi	r2,r2,-128
80084004:	b085883a 	add	r2,r22,r2
80084008:	10000d1e 	bne	r2,zero,80084040 <__ssvfscanf_r+0xd08>
8008400c:	00bf9fc4 	movi	r2,-385
80084010:	a0a8703a 	and	r20,r20,r2
80084014:	89400005 	stb	r5,0(r17)
80084018:	8c400044 	addi	r17,r17,1
8008401c:	e0800117 	ldw	r2,4(fp)
80084020:	843fffc4 	addi	r16,r16,-1
80084024:	94800044 	addi	r18,r18,1
80084028:	10bfffc4 	addi	r2,r2,-1
8008402c:	e0800115 	stw	r2,4(fp)
80084030:	0080b40e 	bge	zero,r2,80084304 <__ssvfscanf_r+0xfcc>
80084034:	21000044 	addi	r4,r4,1
80084038:	e1000015 	stw	r4,0(fp)
8008403c:	803f941e 	bne	r16,zero,80083e90 <__ssvfscanf_r+0xb58>
80084040:	8821883a 	mov	r16,r17
80084044:	b019883a 	mov	r12,r22
80084048:	9823883a 	mov	r17,r19
8008404c:	182d883a 	mov	r22,r3
80084050:	9801961e 	bne	r19,zero,800846ac <__ssvfscanf_r+0x1374>
80084054:	633fffc4 	addi	r12,r12,-1
80084058:	00800044 	movi	r2,1
8008405c:	1302882e 	bgeu	r2,r12,80084a80 <__ssvfscanf_r+0x1748>
80084060:	a8803fcc 	andi	r2,r21,255
80084064:	1080201c 	xori	r2,r2,128
80084068:	10bfe004 	addi	r2,r2,-128
8008406c:	113fffc4 	addi	r4,r2,-1
80084070:	01400184 	movi	r5,6
80084074:	29001136 	bltu	r5,r4,800840bc <__ssvfscanf_r+0xd84>
80084078:	01000084 	movi	r4,2
8008407c:	2082900e 	bge	r4,r2,80084ac0 <__ssvfscanf_r+0x1788>
80084080:	00c000c4 	movi	r3,3
80084084:	10c00d26 	beq	r2,r3,800840bc <__ssvfscanf_r+0xd84>
80084088:	9425c83a 	sub	r18,r18,r16
8008408c:	1827883a 	mov	r19,r3
80084090:	843fffc4 	addi	r16,r16,-1
80084094:	81400007 	ldb	r5,0(r16)
80084098:	e00d883a 	mov	r6,fp
8008409c:	b009883a 	mov	r4,r22
800840a0:	008dfb40 	call	8008dfb4 <_sungetc_r>
800840a4:	a8bfffc4 	addi	r2,r21,-1
800840a8:	10c03fcc 	andi	r3,r2,255
800840ac:	8493883a 	add	r9,r16,r18
800840b0:	102b883a 	mov	r21,r2
800840b4:	98fff636 	bltu	r19,r3,80084090 <__ssvfscanf_r+0xd58>
800840b8:	4825883a 	mov	r18,r9
800840bc:	a080400c 	andi	r2,r20,256
800840c0:	10001426 	beq	r2,zero,80084114 <__ssvfscanf_r+0xddc>
800840c4:	a081000c 	andi	r2,r20,1024
800840c8:	1002571e 	bne	r2,zero,80084a28 <__ssvfscanf_r+0x16f0>
800840cc:	817fffc7 	ldb	r5,-1(r16)
800840d0:	00801944 	movi	r2,101
800840d4:	84ffffc4 	addi	r19,r16,-1
800840d8:	957fffc4 	addi	r21,r18,-1
800840dc:	28800826 	beq	r5,r2,80084100 <__ssvfscanf_r+0xdc8>
800840e0:	00801144 	movi	r2,69
800840e4:	28800626 	beq	r5,r2,80084100 <__ssvfscanf_r+0xdc8>
800840e8:	e00d883a 	mov	r6,fp
800840ec:	b009883a 	mov	r4,r22
800840f0:	008dfb40 	call	8008dfb4 <_sungetc_r>
800840f4:	817fff87 	ldb	r5,-2(r16)
800840f8:	84ffff84 	addi	r19,r16,-2
800840fc:	957fff84 	addi	r21,r18,-2
80084100:	e00d883a 	mov	r6,fp
80084104:	b009883a 	mov	r4,r22
80084108:	008dfb40 	call	8008dfb4 <_sungetc_r>
8008410c:	a825883a 	mov	r18,r21
80084110:	9821883a 	mov	r16,r19
80084114:	a080040c 	andi	r2,r20,16
80084118:	103e891e 	bne	r2,zero,80083b40 <__ssvfscanf_r+0x808>
8008411c:	80000005 	stb	zero,0(r16)
80084120:	a081800c 	andi	r2,r20,1536
80084124:	01010004 	movi	r4,1024
80084128:	1101dd26 	beq	r2,r4,800848a0 <__ssvfscanf_r+0x1568>
8008412c:	da00a417 	ldw	r8,656(sp)
80084130:	4001e71e 	bne	r8,zero,800848d0 <__ssvfscanf_r+0x1598>
80084134:	000d883a 	mov	r6,zero
80084138:	d9400104 	addi	r5,sp,4
8008413c:	b009883a 	mov	r4,r22
80084140:	008be300 	call	8008be30 <_strtod_r>
80084144:	1021883a 	mov	r16,r2
80084148:	a080004c 	andi	r2,r20,1
8008414c:	1000021e 	bne	r2,zero,80084158 <__ssvfscanf_r+0xe20>
80084150:	a2c0008c 	andi	r11,r20,2
80084154:	5801e826 	beq	r11,zero,800848f8 <__ssvfscanf_r+0x15c0>
80084158:	da009c17 	ldw	r8,624(sp)
8008415c:	40800017 	ldw	r2,0(r8)
80084160:	42000104 	addi	r8,r8,4
80084164:	da009c15 	stw	r8,624(sp)
80084168:	14000015 	stw	r16,0(r2)
8008416c:	10c00115 	stw	r3,4(r2)
80084170:	da00a017 	ldw	r8,640(sp)
80084174:	dd009d17 	ldw	r20,628(sp)
80084178:	42000044 	addi	r8,r8,1
8008417c:	da00a015 	stw	r8,640(sp)
80084180:	a00d883a 	mov	r6,r20
80084184:	003ca806 	br	80083428 <__ssvfscanf_r+0xf0>
80084188:	a080400c 	andi	r2,r20,256
8008418c:	103f9a26 	beq	r2,zero,80083ff8 <__ssvfscanf_r+0xcc0>
80084190:	da00a217 	ldw	r8,648(sp)
80084194:	00bfdfc4 	movi	r2,-129
80084198:	a0a8703a 	and	r20,r20,r2
8008419c:	9cc00044 	addi	r19,r19,1
800841a0:	403f9e26 	beq	r8,zero,8008401c <__ssvfscanf_r+0xce4>
800841a4:	423fffc4 	addi	r8,r8,-1
800841a8:	da00a215 	stw	r8,648(sp)
800841ac:	84000044 	addi	r16,r16,1
800841b0:	003f9a06 	br	8008401c <__ssvfscanf_r+0xce4>
800841b4:	a080200c 	andi	r2,r20,128
800841b8:	103fa126 	beq	r2,zero,80084040 <__ssvfscanf_r+0xd08>
800841bc:	00bfdfc4 	movi	r2,-129
800841c0:	a0a8703a 	and	r20,r20,r2
800841c4:	003f9306 	br	80084014 <__ssvfscanf_r+0xcdc>
800841c8:	a8803fcc 	andi	r2,r21,255
800841cc:	1080201c 	xori	r2,r2,128
800841d0:	10bfe004 	addi	r2,r2,-128
800841d4:	020001c4 	movi	r8,7
800841d8:	123f991e 	bne	r2,r8,80084040 <__ssvfscanf_r+0xd08>
800841dc:	05400204 	movi	r21,8
800841e0:	003f8c06 	br	80084014 <__ssvfscanf_r+0xcdc>
800841e4:	a8803fcc 	andi	r2,r21,255
800841e8:	1080201c 	xori	r2,r2,128
800841ec:	10bfe004 	addi	r2,r2,-128
800841f0:	01800184 	movi	r6,6
800841f4:	11bf921e 	bne	r2,r6,80084040 <__ssvfscanf_r+0xd08>
800841f8:	054001c4 	movi	r21,7
800841fc:	003f8506 	br	80084014 <__ssvfscanf_r+0xcdc>
80084200:	b000491e 	bne	r22,zero,80084328 <__ssvfscanf_r+0xff0>
80084204:	9800031e 	bne	r19,zero,80084214 <__ssvfscanf_r+0xedc>
80084208:	a081c00c 	andi	r2,r20,1792
8008420c:	0181c004 	movi	r6,1792
80084210:	11819f26 	beq	r2,r6,80084890 <__ssvfscanf_r+0x1558>
80084214:	a8803fcc 	andi	r2,r21,255
80084218:	1080201c 	xori	r2,r2,128
8008421c:	10bfe004 	addi	r2,r2,-128
80084220:	01800044 	movi	r6,1
80084224:	11800226 	beq	r2,r6,80084230 <__ssvfscanf_r+0xef8>
80084228:	01800104 	movi	r6,4
8008422c:	11bf841e 	bne	r2,r6,80084040 <__ssvfscanf_r+0xd08>
80084230:	ad400044 	addi	r21,r21,1
80084234:	003f7706 	br	80084014 <__ssvfscanf_r+0xcdc>
80084238:	a8803fcc 	andi	r2,r21,255
8008423c:	1080201c 	xori	r2,r2,128
80084240:	10bfe004 	addi	r2,r2,-128
80084244:	10003c1e 	bne	r2,zero,80084338 <__ssvfscanf_r+0x1000>
80084248:	9801141e 	bne	r19,zero,8008469c <__ssvfscanf_r+0x1364>
8008424c:	a081c00c 	andi	r2,r20,1792
80084250:	0181c004 	movi	r6,1792
80084254:	11818226 	beq	r2,r6,80084860 <__ssvfscanf_r+0x1528>
80084258:	8821883a 	mov	r16,r17
8008425c:	b019883a 	mov	r12,r22
80084260:	9823883a 	mov	r17,r19
80084264:	182d883a 	mov	r22,r3
80084268:	003f7a06 	br	80084054 <__ssvfscanf_r+0xd1c>
8008426c:	a8803fcc 	andi	r2,r21,255
80084270:	1080201c 	xori	r2,r2,128
80084274:	10bfe004 	addi	r2,r2,-128
80084278:	01800084 	movi	r6,2
8008427c:	11bf701e 	bne	r2,r6,80084040 <__ssvfscanf_r+0xd08>
80084280:	054000c4 	movi	r21,3
80084284:	003f6306 	br	80084014 <__ssvfscanf_r+0xcdc>
80084288:	a081400c 	andi	r2,r20,1280
8008428c:	01810004 	movi	r6,1024
80084290:	11800326 	beq	r2,r6,800842a0 <__ssvfscanf_r+0xf68>
80084294:	a184703a 	and	r2,r20,r6
80084298:	103f6926 	beq	r2,zero,80084040 <__ssvfscanf_r+0xd08>
8008429c:	983fee26 	beq	r19,zero,80084258 <__ssvfscanf_r+0xf20>
800842a0:	a080800c 	andi	r2,r20,512
800842a4:	1000041e 	bne	r2,zero,800842b8 <__ssvfscanf_r+0xf80>
800842a8:	da009f17 	ldw	r8,636(sp)
800842ac:	dc40a515 	stw	r17,660(sp)
800842b0:	9a27c83a 	sub	r19,r19,r8
800842b4:	dcc0a415 	stw	r19,656(sp)
800842b8:	00be1fc4 	movi	r2,-1921
800842bc:	a0a8703a 	and	r20,r20,r2
800842c0:	a5006014 	ori	r20,r20,384
800842c4:	0027883a 	mov	r19,zero
800842c8:	003f5206 	br	80084014 <__ssvfscanf_r+0xcdc>
800842cc:	00800044 	movi	r2,1
800842d0:	b0bf5b1e 	bne	r22,r2,80084040 <__ssvfscanf_r+0xd08>
800842d4:	05800084 	movi	r22,2
800842d8:	003f4e06 	br	80084014 <__ssvfscanf_r+0xcdc>
800842dc:	d980a317 	ldw	r6,652(sp)
800842e0:	30800003 	ldbu	r2,0(r6)
800842e4:	29803fcc 	andi	r6,r5,255
800842e8:	30bf551e 	bne	r6,r2,80084040 <__ssvfscanf_r+0xd08>
800842ec:	a080800c 	andi	r2,r20,512
800842f0:	103f5326 	beq	r2,zero,80084040 <__ssvfscanf_r+0xd08>
800842f4:	023f5fc4 	movi	r8,-641
800842f8:	a228703a 	and	r20,r20,r8
800842fc:	dcc09f15 	stw	r19,636(sp)
80084300:	003f4406 	br	80084014 <__ssvfscanf_r+0xcdc>
80084304:	1809883a 	mov	r4,r3
80084308:	e00b883a 	mov	r5,fp
8008430c:	d8c0a615 	stw	r3,664(sp)
80084310:	d9c0aa15 	stw	r7,680(sp)
80084314:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80084318:	d8c0a617 	ldw	r3,664(sp)
8008431c:	d9c0aa17 	ldw	r7,680(sp)
80084320:	103f4626 	beq	r2,zero,8008403c <__ssvfscanf_r+0xd04>
80084324:	003f4606 	br	80084040 <__ssvfscanf_r+0xd08>
80084328:	00800084 	movi	r2,2
8008432c:	b0bfb91e 	bne	r22,r2,80084214 <__ssvfscanf_r+0xedc>
80084330:	058000c4 	movi	r22,3
80084334:	003f3706 	br	80084014 <__ssvfscanf_r+0xcdc>
80084338:	018000c4 	movi	r6,3
8008433c:	11bfbc26 	beq	r2,r6,80084230 <__ssvfscanf_r+0xef8>
80084340:	01800144 	movi	r6,5
80084344:	11bfba26 	beq	r2,r6,80084230 <__ssvfscanf_r+0xef8>
80084348:	003f3d06 	br	80084040 <__ssvfscanf_r+0xd08>
8008434c:	98bfffc4 	addi	r2,r19,-1
80084350:	01405704 	movi	r5,348
80084354:	2880d82e 	bgeu	r5,r2,800846b8 <__ssvfscanf_r+0x1380>
80084358:	99ffa8c4 	addi	r7,r19,-349
8008435c:	04c05744 	movi	r19,349
80084360:	8c436014 	ori	r17,r17,3456
80084364:	9013883a 	mov	r9,r18
80084368:	8825883a 	mov	r18,r17
8008436c:	dc409e17 	ldw	r17,632(sp)
80084370:	0029883a 	mov	r20,zero
80084374:	dc000104 	addi	r16,sp,4
80084378:	05401344 	movi	r21,77
8008437c:	02c08004 	movi	r11,512
80084380:	01bf7fc4 	movi	r6,-513
80084384:	023fdfc4 	movi	r8,-129
80084388:	20bff544 	addi	r2,r4,-43
8008438c:	10803fcc 	andi	r2,r2,255
80084390:	a8807236 	bltu	r21,r2,8008455c <__ssvfscanf_r+0x1224>
80084394:	100490ba 	slli	r2,r2,2
80084398:	01600234 	movhi	r5,32776
8008439c:	2950eb04 	addi	r5,r5,17324
800843a0:	1145883a 	add	r2,r2,r5
800843a4:	10800017 	ldw	r2,0(r2)
800843a8:	1000683a 	jmp	r2
800843ac:	800845e0 	cmpeqi	zero,r16,8471
800843b0:	8008455c 	xori	zero,r16,8469
800843b4:	800845e0 	cmpeqi	zero,r16,8471
800843b8:	8008455c 	xori	zero,r16,8469
800843bc:	8008455c 	xori	zero,r16,8469
800843c0:	800845b8 	rdprs	zero,r16,8470
800843c4:	80084598 	cmpnei	zero,r16,8470
800843c8:	80084598 	cmpnei	zero,r16,8470
800843cc:	80084598 	cmpnei	zero,r16,8470
800843d0:	80084598 	cmpnei	zero,r16,8470
800843d4:	80084598 	cmpnei	zero,r16,8470
800843d8:	80084598 	cmpnei	zero,r16,8470
800843dc:	80084598 	cmpnei	zero,r16,8470
800843e0:	80084540 	call	88008454 <__alt_data_end+0x7f0b454>
800843e4:	80084540 	call	88008454 <__alt_data_end+0x7f0b454>
800843e8:	8008455c 	xori	zero,r16,8469
800843ec:	8008455c 	xori	zero,r16,8469
800843f0:	8008455c 	xori	zero,r16,8469
800843f4:	8008455c 	xori	zero,r16,8469
800843f8:	8008455c 	xori	zero,r16,8469
800843fc:	8008455c 	xori	zero,r16,8469
80084400:	8008455c 	xori	zero,r16,8469
80084404:	8008452c 	andhi	zero,r16,8468
80084408:	8008452c 	andhi	zero,r16,8468
8008440c:	8008452c 	andhi	zero,r16,8468
80084410:	8008452c 	andhi	zero,r16,8468
80084414:	8008452c 	andhi	zero,r16,8468
80084418:	8008452c 	andhi	zero,r16,8468
8008441c:	8008455c 	xori	zero,r16,8469
80084420:	8008455c 	xori	zero,r16,8469
80084424:	8008455c 	xori	zero,r16,8469
80084428:	8008455c 	xori	zero,r16,8469
8008442c:	8008455c 	xori	zero,r16,8469
80084430:	8008455c 	xori	zero,r16,8469
80084434:	8008455c 	xori	zero,r16,8469
80084438:	8008455c 	xori	zero,r16,8469
8008443c:	8008455c 	xori	zero,r16,8469
80084440:	8008455c 	xori	zero,r16,8469
80084444:	8008455c 	xori	zero,r16,8469
80084448:	8008455c 	xori	zero,r16,8469
8008444c:	8008455c 	xori	zero,r16,8469
80084450:	8008455c 	xori	zero,r16,8469
80084454:	8008455c 	xori	zero,r16,8469
80084458:	8008455c 	xori	zero,r16,8469
8008445c:	8008455c 	xori	zero,r16,8469
80084460:	800844e4 	muli	zero,r16,8467
80084464:	8008455c 	xori	zero,r16,8469
80084468:	8008455c 	xori	zero,r16,8469
8008446c:	8008455c 	xori	zero,r16,8469
80084470:	8008455c 	xori	zero,r16,8469
80084474:	8008455c 	xori	zero,r16,8469
80084478:	8008455c 	xori	zero,r16,8469
8008447c:	8008455c 	xori	zero,r16,8469
80084480:	8008455c 	xori	zero,r16,8469
80084484:	8008452c 	andhi	zero,r16,8468
80084488:	8008452c 	andhi	zero,r16,8468
8008448c:	8008452c 	andhi	zero,r16,8468
80084490:	8008452c 	andhi	zero,r16,8468
80084494:	8008452c 	andhi	zero,r16,8468
80084498:	8008452c 	andhi	zero,r16,8468
8008449c:	8008455c 	xori	zero,r16,8469
800844a0:	8008455c 	xori	zero,r16,8469
800844a4:	8008455c 	xori	zero,r16,8469
800844a8:	8008455c 	xori	zero,r16,8469
800844ac:	8008455c 	xori	zero,r16,8469
800844b0:	8008455c 	xori	zero,r16,8469
800844b4:	8008455c 	xori	zero,r16,8469
800844b8:	8008455c 	xori	zero,r16,8469
800844bc:	8008455c 	xori	zero,r16,8469
800844c0:	8008455c 	xori	zero,r16,8469
800844c4:	8008455c 	xori	zero,r16,8469
800844c8:	8008455c 	xori	zero,r16,8469
800844cc:	8008455c 	xori	zero,r16,8469
800844d0:	8008455c 	xori	zero,r16,8469
800844d4:	8008455c 	xori	zero,r16,8469
800844d8:	8008455c 	xori	zero,r16,8469
800844dc:	8008455c 	xori	zero,r16,8469
800844e0:	800844e4 	muli	zero,r16,8467
800844e4:	9081800c 	andi	r2,r18,1536
800844e8:	12c01c1e 	bne	r2,r11,8008455c <__ssvfscanf_r+0x1224>
800844ec:	91a4703a 	and	r18,r18,r6
800844f0:	94814014 	ori	r18,r18,1280
800844f4:	04400404 	movi	r17,16
800844f8:	81000005 	stb	r4,0(r16)
800844fc:	84000044 	addi	r16,r16,1
80084500:	e0800117 	ldw	r2,4(fp)
80084504:	10bfffc4 	addi	r2,r2,-1
80084508:	e0800115 	stw	r2,4(fp)
8008450c:	0080540e 	bge	zero,r2,80084660 <__ssvfscanf_r+0x1328>
80084510:	18c00044 	addi	r3,r3,1
80084514:	e0c00015 	stw	r3,0(fp)
80084518:	9cffffc4 	addi	r19,r19,-1
8008451c:	98000f26 	beq	r19,zero,8008455c <__ssvfscanf_r+0x1224>
80084520:	e0c00017 	ldw	r3,0(fp)
80084524:	19000003 	ldbu	r4,0(r3)
80084528:	003f9706 	br	80084388 <__ssvfscanf_r+0x1050>
8008452c:	00800284 	movi	r2,10
80084530:	14400a0e 	bge	r2,r17,8008455c <__ssvfscanf_r+0x1224>
80084534:	00bd1fc4 	movi	r2,-2945
80084538:	90a4703a 	and	r18,r18,r2
8008453c:	003fee06 	br	800844f8 <__ssvfscanf_r+0x11c0>
80084540:	016002b4 	movhi	r5,32778
80084544:	8c63883a 	add	r17,r17,r17
80084548:	2970b284 	addi	r5,r5,-15670
8008454c:	2c45883a 	add	r2,r5,r17
80084550:	1440000f 	ldh	r17,0(r2)
80084554:	00800204 	movi	r2,8
80084558:	147ff616 	blt	r2,r17,80084534 <__ssvfscanf_r+0x11fc>
8008455c:	dc409e15 	stw	r17,632(sp)
80084560:	9023883a 	mov	r17,r18
80084564:	8880400c 	andi	r2,r17,256
80084568:	4825883a 	mov	r18,r9
8008456c:	10000426 	beq	r2,zero,80084580 <__ssvfscanf_r+0x1248>
80084570:	d9800104 	addi	r6,sp,4
80084574:	3400be36 	bltu	r6,r16,80084870 <__ssvfscanf_r+0x1538>
80084578:	da000104 	addi	r8,sp,4
8008457c:	443bae26 	beq	r8,r16,80083438 <__ssvfscanf_r+0x100>
80084580:	8880040c 	andi	r2,r17,16
80084584:	10009326 	beq	r2,zero,800847d4 <__ssvfscanf_r+0x149c>
80084588:	d8800104 	addi	r2,sp,4
8008458c:	80a1c83a 	sub	r16,r16,r2
80084590:	8521883a 	add	r16,r16,r20
80084594:	003d0606 	br	800839b0 <__ssvfscanf_r+0x678>
80084598:	016002b4 	movhi	r5,32778
8008459c:	8c63883a 	add	r17,r17,r17
800845a0:	2970b284 	addi	r5,r5,-15670
800845a4:	2c45883a 	add	r2,r5,r17
800845a8:	1440000f 	ldh	r17,0(r2)
800845ac:	00bd1fc4 	movi	r2,-2945
800845b0:	90a4703a 	and	r18,r18,r2
800845b4:	003fd006 	br	800844f8 <__ssvfscanf_r+0x11c0>
800845b8:	9082000c 	andi	r2,r18,2048
800845bc:	103fce26 	beq	r2,zero,800844f8 <__ssvfscanf_r+0x11c0>
800845c0:	8800021e 	bne	r17,zero,800845cc <__ssvfscanf_r+0x1294>
800845c4:	94808014 	ori	r18,r18,512
800845c8:	04400204 	movi	r17,8
800845cc:	9081000c 	andi	r2,r18,1024
800845d0:	10009426 	beq	r2,zero,80084824 <__ssvfscanf_r+0x14ec>
800845d4:	00be9fc4 	movi	r2,-1409
800845d8:	90a4703a 	and	r18,r18,r2
800845dc:	003fc606 	br	800844f8 <__ssvfscanf_r+0x11c0>
800845e0:	9080200c 	andi	r2,r18,128
800845e4:	103fdd26 	beq	r2,zero,8008455c <__ssvfscanf_r+0x1224>
800845e8:	9224703a 	and	r18,r18,r8
800845ec:	003fc206 	br	800844f8 <__ssvfscanf_r+0x11c0>
800845f0:	9800011e 	bne	r19,zero,800845f8 <__ssvfscanf_r+0x12c0>
800845f4:	04ffffc4 	movi	r19,-1
800845f8:	8900004c 	andi	r4,r17,1
800845fc:	20005b1e 	bne	r4,zero,8008476c <__ssvfscanf_r+0x1434>
80084600:	8c40040c 	andi	r17,r17,16
80084604:	88003026 	beq	r17,zero,800846c8 <__ssvfscanf_r+0x1390>
80084608:	0021883a 	mov	r16,zero
8008460c:	00000306 	br	8008461c <__ssvfscanf_r+0x12e4>
80084610:	18800003 	ldbu	r2,0(r3)
80084614:	3885883a 	add	r2,r7,r2
80084618:	10800043 	ldbu	r2,1(r2)
8008461c:	1080020c 	andi	r2,r2,8
80084620:	103ce31e 	bne	r2,zero,800839b0 <__ssvfscanf_r+0x678>
80084624:	e0800117 	ldw	r2,4(fp)
80084628:	18c00044 	addi	r3,r3,1
8008462c:	84000044 	addi	r16,r16,1
80084630:	10bfffc4 	addi	r2,r2,-1
80084634:	e0800115 	stw	r2,4(fp)
80084638:	e0c00015 	stw	r3,0(fp)
8008463c:	84fcdc26 	beq	r16,r19,800839b0 <__ssvfscanf_r+0x678>
80084640:	00bff316 	blt	zero,r2,80084610 <__ssvfscanf_r+0x12d8>
80084644:	e00b883a 	mov	r5,fp
80084648:	b009883a 	mov	r4,r22
8008464c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80084650:	103cd71e 	bne	r2,zero,800839b0 <__ssvfscanf_r+0x678>
80084654:	b9c00017 	ldw	r7,0(r23)
80084658:	e0c00017 	ldw	r3,0(fp)
8008465c:	003fec06 	br	80084610 <__ssvfscanf_r+0x12d8>
80084660:	e00b883a 	mov	r5,fp
80084664:	b009883a 	mov	r4,r22
80084668:	d980a715 	stw	r6,668(sp)
8008466c:	d9c0aa15 	stw	r7,680(sp)
80084670:	da00a815 	stw	r8,672(sp)
80084674:	da40a915 	stw	r9,676(sp)
80084678:	dac0a615 	stw	r11,664(sp)
8008467c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80084680:	d980a717 	ldw	r6,668(sp)
80084684:	d9c0aa17 	ldw	r7,680(sp)
80084688:	da00a817 	ldw	r8,672(sp)
8008468c:	da40a917 	ldw	r9,676(sp)
80084690:	dac0a617 	ldw	r11,664(sp)
80084694:	103fa026 	beq	r2,zero,80084518 <__ssvfscanf_r+0x11e0>
80084698:	003fb006 	br	8008455c <__ssvfscanf_r+0x1224>
8008469c:	8821883a 	mov	r16,r17
800846a0:	b019883a 	mov	r12,r22
800846a4:	9823883a 	mov	r17,r19
800846a8:	182d883a 	mov	r22,r3
800846ac:	00bfbfc4 	movi	r2,-257
800846b0:	a0a8703a 	and	r20,r20,r2
800846b4:	003e6706 	br	80084054 <__ssvfscanf_r+0xd1c>
800846b8:	000f883a 	mov	r7,zero
800846bc:	003f2806 	br	80084360 <__ssvfscanf_r+0x1028>
800846c0:	d800a215 	stw	zero,648(sp)
800846c4:	003de306 	br	80083e54 <__ssvfscanf_r+0xb1c>
800846c8:	da009c17 	ldw	r8,624(sp)
800846cc:	9abfffc4 	addi	r10,r19,-1
800846d0:	44400017 	ldw	r17,0(r8)
800846d4:	44000104 	addi	r16,r8,4
800846d8:	880b883a 	mov	r5,r17
800846dc:	8aa9883a 	add	r20,r17,r10
800846e0:	00000606 	br	800846fc <__ssvfscanf_r+0x13c4>
800846e4:	e0c00017 	ldw	r3,0(fp)
800846e8:	b9000017 	ldw	r4,0(r23)
800846ec:	a80b883a 	mov	r5,r21
800846f0:	18800003 	ldbu	r2,0(r3)
800846f4:	2085883a 	add	r2,r4,r2
800846f8:	10800043 	ldbu	r2,1(r2)
800846fc:	1080020c 	andi	r2,r2,8
80084700:	1000551e 	bne	r2,zero,80084858 <__ssvfscanf_r+0x1520>
80084704:	e0800117 	ldw	r2,4(fp)
80084708:	19000044 	addi	r4,r3,1
8008470c:	e1000015 	stw	r4,0(fp)
80084710:	10bfffc4 	addi	r2,r2,-1
80084714:	e0800115 	stw	r2,4(fp)
80084718:	18800003 	ldbu	r2,0(r3)
8008471c:	2d400044 	addi	r21,r5,1
80084720:	a827883a 	mov	r19,r21
80084724:	28800005 	stb	r2,0(r5)
80084728:	2d000626 	beq	r5,r20,80084744 <__ssvfscanf_r+0x140c>
8008472c:	e0800117 	ldw	r2,4(fp)
80084730:	00bfec16 	blt	zero,r2,800846e4 <__ssvfscanf_r+0x13ac>
80084734:	e00b883a 	mov	r5,fp
80084738:	b009883a 	mov	r4,r22
8008473c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
80084740:	103fe826 	beq	r2,zero,800846e4 <__ssvfscanf_r+0x13ac>
80084744:	da00a017 	ldw	r8,640(sp)
80084748:	dd009d17 	ldw	r20,628(sp)
8008474c:	9c63c83a 	sub	r17,r19,r17
80084750:	42000044 	addi	r8,r8,1
80084754:	98000005 	stb	zero,0(r19)
80084758:	9465883a 	add	r18,r18,r17
8008475c:	da00a015 	stw	r8,640(sp)
80084760:	dc009c15 	stw	r16,624(sp)
80084764:	a00d883a 	mov	r6,r20
80084768:	003b2f06 	br	80083428 <__ssvfscanf_r+0xf0>
8008476c:	dd409904 	addi	r21,sp,612
80084770:	8c40040c 	andi	r17,r17,16
80084774:	01800204 	movi	r6,8
80084778:	000b883a 	mov	r5,zero
8008477c:	a809883a 	mov	r4,r21
80084780:	008a0a00 	call	8008a0a0 <memset>
80084784:	8800401e 	bne	r17,zero,80084888 <__ssvfscanf_r+0x1550>
80084788:	da009c17 	ldw	r8,624(sp)
8008478c:	45000017 	ldw	r20,0(r8)
80084790:	42000104 	addi	r8,r8,4
80084794:	da009c15 	stw	r8,624(sp)
80084798:	000d883a 	mov	r6,zero
8008479c:	3021883a 	mov	r16,r6
800847a0:	dc409f15 	stw	r17,636(sp)
800847a4:	e0800017 	ldw	r2,0(fp)
800847a8:	b8c00017 	ldw	r3,0(r23)
800847ac:	10800003 	ldbu	r2,0(r2)
800847b0:	1885883a 	add	r2,r3,r2
800847b4:	10800043 	ldbu	r2,1(r2)
800847b8:	1080020c 	andi	r2,r2,8
800847bc:	1000011e 	bne	r2,zero,800847c4 <__ssvfscanf_r+0x148c>
800847c0:	9800701e 	bne	r19,zero,80084984 <__ssvfscanf_r+0x164c>
800847c4:	dc409f17 	ldw	r17,636(sp)
800847c8:	883cdd1e 	bne	r17,zero,80083b40 <__ssvfscanf_r+0x808>
800847cc:	a0000015 	stw	zero,0(r20)
800847d0:	003cd806 	br	80083b34 <__ssvfscanf_r+0x7fc>
800847d4:	d9c09e17 	ldw	r7,632(sp)
800847d8:	da00a117 	ldw	r8,644(sp)
800847dc:	000d883a 	mov	r6,zero
800847e0:	d9400104 	addi	r5,sp,4
800847e4:	b009883a 	mov	r4,r22
800847e8:	80000005 	stb	zero,0(r16)
800847ec:	403ee83a 	callr	r8
800847f0:	88c0080c 	andi	r3,r17,32
800847f4:	1800121e 	bne	r3,zero,80084840 <__ssvfscanf_r+0x1508>
800847f8:	88c0010c 	andi	r3,r17,4
800847fc:	18004d26 	beq	r3,zero,80084934 <__ssvfscanf_r+0x15fc>
80084800:	da009c17 	ldw	r8,624(sp)
80084804:	40c00017 	ldw	r3,0(r8)
80084808:	42000104 	addi	r8,r8,4
8008480c:	da009c15 	stw	r8,624(sp)
80084810:	1880000d 	sth	r2,0(r3)
80084814:	da00a017 	ldw	r8,640(sp)
80084818:	42000044 	addi	r8,r8,1
8008481c:	da00a015 	stw	r8,640(sp)
80084820:	003f5906 	br	80084588 <__ssvfscanf_r+0x1250>
80084824:	00bf1fc4 	movi	r2,-897
80084828:	90a4703a 	and	r18,r18,r2
8008482c:	38000226 	beq	r7,zero,80084838 <__ssvfscanf_r+0x1500>
80084830:	39ffffc4 	addi	r7,r7,-1
80084834:	9cc00044 	addi	r19,r19,1
80084838:	a5000044 	addi	r20,r20,1
8008483c:	003f3006 	br	80084500 <__ssvfscanf_r+0x11c8>
80084840:	da009c17 	ldw	r8,624(sp)
80084844:	40c00017 	ldw	r3,0(r8)
80084848:	42000104 	addi	r8,r8,4
8008484c:	da009c15 	stw	r8,624(sp)
80084850:	18800015 	stw	r2,0(r3)
80084854:	003fef06 	br	80084814 <__ssvfscanf_r+0x14dc>
80084858:	2827883a 	mov	r19,r5
8008485c:	003fb906 	br	80084744 <__ssvfscanf_r+0x140c>
80084860:	01be1fc4 	movi	r6,-1921
80084864:	a1a8703a 	and	r20,r20,r6
80084868:	05400044 	movi	r21,1
8008486c:	003de906 	br	80084014 <__ssvfscanf_r+0xcdc>
80084870:	817fffc7 	ldb	r5,-1(r16)
80084874:	e00d883a 	mov	r6,fp
80084878:	b009883a 	mov	r4,r22
8008487c:	843fffc4 	addi	r16,r16,-1
80084880:	008dfb40 	call	8008dfb4 <_sungetc_r>
80084884:	003f3c06 	br	80084578 <__ssvfscanf_r+0x1240>
80084888:	dd009b04 	addi	r20,sp,620
8008488c:	003fc206 	br	80084798 <__ssvfscanf_r+0x1460>
80084890:	00be1fc4 	movi	r2,-1921
80084894:	a0a8703a 	and	r20,r20,r2
80084898:	05800044 	movi	r22,1
8008489c:	003ddd06 	br	80084014 <__ssvfscanf_r+0xcdc>
800848a0:	d8c09f17 	ldw	r3,636(sp)
800848a4:	88e3c83a 	sub	r17,r17,r3
800848a8:	044dc83a 	sub	r6,zero,r17
800848ac:	883e2126 	beq	r17,zero,80084134 <__ssvfscanf_r+0xdfc>
800848b0:	d88055c4 	addi	r2,sp,343
800848b4:	80800136 	bltu	r16,r2,800848bc <__ssvfscanf_r+0x1584>
800848b8:	dc005584 	addi	r16,sp,342
800848bc:	016002b4 	movhi	r5,32778
800848c0:	2970b104 	addi	r5,r5,-15676
800848c4:	8009883a 	mov	r4,r16
800848c8:	008bc840 	call	8008bc84 <sprintf>
800848cc:	003e1906 	br	80084134 <__ssvfscanf_r+0xdfc>
800848d0:	d8c0a517 	ldw	r3,660(sp)
800848d4:	000d883a 	mov	r6,zero
800848d8:	01c00284 	movi	r7,10
800848dc:	19400044 	addi	r5,r3,1
800848e0:	b009883a 	mov	r4,r22
800848e4:	008d5400 	call	8008d540 <_strtol_r>
800848e8:	da00a417 	ldw	r8,656(sp)
800848ec:	dc00a517 	ldw	r16,660(sp)
800848f0:	120dc83a 	sub	r6,r2,r8
800848f4:	003fee06 	br	800848b0 <__ssvfscanf_r+0x1578>
800848f8:	da009c17 	ldw	r8,624(sp)
800848fc:	180b883a 	mov	r5,r3
80084900:	8009883a 	mov	r4,r16
80084904:	45000017 	ldw	r20,0(r8)
80084908:	44400104 	addi	r17,r8,4
8008490c:	d8c0a615 	stw	r3,664(sp)
80084910:	008bae00 	call	8008bae0 <__fpclassifyd>
80084914:	d8c0a617 	ldw	r3,664(sp)
80084918:	10006426 	beq	r2,zero,80084aac <__ssvfscanf_r+0x1774>
8008491c:	8009883a 	mov	r4,r16
80084920:	180b883a 	mov	r5,r3
80084924:	00989000 	call	80098900 <__truncdfsf2>
80084928:	a0800015 	stw	r2,0(r20)
8008492c:	dc409c15 	stw	r17,624(sp)
80084930:	003e0f06 	br	80084170 <__ssvfscanf_r+0xe38>
80084934:	88c0004c 	andi	r3,r17,1
80084938:	183fc11e 	bne	r3,zero,80084840 <__ssvfscanf_r+0x1508>
8008493c:	8c40008c 	andi	r17,r17,2
80084940:	883fbf26 	beq	r17,zero,80084840 <__ssvfscanf_r+0x1508>
80084944:	da00a117 	ldw	r8,644(sp)
80084948:	00a00274 	movhi	r2,32777
8008494c:	10b69d04 	addi	r2,r2,-9612
80084950:	d9c09e17 	ldw	r7,632(sp)
80084954:	000d883a 	mov	r6,zero
80084958:	d9400104 	addi	r5,sp,4
8008495c:	b009883a 	mov	r4,r22
80084960:	40806226 	beq	r8,r2,80084aec <__ssvfscanf_r+0x17b4>
80084964:	008d7940 	call	8008d794 <_strtoll_r>
80084968:	da009c17 	ldw	r8,624(sp)
8008496c:	41000017 	ldw	r4,0(r8)
80084970:	42000104 	addi	r8,r8,4
80084974:	da009c15 	stw	r8,624(sp)
80084978:	20800015 	stw	r2,0(r4)
8008497c:	20c00115 	stw	r3,4(r4)
80084980:	003fa406 	br	80084814 <__ssvfscanf_r+0x14dc>
80084984:	00899cc0 	call	800899cc <__locale_mb_cur_max>
80084988:	80bca726 	beq	r16,r2,80083c28 <__ssvfscanf_r+0x8f0>
8008498c:	e0800017 	ldw	r2,0(fp)
80084990:	e1000117 	ldw	r4,4(fp)
80084994:	d8c00104 	addi	r3,sp,4
80084998:	12000003 	ldbu	r8,0(r2)
8008499c:	213fffc4 	addi	r4,r4,-1
800849a0:	10800044 	addi	r2,r2,1
800849a4:	e1000115 	stw	r4,4(fp)
800849a8:	e0800015 	stw	r2,0(fp)
800849ac:	84400044 	addi	r17,r16,1
800849b0:	dd400015 	stw	r21,0(sp)
800849b4:	1c21883a 	add	r16,r3,r16
800849b8:	b009883a 	mov	r4,r22
800849bc:	880f883a 	mov	r7,r17
800849c0:	180d883a 	mov	r6,r3
800849c4:	a00b883a 	mov	r5,r20
800849c8:	82000005 	stb	r8,0(r16)
800849cc:	0089c3c0 	call	80089c3c <_mbrtowc_r>
800849d0:	013fffc4 	movi	r4,-1
800849d4:	113c9426 	beq	r2,r4,80083c28 <__ssvfscanf_r+0x8f0>
800849d8:	103c881e 	bne	r2,zero,80083bfc <__ssvfscanf_r+0x8c4>
800849dc:	a0000015 	stw	zero,0(r20)
800849e0:	0009883a 	mov	r4,zero
800849e4:	00899140 	call	80089914 <iswspace>
800849e8:	10001a26 	beq	r2,zero,80084a54 <__ssvfscanf_r+0x171c>
800849ec:	8821883a 	mov	r16,r17
800849f0:	dc409f17 	ldw	r17,636(sp)
800849f4:	803f7426 	beq	r16,zero,800847c8 <__ssvfscanf_r+0x1490>
800849f8:	843fffc4 	addi	r16,r16,-1
800849fc:	d9800104 	addi	r6,sp,4
80084a00:	342b883a 	add	r21,r6,r16
80084a04:	00000106 	br	80084a0c <__ssvfscanf_r+0x16d4>
80084a08:	843fffc4 	addi	r16,r16,-1
80084a0c:	a9400003 	ldbu	r5,0(r21)
80084a10:	e00d883a 	mov	r6,fp
80084a14:	b009883a 	mov	r4,r22
80084a18:	008dfb40 	call	8008dfb4 <_sungetc_r>
80084a1c:	ad7fffc4 	addi	r21,r21,-1
80084a20:	803ff91e 	bne	r16,zero,80084a08 <__ssvfscanf_r+0x16d0>
80084a24:	003f6806 	br	800847c8 <__ssvfscanf_r+0x1490>
80084a28:	d9800104 	addi	r6,sp,4
80084a2c:	802b883a 	mov	r21,r16
80084a30:	343a812e 	bgeu	r6,r16,80083438 <__ssvfscanf_r+0x100>
80084a34:	ad7fffc4 	addi	r21,r21,-1
80084a38:	a9400007 	ldb	r5,0(r21)
80084a3c:	e00d883a 	mov	r6,fp
80084a40:	b009883a 	mov	r4,r22
80084a44:	008dfb40 	call	8008dfb4 <_sungetc_r>
80084a48:	da000104 	addi	r8,sp,4
80084a4c:	457ff91e 	bne	r8,r21,80084a34 <__ssvfscanf_r+0x16fc>
80084a50:	003a7906 	br	80083438 <__ssvfscanf_r+0x100>
80084a54:	da009f17 	ldw	r8,636(sp)
80084a58:	9465883a 	add	r18,r18,r17
80084a5c:	9cffffc4 	addi	r19,r19,-1
80084a60:	4000051e 	bne	r8,zero,80084a78 <__ssvfscanf_r+0x1740>
80084a64:	a5000104 	addi	r20,r20,4
80084a68:	0021883a 	mov	r16,zero
80084a6c:	003c6606 	br	80083c08 <__ssvfscanf_r+0x8d0>
80084a70:	a1000017 	ldw	r4,0(r20)
80084a74:	003fdb06 	br	800849e4 <__ssvfscanf_r+0x16ac>
80084a78:	0021883a 	mov	r16,zero
80084a7c:	003c6206 	br	80083c08 <__ssvfscanf_r+0x8d0>
80084a80:	d8800104 	addi	r2,sp,4
80084a84:	802b883a 	mov	r21,r16
80084a88:	143a6b2e 	bgeu	r2,r16,80083438 <__ssvfscanf_r+0x100>
80084a8c:	ad7fffc4 	addi	r21,r21,-1
80084a90:	a9400007 	ldb	r5,0(r21)
80084a94:	e00d883a 	mov	r6,fp
80084a98:	b009883a 	mov	r4,r22
80084a9c:	008dfb40 	call	8008dfb4 <_sungetc_r>
80084aa0:	d8c00104 	addi	r3,sp,4
80084aa4:	1d7ff91e 	bne	r3,r21,80084a8c <__ssvfscanf_r+0x1754>
80084aa8:	003a6306 	br	80083438 <__ssvfscanf_r+0x100>
80084aac:	0009883a 	mov	r4,zero
80084ab0:	008bc240 	call	8008bc24 <nanf>
80084ab4:	a0800015 	stw	r2,0(r20)
80084ab8:	dc409c15 	stw	r17,624(sp)
80084abc:	003dac06 	br	80084170 <__ssvfscanf_r+0xe38>
80084ac0:	d9000104 	addi	r4,sp,4
80084ac4:	802b883a 	mov	r21,r16
80084ac8:	243a5b2e 	bgeu	r4,r16,80083438 <__ssvfscanf_r+0x100>
80084acc:	ad7fffc4 	addi	r21,r21,-1
80084ad0:	a9400007 	ldb	r5,0(r21)
80084ad4:	e00d883a 	mov	r6,fp
80084ad8:	b009883a 	mov	r4,r22
80084adc:	008dfb40 	call	8008dfb4 <_sungetc_r>
80084ae0:	d9400104 	addi	r5,sp,4
80084ae4:	2d7ff91e 	bne	r5,r21,80084acc <__ssvfscanf_r+0x1794>
80084ae8:	003a5306 	br	80083438 <__ssvfscanf_r+0x100>
80084aec:	008dcdc0 	call	8008dcdc <_strtoull_r>
80084af0:	003f9d06 	br	80084968 <__ssvfscanf_r+0x1630>

80084af4 <___vfprintf_internal_r>:
80084af4:	deffb804 	addi	sp,sp,-288
80084af8:	dfc04715 	stw	ra,284(sp)
80084afc:	ddc04515 	stw	r23,276(sp)
80084b00:	dd404315 	stw	r21,268(sp)
80084b04:	d9002c15 	stw	r4,176(sp)
80084b08:	282f883a 	mov	r23,r5
80084b0c:	302b883a 	mov	r21,r6
80084b10:	d9c02d15 	stw	r7,180(sp)
80084b14:	df004615 	stw	fp,280(sp)
80084b18:	dd804415 	stw	r22,272(sp)
80084b1c:	dd004215 	stw	r20,264(sp)
80084b20:	dcc04115 	stw	r19,260(sp)
80084b24:	dc804015 	stw	r18,256(sp)
80084b28:	dc403f15 	stw	r17,252(sp)
80084b2c:	dc003e15 	stw	r16,248(sp)
80084b30:	00899f00 	call	800899f0 <_localeconv_r>
80084b34:	10800017 	ldw	r2,0(r2)
80084b38:	1009883a 	mov	r4,r2
80084b3c:	d8803415 	stw	r2,208(sp)
80084b40:	00832a00 	call	800832a0 <strlen>
80084b44:	d8803715 	stw	r2,220(sp)
80084b48:	d8802c17 	ldw	r2,176(sp)
80084b4c:	10000226 	beq	r2,zero,80084b58 <___vfprintf_internal_r+0x64>
80084b50:	10800e17 	ldw	r2,56(r2)
80084b54:	1000f926 	beq	r2,zero,80084f3c <___vfprintf_internal_r+0x448>
80084b58:	b880030b 	ldhu	r2,12(r23)
80084b5c:	10c8000c 	andi	r3,r2,8192
80084b60:	1800061e 	bne	r3,zero,80084b7c <___vfprintf_internal_r+0x88>
80084b64:	b9001917 	ldw	r4,100(r23)
80084b68:	00f7ffc4 	movi	r3,-8193
80084b6c:	10880014 	ori	r2,r2,8192
80084b70:	20c6703a 	and	r3,r4,r3
80084b74:	b880030d 	sth	r2,12(r23)
80084b78:	b8c01915 	stw	r3,100(r23)
80084b7c:	10c0020c 	andi	r3,r2,8
80084b80:	1800c126 	beq	r3,zero,80084e88 <___vfprintf_internal_r+0x394>
80084b84:	b8c00417 	ldw	r3,16(r23)
80084b88:	1800bf26 	beq	r3,zero,80084e88 <___vfprintf_internal_r+0x394>
80084b8c:	1080068c 	andi	r2,r2,26
80084b90:	00c00284 	movi	r3,10
80084b94:	10c0c426 	beq	r2,r3,80084ea8 <___vfprintf_internal_r+0x3b4>
80084b98:	d8c00404 	addi	r3,sp,16
80084b9c:	052002b4 	movhi	r20,32778
80084ba0:	d9001e04 	addi	r4,sp,120
80084ba4:	a530cb84 	addi	r20,r20,-15570
80084ba8:	d8c01e15 	stw	r3,120(sp)
80084bac:	d8002015 	stw	zero,128(sp)
80084bb0:	d8001f15 	stw	zero,124(sp)
80084bb4:	d8003315 	stw	zero,204(sp)
80084bb8:	d8003615 	stw	zero,216(sp)
80084bbc:	d8003815 	stw	zero,224(sp)
80084bc0:	1811883a 	mov	r8,r3
80084bc4:	d8003915 	stw	zero,228(sp)
80084bc8:	d8003a15 	stw	zero,232(sp)
80084bcc:	d8002f15 	stw	zero,188(sp)
80084bd0:	d9002815 	stw	r4,160(sp)
80084bd4:	a8800007 	ldb	r2,0(r21)
80084bd8:	10027b26 	beq	r2,zero,800855c8 <___vfprintf_internal_r+0xad4>
80084bdc:	00c00944 	movi	r3,37
80084be0:	a821883a 	mov	r16,r21
80084be4:	10c0021e 	bne	r2,r3,80084bf0 <___vfprintf_internal_r+0xfc>
80084be8:	00001406 	br	80084c3c <___vfprintf_internal_r+0x148>
80084bec:	10c00326 	beq	r2,r3,80084bfc <___vfprintf_internal_r+0x108>
80084bf0:	84000044 	addi	r16,r16,1
80084bf4:	80800007 	ldb	r2,0(r16)
80084bf8:	103ffc1e 	bne	r2,zero,80084bec <___vfprintf_internal_r+0xf8>
80084bfc:	8563c83a 	sub	r17,r16,r21
80084c00:	88000e26 	beq	r17,zero,80084c3c <___vfprintf_internal_r+0x148>
80084c04:	d8c02017 	ldw	r3,128(sp)
80084c08:	d8801f17 	ldw	r2,124(sp)
80084c0c:	45400015 	stw	r21,0(r8)
80084c10:	1c47883a 	add	r3,r3,r17
80084c14:	10800044 	addi	r2,r2,1
80084c18:	d8c02015 	stw	r3,128(sp)
80084c1c:	44400115 	stw	r17,4(r8)
80084c20:	d8801f15 	stw	r2,124(sp)
80084c24:	00c001c4 	movi	r3,7
80084c28:	1880a716 	blt	r3,r2,80084ec8 <___vfprintf_internal_r+0x3d4>
80084c2c:	42000204 	addi	r8,r8,8
80084c30:	d9402f17 	ldw	r5,188(sp)
80084c34:	2c4b883a 	add	r5,r5,r17
80084c38:	d9402f15 	stw	r5,188(sp)
80084c3c:	80800007 	ldb	r2,0(r16)
80084c40:	1000a826 	beq	r2,zero,80084ee4 <___vfprintf_internal_r+0x3f0>
80084c44:	84400047 	ldb	r17,1(r16)
80084c48:	00bfffc4 	movi	r2,-1
80084c4c:	85400044 	addi	r21,r16,1
80084c50:	d8002785 	stb	zero,158(sp)
80084c54:	0007883a 	mov	r3,zero
80084c58:	000f883a 	mov	r7,zero
80084c5c:	d8802915 	stw	r2,164(sp)
80084c60:	d8003115 	stw	zero,196(sp)
80084c64:	0025883a 	mov	r18,zero
80084c68:	01401604 	movi	r5,88
80084c6c:	01800244 	movi	r6,9
80084c70:	02800a84 	movi	r10,42
80084c74:	02401b04 	movi	r9,108
80084c78:	ad400044 	addi	r21,r21,1
80084c7c:	88bff804 	addi	r2,r17,-32
80084c80:	28830436 	bltu	r5,r2,80085894 <___vfprintf_internal_r+0xda0>
80084c84:	100490ba 	slli	r2,r2,2
80084c88:	01200234 	movhi	r4,32776
80084c8c:	21132704 	addi	r4,r4,19612
80084c90:	1105883a 	add	r2,r2,r4
80084c94:	10800017 	ldw	r2,0(r2)
80084c98:	1000683a 	jmp	r2
80084c9c:	800857b4 	orhi	zero,r16,8542
80084ca0:	80085894 	ori	zero,r16,8546
80084ca4:	80085894 	ori	zero,r16,8546
80084ca8:	800857d4 	ori	zero,r16,8543
80084cac:	80085894 	ori	zero,r16,8546
80084cb0:	80085894 	ori	zero,r16,8546
80084cb4:	80085894 	ori	zero,r16,8546
80084cb8:	80085894 	ori	zero,r16,8546
80084cbc:	80085894 	ori	zero,r16,8546
80084cc0:	80085894 	ori	zero,r16,8546
80084cc4:	80084f48 	cmpgei	zero,r16,8509
80084cc8:	800856f0 	cmpltui	zero,r16,8539
80084ccc:	80085894 	ori	zero,r16,8546
80084cd0:	80084e10 	cmplti	zero,r16,8504
80084cd4:	80084f70 	cmpltui	zero,r16,8509
80084cd8:	80085894 	ori	zero,r16,8546
80084cdc:	80084fb0 	cmpltui	zero,r16,8510
80084ce0:	80084fbc 	xorhi	zero,r16,8510
80084ce4:	80084fbc 	xorhi	zero,r16,8510
80084ce8:	80084fbc 	xorhi	zero,r16,8510
80084cec:	80084fbc 	xorhi	zero,r16,8510
80084cf0:	80084fbc 	xorhi	zero,r16,8510
80084cf4:	80084fbc 	xorhi	zero,r16,8510
80084cf8:	80084fbc 	xorhi	zero,r16,8510
80084cfc:	80084fbc 	xorhi	zero,r16,8510
80084d00:	80084fbc 	xorhi	zero,r16,8510
80084d04:	80085894 	ori	zero,r16,8546
80084d08:	80085894 	ori	zero,r16,8546
80084d0c:	80085894 	ori	zero,r16,8546
80084d10:	80085894 	ori	zero,r16,8546
80084d14:	80085894 	ori	zero,r16,8546
80084d18:	80085894 	ori	zero,r16,8546
80084d1c:	80085894 	ori	zero,r16,8546
80084d20:	80085894 	ori	zero,r16,8546
80084d24:	80085894 	ori	zero,r16,8546
80084d28:	80085894 	ori	zero,r16,8546
80084d2c:	80084ff0 	cmpltui	zero,r16,8511
80084d30:	800850ac 	andhi	zero,r16,8514
80084d34:	80085894 	ori	zero,r16,8546
80084d38:	800850ac 	andhi	zero,r16,8514
80084d3c:	80085894 	ori	zero,r16,8546
80084d40:	80085894 	ori	zero,r16,8546
80084d44:	80085894 	ori	zero,r16,8546
80084d48:	80085894 	ori	zero,r16,8546
80084d4c:	8008514c 	andi	zero,r16,8517
80084d50:	80085894 	ori	zero,r16,8546
80084d54:	80085894 	ori	zero,r16,8546
80084d58:	80085158 	cmpnei	zero,r16,8517
80084d5c:	80085894 	ori	zero,r16,8546
80084d60:	80085894 	ori	zero,r16,8546
80084d64:	80085894 	ori	zero,r16,8546
80084d68:	80085894 	ori	zero,r16,8546
80084d6c:	80085894 	ori	zero,r16,8546
80084d70:	800855d0 	cmplti	zero,r16,8535
80084d74:	80085894 	ori	zero,r16,8546
80084d78:	80085894 	ori	zero,r16,8546
80084d7c:	80085630 	cmpltui	zero,r16,8536
80084d80:	80085894 	ori	zero,r16,8546
80084d84:	80085894 	ori	zero,r16,8546
80084d88:	80085894 	ori	zero,r16,8546
80084d8c:	80085894 	ori	zero,r16,8546
80084d90:	80085894 	ori	zero,r16,8546
80084d94:	80085894 	ori	zero,r16,8546
80084d98:	80085894 	ori	zero,r16,8546
80084d9c:	80085894 	ori	zero,r16,8546
80084da0:	80085894 	ori	zero,r16,8546
80084da4:	80085894 	ori	zero,r16,8546
80084da8:	80085840 	call	88008584 <__alt_data_end+0x7f0b584>
80084dac:	800857e0 	cmpeqi	zero,r16,8543
80084db0:	800850ac 	andhi	zero,r16,8514
80084db4:	800850ac 	andhi	zero,r16,8514
80084db8:	800850ac 	andhi	zero,r16,8514
80084dbc:	800857f0 	cmpltui	zero,r16,8543
80084dc0:	800857e0 	cmpeqi	zero,r16,8543
80084dc4:	80085894 	ori	zero,r16,8546
80084dc8:	80085894 	ori	zero,r16,8546
80084dcc:	800857fc 	xorhi	zero,r16,8543
80084dd0:	80085894 	ori	zero,r16,8546
80084dd4:	8008580c 	andi	zero,r16,8544
80084dd8:	800856e0 	cmpeqi	zero,r16,8539
80084ddc:	80084e1c 	xori	zero,r16,8504
80084de0:	80085700 	call	88008570 <__alt_data_end+0x7f0b570>
80084de4:	80085894 	ori	zero,r16,8546
80084de8:	8008570c 	andi	zero,r16,8540
80084dec:	80085894 	ori	zero,r16,8546
80084df0:	80085768 	cmpgeui	zero,r16,8541
80084df4:	80085894 	ori	zero,r16,8546
80084df8:	80085894 	ori	zero,r16,8546
80084dfc:	80085778 	rdprs	zero,r16,8541
80084e00:	d9003117 	ldw	r4,196(sp)
80084e04:	d8802d15 	stw	r2,180(sp)
80084e08:	0109c83a 	sub	r4,zero,r4
80084e0c:	d9003115 	stw	r4,196(sp)
80084e10:	94800114 	ori	r18,r18,4
80084e14:	ac400007 	ldb	r17,0(r21)
80084e18:	003f9706 	br	80084c78 <___vfprintf_internal_r+0x184>
80084e1c:	00800c04 	movi	r2,48
80084e20:	d9002d17 	ldw	r4,180(sp)
80084e24:	d9402917 	ldw	r5,164(sp)
80084e28:	d8802705 	stb	r2,156(sp)
80084e2c:	00801e04 	movi	r2,120
80084e30:	d8802745 	stb	r2,157(sp)
80084e34:	d8002785 	stb	zero,158(sp)
80084e38:	20c00104 	addi	r3,r4,4
80084e3c:	24c00017 	ldw	r19,0(r4)
80084e40:	002d883a 	mov	r22,zero
80084e44:	90800094 	ori	r2,r18,2
80084e48:	28029a16 	blt	r5,zero,800858b4 <___vfprintf_internal_r+0xdc0>
80084e4c:	00bfdfc4 	movi	r2,-129
80084e50:	90a4703a 	and	r18,r18,r2
80084e54:	d8c02d15 	stw	r3,180(sp)
80084e58:	94800094 	ori	r18,r18,2
80084e5c:	9802871e 	bne	r19,zero,8008587c <___vfprintf_internal_r+0xd88>
80084e60:	00a002b4 	movhi	r2,32778
80084e64:	10b0c404 	addi	r2,r2,-15600
80084e68:	d8803915 	stw	r2,228(sp)
80084e6c:	04401e04 	movi	r17,120
80084e70:	d8802917 	ldw	r2,164(sp)
80084e74:	0039883a 	mov	fp,zero
80084e78:	1001e926 	beq	r2,zero,80085620 <___vfprintf_internal_r+0xb2c>
80084e7c:	0027883a 	mov	r19,zero
80084e80:	002d883a 	mov	r22,zero
80084e84:	00020506 	br	8008569c <___vfprintf_internal_r+0xba8>
80084e88:	d9002c17 	ldw	r4,176(sp)
80084e8c:	b80b883a 	mov	r5,r23
80084e90:	0086e240 	call	80086e24 <__swsetup_r>
80084e94:	1005ac1e 	bne	r2,zero,80086548 <___vfprintf_internal_r+0x1a54>
80084e98:	b880030b 	ldhu	r2,12(r23)
80084e9c:	00c00284 	movi	r3,10
80084ea0:	1080068c 	andi	r2,r2,26
80084ea4:	10ff3c1e 	bne	r2,r3,80084b98 <___vfprintf_internal_r+0xa4>
80084ea8:	b880038f 	ldh	r2,14(r23)
80084eac:	103f3a16 	blt	r2,zero,80084b98 <___vfprintf_internal_r+0xa4>
80084eb0:	d9c02d17 	ldw	r7,180(sp)
80084eb4:	d9002c17 	ldw	r4,176(sp)
80084eb8:	a80d883a 	mov	r6,r21
80084ebc:	b80b883a 	mov	r5,r23
80084ec0:	0086d080 	call	80086d08 <__sbprintf>
80084ec4:	00001106 	br	80084f0c <___vfprintf_internal_r+0x418>
80084ec8:	d9002c17 	ldw	r4,176(sp)
80084ecc:	d9801e04 	addi	r6,sp,120
80084ed0:	b80b883a 	mov	r5,r23
80084ed4:	00918680 	call	80091868 <__sprint_r>
80084ed8:	1000081e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80084edc:	da000404 	addi	r8,sp,16
80084ee0:	003f5306 	br	80084c30 <___vfprintf_internal_r+0x13c>
80084ee4:	d8802017 	ldw	r2,128(sp)
80084ee8:	10000426 	beq	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80084eec:	d9002c17 	ldw	r4,176(sp)
80084ef0:	d9801e04 	addi	r6,sp,120
80084ef4:	b80b883a 	mov	r5,r23
80084ef8:	00918680 	call	80091868 <__sprint_r>
80084efc:	b880030b 	ldhu	r2,12(r23)
80084f00:	1080100c 	andi	r2,r2,64
80084f04:	1005901e 	bne	r2,zero,80086548 <___vfprintf_internal_r+0x1a54>
80084f08:	d8802f17 	ldw	r2,188(sp)
80084f0c:	dfc04717 	ldw	ra,284(sp)
80084f10:	df004617 	ldw	fp,280(sp)
80084f14:	ddc04517 	ldw	r23,276(sp)
80084f18:	dd804417 	ldw	r22,272(sp)
80084f1c:	dd404317 	ldw	r21,268(sp)
80084f20:	dd004217 	ldw	r20,264(sp)
80084f24:	dcc04117 	ldw	r19,260(sp)
80084f28:	dc804017 	ldw	r18,256(sp)
80084f2c:	dc403f17 	ldw	r17,252(sp)
80084f30:	dc003e17 	ldw	r16,248(sp)
80084f34:	dec04804 	addi	sp,sp,288
80084f38:	f800283a 	ret
80084f3c:	d9002c17 	ldw	r4,176(sp)
80084f40:	0088e4c0 	call	80088e4c <__sinit>
80084f44:	003f0406 	br	80084b58 <___vfprintf_internal_r+0x64>
80084f48:	d8802d17 	ldw	r2,180(sp)
80084f4c:	d9002d17 	ldw	r4,180(sp)
80084f50:	10800017 	ldw	r2,0(r2)
80084f54:	d8803115 	stw	r2,196(sp)
80084f58:	20800104 	addi	r2,r4,4
80084f5c:	d9003117 	ldw	r4,196(sp)
80084f60:	203fa716 	blt	r4,zero,80084e00 <___vfprintf_internal_r+0x30c>
80084f64:	d8802d15 	stw	r2,180(sp)
80084f68:	ac400007 	ldb	r17,0(r21)
80084f6c:	003f4206 	br	80084c78 <___vfprintf_internal_r+0x184>
80084f70:	ac400007 	ldb	r17,0(r21)
80084f74:	aac00044 	addi	r11,r21,1
80084f78:	8a872826 	beq	r17,r10,80086c1c <___vfprintf_internal_r+0x2128>
80084f7c:	88bff404 	addi	r2,r17,-48
80084f80:	0009883a 	mov	r4,zero
80084f84:	30867d36 	bltu	r6,r2,8008697c <___vfprintf_internal_r+0x1e88>
80084f88:	5c400007 	ldb	r17,0(r11)
80084f8c:	210002a4 	muli	r4,r4,10
80084f90:	5d400044 	addi	r21,r11,1
80084f94:	a817883a 	mov	r11,r21
80084f98:	2089883a 	add	r4,r4,r2
80084f9c:	88bff404 	addi	r2,r17,-48
80084fa0:	30bff92e 	bgeu	r6,r2,80084f88 <___vfprintf_internal_r+0x494>
80084fa4:	2005c916 	blt	r4,zero,800866cc <___vfprintf_internal_r+0x1bd8>
80084fa8:	d9002915 	stw	r4,164(sp)
80084fac:	003f3306 	br	80084c7c <___vfprintf_internal_r+0x188>
80084fb0:	94802014 	ori	r18,r18,128
80084fb4:	ac400007 	ldb	r17,0(r21)
80084fb8:	003f2f06 	br	80084c78 <___vfprintf_internal_r+0x184>
80084fbc:	a809883a 	mov	r4,r21
80084fc0:	d8003115 	stw	zero,196(sp)
80084fc4:	88bff404 	addi	r2,r17,-48
80084fc8:	0017883a 	mov	r11,zero
80084fcc:	24400007 	ldb	r17,0(r4)
80084fd0:	5ac002a4 	muli	r11,r11,10
80084fd4:	ad400044 	addi	r21,r21,1
80084fd8:	a809883a 	mov	r4,r21
80084fdc:	12d7883a 	add	r11,r2,r11
80084fe0:	88bff404 	addi	r2,r17,-48
80084fe4:	30bff92e 	bgeu	r6,r2,80084fcc <___vfprintf_internal_r+0x4d8>
80084fe8:	dac03115 	stw	r11,196(sp)
80084fec:	003f2306 	br	80084c7c <___vfprintf_internal_r+0x188>
80084ff0:	18c03fcc 	andi	r3,r3,255
80084ff4:	18072b1e 	bne	r3,zero,80086ca4 <___vfprintf_internal_r+0x21b0>
80084ff8:	94800414 	ori	r18,r18,16
80084ffc:	9080080c 	andi	r2,r18,32
80085000:	10037b26 	beq	r2,zero,80085df0 <___vfprintf_internal_r+0x12fc>
80085004:	d9402d17 	ldw	r5,180(sp)
80085008:	28800117 	ldw	r2,4(r5)
8008500c:	2cc00017 	ldw	r19,0(r5)
80085010:	29400204 	addi	r5,r5,8
80085014:	d9402d15 	stw	r5,180(sp)
80085018:	102d883a 	mov	r22,r2
8008501c:	10044b16 	blt	r2,zero,8008614c <___vfprintf_internal_r+0x1658>
80085020:	d9402917 	ldw	r5,164(sp)
80085024:	df002783 	ldbu	fp,158(sp)
80085028:	2803bc16 	blt	r5,zero,80085f1c <___vfprintf_internal_r+0x1428>
8008502c:	00ffdfc4 	movi	r3,-129
80085030:	9d84b03a 	or	r2,r19,r22
80085034:	90e4703a 	and	r18,r18,r3
80085038:	10017726 	beq	r2,zero,80085618 <___vfprintf_internal_r+0xb24>
8008503c:	b0038326 	beq	r22,zero,80085e4c <___vfprintf_internal_r+0x1358>
80085040:	dc402a15 	stw	r17,168(sp)
80085044:	dc001e04 	addi	r16,sp,120
80085048:	b023883a 	mov	r17,r22
8008504c:	402d883a 	mov	r22,r8
80085050:	9809883a 	mov	r4,r19
80085054:	880b883a 	mov	r5,r17
80085058:	01800284 	movi	r6,10
8008505c:	000f883a 	mov	r7,zero
80085060:	0095bc80 	call	80095bc8 <__umoddi3>
80085064:	10800c04 	addi	r2,r2,48
80085068:	843fffc4 	addi	r16,r16,-1
8008506c:	9809883a 	mov	r4,r19
80085070:	880b883a 	mov	r5,r17
80085074:	80800005 	stb	r2,0(r16)
80085078:	01800284 	movi	r6,10
8008507c:	000f883a 	mov	r7,zero
80085080:	00956500 	call	80095650 <__udivdi3>
80085084:	1027883a 	mov	r19,r2
80085088:	10c4b03a 	or	r2,r2,r3
8008508c:	1823883a 	mov	r17,r3
80085090:	103fef1e 	bne	r2,zero,80085050 <___vfprintf_internal_r+0x55c>
80085094:	d8c02817 	ldw	r3,160(sp)
80085098:	dc402a17 	ldw	r17,168(sp)
8008509c:	b011883a 	mov	r8,r22
800850a0:	1c07c83a 	sub	r3,r3,r16
800850a4:	d8c02e15 	stw	r3,184(sp)
800850a8:	00005906 	br	80085210 <___vfprintf_internal_r+0x71c>
800850ac:	18c03fcc 	andi	r3,r3,255
800850b0:	1806fa1e 	bne	r3,zero,80086c9c <___vfprintf_internal_r+0x21a8>
800850b4:	9080020c 	andi	r2,r18,8
800850b8:	10048a26 	beq	r2,zero,800862e4 <___vfprintf_internal_r+0x17f0>
800850bc:	d8c02d17 	ldw	r3,180(sp)
800850c0:	d9002d17 	ldw	r4,180(sp)
800850c4:	d9402d17 	ldw	r5,180(sp)
800850c8:	18c00017 	ldw	r3,0(r3)
800850cc:	21000117 	ldw	r4,4(r4)
800850d0:	29400204 	addi	r5,r5,8
800850d4:	d8c03615 	stw	r3,216(sp)
800850d8:	d9003815 	stw	r4,224(sp)
800850dc:	d9402d15 	stw	r5,180(sp)
800850e0:	d9003617 	ldw	r4,216(sp)
800850e4:	d9403817 	ldw	r5,224(sp)
800850e8:	da003d15 	stw	r8,244(sp)
800850ec:	04000044 	movi	r16,1
800850f0:	008bae00 	call	8008bae0 <__fpclassifyd>
800850f4:	da003d17 	ldw	r8,244(sp)
800850f8:	14041f1e 	bne	r2,r16,80086178 <___vfprintf_internal_r+0x1684>
800850fc:	d9003617 	ldw	r4,216(sp)
80085100:	d9403817 	ldw	r5,224(sp)
80085104:	000d883a 	mov	r6,zero
80085108:	000f883a 	mov	r7,zero
8008510c:	00975f40 	call	800975f4 <__ledf2>
80085110:	da003d17 	ldw	r8,244(sp)
80085114:	1005be16 	blt	r2,zero,80086810 <___vfprintf_internal_r+0x1d1c>
80085118:	df002783 	ldbu	fp,158(sp)
8008511c:	008011c4 	movi	r2,71
80085120:	1445330e 	bge	r2,r17,800865f0 <___vfprintf_internal_r+0x1afc>
80085124:	042002b4 	movhi	r16,32778
80085128:	8430bc04 	addi	r16,r16,-15632
8008512c:	00c000c4 	movi	r3,3
80085130:	00bfdfc4 	movi	r2,-129
80085134:	d8c02a15 	stw	r3,168(sp)
80085138:	90a4703a 	and	r18,r18,r2
8008513c:	d8c02e15 	stw	r3,184(sp)
80085140:	d8002915 	stw	zero,164(sp)
80085144:	d8003215 	stw	zero,200(sp)
80085148:	00003706 	br	80085228 <___vfprintf_internal_r+0x734>
8008514c:	94800214 	ori	r18,r18,8
80085150:	ac400007 	ldb	r17,0(r21)
80085154:	003ec806 	br	80084c78 <___vfprintf_internal_r+0x184>
80085158:	18c03fcc 	andi	r3,r3,255
8008515c:	1806db1e 	bne	r3,zero,80086ccc <___vfprintf_internal_r+0x21d8>
80085160:	94800414 	ori	r18,r18,16
80085164:	9080080c 	andi	r2,r18,32
80085168:	1002d826 	beq	r2,zero,80085ccc <___vfprintf_internal_r+0x11d8>
8008516c:	d9402d17 	ldw	r5,180(sp)
80085170:	d8c02917 	ldw	r3,164(sp)
80085174:	d8002785 	stb	zero,158(sp)
80085178:	28800204 	addi	r2,r5,8
8008517c:	2cc00017 	ldw	r19,0(r5)
80085180:	2d800117 	ldw	r22,4(r5)
80085184:	18048f16 	blt	r3,zero,800863c4 <___vfprintf_internal_r+0x18d0>
80085188:	013fdfc4 	movi	r4,-129
8008518c:	9d86b03a 	or	r3,r19,r22
80085190:	d8802d15 	stw	r2,180(sp)
80085194:	9124703a 	and	r18,r18,r4
80085198:	1802d91e 	bne	r3,zero,80085d00 <___vfprintf_internal_r+0x120c>
8008519c:	d8c02917 	ldw	r3,164(sp)
800851a0:	0039883a 	mov	fp,zero
800851a4:	1805c326 	beq	r3,zero,800868b4 <___vfprintf_internal_r+0x1dc0>
800851a8:	0027883a 	mov	r19,zero
800851ac:	002d883a 	mov	r22,zero
800851b0:	dc001e04 	addi	r16,sp,120
800851b4:	9806d0fa 	srli	r3,r19,3
800851b8:	b008977a 	slli	r4,r22,29
800851bc:	b02cd0fa 	srli	r22,r22,3
800851c0:	9cc001cc 	andi	r19,r19,7
800851c4:	98800c04 	addi	r2,r19,48
800851c8:	843fffc4 	addi	r16,r16,-1
800851cc:	20e6b03a 	or	r19,r4,r3
800851d0:	80800005 	stb	r2,0(r16)
800851d4:	9d86b03a 	or	r3,r19,r22
800851d8:	183ff61e 	bne	r3,zero,800851b4 <___vfprintf_internal_r+0x6c0>
800851dc:	90c0004c 	andi	r3,r18,1
800851e0:	18013b26 	beq	r3,zero,800856d0 <___vfprintf_internal_r+0xbdc>
800851e4:	10803fcc 	andi	r2,r2,255
800851e8:	1080201c 	xori	r2,r2,128
800851ec:	10bfe004 	addi	r2,r2,-128
800851f0:	00c00c04 	movi	r3,48
800851f4:	10c13626 	beq	r2,r3,800856d0 <___vfprintf_internal_r+0xbdc>
800851f8:	80ffffc5 	stb	r3,-1(r16)
800851fc:	d8c02817 	ldw	r3,160(sp)
80085200:	80bfffc4 	addi	r2,r16,-1
80085204:	1021883a 	mov	r16,r2
80085208:	1887c83a 	sub	r3,r3,r2
8008520c:	d8c02e15 	stw	r3,184(sp)
80085210:	d8802e17 	ldw	r2,184(sp)
80085214:	d9002917 	ldw	r4,164(sp)
80085218:	1100010e 	bge	r2,r4,80085220 <___vfprintf_internal_r+0x72c>
8008521c:	2005883a 	mov	r2,r4
80085220:	d8802a15 	stw	r2,168(sp)
80085224:	d8003215 	stw	zero,200(sp)
80085228:	e7003fcc 	andi	fp,fp,255
8008522c:	e700201c 	xori	fp,fp,128
80085230:	e73fe004 	addi	fp,fp,-128
80085234:	e0000326 	beq	fp,zero,80085244 <___vfprintf_internal_r+0x750>
80085238:	d8c02a17 	ldw	r3,168(sp)
8008523c:	18c00044 	addi	r3,r3,1
80085240:	d8c02a15 	stw	r3,168(sp)
80085244:	90c0008c 	andi	r3,r18,2
80085248:	d8c02b15 	stw	r3,172(sp)
8008524c:	18000326 	beq	r3,zero,8008525c <___vfprintf_internal_r+0x768>
80085250:	d8c02a17 	ldw	r3,168(sp)
80085254:	18c00084 	addi	r3,r3,2
80085258:	d8c02a15 	stw	r3,168(sp)
8008525c:	90c0210c 	andi	r3,r18,132
80085260:	d8c03015 	stw	r3,192(sp)
80085264:	1801a31e 	bne	r3,zero,800858f4 <___vfprintf_internal_r+0xe00>
80085268:	d9003117 	ldw	r4,196(sp)
8008526c:	d8c02a17 	ldw	r3,168(sp)
80085270:	20e7c83a 	sub	r19,r4,r3
80085274:	04c19f0e 	bge	zero,r19,800858f4 <___vfprintf_internal_r+0xe00>
80085278:	02400404 	movi	r9,16
8008527c:	d8c02017 	ldw	r3,128(sp)
80085280:	d8801f17 	ldw	r2,124(sp)
80085284:	4cc50d0e 	bge	r9,r19,800866bc <___vfprintf_internal_r+0x1bc8>
80085288:	016002b4 	movhi	r5,32778
8008528c:	2970cf84 	addi	r5,r5,-15554
80085290:	dc403b15 	stw	r17,236(sp)
80085294:	d9403515 	stw	r5,212(sp)
80085298:	9823883a 	mov	r17,r19
8008529c:	482d883a 	mov	r22,r9
800852a0:	9027883a 	mov	r19,r18
800852a4:	070001c4 	movi	fp,7
800852a8:	8025883a 	mov	r18,r16
800852ac:	dc002c17 	ldw	r16,176(sp)
800852b0:	00000306 	br	800852c0 <___vfprintf_internal_r+0x7cc>
800852b4:	8c7ffc04 	addi	r17,r17,-16
800852b8:	42000204 	addi	r8,r8,8
800852bc:	b440130e 	bge	r22,r17,8008530c <___vfprintf_internal_r+0x818>
800852c0:	012002b4 	movhi	r4,32778
800852c4:	18c00404 	addi	r3,r3,16
800852c8:	10800044 	addi	r2,r2,1
800852cc:	2130cf84 	addi	r4,r4,-15554
800852d0:	41000015 	stw	r4,0(r8)
800852d4:	45800115 	stw	r22,4(r8)
800852d8:	d8c02015 	stw	r3,128(sp)
800852dc:	d8801f15 	stw	r2,124(sp)
800852e0:	e0bff40e 	bge	fp,r2,800852b4 <___vfprintf_internal_r+0x7c0>
800852e4:	d9801e04 	addi	r6,sp,120
800852e8:	b80b883a 	mov	r5,r23
800852ec:	8009883a 	mov	r4,r16
800852f0:	00918680 	call	80091868 <__sprint_r>
800852f4:	103f011e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
800852f8:	8c7ffc04 	addi	r17,r17,-16
800852fc:	d8c02017 	ldw	r3,128(sp)
80085300:	d8801f17 	ldw	r2,124(sp)
80085304:	da000404 	addi	r8,sp,16
80085308:	b47fed16 	blt	r22,r17,800852c0 <___vfprintf_internal_r+0x7cc>
8008530c:	9021883a 	mov	r16,r18
80085310:	9825883a 	mov	r18,r19
80085314:	8827883a 	mov	r19,r17
80085318:	dc403b17 	ldw	r17,236(sp)
8008531c:	d9403517 	ldw	r5,212(sp)
80085320:	98c7883a 	add	r3,r19,r3
80085324:	10800044 	addi	r2,r2,1
80085328:	41400015 	stw	r5,0(r8)
8008532c:	44c00115 	stw	r19,4(r8)
80085330:	d8c02015 	stw	r3,128(sp)
80085334:	d8801f15 	stw	r2,124(sp)
80085338:	010001c4 	movi	r4,7
8008533c:	2082a316 	blt	r4,r2,80085dcc <___vfprintf_internal_r+0x12d8>
80085340:	df002787 	ldb	fp,158(sp)
80085344:	42000204 	addi	r8,r8,8
80085348:	e0000c26 	beq	fp,zero,8008537c <___vfprintf_internal_r+0x888>
8008534c:	d8801f17 	ldw	r2,124(sp)
80085350:	d9002784 	addi	r4,sp,158
80085354:	18c00044 	addi	r3,r3,1
80085358:	10800044 	addi	r2,r2,1
8008535c:	41000015 	stw	r4,0(r8)
80085360:	01000044 	movi	r4,1
80085364:	41000115 	stw	r4,4(r8)
80085368:	d8c02015 	stw	r3,128(sp)
8008536c:	d8801f15 	stw	r2,124(sp)
80085370:	010001c4 	movi	r4,7
80085374:	20823c16 	blt	r4,r2,80085c68 <___vfprintf_internal_r+0x1174>
80085378:	42000204 	addi	r8,r8,8
8008537c:	d8802b17 	ldw	r2,172(sp)
80085380:	10000c26 	beq	r2,zero,800853b4 <___vfprintf_internal_r+0x8c0>
80085384:	d8801f17 	ldw	r2,124(sp)
80085388:	d9002704 	addi	r4,sp,156
8008538c:	18c00084 	addi	r3,r3,2
80085390:	10800044 	addi	r2,r2,1
80085394:	41000015 	stw	r4,0(r8)
80085398:	01000084 	movi	r4,2
8008539c:	41000115 	stw	r4,4(r8)
800853a0:	d8c02015 	stw	r3,128(sp)
800853a4:	d8801f15 	stw	r2,124(sp)
800853a8:	010001c4 	movi	r4,7
800853ac:	20823616 	blt	r4,r2,80085c88 <___vfprintf_internal_r+0x1194>
800853b0:	42000204 	addi	r8,r8,8
800853b4:	d9003017 	ldw	r4,192(sp)
800853b8:	00802004 	movi	r2,128
800853bc:	20819926 	beq	r4,r2,80085a24 <___vfprintf_internal_r+0xf30>
800853c0:	d9402917 	ldw	r5,164(sp)
800853c4:	d8802e17 	ldw	r2,184(sp)
800853c8:	28adc83a 	sub	r22,r5,r2
800853cc:	0580310e 	bge	zero,r22,80085494 <___vfprintf_internal_r+0x9a0>
800853d0:	07000404 	movi	fp,16
800853d4:	d8801f17 	ldw	r2,124(sp)
800853d8:	e584140e 	bge	fp,r22,8008642c <___vfprintf_internal_r+0x1938>
800853dc:	016002b4 	movhi	r5,32778
800853e0:	2970cb84 	addi	r5,r5,-15570
800853e4:	dc402915 	stw	r17,164(sp)
800853e8:	d9402b15 	stw	r5,172(sp)
800853ec:	b023883a 	mov	r17,r22
800853f0:	04c001c4 	movi	r19,7
800853f4:	a82d883a 	mov	r22,r21
800853f8:	902b883a 	mov	r21,r18
800853fc:	8025883a 	mov	r18,r16
80085400:	dc002c17 	ldw	r16,176(sp)
80085404:	00000306 	br	80085414 <___vfprintf_internal_r+0x920>
80085408:	8c7ffc04 	addi	r17,r17,-16
8008540c:	42000204 	addi	r8,r8,8
80085410:	e440110e 	bge	fp,r17,80085458 <___vfprintf_internal_r+0x964>
80085414:	18c00404 	addi	r3,r3,16
80085418:	10800044 	addi	r2,r2,1
8008541c:	45000015 	stw	r20,0(r8)
80085420:	47000115 	stw	fp,4(r8)
80085424:	d8c02015 	stw	r3,128(sp)
80085428:	d8801f15 	stw	r2,124(sp)
8008542c:	98bff60e 	bge	r19,r2,80085408 <___vfprintf_internal_r+0x914>
80085430:	d9801e04 	addi	r6,sp,120
80085434:	b80b883a 	mov	r5,r23
80085438:	8009883a 	mov	r4,r16
8008543c:	00918680 	call	80091868 <__sprint_r>
80085440:	103eae1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085444:	8c7ffc04 	addi	r17,r17,-16
80085448:	d8c02017 	ldw	r3,128(sp)
8008544c:	d8801f17 	ldw	r2,124(sp)
80085450:	da000404 	addi	r8,sp,16
80085454:	e47fef16 	blt	fp,r17,80085414 <___vfprintf_internal_r+0x920>
80085458:	9021883a 	mov	r16,r18
8008545c:	a825883a 	mov	r18,r21
80085460:	b02b883a 	mov	r21,r22
80085464:	882d883a 	mov	r22,r17
80085468:	dc402917 	ldw	r17,164(sp)
8008546c:	d9002b17 	ldw	r4,172(sp)
80085470:	1d87883a 	add	r3,r3,r22
80085474:	10800044 	addi	r2,r2,1
80085478:	41000015 	stw	r4,0(r8)
8008547c:	45800115 	stw	r22,4(r8)
80085480:	d8c02015 	stw	r3,128(sp)
80085484:	d8801f15 	stw	r2,124(sp)
80085488:	010001c4 	movi	r4,7
8008548c:	2081ee16 	blt	r4,r2,80085c48 <___vfprintf_internal_r+0x1154>
80085490:	42000204 	addi	r8,r8,8
80085494:	9080400c 	andi	r2,r18,256
80085498:	1001181e 	bne	r2,zero,800858fc <___vfprintf_internal_r+0xe08>
8008549c:	d9402e17 	ldw	r5,184(sp)
800854a0:	d8801f17 	ldw	r2,124(sp)
800854a4:	44000015 	stw	r16,0(r8)
800854a8:	1947883a 	add	r3,r3,r5
800854ac:	10800044 	addi	r2,r2,1
800854b0:	41400115 	stw	r5,4(r8)
800854b4:	d8c02015 	stw	r3,128(sp)
800854b8:	d8801f15 	stw	r2,124(sp)
800854bc:	010001c4 	movi	r4,7
800854c0:	2081d316 	blt	r4,r2,80085c10 <___vfprintf_internal_r+0x111c>
800854c4:	42000204 	addi	r8,r8,8
800854c8:	9480010c 	andi	r18,r18,4
800854cc:	90003226 	beq	r18,zero,80085598 <___vfprintf_internal_r+0xaa4>
800854d0:	d9403117 	ldw	r5,196(sp)
800854d4:	d8802a17 	ldw	r2,168(sp)
800854d8:	28a1c83a 	sub	r16,r5,r2
800854dc:	04002e0e 	bge	zero,r16,80085598 <___vfprintf_internal_r+0xaa4>
800854e0:	04400404 	movi	r17,16
800854e4:	d8801f17 	ldw	r2,124(sp)
800854e8:	8c04a20e 	bge	r17,r16,80086774 <___vfprintf_internal_r+0x1c80>
800854ec:	016002b4 	movhi	r5,32778
800854f0:	2970cf84 	addi	r5,r5,-15554
800854f4:	d9403515 	stw	r5,212(sp)
800854f8:	048001c4 	movi	r18,7
800854fc:	dcc02c17 	ldw	r19,176(sp)
80085500:	00000306 	br	80085510 <___vfprintf_internal_r+0xa1c>
80085504:	843ffc04 	addi	r16,r16,-16
80085508:	42000204 	addi	r8,r8,8
8008550c:	8c00130e 	bge	r17,r16,8008555c <___vfprintf_internal_r+0xa68>
80085510:	012002b4 	movhi	r4,32778
80085514:	18c00404 	addi	r3,r3,16
80085518:	10800044 	addi	r2,r2,1
8008551c:	2130cf84 	addi	r4,r4,-15554
80085520:	41000015 	stw	r4,0(r8)
80085524:	44400115 	stw	r17,4(r8)
80085528:	d8c02015 	stw	r3,128(sp)
8008552c:	d8801f15 	stw	r2,124(sp)
80085530:	90bff40e 	bge	r18,r2,80085504 <___vfprintf_internal_r+0xa10>
80085534:	d9801e04 	addi	r6,sp,120
80085538:	b80b883a 	mov	r5,r23
8008553c:	9809883a 	mov	r4,r19
80085540:	00918680 	call	80091868 <__sprint_r>
80085544:	103e6d1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085548:	843ffc04 	addi	r16,r16,-16
8008554c:	d8c02017 	ldw	r3,128(sp)
80085550:	d8801f17 	ldw	r2,124(sp)
80085554:	da000404 	addi	r8,sp,16
80085558:	8c3fed16 	blt	r17,r16,80085510 <___vfprintf_internal_r+0xa1c>
8008555c:	d9403517 	ldw	r5,212(sp)
80085560:	1c07883a 	add	r3,r3,r16
80085564:	10800044 	addi	r2,r2,1
80085568:	41400015 	stw	r5,0(r8)
8008556c:	44000115 	stw	r16,4(r8)
80085570:	d8c02015 	stw	r3,128(sp)
80085574:	d8801f15 	stw	r2,124(sp)
80085578:	010001c4 	movi	r4,7
8008557c:	2080060e 	bge	r4,r2,80085598 <___vfprintf_internal_r+0xaa4>
80085580:	d9002c17 	ldw	r4,176(sp)
80085584:	d9801e04 	addi	r6,sp,120
80085588:	b80b883a 	mov	r5,r23
8008558c:	00918680 	call	80091868 <__sprint_r>
80085590:	103e5a1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085594:	d8c02017 	ldw	r3,128(sp)
80085598:	d8803117 	ldw	r2,196(sp)
8008559c:	d9002a17 	ldw	r4,168(sp)
800855a0:	1100010e 	bge	r2,r4,800855a8 <___vfprintf_internal_r+0xab4>
800855a4:	2005883a 	mov	r2,r4
800855a8:	d9402f17 	ldw	r5,188(sp)
800855ac:	288b883a 	add	r5,r5,r2
800855b0:	d9402f15 	stw	r5,188(sp)
800855b4:	18019e1e 	bne	r3,zero,80085c30 <___vfprintf_internal_r+0x113c>
800855b8:	a8800007 	ldb	r2,0(r21)
800855bc:	d8001f15 	stw	zero,124(sp)
800855c0:	da000404 	addi	r8,sp,16
800855c4:	103d851e 	bne	r2,zero,80084bdc <___vfprintf_internal_r+0xe8>
800855c8:	a821883a 	mov	r16,r21
800855cc:	003d9b06 	br	80084c3c <___vfprintf_internal_r+0x148>
800855d0:	18c03fcc 	andi	r3,r3,255
800855d4:	1805c11e 	bne	r3,zero,80086cdc <___vfprintf_internal_r+0x21e8>
800855d8:	94800414 	ori	r18,r18,16
800855dc:	9080080c 	andi	r2,r18,32
800855e0:	10020c26 	beq	r2,zero,80085e14 <___vfprintf_internal_r+0x1320>
800855e4:	d8802d17 	ldw	r2,180(sp)
800855e8:	d9002917 	ldw	r4,164(sp)
800855ec:	d8002785 	stb	zero,158(sp)
800855f0:	10c00204 	addi	r3,r2,8
800855f4:	14c00017 	ldw	r19,0(r2)
800855f8:	15800117 	ldw	r22,4(r2)
800855fc:	20040f16 	blt	r4,zero,8008663c <___vfprintf_internal_r+0x1b48>
80085600:	013fdfc4 	movi	r4,-129
80085604:	9d84b03a 	or	r2,r19,r22
80085608:	d8c02d15 	stw	r3,180(sp)
8008560c:	9124703a 	and	r18,r18,r4
80085610:	0039883a 	mov	fp,zero
80085614:	103e891e 	bne	r2,zero,8008503c <___vfprintf_internal_r+0x548>
80085618:	d9002917 	ldw	r4,164(sp)
8008561c:	2002c11e 	bne	r4,zero,80086124 <___vfprintf_internal_r+0x1630>
80085620:	d8002915 	stw	zero,164(sp)
80085624:	d8002e15 	stw	zero,184(sp)
80085628:	dc001e04 	addi	r16,sp,120
8008562c:	003ef806 	br	80085210 <___vfprintf_internal_r+0x71c>
80085630:	18c03fcc 	andi	r3,r3,255
80085634:	18059d1e 	bne	r3,zero,80086cac <___vfprintf_internal_r+0x21b8>
80085638:	016002b4 	movhi	r5,32778
8008563c:	2970bf04 	addi	r5,r5,-15620
80085640:	d9403915 	stw	r5,228(sp)
80085644:	9080080c 	andi	r2,r18,32
80085648:	10005226 	beq	r2,zero,80085794 <___vfprintf_internal_r+0xca0>
8008564c:	d8802d17 	ldw	r2,180(sp)
80085650:	14c00017 	ldw	r19,0(r2)
80085654:	15800117 	ldw	r22,4(r2)
80085658:	10800204 	addi	r2,r2,8
8008565c:	d8802d15 	stw	r2,180(sp)
80085660:	9080004c 	andi	r2,r18,1
80085664:	10019026 	beq	r2,zero,80085ca8 <___vfprintf_internal_r+0x11b4>
80085668:	9d84b03a 	or	r2,r19,r22
8008566c:	10036926 	beq	r2,zero,80086414 <___vfprintf_internal_r+0x1920>
80085670:	d8c02917 	ldw	r3,164(sp)
80085674:	00800c04 	movi	r2,48
80085678:	d8802705 	stb	r2,156(sp)
8008567c:	dc402745 	stb	r17,157(sp)
80085680:	d8002785 	stb	zero,158(sp)
80085684:	90800094 	ori	r2,r18,2
80085688:	18045d16 	blt	r3,zero,80086800 <___vfprintf_internal_r+0x1d0c>
8008568c:	00bfdfc4 	movi	r2,-129
80085690:	90a4703a 	and	r18,r18,r2
80085694:	94800094 	ori	r18,r18,2
80085698:	0039883a 	mov	fp,zero
8008569c:	d9003917 	ldw	r4,228(sp)
800856a0:	dc001e04 	addi	r16,sp,120
800856a4:	988003cc 	andi	r2,r19,15
800856a8:	b006973a 	slli	r3,r22,28
800856ac:	2085883a 	add	r2,r4,r2
800856b0:	9826d13a 	srli	r19,r19,4
800856b4:	10800003 	ldbu	r2,0(r2)
800856b8:	b02cd13a 	srli	r22,r22,4
800856bc:	843fffc4 	addi	r16,r16,-1
800856c0:	1ce6b03a 	or	r19,r3,r19
800856c4:	80800005 	stb	r2,0(r16)
800856c8:	9d84b03a 	or	r2,r19,r22
800856cc:	103ff51e 	bne	r2,zero,800856a4 <___vfprintf_internal_r+0xbb0>
800856d0:	d8c02817 	ldw	r3,160(sp)
800856d4:	1c07c83a 	sub	r3,r3,r16
800856d8:	d8c02e15 	stw	r3,184(sp)
800856dc:	003ecc06 	br	80085210 <___vfprintf_internal_r+0x71c>
800856e0:	18c03fcc 	andi	r3,r3,255
800856e4:	183e9f26 	beq	r3,zero,80085164 <___vfprintf_internal_r+0x670>
800856e8:	d9c02785 	stb	r7,158(sp)
800856ec:	003e9d06 	br	80085164 <___vfprintf_internal_r+0x670>
800856f0:	00c00044 	movi	r3,1
800856f4:	01c00ac4 	movi	r7,43
800856f8:	ac400007 	ldb	r17,0(r21)
800856fc:	003d5e06 	br	80084c78 <___vfprintf_internal_r+0x184>
80085700:	94800814 	ori	r18,r18,32
80085704:	ac400007 	ldb	r17,0(r21)
80085708:	003d5b06 	br	80084c78 <___vfprintf_internal_r+0x184>
8008570c:	d8c02d17 	ldw	r3,180(sp)
80085710:	d8002785 	stb	zero,158(sp)
80085714:	1c000017 	ldw	r16,0(r3)
80085718:	1cc00104 	addi	r19,r3,4
8008571c:	80041926 	beq	r16,zero,80086784 <___vfprintf_internal_r+0x1c90>
80085720:	d9002917 	ldw	r4,164(sp)
80085724:	2003d016 	blt	r4,zero,80086668 <___vfprintf_internal_r+0x1b74>
80085728:	200d883a 	mov	r6,r4
8008572c:	000b883a 	mov	r5,zero
80085730:	8009883a 	mov	r4,r16
80085734:	da003d15 	stw	r8,244(sp)
80085738:	0089e600 	call	80089e60 <memchr>
8008573c:	da003d17 	ldw	r8,244(sp)
80085740:	10045426 	beq	r2,zero,80086894 <___vfprintf_internal_r+0x1da0>
80085744:	1405c83a 	sub	r2,r2,r16
80085748:	d8802e15 	stw	r2,184(sp)
8008574c:	1003cc16 	blt	r2,zero,80086680 <___vfprintf_internal_r+0x1b8c>
80085750:	df002783 	ldbu	fp,158(sp)
80085754:	d8802a15 	stw	r2,168(sp)
80085758:	dcc02d15 	stw	r19,180(sp)
8008575c:	d8002915 	stw	zero,164(sp)
80085760:	d8003215 	stw	zero,200(sp)
80085764:	003eb006 	br	80085228 <___vfprintf_internal_r+0x734>
80085768:	18c03fcc 	andi	r3,r3,255
8008576c:	183f9b26 	beq	r3,zero,800855dc <___vfprintf_internal_r+0xae8>
80085770:	d9c02785 	stb	r7,158(sp)
80085774:	003f9906 	br	800855dc <___vfprintf_internal_r+0xae8>
80085778:	18c03fcc 	andi	r3,r3,255
8008577c:	1805551e 	bne	r3,zero,80086cd4 <___vfprintf_internal_r+0x21e0>
80085780:	016002b4 	movhi	r5,32778
80085784:	2970c404 	addi	r5,r5,-15600
80085788:	d9403915 	stw	r5,228(sp)
8008578c:	9080080c 	andi	r2,r18,32
80085790:	103fae1e 	bne	r2,zero,8008564c <___vfprintf_internal_r+0xb58>
80085794:	9080040c 	andi	r2,r18,16
80085798:	1002de26 	beq	r2,zero,80086314 <___vfprintf_internal_r+0x1820>
8008579c:	d8c02d17 	ldw	r3,180(sp)
800857a0:	002d883a 	mov	r22,zero
800857a4:	1cc00017 	ldw	r19,0(r3)
800857a8:	18c00104 	addi	r3,r3,4
800857ac:	d8c02d15 	stw	r3,180(sp)
800857b0:	003fab06 	br	80085660 <___vfprintf_internal_r+0xb6c>
800857b4:	38803fcc 	andi	r2,r7,255
800857b8:	1080201c 	xori	r2,r2,128
800857bc:	10bfe004 	addi	r2,r2,-128
800857c0:	1002d21e 	bne	r2,zero,8008630c <___vfprintf_internal_r+0x1818>
800857c4:	00c00044 	movi	r3,1
800857c8:	01c00804 	movi	r7,32
800857cc:	ac400007 	ldb	r17,0(r21)
800857d0:	003d2906 	br	80084c78 <___vfprintf_internal_r+0x184>
800857d4:	94800054 	ori	r18,r18,1
800857d8:	ac400007 	ldb	r17,0(r21)
800857dc:	003d2606 	br	80084c78 <___vfprintf_internal_r+0x184>
800857e0:	18c03fcc 	andi	r3,r3,255
800857e4:	183e0526 	beq	r3,zero,80084ffc <___vfprintf_internal_r+0x508>
800857e8:	d9c02785 	stb	r7,158(sp)
800857ec:	003e0306 	br	80084ffc <___vfprintf_internal_r+0x508>
800857f0:	94801014 	ori	r18,r18,64
800857f4:	ac400007 	ldb	r17,0(r21)
800857f8:	003d1f06 	br	80084c78 <___vfprintf_internal_r+0x184>
800857fc:	ac400007 	ldb	r17,0(r21)
80085800:	8a438726 	beq	r17,r9,80086620 <___vfprintf_internal_r+0x1b2c>
80085804:	94800414 	ori	r18,r18,16
80085808:	003d1b06 	br	80084c78 <___vfprintf_internal_r+0x184>
8008580c:	18c03fcc 	andi	r3,r3,255
80085810:	1805341e 	bne	r3,zero,80086ce4 <___vfprintf_internal_r+0x21f0>
80085814:	9080080c 	andi	r2,r18,32
80085818:	1002cd26 	beq	r2,zero,80086350 <___vfprintf_internal_r+0x185c>
8008581c:	d9402d17 	ldw	r5,180(sp)
80085820:	d9002f17 	ldw	r4,188(sp)
80085824:	28800017 	ldw	r2,0(r5)
80085828:	2007d7fa 	srai	r3,r4,31
8008582c:	29400104 	addi	r5,r5,4
80085830:	d9402d15 	stw	r5,180(sp)
80085834:	11000015 	stw	r4,0(r2)
80085838:	10c00115 	stw	r3,4(r2)
8008583c:	003ce506 	br	80084bd4 <___vfprintf_internal_r+0xe0>
80085840:	d8c02d17 	ldw	r3,180(sp)
80085844:	d9002d17 	ldw	r4,180(sp)
80085848:	d8002785 	stb	zero,158(sp)
8008584c:	18800017 	ldw	r2,0(r3)
80085850:	21000104 	addi	r4,r4,4
80085854:	00c00044 	movi	r3,1
80085858:	d8c02a15 	stw	r3,168(sp)
8008585c:	d8801405 	stb	r2,80(sp)
80085860:	d9002d15 	stw	r4,180(sp)
80085864:	d8c02e15 	stw	r3,184(sp)
80085868:	d8002915 	stw	zero,164(sp)
8008586c:	d8003215 	stw	zero,200(sp)
80085870:	dc001404 	addi	r16,sp,80
80085874:	0039883a 	mov	fp,zero
80085878:	003e7206 	br	80085244 <___vfprintf_internal_r+0x750>
8008587c:	012002b4 	movhi	r4,32778
80085880:	2130c404 	addi	r4,r4,-15600
80085884:	0039883a 	mov	fp,zero
80085888:	d9003915 	stw	r4,228(sp)
8008588c:	04401e04 	movi	r17,120
80085890:	003f8206 	br	8008569c <___vfprintf_internal_r+0xba8>
80085894:	18c03fcc 	andi	r3,r3,255
80085898:	1805061e 	bne	r3,zero,80086cb4 <___vfprintf_internal_r+0x21c0>
8008589c:	883d9126 	beq	r17,zero,80084ee4 <___vfprintf_internal_r+0x3f0>
800858a0:	00c00044 	movi	r3,1
800858a4:	d8c02a15 	stw	r3,168(sp)
800858a8:	dc401405 	stb	r17,80(sp)
800858ac:	d8002785 	stb	zero,158(sp)
800858b0:	003fec06 	br	80085864 <___vfprintf_internal_r+0xd70>
800858b4:	016002b4 	movhi	r5,32778
800858b8:	2970c404 	addi	r5,r5,-15600
800858bc:	d9403915 	stw	r5,228(sp)
800858c0:	d8c02d15 	stw	r3,180(sp)
800858c4:	1025883a 	mov	r18,r2
800858c8:	04401e04 	movi	r17,120
800858cc:	9d84b03a 	or	r2,r19,r22
800858d0:	1000fc1e 	bne	r2,zero,80085cc4 <___vfprintf_internal_r+0x11d0>
800858d4:	0039883a 	mov	fp,zero
800858d8:	00800084 	movi	r2,2
800858dc:	10803fcc 	andi	r2,r2,255
800858e0:	00c00044 	movi	r3,1
800858e4:	10c20f26 	beq	r2,r3,80086124 <___vfprintf_internal_r+0x1630>
800858e8:	00c00084 	movi	r3,2
800858ec:	10fd6326 	beq	r2,r3,80084e7c <___vfprintf_internal_r+0x388>
800858f0:	003e2d06 	br	800851a8 <___vfprintf_internal_r+0x6b4>
800858f4:	d8c02017 	ldw	r3,128(sp)
800858f8:	003e9306 	br	80085348 <___vfprintf_internal_r+0x854>
800858fc:	00801944 	movi	r2,101
80085900:	14407e0e 	bge	r2,r17,80085afc <___vfprintf_internal_r+0x1008>
80085904:	d9003617 	ldw	r4,216(sp)
80085908:	d9403817 	ldw	r5,224(sp)
8008590c:	000d883a 	mov	r6,zero
80085910:	000f883a 	mov	r7,zero
80085914:	d8c03c15 	stw	r3,240(sp)
80085918:	da003d15 	stw	r8,244(sp)
8008591c:	00974900 	call	80097490 <__eqdf2>
80085920:	d8c03c17 	ldw	r3,240(sp)
80085924:	da003d17 	ldw	r8,244(sp)
80085928:	1000f71e 	bne	r2,zero,80085d08 <___vfprintf_internal_r+0x1214>
8008592c:	d8801f17 	ldw	r2,124(sp)
80085930:	012002b4 	movhi	r4,32778
80085934:	2130cb04 	addi	r4,r4,-15572
80085938:	18c00044 	addi	r3,r3,1
8008593c:	10800044 	addi	r2,r2,1
80085940:	41000015 	stw	r4,0(r8)
80085944:	01000044 	movi	r4,1
80085948:	41000115 	stw	r4,4(r8)
8008594c:	d8c02015 	stw	r3,128(sp)
80085950:	d8801f15 	stw	r2,124(sp)
80085954:	010001c4 	movi	r4,7
80085958:	2082b816 	blt	r4,r2,8008643c <___vfprintf_internal_r+0x1948>
8008595c:	42000204 	addi	r8,r8,8
80085960:	d8802617 	ldw	r2,152(sp)
80085964:	d9403317 	ldw	r5,204(sp)
80085968:	11400216 	blt	r2,r5,80085974 <___vfprintf_internal_r+0xe80>
8008596c:	9080004c 	andi	r2,r18,1
80085970:	103ed526 	beq	r2,zero,800854c8 <___vfprintf_internal_r+0x9d4>
80085974:	d8803717 	ldw	r2,220(sp)
80085978:	d9003417 	ldw	r4,208(sp)
8008597c:	d9403717 	ldw	r5,220(sp)
80085980:	1887883a 	add	r3,r3,r2
80085984:	d8801f17 	ldw	r2,124(sp)
80085988:	41000015 	stw	r4,0(r8)
8008598c:	41400115 	stw	r5,4(r8)
80085990:	10800044 	addi	r2,r2,1
80085994:	d8c02015 	stw	r3,128(sp)
80085998:	d8801f15 	stw	r2,124(sp)
8008599c:	010001c4 	movi	r4,7
800859a0:	20832916 	blt	r4,r2,80086648 <___vfprintf_internal_r+0x1b54>
800859a4:	42000204 	addi	r8,r8,8
800859a8:	d8803317 	ldw	r2,204(sp)
800859ac:	143fffc4 	addi	r16,r2,-1
800859b0:	043ec50e 	bge	zero,r16,800854c8 <___vfprintf_internal_r+0x9d4>
800859b4:	04400404 	movi	r17,16
800859b8:	d8801f17 	ldw	r2,124(sp)
800859bc:	8c00880e 	bge	r17,r16,80085be0 <___vfprintf_internal_r+0x10ec>
800859c0:	016002b4 	movhi	r5,32778
800859c4:	2970cb84 	addi	r5,r5,-15570
800859c8:	d9402b15 	stw	r5,172(sp)
800859cc:	058001c4 	movi	r22,7
800859d0:	dcc02c17 	ldw	r19,176(sp)
800859d4:	00000306 	br	800859e4 <___vfprintf_internal_r+0xef0>
800859d8:	42000204 	addi	r8,r8,8
800859dc:	843ffc04 	addi	r16,r16,-16
800859e0:	8c00820e 	bge	r17,r16,80085bec <___vfprintf_internal_r+0x10f8>
800859e4:	18c00404 	addi	r3,r3,16
800859e8:	10800044 	addi	r2,r2,1
800859ec:	45000015 	stw	r20,0(r8)
800859f0:	44400115 	stw	r17,4(r8)
800859f4:	d8c02015 	stw	r3,128(sp)
800859f8:	d8801f15 	stw	r2,124(sp)
800859fc:	b0bff60e 	bge	r22,r2,800859d8 <___vfprintf_internal_r+0xee4>
80085a00:	d9801e04 	addi	r6,sp,120
80085a04:	b80b883a 	mov	r5,r23
80085a08:	9809883a 	mov	r4,r19
80085a0c:	00918680 	call	80091868 <__sprint_r>
80085a10:	103d3a1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085a14:	d8c02017 	ldw	r3,128(sp)
80085a18:	d8801f17 	ldw	r2,124(sp)
80085a1c:	da000404 	addi	r8,sp,16
80085a20:	003fee06 	br	800859dc <___vfprintf_internal_r+0xee8>
80085a24:	d9403117 	ldw	r5,196(sp)
80085a28:	d8802a17 	ldw	r2,168(sp)
80085a2c:	28adc83a 	sub	r22,r5,r2
80085a30:	05be630e 	bge	zero,r22,800853c0 <___vfprintf_internal_r+0x8cc>
80085a34:	07000404 	movi	fp,16
80085a38:	d8801f17 	ldw	r2,124(sp)
80085a3c:	e5838f0e 	bge	fp,r22,8008687c <___vfprintf_internal_r+0x1d88>
80085a40:	016002b4 	movhi	r5,32778
80085a44:	2970cb84 	addi	r5,r5,-15570
80085a48:	dc403015 	stw	r17,192(sp)
80085a4c:	d9402b15 	stw	r5,172(sp)
80085a50:	b023883a 	mov	r17,r22
80085a54:	04c001c4 	movi	r19,7
80085a58:	a82d883a 	mov	r22,r21
80085a5c:	902b883a 	mov	r21,r18
80085a60:	8025883a 	mov	r18,r16
80085a64:	dc002c17 	ldw	r16,176(sp)
80085a68:	00000306 	br	80085a78 <___vfprintf_internal_r+0xf84>
80085a6c:	8c7ffc04 	addi	r17,r17,-16
80085a70:	42000204 	addi	r8,r8,8
80085a74:	e440110e 	bge	fp,r17,80085abc <___vfprintf_internal_r+0xfc8>
80085a78:	18c00404 	addi	r3,r3,16
80085a7c:	10800044 	addi	r2,r2,1
80085a80:	45000015 	stw	r20,0(r8)
80085a84:	47000115 	stw	fp,4(r8)
80085a88:	d8c02015 	stw	r3,128(sp)
80085a8c:	d8801f15 	stw	r2,124(sp)
80085a90:	98bff60e 	bge	r19,r2,80085a6c <___vfprintf_internal_r+0xf78>
80085a94:	d9801e04 	addi	r6,sp,120
80085a98:	b80b883a 	mov	r5,r23
80085a9c:	8009883a 	mov	r4,r16
80085aa0:	00918680 	call	80091868 <__sprint_r>
80085aa4:	103d151e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085aa8:	8c7ffc04 	addi	r17,r17,-16
80085aac:	d8c02017 	ldw	r3,128(sp)
80085ab0:	d8801f17 	ldw	r2,124(sp)
80085ab4:	da000404 	addi	r8,sp,16
80085ab8:	e47fef16 	blt	fp,r17,80085a78 <___vfprintf_internal_r+0xf84>
80085abc:	9021883a 	mov	r16,r18
80085ac0:	a825883a 	mov	r18,r21
80085ac4:	b02b883a 	mov	r21,r22
80085ac8:	882d883a 	mov	r22,r17
80085acc:	dc403017 	ldw	r17,192(sp)
80085ad0:	d9002b17 	ldw	r4,172(sp)
80085ad4:	1d87883a 	add	r3,r3,r22
80085ad8:	10800044 	addi	r2,r2,1
80085adc:	41000015 	stw	r4,0(r8)
80085ae0:	45800115 	stw	r22,4(r8)
80085ae4:	d8c02015 	stw	r3,128(sp)
80085ae8:	d8801f15 	stw	r2,124(sp)
80085aec:	010001c4 	movi	r4,7
80085af0:	20818e16 	blt	r4,r2,8008612c <___vfprintf_internal_r+0x1638>
80085af4:	42000204 	addi	r8,r8,8
80085af8:	003e3106 	br	800853c0 <___vfprintf_internal_r+0x8cc>
80085afc:	d9403317 	ldw	r5,204(sp)
80085b00:	00800044 	movi	r2,1
80085b04:	18c00044 	addi	r3,r3,1
80085b08:	1141530e 	bge	r2,r5,80086058 <___vfprintf_internal_r+0x1564>
80085b0c:	dc401f17 	ldw	r17,124(sp)
80085b10:	00800044 	movi	r2,1
80085b14:	40800115 	stw	r2,4(r8)
80085b18:	8c400044 	addi	r17,r17,1
80085b1c:	44000015 	stw	r16,0(r8)
80085b20:	d8c02015 	stw	r3,128(sp)
80085b24:	dc401f15 	stw	r17,124(sp)
80085b28:	008001c4 	movi	r2,7
80085b2c:	14416b16 	blt	r2,r17,800860dc <___vfprintf_internal_r+0x15e8>
80085b30:	42000204 	addi	r8,r8,8
80085b34:	d8803717 	ldw	r2,220(sp)
80085b38:	d9003417 	ldw	r4,208(sp)
80085b3c:	8c400044 	addi	r17,r17,1
80085b40:	10c7883a 	add	r3,r2,r3
80085b44:	40800115 	stw	r2,4(r8)
80085b48:	41000015 	stw	r4,0(r8)
80085b4c:	d8c02015 	stw	r3,128(sp)
80085b50:	dc401f15 	stw	r17,124(sp)
80085b54:	008001c4 	movi	r2,7
80085b58:	14416916 	blt	r2,r17,80086100 <___vfprintf_internal_r+0x160c>
80085b5c:	45800204 	addi	r22,r8,8
80085b60:	d9003617 	ldw	r4,216(sp)
80085b64:	d9403817 	ldw	r5,224(sp)
80085b68:	000d883a 	mov	r6,zero
80085b6c:	000f883a 	mov	r7,zero
80085b70:	d8c03c15 	stw	r3,240(sp)
80085b74:	00974900 	call	80097490 <__eqdf2>
80085b78:	d8c03c17 	ldw	r3,240(sp)
80085b7c:	1000bc26 	beq	r2,zero,80085e70 <___vfprintf_internal_r+0x137c>
80085b80:	d9403317 	ldw	r5,204(sp)
80085b84:	84000044 	addi	r16,r16,1
80085b88:	8c400044 	addi	r17,r17,1
80085b8c:	28bfffc4 	addi	r2,r5,-1
80085b90:	1887883a 	add	r3,r3,r2
80085b94:	b0800115 	stw	r2,4(r22)
80085b98:	b4000015 	stw	r16,0(r22)
80085b9c:	d8c02015 	stw	r3,128(sp)
80085ba0:	dc401f15 	stw	r17,124(sp)
80085ba4:	008001c4 	movi	r2,7
80085ba8:	14414316 	blt	r2,r17,800860b8 <___vfprintf_internal_r+0x15c4>
80085bac:	b5800204 	addi	r22,r22,8
80085bb0:	d9003a17 	ldw	r4,232(sp)
80085bb4:	df0022c4 	addi	fp,sp,139
80085bb8:	8c400044 	addi	r17,r17,1
80085bbc:	20c7883a 	add	r3,r4,r3
80085bc0:	b7000015 	stw	fp,0(r22)
80085bc4:	b1000115 	stw	r4,4(r22)
80085bc8:	d8c02015 	stw	r3,128(sp)
80085bcc:	dc401f15 	stw	r17,124(sp)
80085bd0:	008001c4 	movi	r2,7
80085bd4:	14400e16 	blt	r2,r17,80085c10 <___vfprintf_internal_r+0x111c>
80085bd8:	b2000204 	addi	r8,r22,8
80085bdc:	003e3a06 	br	800854c8 <___vfprintf_internal_r+0x9d4>
80085be0:	012002b4 	movhi	r4,32778
80085be4:	2130cb84 	addi	r4,r4,-15570
80085be8:	d9002b15 	stw	r4,172(sp)
80085bec:	d9002b17 	ldw	r4,172(sp)
80085bf0:	1c07883a 	add	r3,r3,r16
80085bf4:	44000115 	stw	r16,4(r8)
80085bf8:	41000015 	stw	r4,0(r8)
80085bfc:	10800044 	addi	r2,r2,1
80085c00:	d8c02015 	stw	r3,128(sp)
80085c04:	d8801f15 	stw	r2,124(sp)
80085c08:	010001c4 	movi	r4,7
80085c0c:	20be2d0e 	bge	r4,r2,800854c4 <___vfprintf_internal_r+0x9d0>
80085c10:	d9002c17 	ldw	r4,176(sp)
80085c14:	d9801e04 	addi	r6,sp,120
80085c18:	b80b883a 	mov	r5,r23
80085c1c:	00918680 	call	80091868 <__sprint_r>
80085c20:	103cb61e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085c24:	d8c02017 	ldw	r3,128(sp)
80085c28:	da000404 	addi	r8,sp,16
80085c2c:	003e2606 	br	800854c8 <___vfprintf_internal_r+0x9d4>
80085c30:	d9002c17 	ldw	r4,176(sp)
80085c34:	d9801e04 	addi	r6,sp,120
80085c38:	b80b883a 	mov	r5,r23
80085c3c:	00918680 	call	80091868 <__sprint_r>
80085c40:	103e5d26 	beq	r2,zero,800855b8 <___vfprintf_internal_r+0xac4>
80085c44:	003cad06 	br	80084efc <___vfprintf_internal_r+0x408>
80085c48:	d9002c17 	ldw	r4,176(sp)
80085c4c:	d9801e04 	addi	r6,sp,120
80085c50:	b80b883a 	mov	r5,r23
80085c54:	00918680 	call	80091868 <__sprint_r>
80085c58:	103ca81e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085c5c:	d8c02017 	ldw	r3,128(sp)
80085c60:	da000404 	addi	r8,sp,16
80085c64:	003e0b06 	br	80085494 <___vfprintf_internal_r+0x9a0>
80085c68:	d9002c17 	ldw	r4,176(sp)
80085c6c:	d9801e04 	addi	r6,sp,120
80085c70:	b80b883a 	mov	r5,r23
80085c74:	00918680 	call	80091868 <__sprint_r>
80085c78:	103ca01e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085c7c:	d8c02017 	ldw	r3,128(sp)
80085c80:	da000404 	addi	r8,sp,16
80085c84:	003dbd06 	br	8008537c <___vfprintf_internal_r+0x888>
80085c88:	d9002c17 	ldw	r4,176(sp)
80085c8c:	d9801e04 	addi	r6,sp,120
80085c90:	b80b883a 	mov	r5,r23
80085c94:	00918680 	call	80091868 <__sprint_r>
80085c98:	103c981e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085c9c:	d8c02017 	ldw	r3,128(sp)
80085ca0:	da000404 	addi	r8,sp,16
80085ca4:	003dc306 	br	800853b4 <___vfprintf_internal_r+0x8c0>
80085ca8:	d8802917 	ldw	r2,164(sp)
80085cac:	d8002785 	stb	zero,158(sp)
80085cb0:	103f0616 	blt	r2,zero,800858cc <___vfprintf_internal_r+0xdd8>
80085cb4:	00ffdfc4 	movi	r3,-129
80085cb8:	9d84b03a 	or	r2,r19,r22
80085cbc:	90e4703a 	and	r18,r18,r3
80085cc0:	103c6b26 	beq	r2,zero,80084e70 <___vfprintf_internal_r+0x37c>
80085cc4:	0039883a 	mov	fp,zero
80085cc8:	003e7406 	br	8008569c <___vfprintf_internal_r+0xba8>
80085ccc:	9080040c 	andi	r2,r18,16
80085cd0:	1001b326 	beq	r2,zero,800863a0 <___vfprintf_internal_r+0x18ac>
80085cd4:	d9002d17 	ldw	r4,180(sp)
80085cd8:	d9402917 	ldw	r5,164(sp)
80085cdc:	d8002785 	stb	zero,158(sp)
80085ce0:	20800104 	addi	r2,r4,4
80085ce4:	24c00017 	ldw	r19,0(r4)
80085ce8:	002d883a 	mov	r22,zero
80085cec:	2801b516 	blt	r5,zero,800863c4 <___vfprintf_internal_r+0x18d0>
80085cf0:	00ffdfc4 	movi	r3,-129
80085cf4:	d8802d15 	stw	r2,180(sp)
80085cf8:	90e4703a 	and	r18,r18,r3
80085cfc:	983d2726 	beq	r19,zero,8008519c <___vfprintf_internal_r+0x6a8>
80085d00:	0039883a 	mov	fp,zero
80085d04:	003d2a06 	br	800851b0 <___vfprintf_internal_r+0x6bc>
80085d08:	dc402617 	ldw	r17,152(sp)
80085d0c:	0441d30e 	bge	zero,r17,8008645c <___vfprintf_internal_r+0x1968>
80085d10:	dc403217 	ldw	r17,200(sp)
80085d14:	d8803317 	ldw	r2,204(sp)
80085d18:	1440010e 	bge	r2,r17,80085d20 <___vfprintf_internal_r+0x122c>
80085d1c:	1023883a 	mov	r17,r2
80085d20:	04400a0e 	bge	zero,r17,80085d4c <___vfprintf_internal_r+0x1258>
80085d24:	d8801f17 	ldw	r2,124(sp)
80085d28:	1c47883a 	add	r3,r3,r17
80085d2c:	44000015 	stw	r16,0(r8)
80085d30:	10800044 	addi	r2,r2,1
80085d34:	44400115 	stw	r17,4(r8)
80085d38:	d8c02015 	stw	r3,128(sp)
80085d3c:	d8801f15 	stw	r2,124(sp)
80085d40:	010001c4 	movi	r4,7
80085d44:	20826516 	blt	r4,r2,800866dc <___vfprintf_internal_r+0x1be8>
80085d48:	42000204 	addi	r8,r8,8
80085d4c:	88026116 	blt	r17,zero,800866d4 <___vfprintf_internal_r+0x1be0>
80085d50:	d9003217 	ldw	r4,200(sp)
80085d54:	2463c83a 	sub	r17,r4,r17
80085d58:	04407b0e 	bge	zero,r17,80085f48 <___vfprintf_internal_r+0x1454>
80085d5c:	05800404 	movi	r22,16
80085d60:	d8801f17 	ldw	r2,124(sp)
80085d64:	b4419d0e 	bge	r22,r17,800863dc <___vfprintf_internal_r+0x18e8>
80085d68:	012002b4 	movhi	r4,32778
80085d6c:	2130cb84 	addi	r4,r4,-15570
80085d70:	d9002b15 	stw	r4,172(sp)
80085d74:	070001c4 	movi	fp,7
80085d78:	dcc02c17 	ldw	r19,176(sp)
80085d7c:	00000306 	br	80085d8c <___vfprintf_internal_r+0x1298>
80085d80:	42000204 	addi	r8,r8,8
80085d84:	8c7ffc04 	addi	r17,r17,-16
80085d88:	b441970e 	bge	r22,r17,800863e8 <___vfprintf_internal_r+0x18f4>
80085d8c:	18c00404 	addi	r3,r3,16
80085d90:	10800044 	addi	r2,r2,1
80085d94:	45000015 	stw	r20,0(r8)
80085d98:	45800115 	stw	r22,4(r8)
80085d9c:	d8c02015 	stw	r3,128(sp)
80085da0:	d8801f15 	stw	r2,124(sp)
80085da4:	e0bff60e 	bge	fp,r2,80085d80 <___vfprintf_internal_r+0x128c>
80085da8:	d9801e04 	addi	r6,sp,120
80085dac:	b80b883a 	mov	r5,r23
80085db0:	9809883a 	mov	r4,r19
80085db4:	00918680 	call	80091868 <__sprint_r>
80085db8:	103c501e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085dbc:	d8c02017 	ldw	r3,128(sp)
80085dc0:	d8801f17 	ldw	r2,124(sp)
80085dc4:	da000404 	addi	r8,sp,16
80085dc8:	003fee06 	br	80085d84 <___vfprintf_internal_r+0x1290>
80085dcc:	d9002c17 	ldw	r4,176(sp)
80085dd0:	d9801e04 	addi	r6,sp,120
80085dd4:	b80b883a 	mov	r5,r23
80085dd8:	00918680 	call	80091868 <__sprint_r>
80085ddc:	103c471e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085de0:	d8c02017 	ldw	r3,128(sp)
80085de4:	df002787 	ldb	fp,158(sp)
80085de8:	da000404 	addi	r8,sp,16
80085dec:	003d5606 	br	80085348 <___vfprintf_internal_r+0x854>
80085df0:	9080040c 	andi	r2,r18,16
80085df4:	10016126 	beq	r2,zero,8008637c <___vfprintf_internal_r+0x1888>
80085df8:	d8802d17 	ldw	r2,180(sp)
80085dfc:	14c00017 	ldw	r19,0(r2)
80085e00:	10800104 	addi	r2,r2,4
80085e04:	d8802d15 	stw	r2,180(sp)
80085e08:	982dd7fa 	srai	r22,r19,31
80085e0c:	b005883a 	mov	r2,r22
80085e10:	003c8206 	br	8008501c <___vfprintf_internal_r+0x528>
80085e14:	9080040c 	andi	r2,r18,16
80085e18:	10003526 	beq	r2,zero,80085ef0 <___vfprintf_internal_r+0x13fc>
80085e1c:	d9402d17 	ldw	r5,180(sp)
80085e20:	d8c02917 	ldw	r3,164(sp)
80085e24:	d8002785 	stb	zero,158(sp)
80085e28:	28800104 	addi	r2,r5,4
80085e2c:	2cc00017 	ldw	r19,0(r5)
80085e30:	002d883a 	mov	r22,zero
80085e34:	18003716 	blt	r3,zero,80085f14 <___vfprintf_internal_r+0x1420>
80085e38:	00ffdfc4 	movi	r3,-129
80085e3c:	d8802d15 	stw	r2,180(sp)
80085e40:	90e4703a 	and	r18,r18,r3
80085e44:	0039883a 	mov	fp,zero
80085e48:	983df326 	beq	r19,zero,80085618 <___vfprintf_internal_r+0xb24>
80085e4c:	00800244 	movi	r2,9
80085e50:	14fc7b36 	bltu	r2,r19,80085040 <___vfprintf_internal_r+0x54c>
80085e54:	d8c02817 	ldw	r3,160(sp)
80085e58:	dc001dc4 	addi	r16,sp,119
80085e5c:	9cc00c04 	addi	r19,r19,48
80085e60:	1c07c83a 	sub	r3,r3,r16
80085e64:	dcc01dc5 	stb	r19,119(sp)
80085e68:	d8c02e15 	stw	r3,184(sp)
80085e6c:	003ce806 	br	80085210 <___vfprintf_internal_r+0x71c>
80085e70:	d8803317 	ldw	r2,204(sp)
80085e74:	143fffc4 	addi	r16,r2,-1
80085e78:	043f4d0e 	bge	zero,r16,80085bb0 <___vfprintf_internal_r+0x10bc>
80085e7c:	07000404 	movi	fp,16
80085e80:	e400810e 	bge	fp,r16,80086088 <___vfprintf_internal_r+0x1594>
80085e84:	016002b4 	movhi	r5,32778
80085e88:	2970cb84 	addi	r5,r5,-15570
80085e8c:	d9402b15 	stw	r5,172(sp)
80085e90:	01c001c4 	movi	r7,7
80085e94:	dcc02c17 	ldw	r19,176(sp)
80085e98:	00000306 	br	80085ea8 <___vfprintf_internal_r+0x13b4>
80085e9c:	b5800204 	addi	r22,r22,8
80085ea0:	843ffc04 	addi	r16,r16,-16
80085ea4:	e4007b0e 	bge	fp,r16,80086094 <___vfprintf_internal_r+0x15a0>
80085ea8:	18c00404 	addi	r3,r3,16
80085eac:	8c400044 	addi	r17,r17,1
80085eb0:	b5000015 	stw	r20,0(r22)
80085eb4:	b7000115 	stw	fp,4(r22)
80085eb8:	d8c02015 	stw	r3,128(sp)
80085ebc:	dc401f15 	stw	r17,124(sp)
80085ec0:	3c7ff60e 	bge	r7,r17,80085e9c <___vfprintf_internal_r+0x13a8>
80085ec4:	d9801e04 	addi	r6,sp,120
80085ec8:	b80b883a 	mov	r5,r23
80085ecc:	9809883a 	mov	r4,r19
80085ed0:	d9c03c15 	stw	r7,240(sp)
80085ed4:	00918680 	call	80091868 <__sprint_r>
80085ed8:	d9c03c17 	ldw	r7,240(sp)
80085edc:	103c071e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085ee0:	d8c02017 	ldw	r3,128(sp)
80085ee4:	dc401f17 	ldw	r17,124(sp)
80085ee8:	dd800404 	addi	r22,sp,16
80085eec:	003fec06 	br	80085ea0 <___vfprintf_internal_r+0x13ac>
80085ef0:	9080100c 	andi	r2,r18,64
80085ef4:	d8002785 	stb	zero,158(sp)
80085ef8:	10010e26 	beq	r2,zero,80086334 <___vfprintf_internal_r+0x1840>
80085efc:	d9002d17 	ldw	r4,180(sp)
80085f00:	d9402917 	ldw	r5,164(sp)
80085f04:	002d883a 	mov	r22,zero
80085f08:	20800104 	addi	r2,r4,4
80085f0c:	24c0000b 	ldhu	r19,0(r4)
80085f10:	283fc90e 	bge	r5,zero,80085e38 <___vfprintf_internal_r+0x1344>
80085f14:	d8802d15 	stw	r2,180(sp)
80085f18:	0039883a 	mov	fp,zero
80085f1c:	9d84b03a 	or	r2,r19,r22
80085f20:	103c461e 	bne	r2,zero,8008503c <___vfprintf_internal_r+0x548>
80085f24:	00800044 	movi	r2,1
80085f28:	003e6c06 	br	800858dc <___vfprintf_internal_r+0xde8>
80085f2c:	d9002c17 	ldw	r4,176(sp)
80085f30:	d9801e04 	addi	r6,sp,120
80085f34:	b80b883a 	mov	r5,r23
80085f38:	00918680 	call	80091868 <__sprint_r>
80085f3c:	103bef1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80085f40:	d8c02017 	ldw	r3,128(sp)
80085f44:	da000404 	addi	r8,sp,16
80085f48:	d9003217 	ldw	r4,200(sp)
80085f4c:	d8802617 	ldw	r2,152(sp)
80085f50:	d9403317 	ldw	r5,204(sp)
80085f54:	8123883a 	add	r17,r16,r4
80085f58:	11400216 	blt	r2,r5,80085f64 <___vfprintf_internal_r+0x1470>
80085f5c:	9100004c 	andi	r4,r18,1
80085f60:	20000d26 	beq	r4,zero,80085f98 <___vfprintf_internal_r+0x14a4>
80085f64:	d9003717 	ldw	r4,220(sp)
80085f68:	d9403417 	ldw	r5,208(sp)
80085f6c:	1907883a 	add	r3,r3,r4
80085f70:	d9001f17 	ldw	r4,124(sp)
80085f74:	41400015 	stw	r5,0(r8)
80085f78:	d9403717 	ldw	r5,220(sp)
80085f7c:	21000044 	addi	r4,r4,1
80085f80:	d8c02015 	stw	r3,128(sp)
80085f84:	41400115 	stw	r5,4(r8)
80085f88:	d9001f15 	stw	r4,124(sp)
80085f8c:	014001c4 	movi	r5,7
80085f90:	2901e816 	blt	r5,r4,80086734 <___vfprintf_internal_r+0x1c40>
80085f94:	42000204 	addi	r8,r8,8
80085f98:	d9003317 	ldw	r4,204(sp)
80085f9c:	8121883a 	add	r16,r16,r4
80085fa0:	2085c83a 	sub	r2,r4,r2
80085fa4:	8461c83a 	sub	r16,r16,r17
80085fa8:	1400010e 	bge	r2,r16,80085fb0 <___vfprintf_internal_r+0x14bc>
80085fac:	1021883a 	mov	r16,r2
80085fb0:	04000a0e 	bge	zero,r16,80085fdc <___vfprintf_internal_r+0x14e8>
80085fb4:	d9001f17 	ldw	r4,124(sp)
80085fb8:	1c07883a 	add	r3,r3,r16
80085fbc:	44400015 	stw	r17,0(r8)
80085fc0:	21000044 	addi	r4,r4,1
80085fc4:	44000115 	stw	r16,4(r8)
80085fc8:	d8c02015 	stw	r3,128(sp)
80085fcc:	d9001f15 	stw	r4,124(sp)
80085fd0:	014001c4 	movi	r5,7
80085fd4:	2901fb16 	blt	r5,r4,800867c4 <___vfprintf_internal_r+0x1cd0>
80085fd8:	42000204 	addi	r8,r8,8
80085fdc:	8001f716 	blt	r16,zero,800867bc <___vfprintf_internal_r+0x1cc8>
80085fe0:	1421c83a 	sub	r16,r2,r16
80085fe4:	043d380e 	bge	zero,r16,800854c8 <___vfprintf_internal_r+0x9d4>
80085fe8:	04400404 	movi	r17,16
80085fec:	d8801f17 	ldw	r2,124(sp)
80085ff0:	8c3efb0e 	bge	r17,r16,80085be0 <___vfprintf_internal_r+0x10ec>
80085ff4:	016002b4 	movhi	r5,32778
80085ff8:	2970cb84 	addi	r5,r5,-15570
80085ffc:	d9402b15 	stw	r5,172(sp)
80086000:	058001c4 	movi	r22,7
80086004:	dcc02c17 	ldw	r19,176(sp)
80086008:	00000306 	br	80086018 <___vfprintf_internal_r+0x1524>
8008600c:	42000204 	addi	r8,r8,8
80086010:	843ffc04 	addi	r16,r16,-16
80086014:	8c3ef50e 	bge	r17,r16,80085bec <___vfprintf_internal_r+0x10f8>
80086018:	18c00404 	addi	r3,r3,16
8008601c:	10800044 	addi	r2,r2,1
80086020:	45000015 	stw	r20,0(r8)
80086024:	44400115 	stw	r17,4(r8)
80086028:	d8c02015 	stw	r3,128(sp)
8008602c:	d8801f15 	stw	r2,124(sp)
80086030:	b0bff60e 	bge	r22,r2,8008600c <___vfprintf_internal_r+0x1518>
80086034:	d9801e04 	addi	r6,sp,120
80086038:	b80b883a 	mov	r5,r23
8008603c:	9809883a 	mov	r4,r19
80086040:	00918680 	call	80091868 <__sprint_r>
80086044:	103bad1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80086048:	d8c02017 	ldw	r3,128(sp)
8008604c:	d8801f17 	ldw	r2,124(sp)
80086050:	da000404 	addi	r8,sp,16
80086054:	003fee06 	br	80086010 <___vfprintf_internal_r+0x151c>
80086058:	9088703a 	and	r4,r18,r2
8008605c:	203eab1e 	bne	r4,zero,80085b0c <___vfprintf_internal_r+0x1018>
80086060:	dc401f17 	ldw	r17,124(sp)
80086064:	40800115 	stw	r2,4(r8)
80086068:	44000015 	stw	r16,0(r8)
8008606c:	8c400044 	addi	r17,r17,1
80086070:	d8c02015 	stw	r3,128(sp)
80086074:	dc401f15 	stw	r17,124(sp)
80086078:	008001c4 	movi	r2,7
8008607c:	14400e16 	blt	r2,r17,800860b8 <___vfprintf_internal_r+0x15c4>
80086080:	45800204 	addi	r22,r8,8
80086084:	003eca06 	br	80085bb0 <___vfprintf_internal_r+0x10bc>
80086088:	012002b4 	movhi	r4,32778
8008608c:	2130cb84 	addi	r4,r4,-15570
80086090:	d9002b15 	stw	r4,172(sp)
80086094:	d8802b17 	ldw	r2,172(sp)
80086098:	1c07883a 	add	r3,r3,r16
8008609c:	8c400044 	addi	r17,r17,1
800860a0:	b0800015 	stw	r2,0(r22)
800860a4:	b4000115 	stw	r16,4(r22)
800860a8:	d8c02015 	stw	r3,128(sp)
800860ac:	dc401f15 	stw	r17,124(sp)
800860b0:	008001c4 	movi	r2,7
800860b4:	147ebd0e 	bge	r2,r17,80085bac <___vfprintf_internal_r+0x10b8>
800860b8:	d9002c17 	ldw	r4,176(sp)
800860bc:	d9801e04 	addi	r6,sp,120
800860c0:	b80b883a 	mov	r5,r23
800860c4:	00918680 	call	80091868 <__sprint_r>
800860c8:	103b8c1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
800860cc:	d8c02017 	ldw	r3,128(sp)
800860d0:	dc401f17 	ldw	r17,124(sp)
800860d4:	dd800404 	addi	r22,sp,16
800860d8:	003eb506 	br	80085bb0 <___vfprintf_internal_r+0x10bc>
800860dc:	d9002c17 	ldw	r4,176(sp)
800860e0:	d9801e04 	addi	r6,sp,120
800860e4:	b80b883a 	mov	r5,r23
800860e8:	00918680 	call	80091868 <__sprint_r>
800860ec:	103b831e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
800860f0:	d8c02017 	ldw	r3,128(sp)
800860f4:	dc401f17 	ldw	r17,124(sp)
800860f8:	da000404 	addi	r8,sp,16
800860fc:	003e8d06 	br	80085b34 <___vfprintf_internal_r+0x1040>
80086100:	d9002c17 	ldw	r4,176(sp)
80086104:	d9801e04 	addi	r6,sp,120
80086108:	b80b883a 	mov	r5,r23
8008610c:	00918680 	call	80091868 <__sprint_r>
80086110:	103b7a1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80086114:	d8c02017 	ldw	r3,128(sp)
80086118:	dc401f17 	ldw	r17,124(sp)
8008611c:	dd800404 	addi	r22,sp,16
80086120:	003e8f06 	br	80085b60 <___vfprintf_internal_r+0x106c>
80086124:	0027883a 	mov	r19,zero
80086128:	003f4a06 	br	80085e54 <___vfprintf_internal_r+0x1360>
8008612c:	d9002c17 	ldw	r4,176(sp)
80086130:	d9801e04 	addi	r6,sp,120
80086134:	b80b883a 	mov	r5,r23
80086138:	00918680 	call	80091868 <__sprint_r>
8008613c:	103b6f1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80086140:	d8c02017 	ldw	r3,128(sp)
80086144:	da000404 	addi	r8,sp,16
80086148:	003c9d06 	br	800853c0 <___vfprintf_internal_r+0x8cc>
8008614c:	04e7c83a 	sub	r19,zero,r19
80086150:	9804c03a 	cmpne	r2,r19,zero
80086154:	05adc83a 	sub	r22,zero,r22
80086158:	b0adc83a 	sub	r22,r22,r2
8008615c:	d8802917 	ldw	r2,164(sp)
80086160:	07000b44 	movi	fp,45
80086164:	df002785 	stb	fp,158(sp)
80086168:	10017b16 	blt	r2,zero,80086758 <___vfprintf_internal_r+0x1c64>
8008616c:	00bfdfc4 	movi	r2,-129
80086170:	90a4703a 	and	r18,r18,r2
80086174:	003bb106 	br	8008503c <___vfprintf_internal_r+0x548>
80086178:	d9003617 	ldw	r4,216(sp)
8008617c:	d9403817 	ldw	r5,224(sp)
80086180:	da003d15 	stw	r8,244(sp)
80086184:	008bae00 	call	8008bae0 <__fpclassifyd>
80086188:	da003d17 	ldw	r8,244(sp)
8008618c:	1000f026 	beq	r2,zero,80086550 <___vfprintf_internal_r+0x1a5c>
80086190:	d9002917 	ldw	r4,164(sp)
80086194:	05bff7c4 	movi	r22,-33
80086198:	00bfffc4 	movi	r2,-1
8008619c:	8dac703a 	and	r22,r17,r22
800861a0:	20820026 	beq	r4,r2,800869a4 <___vfprintf_internal_r+0x1eb0>
800861a4:	008011c4 	movi	r2,71
800861a8:	b081f726 	beq	r22,r2,80086988 <___vfprintf_internal_r+0x1e94>
800861ac:	d9003817 	ldw	r4,224(sp)
800861b0:	90c04014 	ori	r3,r18,256
800861b4:	d8c02b15 	stw	r3,172(sp)
800861b8:	20021516 	blt	r4,zero,80086a10 <___vfprintf_internal_r+0x1f1c>
800861bc:	dcc03817 	ldw	r19,224(sp)
800861c0:	d8002a05 	stb	zero,168(sp)
800861c4:	00801984 	movi	r2,102
800861c8:	8881f926 	beq	r17,r2,800869b0 <___vfprintf_internal_r+0x1ebc>
800861cc:	00801184 	movi	r2,70
800861d0:	88821c26 	beq	r17,r2,80086a44 <___vfprintf_internal_r+0x1f50>
800861d4:	00801144 	movi	r2,69
800861d8:	b081ef26 	beq	r22,r2,80086998 <___vfprintf_internal_r+0x1ea4>
800861dc:	d8c02917 	ldw	r3,164(sp)
800861e0:	d8802104 	addi	r2,sp,132
800861e4:	d8800315 	stw	r2,12(sp)
800861e8:	d9403617 	ldw	r5,216(sp)
800861ec:	d8802504 	addi	r2,sp,148
800861f0:	d9002c17 	ldw	r4,176(sp)
800861f4:	d8800215 	stw	r2,8(sp)
800861f8:	d8802604 	addi	r2,sp,152
800861fc:	d8c00015 	stw	r3,0(sp)
80086200:	d8800115 	stw	r2,4(sp)
80086204:	01c00084 	movi	r7,2
80086208:	980d883a 	mov	r6,r19
8008620c:	d8c03c15 	stw	r3,240(sp)
80086210:	da003d15 	stw	r8,244(sp)
80086214:	00871cc0 	call	800871cc <_dtoa_r>
80086218:	1021883a 	mov	r16,r2
8008621c:	008019c4 	movi	r2,103
80086220:	d8c03c17 	ldw	r3,240(sp)
80086224:	da003d17 	ldw	r8,244(sp)
80086228:	88817126 	beq	r17,r2,800867f0 <___vfprintf_internal_r+0x1cfc>
8008622c:	008011c4 	movi	r2,71
80086230:	88829226 	beq	r17,r2,80086c7c <___vfprintf_internal_r+0x2188>
80086234:	80f9883a 	add	fp,r16,r3
80086238:	d9003617 	ldw	r4,216(sp)
8008623c:	000d883a 	mov	r6,zero
80086240:	000f883a 	mov	r7,zero
80086244:	980b883a 	mov	r5,r19
80086248:	da003d15 	stw	r8,244(sp)
8008624c:	00974900 	call	80097490 <__eqdf2>
80086250:	da003d17 	ldw	r8,244(sp)
80086254:	10018d26 	beq	r2,zero,8008688c <___vfprintf_internal_r+0x1d98>
80086258:	d8802117 	ldw	r2,132(sp)
8008625c:	1700062e 	bgeu	r2,fp,80086278 <___vfprintf_internal_r+0x1784>
80086260:	01000c04 	movi	r4,48
80086264:	10c00044 	addi	r3,r2,1
80086268:	d8c02115 	stw	r3,132(sp)
8008626c:	11000005 	stb	r4,0(r2)
80086270:	d8802117 	ldw	r2,132(sp)
80086274:	173ffb36 	bltu	r2,fp,80086264 <___vfprintf_internal_r+0x1770>
80086278:	1405c83a 	sub	r2,r2,r16
8008627c:	d8803315 	stw	r2,204(sp)
80086280:	008011c4 	movi	r2,71
80086284:	b0817626 	beq	r22,r2,80086860 <___vfprintf_internal_r+0x1d6c>
80086288:	00801944 	movi	r2,101
8008628c:	1442810e 	bge	r2,r17,80086c94 <___vfprintf_internal_r+0x21a0>
80086290:	d8c02617 	ldw	r3,152(sp)
80086294:	00801984 	movi	r2,102
80086298:	d8c03215 	stw	r3,200(sp)
8008629c:	8881fe26 	beq	r17,r2,80086a98 <___vfprintf_internal_r+0x1fa4>
800862a0:	d8c03217 	ldw	r3,200(sp)
800862a4:	d9003317 	ldw	r4,204(sp)
800862a8:	1901dd16 	blt	r3,r4,80086a20 <___vfprintf_internal_r+0x1f2c>
800862ac:	9480004c 	andi	r18,r18,1
800862b0:	90022b1e 	bne	r18,zero,80086b60 <___vfprintf_internal_r+0x206c>
800862b4:	1805883a 	mov	r2,r3
800862b8:	18028016 	blt	r3,zero,80086cbc <___vfprintf_internal_r+0x21c8>
800862bc:	d8c03217 	ldw	r3,200(sp)
800862c0:	044019c4 	movi	r17,103
800862c4:	d8c02e15 	stw	r3,184(sp)
800862c8:	df002a07 	ldb	fp,168(sp)
800862cc:	e001531e 	bne	fp,zero,8008681c <___vfprintf_internal_r+0x1d28>
800862d0:	df002783 	ldbu	fp,158(sp)
800862d4:	d8802a15 	stw	r2,168(sp)
800862d8:	dc802b17 	ldw	r18,172(sp)
800862dc:	d8002915 	stw	zero,164(sp)
800862e0:	003bd106 	br	80085228 <___vfprintf_internal_r+0x734>
800862e4:	d8802d17 	ldw	r2,180(sp)
800862e8:	d8c02d17 	ldw	r3,180(sp)
800862ec:	d9002d17 	ldw	r4,180(sp)
800862f0:	10800017 	ldw	r2,0(r2)
800862f4:	18c00117 	ldw	r3,4(r3)
800862f8:	21000204 	addi	r4,r4,8
800862fc:	d8803615 	stw	r2,216(sp)
80086300:	d8c03815 	stw	r3,224(sp)
80086304:	d9002d15 	stw	r4,180(sp)
80086308:	003b7506 	br	800850e0 <___vfprintf_internal_r+0x5ec>
8008630c:	ac400007 	ldb	r17,0(r21)
80086310:	003a5906 	br	80084c78 <___vfprintf_internal_r+0x184>
80086314:	9080100c 	andi	r2,r18,64
80086318:	1000a826 	beq	r2,zero,800865bc <___vfprintf_internal_r+0x1ac8>
8008631c:	d9002d17 	ldw	r4,180(sp)
80086320:	002d883a 	mov	r22,zero
80086324:	24c0000b 	ldhu	r19,0(r4)
80086328:	21000104 	addi	r4,r4,4
8008632c:	d9002d15 	stw	r4,180(sp)
80086330:	003ccb06 	br	80085660 <___vfprintf_internal_r+0xb6c>
80086334:	d8c02d17 	ldw	r3,180(sp)
80086338:	d9002917 	ldw	r4,164(sp)
8008633c:	002d883a 	mov	r22,zero
80086340:	18800104 	addi	r2,r3,4
80086344:	1cc00017 	ldw	r19,0(r3)
80086348:	203ebb0e 	bge	r4,zero,80085e38 <___vfprintf_internal_r+0x1344>
8008634c:	003ef106 	br	80085f14 <___vfprintf_internal_r+0x1420>
80086350:	9080040c 	andi	r2,r18,16
80086354:	1000921e 	bne	r2,zero,800865a0 <___vfprintf_internal_r+0x1aac>
80086358:	9480100c 	andi	r18,r18,64
8008635c:	90013926 	beq	r18,zero,80086844 <___vfprintf_internal_r+0x1d50>
80086360:	d9002d17 	ldw	r4,180(sp)
80086364:	d9402f17 	ldw	r5,188(sp)
80086368:	20800017 	ldw	r2,0(r4)
8008636c:	21000104 	addi	r4,r4,4
80086370:	d9002d15 	stw	r4,180(sp)
80086374:	1140000d 	sth	r5,0(r2)
80086378:	003a1606 	br	80084bd4 <___vfprintf_internal_r+0xe0>
8008637c:	9080100c 	andi	r2,r18,64
80086380:	10008026 	beq	r2,zero,80086584 <___vfprintf_internal_r+0x1a90>
80086384:	d8c02d17 	ldw	r3,180(sp)
80086388:	1cc0000f 	ldh	r19,0(r3)
8008638c:	18c00104 	addi	r3,r3,4
80086390:	d8c02d15 	stw	r3,180(sp)
80086394:	982dd7fa 	srai	r22,r19,31
80086398:	b005883a 	mov	r2,r22
8008639c:	003b1f06 	br	8008501c <___vfprintf_internal_r+0x528>
800863a0:	9080100c 	andi	r2,r18,64
800863a4:	d8002785 	stb	zero,158(sp)
800863a8:	10008a1e 	bne	r2,zero,800865d4 <___vfprintf_internal_r+0x1ae0>
800863ac:	d9402d17 	ldw	r5,180(sp)
800863b0:	d8c02917 	ldw	r3,164(sp)
800863b4:	002d883a 	mov	r22,zero
800863b8:	28800104 	addi	r2,r5,4
800863bc:	2cc00017 	ldw	r19,0(r5)
800863c0:	183e4b0e 	bge	r3,zero,80085cf0 <___vfprintf_internal_r+0x11fc>
800863c4:	9d86b03a 	or	r3,r19,r22
800863c8:	d8802d15 	stw	r2,180(sp)
800863cc:	183e4c1e 	bne	r3,zero,80085d00 <___vfprintf_internal_r+0x120c>
800863d0:	0039883a 	mov	fp,zero
800863d4:	0005883a 	mov	r2,zero
800863d8:	003d4006 	br	800858dc <___vfprintf_internal_r+0xde8>
800863dc:	016002b4 	movhi	r5,32778
800863e0:	2970cb84 	addi	r5,r5,-15570
800863e4:	d9402b15 	stw	r5,172(sp)
800863e8:	d9402b17 	ldw	r5,172(sp)
800863ec:	1c47883a 	add	r3,r3,r17
800863f0:	10800044 	addi	r2,r2,1
800863f4:	41400015 	stw	r5,0(r8)
800863f8:	44400115 	stw	r17,4(r8)
800863fc:	d8c02015 	stw	r3,128(sp)
80086400:	d8801f15 	stw	r2,124(sp)
80086404:	010001c4 	movi	r4,7
80086408:	20bec816 	blt	r4,r2,80085f2c <___vfprintf_internal_r+0x1438>
8008640c:	42000204 	addi	r8,r8,8
80086410:	003ecd06 	br	80085f48 <___vfprintf_internal_r+0x1454>
80086414:	d9002917 	ldw	r4,164(sp)
80086418:	d8002785 	stb	zero,158(sp)
8008641c:	203d2d16 	blt	r4,zero,800858d4 <___vfprintf_internal_r+0xde0>
80086420:	00bfdfc4 	movi	r2,-129
80086424:	90a4703a 	and	r18,r18,r2
80086428:	003a9106 	br	80084e70 <___vfprintf_internal_r+0x37c>
8008642c:	012002b4 	movhi	r4,32778
80086430:	2130cb84 	addi	r4,r4,-15570
80086434:	d9002b15 	stw	r4,172(sp)
80086438:	003c0c06 	br	8008546c <___vfprintf_internal_r+0x978>
8008643c:	d9002c17 	ldw	r4,176(sp)
80086440:	d9801e04 	addi	r6,sp,120
80086444:	b80b883a 	mov	r5,r23
80086448:	00918680 	call	80091868 <__sprint_r>
8008644c:	103aab1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80086450:	d8c02017 	ldw	r3,128(sp)
80086454:	da000404 	addi	r8,sp,16
80086458:	003d4106 	br	80085960 <___vfprintf_internal_r+0xe6c>
8008645c:	d8801f17 	ldw	r2,124(sp)
80086460:	016002b4 	movhi	r5,32778
80086464:	01000044 	movi	r4,1
80086468:	18c00044 	addi	r3,r3,1
8008646c:	10800044 	addi	r2,r2,1
80086470:	2970cb04 	addi	r5,r5,-15572
80086474:	41000115 	stw	r4,4(r8)
80086478:	41400015 	stw	r5,0(r8)
8008647c:	d8c02015 	stw	r3,128(sp)
80086480:	d8801f15 	stw	r2,124(sp)
80086484:	010001c4 	movi	r4,7
80086488:	20805c16 	blt	r4,r2,800865fc <___vfprintf_internal_r+0x1b08>
8008648c:	42000204 	addi	r8,r8,8
80086490:	8800041e 	bne	r17,zero,800864a4 <___vfprintf_internal_r+0x19b0>
80086494:	d8803317 	ldw	r2,204(sp)
80086498:	1000021e 	bne	r2,zero,800864a4 <___vfprintf_internal_r+0x19b0>
8008649c:	9080004c 	andi	r2,r18,1
800864a0:	103c0926 	beq	r2,zero,800854c8 <___vfprintf_internal_r+0x9d4>
800864a4:	d9003717 	ldw	r4,220(sp)
800864a8:	d8801f17 	ldw	r2,124(sp)
800864ac:	d9403417 	ldw	r5,208(sp)
800864b0:	20c7883a 	add	r3,r4,r3
800864b4:	10800044 	addi	r2,r2,1
800864b8:	41000115 	stw	r4,4(r8)
800864bc:	41400015 	stw	r5,0(r8)
800864c0:	d8c02015 	stw	r3,128(sp)
800864c4:	d8801f15 	stw	r2,124(sp)
800864c8:	010001c4 	movi	r4,7
800864cc:	20812116 	blt	r4,r2,80086954 <___vfprintf_internal_r+0x1e60>
800864d0:	42000204 	addi	r8,r8,8
800864d4:	0463c83a 	sub	r17,zero,r17
800864d8:	0440730e 	bge	zero,r17,800866a8 <___vfprintf_internal_r+0x1bb4>
800864dc:	05800404 	movi	r22,16
800864e0:	b440860e 	bge	r22,r17,800866fc <___vfprintf_internal_r+0x1c08>
800864e4:	016002b4 	movhi	r5,32778
800864e8:	2970cb84 	addi	r5,r5,-15570
800864ec:	d9402b15 	stw	r5,172(sp)
800864f0:	070001c4 	movi	fp,7
800864f4:	dcc02c17 	ldw	r19,176(sp)
800864f8:	00000306 	br	80086508 <___vfprintf_internal_r+0x1a14>
800864fc:	42000204 	addi	r8,r8,8
80086500:	8c7ffc04 	addi	r17,r17,-16
80086504:	b440800e 	bge	r22,r17,80086708 <___vfprintf_internal_r+0x1c14>
80086508:	18c00404 	addi	r3,r3,16
8008650c:	10800044 	addi	r2,r2,1
80086510:	45000015 	stw	r20,0(r8)
80086514:	45800115 	stw	r22,4(r8)
80086518:	d8c02015 	stw	r3,128(sp)
8008651c:	d8801f15 	stw	r2,124(sp)
80086520:	e0bff60e 	bge	fp,r2,800864fc <___vfprintf_internal_r+0x1a08>
80086524:	d9801e04 	addi	r6,sp,120
80086528:	b80b883a 	mov	r5,r23
8008652c:	9809883a 	mov	r4,r19
80086530:	00918680 	call	80091868 <__sprint_r>
80086534:	103a711e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80086538:	d8c02017 	ldw	r3,128(sp)
8008653c:	d8801f17 	ldw	r2,124(sp)
80086540:	da000404 	addi	r8,sp,16
80086544:	003fee06 	br	80086500 <___vfprintf_internal_r+0x1a0c>
80086548:	00bfffc4 	movi	r2,-1
8008654c:	003a6f06 	br	80084f0c <___vfprintf_internal_r+0x418>
80086550:	008011c4 	movi	r2,71
80086554:	1440b816 	blt	r2,r17,80086838 <___vfprintf_internal_r+0x1d44>
80086558:	042002b4 	movhi	r16,32778
8008655c:	8430bd04 	addi	r16,r16,-15628
80086560:	00c000c4 	movi	r3,3
80086564:	00bfdfc4 	movi	r2,-129
80086568:	d8c02a15 	stw	r3,168(sp)
8008656c:	90a4703a 	and	r18,r18,r2
80086570:	df002783 	ldbu	fp,158(sp)
80086574:	d8c02e15 	stw	r3,184(sp)
80086578:	d8002915 	stw	zero,164(sp)
8008657c:	d8003215 	stw	zero,200(sp)
80086580:	003b2906 	br	80085228 <___vfprintf_internal_r+0x734>
80086584:	d9002d17 	ldw	r4,180(sp)
80086588:	24c00017 	ldw	r19,0(r4)
8008658c:	21000104 	addi	r4,r4,4
80086590:	d9002d15 	stw	r4,180(sp)
80086594:	982dd7fa 	srai	r22,r19,31
80086598:	b005883a 	mov	r2,r22
8008659c:	003a9f06 	br	8008501c <___vfprintf_internal_r+0x528>
800865a0:	d9402d17 	ldw	r5,180(sp)
800865a4:	d8c02f17 	ldw	r3,188(sp)
800865a8:	28800017 	ldw	r2,0(r5)
800865ac:	29400104 	addi	r5,r5,4
800865b0:	d9402d15 	stw	r5,180(sp)
800865b4:	10c00015 	stw	r3,0(r2)
800865b8:	00398606 	br	80084bd4 <___vfprintf_internal_r+0xe0>
800865bc:	d9402d17 	ldw	r5,180(sp)
800865c0:	002d883a 	mov	r22,zero
800865c4:	2cc00017 	ldw	r19,0(r5)
800865c8:	29400104 	addi	r5,r5,4
800865cc:	d9402d15 	stw	r5,180(sp)
800865d0:	003c2306 	br	80085660 <___vfprintf_internal_r+0xb6c>
800865d4:	d8c02d17 	ldw	r3,180(sp)
800865d8:	d9002917 	ldw	r4,164(sp)
800865dc:	002d883a 	mov	r22,zero
800865e0:	18800104 	addi	r2,r3,4
800865e4:	1cc0000b 	ldhu	r19,0(r3)
800865e8:	203dc10e 	bge	r4,zero,80085cf0 <___vfprintf_internal_r+0x11fc>
800865ec:	003f7506 	br	800863c4 <___vfprintf_internal_r+0x18d0>
800865f0:	042002b4 	movhi	r16,32778
800865f4:	8430bb04 	addi	r16,r16,-15636
800865f8:	003acc06 	br	8008512c <___vfprintf_internal_r+0x638>
800865fc:	d9002c17 	ldw	r4,176(sp)
80086600:	d9801e04 	addi	r6,sp,120
80086604:	b80b883a 	mov	r5,r23
80086608:	00918680 	call	80091868 <__sprint_r>
8008660c:	103a3b1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80086610:	dc402617 	ldw	r17,152(sp)
80086614:	d8c02017 	ldw	r3,128(sp)
80086618:	da000404 	addi	r8,sp,16
8008661c:	003f9c06 	br	80086490 <___vfprintf_internal_r+0x199c>
80086620:	ac400043 	ldbu	r17,1(r21)
80086624:	94800814 	ori	r18,r18,32
80086628:	ad400044 	addi	r21,r21,1
8008662c:	8c403fcc 	andi	r17,r17,255
80086630:	8c40201c 	xori	r17,r17,128
80086634:	8c7fe004 	addi	r17,r17,-128
80086638:	00398f06 	br	80084c78 <___vfprintf_internal_r+0x184>
8008663c:	d8c02d15 	stw	r3,180(sp)
80086640:	0039883a 	mov	fp,zero
80086644:	003e3506 	br	80085f1c <___vfprintf_internal_r+0x1428>
80086648:	d9002c17 	ldw	r4,176(sp)
8008664c:	d9801e04 	addi	r6,sp,120
80086650:	b80b883a 	mov	r5,r23
80086654:	00918680 	call	80091868 <__sprint_r>
80086658:	103a281e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
8008665c:	d8c02017 	ldw	r3,128(sp)
80086660:	da000404 	addi	r8,sp,16
80086664:	003cd006 	br	800859a8 <___vfprintf_internal_r+0xeb4>
80086668:	8009883a 	mov	r4,r16
8008666c:	da003d15 	stw	r8,244(sp)
80086670:	00832a00 	call	800832a0 <strlen>
80086674:	d8802e15 	stw	r2,184(sp)
80086678:	da003d17 	ldw	r8,244(sp)
8008667c:	103c340e 	bge	r2,zero,80085750 <___vfprintf_internal_r+0xc5c>
80086680:	0005883a 	mov	r2,zero
80086684:	003c3206 	br	80085750 <___vfprintf_internal_r+0xc5c>
80086688:	d9002c17 	ldw	r4,176(sp)
8008668c:	d9801e04 	addi	r6,sp,120
80086690:	b80b883a 	mov	r5,r23
80086694:	00918680 	call	80091868 <__sprint_r>
80086698:	103a181e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
8008669c:	d8c02017 	ldw	r3,128(sp)
800866a0:	d8801f17 	ldw	r2,124(sp)
800866a4:	da000404 	addi	r8,sp,16
800866a8:	d9403317 	ldw	r5,204(sp)
800866ac:	10800044 	addi	r2,r2,1
800866b0:	44000015 	stw	r16,0(r8)
800866b4:	28c7883a 	add	r3,r5,r3
800866b8:	003b7d06 	br	800854b0 <___vfprintf_internal_r+0x9bc>
800866bc:	012002b4 	movhi	r4,32778
800866c0:	2130cf84 	addi	r4,r4,-15554
800866c4:	d9003515 	stw	r4,212(sp)
800866c8:	003b1406 	br	8008531c <___vfprintf_internal_r+0x828>
800866cc:	013fffc4 	movi	r4,-1
800866d0:	003a3506 	br	80084fa8 <___vfprintf_internal_r+0x4b4>
800866d4:	0023883a 	mov	r17,zero
800866d8:	003d9d06 	br	80085d50 <___vfprintf_internal_r+0x125c>
800866dc:	d9002c17 	ldw	r4,176(sp)
800866e0:	d9801e04 	addi	r6,sp,120
800866e4:	b80b883a 	mov	r5,r23
800866e8:	00918680 	call	80091868 <__sprint_r>
800866ec:	103a031e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
800866f0:	d8c02017 	ldw	r3,128(sp)
800866f4:	da000404 	addi	r8,sp,16
800866f8:	003d9406 	br	80085d4c <___vfprintf_internal_r+0x1258>
800866fc:	012002b4 	movhi	r4,32778
80086700:	2130cb84 	addi	r4,r4,-15570
80086704:	d9002b15 	stw	r4,172(sp)
80086708:	d9002b17 	ldw	r4,172(sp)
8008670c:	1c47883a 	add	r3,r3,r17
80086710:	10800044 	addi	r2,r2,1
80086714:	41000015 	stw	r4,0(r8)
80086718:	44400115 	stw	r17,4(r8)
8008671c:	d8c02015 	stw	r3,128(sp)
80086720:	d8801f15 	stw	r2,124(sp)
80086724:	010001c4 	movi	r4,7
80086728:	20bfd716 	blt	r4,r2,80086688 <___vfprintf_internal_r+0x1b94>
8008672c:	42000204 	addi	r8,r8,8
80086730:	003fdd06 	br	800866a8 <___vfprintf_internal_r+0x1bb4>
80086734:	d9002c17 	ldw	r4,176(sp)
80086738:	d9801e04 	addi	r6,sp,120
8008673c:	b80b883a 	mov	r5,r23
80086740:	00918680 	call	80091868 <__sprint_r>
80086744:	1039ed1e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80086748:	d8802617 	ldw	r2,152(sp)
8008674c:	d8c02017 	ldw	r3,128(sp)
80086750:	da000404 	addi	r8,sp,16
80086754:	003e1006 	br	80085f98 <___vfprintf_internal_r+0x14a4>
80086758:	00800044 	movi	r2,1
8008675c:	10803fcc 	andi	r2,r2,255
80086760:	00c00044 	movi	r3,1
80086764:	10fa3526 	beq	r2,r3,8008503c <___vfprintf_internal_r+0x548>
80086768:	00c00084 	movi	r3,2
8008676c:	10fbcb26 	beq	r2,r3,8008569c <___vfprintf_internal_r+0xba8>
80086770:	003a8f06 	br	800851b0 <___vfprintf_internal_r+0x6bc>
80086774:	012002b4 	movhi	r4,32778
80086778:	2130cf84 	addi	r4,r4,-15554
8008677c:	d9003515 	stw	r4,212(sp)
80086780:	003b7606 	br	8008555c <___vfprintf_internal_r+0xa68>
80086784:	d8802917 	ldw	r2,164(sp)
80086788:	00c00184 	movi	r3,6
8008678c:	1880012e 	bgeu	r3,r2,80086794 <___vfprintf_internal_r+0x1ca0>
80086790:	1805883a 	mov	r2,r3
80086794:	d8802e15 	stw	r2,184(sp)
80086798:	1000ef16 	blt	r2,zero,80086b58 <___vfprintf_internal_r+0x2064>
8008679c:	042002b4 	movhi	r16,32778
800867a0:	d8802a15 	stw	r2,168(sp)
800867a4:	dcc02d15 	stw	r19,180(sp)
800867a8:	d8002915 	stw	zero,164(sp)
800867ac:	d8003215 	stw	zero,200(sp)
800867b0:	8430c904 	addi	r16,r16,-15580
800867b4:	0039883a 	mov	fp,zero
800867b8:	003aa206 	br	80085244 <___vfprintf_internal_r+0x750>
800867bc:	0021883a 	mov	r16,zero
800867c0:	003e0706 	br	80085fe0 <___vfprintf_internal_r+0x14ec>
800867c4:	d9002c17 	ldw	r4,176(sp)
800867c8:	d9801e04 	addi	r6,sp,120
800867cc:	b80b883a 	mov	r5,r23
800867d0:	00918680 	call	80091868 <__sprint_r>
800867d4:	1039c91e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
800867d8:	d8802617 	ldw	r2,152(sp)
800867dc:	d9403317 	ldw	r5,204(sp)
800867e0:	d8c02017 	ldw	r3,128(sp)
800867e4:	da000404 	addi	r8,sp,16
800867e8:	2885c83a 	sub	r2,r5,r2
800867ec:	003dfb06 	br	80085fdc <___vfprintf_internal_r+0x14e8>
800867f0:	9080004c 	andi	r2,r18,1
800867f4:	103e8f1e 	bne	r2,zero,80086234 <___vfprintf_internal_r+0x1740>
800867f8:	d8802117 	ldw	r2,132(sp)
800867fc:	003e9e06 	br	80086278 <___vfprintf_internal_r+0x1784>
80086800:	1025883a 	mov	r18,r2
80086804:	0039883a 	mov	fp,zero
80086808:	00800084 	movi	r2,2
8008680c:	003fd306 	br	8008675c <___vfprintf_internal_r+0x1c68>
80086810:	07000b44 	movi	fp,45
80086814:	df002785 	stb	fp,158(sp)
80086818:	003a4006 	br	8008511c <___vfprintf_internal_r+0x628>
8008681c:	00c00b44 	movi	r3,45
80086820:	d8c02785 	stb	r3,158(sp)
80086824:	d8802a15 	stw	r2,168(sp)
80086828:	dc802b17 	ldw	r18,172(sp)
8008682c:	d8002915 	stw	zero,164(sp)
80086830:	07000b44 	movi	fp,45
80086834:	003a8006 	br	80085238 <___vfprintf_internal_r+0x744>
80086838:	042002b4 	movhi	r16,32778
8008683c:	8430be04 	addi	r16,r16,-15624
80086840:	003f4706 	br	80086560 <___vfprintf_internal_r+0x1a6c>
80086844:	d8c02d17 	ldw	r3,180(sp)
80086848:	d9002f17 	ldw	r4,188(sp)
8008684c:	18800017 	ldw	r2,0(r3)
80086850:	18c00104 	addi	r3,r3,4
80086854:	d8c02d15 	stw	r3,180(sp)
80086858:	11000015 	stw	r4,0(r2)
8008685c:	0038dd06 	br	80084bd4 <___vfprintf_internal_r+0xe0>
80086860:	dd802617 	ldw	r22,152(sp)
80086864:	00bfff44 	movi	r2,-3
80086868:	b0801c16 	blt	r22,r2,800868dc <___vfprintf_internal_r+0x1de8>
8008686c:	d9402917 	ldw	r5,164(sp)
80086870:	2d801a16 	blt	r5,r22,800868dc <___vfprintf_internal_r+0x1de8>
80086874:	dd803215 	stw	r22,200(sp)
80086878:	003e8906 	br	800862a0 <___vfprintf_internal_r+0x17ac>
8008687c:	012002b4 	movhi	r4,32778
80086880:	2130cb84 	addi	r4,r4,-15570
80086884:	d9002b15 	stw	r4,172(sp)
80086888:	003c9106 	br	80085ad0 <___vfprintf_internal_r+0xfdc>
8008688c:	e005883a 	mov	r2,fp
80086890:	003e7906 	br	80086278 <___vfprintf_internal_r+0x1784>
80086894:	d9402917 	ldw	r5,164(sp)
80086898:	df002783 	ldbu	fp,158(sp)
8008689c:	dcc02d15 	stw	r19,180(sp)
800868a0:	d9402a15 	stw	r5,168(sp)
800868a4:	d9402e15 	stw	r5,184(sp)
800868a8:	d8002915 	stw	zero,164(sp)
800868ac:	d8003215 	stw	zero,200(sp)
800868b0:	003a5d06 	br	80085228 <___vfprintf_internal_r+0x734>
800868b4:	9080004c 	andi	r2,r18,1
800868b8:	0039883a 	mov	fp,zero
800868bc:	10000426 	beq	r2,zero,800868d0 <___vfprintf_internal_r+0x1ddc>
800868c0:	00800c04 	movi	r2,48
800868c4:	dc001dc4 	addi	r16,sp,119
800868c8:	d8801dc5 	stb	r2,119(sp)
800868cc:	003b8006 	br	800856d0 <___vfprintf_internal_r+0xbdc>
800868d0:	d8002e15 	stw	zero,184(sp)
800868d4:	dc001e04 	addi	r16,sp,120
800868d8:	003a4d06 	br	80085210 <___vfprintf_internal_r+0x71c>
800868dc:	8c7fff84 	addi	r17,r17,-2
800868e0:	b5bfffc4 	addi	r22,r22,-1
800868e4:	dd802615 	stw	r22,152(sp)
800868e8:	dc4022c5 	stb	r17,139(sp)
800868ec:	b000bf16 	blt	r22,zero,80086bec <___vfprintf_internal_r+0x20f8>
800868f0:	00800ac4 	movi	r2,43
800868f4:	d8802305 	stb	r2,140(sp)
800868f8:	00800244 	movi	r2,9
800868fc:	15807016 	blt	r2,r22,80086ac0 <___vfprintf_internal_r+0x1fcc>
80086900:	00800c04 	movi	r2,48
80086904:	b5800c04 	addi	r22,r22,48
80086908:	d8802345 	stb	r2,141(sp)
8008690c:	dd802385 	stb	r22,142(sp)
80086910:	d88023c4 	addi	r2,sp,143
80086914:	df0022c4 	addi	fp,sp,139
80086918:	d8c03317 	ldw	r3,204(sp)
8008691c:	1739c83a 	sub	fp,r2,fp
80086920:	d9003317 	ldw	r4,204(sp)
80086924:	e0c7883a 	add	r3,fp,r3
80086928:	df003a15 	stw	fp,232(sp)
8008692c:	d8c02e15 	stw	r3,184(sp)
80086930:	00800044 	movi	r2,1
80086934:	1100b30e 	bge	r2,r4,80086c04 <___vfprintf_internal_r+0x2110>
80086938:	d8c02e17 	ldw	r3,184(sp)
8008693c:	18c00044 	addi	r3,r3,1
80086940:	d8c02e15 	stw	r3,184(sp)
80086944:	1805883a 	mov	r2,r3
80086948:	1800ac16 	blt	r3,zero,80086bfc <___vfprintf_internal_r+0x2108>
8008694c:	d8003215 	stw	zero,200(sp)
80086950:	003e5d06 	br	800862c8 <___vfprintf_internal_r+0x17d4>
80086954:	d9002c17 	ldw	r4,176(sp)
80086958:	d9801e04 	addi	r6,sp,120
8008695c:	b80b883a 	mov	r5,r23
80086960:	00918680 	call	80091868 <__sprint_r>
80086964:	1039651e 	bne	r2,zero,80084efc <___vfprintf_internal_r+0x408>
80086968:	dc402617 	ldw	r17,152(sp)
8008696c:	d8c02017 	ldw	r3,128(sp)
80086970:	d8801f17 	ldw	r2,124(sp)
80086974:	da000404 	addi	r8,sp,16
80086978:	003ed606 	br	800864d4 <___vfprintf_internal_r+0x19e0>
8008697c:	582b883a 	mov	r21,r11
80086980:	d8002915 	stw	zero,164(sp)
80086984:	0038bd06 	br	80084c7c <___vfprintf_internal_r+0x188>
80086988:	d8802917 	ldw	r2,164(sp)
8008698c:	103e071e 	bne	r2,zero,800861ac <___vfprintf_internal_r+0x16b8>
80086990:	dc002915 	stw	r16,164(sp)
80086994:	003e0506 	br	800861ac <___vfprintf_internal_r+0x16b8>
80086998:	d9002917 	ldw	r4,164(sp)
8008699c:	20c00044 	addi	r3,r4,1
800869a0:	003e0f06 	br	800861e0 <___vfprintf_internal_r+0x16ec>
800869a4:	01400184 	movi	r5,6
800869a8:	d9402915 	stw	r5,164(sp)
800869ac:	003dff06 	br	800861ac <___vfprintf_internal_r+0x16b8>
800869b0:	d8802104 	addi	r2,sp,132
800869b4:	d8800315 	stw	r2,12(sp)
800869b8:	d8802504 	addi	r2,sp,148
800869bc:	d8800215 	stw	r2,8(sp)
800869c0:	d8802604 	addi	r2,sp,152
800869c4:	d8800115 	stw	r2,4(sp)
800869c8:	d8802917 	ldw	r2,164(sp)
800869cc:	d9403617 	ldw	r5,216(sp)
800869d0:	d9002c17 	ldw	r4,176(sp)
800869d4:	d8800015 	stw	r2,0(sp)
800869d8:	01c000c4 	movi	r7,3
800869dc:	980d883a 	mov	r6,r19
800869e0:	da003d15 	stw	r8,244(sp)
800869e4:	00871cc0 	call	800871cc <_dtoa_r>
800869e8:	d8c02917 	ldw	r3,164(sp)
800869ec:	da003d17 	ldw	r8,244(sp)
800869f0:	1021883a 	mov	r16,r2
800869f4:	10f9883a 	add	fp,r2,r3
800869f8:	81000007 	ldb	r4,0(r16)
800869fc:	00800c04 	movi	r2,48
80086a00:	20805e26 	beq	r4,r2,80086b7c <___vfprintf_internal_r+0x2088>
80086a04:	d8c02617 	ldw	r3,152(sp)
80086a08:	e0f9883a 	add	fp,fp,r3
80086a0c:	003e0a06 	br	80086238 <___vfprintf_internal_r+0x1744>
80086a10:	00c00b44 	movi	r3,45
80086a14:	24e0003c 	xorhi	r19,r4,32768
80086a18:	d8c02a05 	stb	r3,168(sp)
80086a1c:	003de906 	br	800861c4 <___vfprintf_internal_r+0x16d0>
80086a20:	d8c03217 	ldw	r3,200(sp)
80086a24:	00c07a0e 	bge	zero,r3,80086c10 <___vfprintf_internal_r+0x211c>
80086a28:	00800044 	movi	r2,1
80086a2c:	d9003317 	ldw	r4,204(sp)
80086a30:	1105883a 	add	r2,r2,r4
80086a34:	d8802e15 	stw	r2,184(sp)
80086a38:	10004e16 	blt	r2,zero,80086b74 <___vfprintf_internal_r+0x2080>
80086a3c:	044019c4 	movi	r17,103
80086a40:	003e2106 	br	800862c8 <___vfprintf_internal_r+0x17d4>
80086a44:	d9002917 	ldw	r4,164(sp)
80086a48:	d8802104 	addi	r2,sp,132
80086a4c:	d8800315 	stw	r2,12(sp)
80086a50:	d9000015 	stw	r4,0(sp)
80086a54:	d8802504 	addi	r2,sp,148
80086a58:	d9403617 	ldw	r5,216(sp)
80086a5c:	d9002c17 	ldw	r4,176(sp)
80086a60:	d8800215 	stw	r2,8(sp)
80086a64:	d8802604 	addi	r2,sp,152
80086a68:	d8800115 	stw	r2,4(sp)
80086a6c:	01c000c4 	movi	r7,3
80086a70:	980d883a 	mov	r6,r19
80086a74:	da003d15 	stw	r8,244(sp)
80086a78:	00871cc0 	call	800871cc <_dtoa_r>
80086a7c:	d8c02917 	ldw	r3,164(sp)
80086a80:	da003d17 	ldw	r8,244(sp)
80086a84:	1021883a 	mov	r16,r2
80086a88:	00801184 	movi	r2,70
80086a8c:	80f9883a 	add	fp,r16,r3
80086a90:	88bfd926 	beq	r17,r2,800869f8 <___vfprintf_internal_r+0x1f04>
80086a94:	003de806 	br	80086238 <___vfprintf_internal_r+0x1744>
80086a98:	d9002917 	ldw	r4,164(sp)
80086a9c:	00c04d0e 	bge	zero,r3,80086bd4 <___vfprintf_internal_r+0x20e0>
80086aa0:	2000441e 	bne	r4,zero,80086bb4 <___vfprintf_internal_r+0x20c0>
80086aa4:	9480004c 	andi	r18,r18,1
80086aa8:	9000421e 	bne	r18,zero,80086bb4 <___vfprintf_internal_r+0x20c0>
80086aac:	1805883a 	mov	r2,r3
80086ab0:	18007016 	blt	r3,zero,80086c74 <___vfprintf_internal_r+0x2180>
80086ab4:	d8c03217 	ldw	r3,200(sp)
80086ab8:	d8c02e15 	stw	r3,184(sp)
80086abc:	003e0206 	br	800862c8 <___vfprintf_internal_r+0x17d4>
80086ac0:	df0022c4 	addi	fp,sp,139
80086ac4:	dc002915 	stw	r16,164(sp)
80086ac8:	4027883a 	mov	r19,r8
80086acc:	e021883a 	mov	r16,fp
80086ad0:	b009883a 	mov	r4,r22
80086ad4:	01400284 	movi	r5,10
80086ad8:	00822140 	call	80082214 <__modsi3>
80086adc:	10800c04 	addi	r2,r2,48
80086ae0:	843fffc4 	addi	r16,r16,-1
80086ae4:	b009883a 	mov	r4,r22
80086ae8:	01400284 	movi	r5,10
80086aec:	80800005 	stb	r2,0(r16)
80086af0:	00821900 	call	80082190 <__divsi3>
80086af4:	102d883a 	mov	r22,r2
80086af8:	00800244 	movi	r2,9
80086afc:	15bff416 	blt	r2,r22,80086ad0 <___vfprintf_internal_r+0x1fdc>
80086b00:	9811883a 	mov	r8,r19
80086b04:	b0800c04 	addi	r2,r22,48
80086b08:	8027883a 	mov	r19,r16
80086b0c:	997fffc4 	addi	r5,r19,-1
80086b10:	98bfffc5 	stb	r2,-1(r19)
80086b14:	dc002917 	ldw	r16,164(sp)
80086b18:	2f006a2e 	bgeu	r5,fp,80086cc4 <___vfprintf_internal_r+0x21d0>
80086b1c:	d9c02384 	addi	r7,sp,142
80086b20:	3ccfc83a 	sub	r7,r7,r19
80086b24:	d9002344 	addi	r4,sp,141
80086b28:	e1cf883a 	add	r7,fp,r7
80086b2c:	00000106 	br	80086b34 <___vfprintf_internal_r+0x2040>
80086b30:	28800003 	ldbu	r2,0(r5)
80086b34:	20800005 	stb	r2,0(r4)
80086b38:	21000044 	addi	r4,r4,1
80086b3c:	29400044 	addi	r5,r5,1
80086b40:	393ffb1e 	bne	r7,r4,80086b30 <___vfprintf_internal_r+0x203c>
80086b44:	d8802304 	addi	r2,sp,140
80086b48:	14c5c83a 	sub	r2,r2,r19
80086b4c:	d8c02344 	addi	r3,sp,141
80086b50:	1885883a 	add	r2,r3,r2
80086b54:	003f7006 	br	80086918 <___vfprintf_internal_r+0x1e24>
80086b58:	0005883a 	mov	r2,zero
80086b5c:	003f0f06 	br	8008679c <___vfprintf_internal_r+0x1ca8>
80086b60:	d8c03217 	ldw	r3,200(sp)
80086b64:	18c00044 	addi	r3,r3,1
80086b68:	d8c02e15 	stw	r3,184(sp)
80086b6c:	1805883a 	mov	r2,r3
80086b70:	183fb20e 	bge	r3,zero,80086a3c <___vfprintf_internal_r+0x1f48>
80086b74:	0005883a 	mov	r2,zero
80086b78:	003fb006 	br	80086a3c <___vfprintf_internal_r+0x1f48>
80086b7c:	d9003617 	ldw	r4,216(sp)
80086b80:	000d883a 	mov	r6,zero
80086b84:	000f883a 	mov	r7,zero
80086b88:	980b883a 	mov	r5,r19
80086b8c:	d8c03c15 	stw	r3,240(sp)
80086b90:	da003d15 	stw	r8,244(sp)
80086b94:	00974900 	call	80097490 <__eqdf2>
80086b98:	d8c03c17 	ldw	r3,240(sp)
80086b9c:	da003d17 	ldw	r8,244(sp)
80086ba0:	103f9826 	beq	r2,zero,80086a04 <___vfprintf_internal_r+0x1f10>
80086ba4:	00800044 	movi	r2,1
80086ba8:	10c7c83a 	sub	r3,r2,r3
80086bac:	d8c02615 	stw	r3,152(sp)
80086bb0:	003f9506 	br	80086a08 <___vfprintf_internal_r+0x1f14>
80086bb4:	d9002917 	ldw	r4,164(sp)
80086bb8:	d8c03217 	ldw	r3,200(sp)
80086bbc:	20800044 	addi	r2,r4,1
80086bc0:	1885883a 	add	r2,r3,r2
80086bc4:	d8802e15 	stw	r2,184(sp)
80086bc8:	103dbf0e 	bge	r2,zero,800862c8 <___vfprintf_internal_r+0x17d4>
80086bcc:	0005883a 	mov	r2,zero
80086bd0:	003dbd06 	br	800862c8 <___vfprintf_internal_r+0x17d4>
80086bd4:	2000211e 	bne	r4,zero,80086c5c <___vfprintf_internal_r+0x2168>
80086bd8:	9480004c 	andi	r18,r18,1
80086bdc:	90001f1e 	bne	r18,zero,80086c5c <___vfprintf_internal_r+0x2168>
80086be0:	00800044 	movi	r2,1
80086be4:	d8802e15 	stw	r2,184(sp)
80086be8:	003db706 	br	800862c8 <___vfprintf_internal_r+0x17d4>
80086bec:	00800b44 	movi	r2,45
80086bf0:	05adc83a 	sub	r22,zero,r22
80086bf4:	d8802305 	stb	r2,140(sp)
80086bf8:	003f3f06 	br	800868f8 <___vfprintf_internal_r+0x1e04>
80086bfc:	0005883a 	mov	r2,zero
80086c00:	003f5206 	br	8008694c <___vfprintf_internal_r+0x1e58>
80086c04:	90a4703a 	and	r18,r18,r2
80086c08:	903f4e26 	beq	r18,zero,80086944 <___vfprintf_internal_r+0x1e50>
80086c0c:	003f4a06 	br	80086938 <___vfprintf_internal_r+0x1e44>
80086c10:	00800084 	movi	r2,2
80086c14:	10c5c83a 	sub	r2,r2,r3
80086c18:	003f8406 	br	80086a2c <___vfprintf_internal_r+0x1f38>
80086c1c:	d8802d17 	ldw	r2,180(sp)
80086c20:	d9002d17 	ldw	r4,180(sp)
80086c24:	ac400043 	ldbu	r17,1(r21)
80086c28:	10800017 	ldw	r2,0(r2)
80086c2c:	582b883a 	mov	r21,r11
80086c30:	d8802915 	stw	r2,164(sp)
80086c34:	20800104 	addi	r2,r4,4
80086c38:	d9002917 	ldw	r4,164(sp)
80086c3c:	d8802d15 	stw	r2,180(sp)
80086c40:	203e7a0e 	bge	r4,zero,8008662c <___vfprintf_internal_r+0x1b38>
80086c44:	8c403fcc 	andi	r17,r17,255
80086c48:	00bfffc4 	movi	r2,-1
80086c4c:	8c40201c 	xori	r17,r17,128
80086c50:	d8802915 	stw	r2,164(sp)
80086c54:	8c7fe004 	addi	r17,r17,-128
80086c58:	00380706 	br	80084c78 <___vfprintf_internal_r+0x184>
80086c5c:	d8c02917 	ldw	r3,164(sp)
80086c60:	18c00084 	addi	r3,r3,2
80086c64:	d8c02e15 	stw	r3,184(sp)
80086c68:	1805883a 	mov	r2,r3
80086c6c:	183d960e 	bge	r3,zero,800862c8 <___vfprintf_internal_r+0x17d4>
80086c70:	003fd606 	br	80086bcc <___vfprintf_internal_r+0x20d8>
80086c74:	0005883a 	mov	r2,zero
80086c78:	003f8e06 	br	80086ab4 <___vfprintf_internal_r+0x1fc0>
80086c7c:	9080004c 	andi	r2,r18,1
80086c80:	103f811e 	bne	r2,zero,80086a88 <___vfprintf_internal_r+0x1f94>
80086c84:	d8802117 	ldw	r2,132(sp)
80086c88:	1405c83a 	sub	r2,r2,r16
80086c8c:	d8803315 	stw	r2,204(sp)
80086c90:	b47ef326 	beq	r22,r17,80086860 <___vfprintf_internal_r+0x1d6c>
80086c94:	dd802617 	ldw	r22,152(sp)
80086c98:	003f1106 	br	800868e0 <___vfprintf_internal_r+0x1dec>
80086c9c:	d9c02785 	stb	r7,158(sp)
80086ca0:	00390406 	br	800850b4 <___vfprintf_internal_r+0x5c0>
80086ca4:	d9c02785 	stb	r7,158(sp)
80086ca8:	0038d306 	br	80084ff8 <___vfprintf_internal_r+0x504>
80086cac:	d9c02785 	stb	r7,158(sp)
80086cb0:	003a6106 	br	80085638 <___vfprintf_internal_r+0xb44>
80086cb4:	d9c02785 	stb	r7,158(sp)
80086cb8:	003af806 	br	8008589c <___vfprintf_internal_r+0xda8>
80086cbc:	0005883a 	mov	r2,zero
80086cc0:	003d7e06 	br	800862bc <___vfprintf_internal_r+0x17c8>
80086cc4:	d8802344 	addi	r2,sp,141
80086cc8:	003f1306 	br	80086918 <___vfprintf_internal_r+0x1e24>
80086ccc:	d9c02785 	stb	r7,158(sp)
80086cd0:	00392306 	br	80085160 <___vfprintf_internal_r+0x66c>
80086cd4:	d9c02785 	stb	r7,158(sp)
80086cd8:	003aa906 	br	80085780 <___vfprintf_internal_r+0xc8c>
80086cdc:	d9c02785 	stb	r7,158(sp)
80086ce0:	003a3d06 	br	800855d8 <___vfprintf_internal_r+0xae4>
80086ce4:	d9c02785 	stb	r7,158(sp)
80086ce8:	003aca06 	br	80085814 <___vfprintf_internal_r+0xd20>

80086cec <__vfprintf_internal>:
80086cec:	00a002b4 	movhi	r2,32778
80086cf0:	10ba7304 	addi	r2,r2,-5684
80086cf4:	300f883a 	mov	r7,r6
80086cf8:	280d883a 	mov	r6,r5
80086cfc:	200b883a 	mov	r5,r4
80086d00:	11000017 	ldw	r4,0(r2)
80086d04:	0084af41 	jmpi	80084af4 <___vfprintf_internal_r>

80086d08 <__sbprintf>:
80086d08:	2880030b 	ldhu	r2,12(r5)
80086d0c:	2ac01917 	ldw	r11,100(r5)
80086d10:	2a80038b 	ldhu	r10,14(r5)
80086d14:	2a400717 	ldw	r9,28(r5)
80086d18:	2a000917 	ldw	r8,36(r5)
80086d1c:	defee204 	addi	sp,sp,-1144
80086d20:	00c10004 	movi	r3,1024
80086d24:	dc011a15 	stw	r16,1128(sp)
80086d28:	10bfff4c 	andi	r2,r2,65533
80086d2c:	2821883a 	mov	r16,r5
80086d30:	d8cb883a 	add	r5,sp,r3
80086d34:	dc811c15 	stw	r18,1136(sp)
80086d38:	dc411b15 	stw	r17,1132(sp)
80086d3c:	dfc11d15 	stw	ra,1140(sp)
80086d40:	2025883a 	mov	r18,r4
80086d44:	d881030d 	sth	r2,1036(sp)
80086d48:	dac11915 	stw	r11,1124(sp)
80086d4c:	da81038d 	sth	r10,1038(sp)
80086d50:	da410715 	stw	r9,1052(sp)
80086d54:	da010915 	stw	r8,1060(sp)
80086d58:	dec10015 	stw	sp,1024(sp)
80086d5c:	dec10415 	stw	sp,1040(sp)
80086d60:	d8c10215 	stw	r3,1032(sp)
80086d64:	d8c10515 	stw	r3,1044(sp)
80086d68:	d8010615 	stw	zero,1048(sp)
80086d6c:	0084af40 	call	80084af4 <___vfprintf_internal_r>
80086d70:	1023883a 	mov	r17,r2
80086d74:	10000416 	blt	r2,zero,80086d88 <__sbprintf+0x80>
80086d78:	d9410004 	addi	r5,sp,1024
80086d7c:	9009883a 	mov	r4,r18
80086d80:	0088a700 	call	80088a70 <_fflush_r>
80086d84:	10000d1e 	bne	r2,zero,80086dbc <__sbprintf+0xb4>
80086d88:	d881030b 	ldhu	r2,1036(sp)
80086d8c:	1080100c 	andi	r2,r2,64
80086d90:	10000326 	beq	r2,zero,80086da0 <__sbprintf+0x98>
80086d94:	8080030b 	ldhu	r2,12(r16)
80086d98:	10801014 	ori	r2,r2,64
80086d9c:	8080030d 	sth	r2,12(r16)
80086da0:	8805883a 	mov	r2,r17
80086da4:	dfc11d17 	ldw	ra,1140(sp)
80086da8:	dc811c17 	ldw	r18,1136(sp)
80086dac:	dc411b17 	ldw	r17,1132(sp)
80086db0:	dc011a17 	ldw	r16,1128(sp)
80086db4:	dec11e04 	addi	sp,sp,1144
80086db8:	f800283a 	ret
80086dbc:	047fffc4 	movi	r17,-1
80086dc0:	003ff106 	br	80086d88 <__sbprintf+0x80>

80086dc4 <_write_r>:
80086dc4:	defffd04 	addi	sp,sp,-12
80086dc8:	2805883a 	mov	r2,r5
80086dcc:	dc000015 	stw	r16,0(sp)
80086dd0:	042002b4 	movhi	r16,32778
80086dd4:	dc400115 	stw	r17,4(sp)
80086dd8:	300b883a 	mov	r5,r6
80086ddc:	8401de04 	addi	r16,r16,1912
80086de0:	2023883a 	mov	r17,r4
80086de4:	380d883a 	mov	r6,r7
80086de8:	1009883a 	mov	r4,r2
80086dec:	dfc00215 	stw	ra,8(sp)
80086df0:	80000015 	stw	zero,0(r16)
80086df4:	00990180 	call	80099018 <write>
80086df8:	00ffffc4 	movi	r3,-1
80086dfc:	10c00526 	beq	r2,r3,80086e14 <_write_r+0x50>
80086e00:	dfc00217 	ldw	ra,8(sp)
80086e04:	dc400117 	ldw	r17,4(sp)
80086e08:	dc000017 	ldw	r16,0(sp)
80086e0c:	dec00304 	addi	sp,sp,12
80086e10:	f800283a 	ret
80086e14:	80c00017 	ldw	r3,0(r16)
80086e18:	183ff926 	beq	r3,zero,80086e00 <_write_r+0x3c>
80086e1c:	88c00015 	stw	r3,0(r17)
80086e20:	003ff706 	br	80086e00 <_write_r+0x3c>

80086e24 <__swsetup_r>:
80086e24:	00a002b4 	movhi	r2,32778
80086e28:	defffd04 	addi	sp,sp,-12
80086e2c:	10ba7304 	addi	r2,r2,-5684
80086e30:	dc400115 	stw	r17,4(sp)
80086e34:	2023883a 	mov	r17,r4
80086e38:	11000017 	ldw	r4,0(r2)
80086e3c:	dc000015 	stw	r16,0(sp)
80086e40:	dfc00215 	stw	ra,8(sp)
80086e44:	2821883a 	mov	r16,r5
80086e48:	20000226 	beq	r4,zero,80086e54 <__swsetup_r+0x30>
80086e4c:	20800e17 	ldw	r2,56(r4)
80086e50:	10003126 	beq	r2,zero,80086f18 <__swsetup_r+0xf4>
80086e54:	8080030b 	ldhu	r2,12(r16)
80086e58:	10c0020c 	andi	r3,r2,8
80086e5c:	1009883a 	mov	r4,r2
80086e60:	18000f26 	beq	r3,zero,80086ea0 <__swsetup_r+0x7c>
80086e64:	80c00417 	ldw	r3,16(r16)
80086e68:	18001526 	beq	r3,zero,80086ec0 <__swsetup_r+0x9c>
80086e6c:	1100004c 	andi	r4,r2,1
80086e70:	20001c1e 	bne	r4,zero,80086ee4 <__swsetup_r+0xc0>
80086e74:	1080008c 	andi	r2,r2,2
80086e78:	1000291e 	bne	r2,zero,80086f20 <__swsetup_r+0xfc>
80086e7c:	80800517 	ldw	r2,20(r16)
80086e80:	80800215 	stw	r2,8(r16)
80086e84:	18001c26 	beq	r3,zero,80086ef8 <__swsetup_r+0xd4>
80086e88:	0005883a 	mov	r2,zero
80086e8c:	dfc00217 	ldw	ra,8(sp)
80086e90:	dc400117 	ldw	r17,4(sp)
80086e94:	dc000017 	ldw	r16,0(sp)
80086e98:	dec00304 	addi	sp,sp,12
80086e9c:	f800283a 	ret
80086ea0:	2080040c 	andi	r2,r4,16
80086ea4:	10002e26 	beq	r2,zero,80086f60 <__swsetup_r+0x13c>
80086ea8:	2080010c 	andi	r2,r4,4
80086eac:	10001e1e 	bne	r2,zero,80086f28 <__swsetup_r+0x104>
80086eb0:	80c00417 	ldw	r3,16(r16)
80086eb4:	20800214 	ori	r2,r4,8
80086eb8:	8080030d 	sth	r2,12(r16)
80086ebc:	183feb1e 	bne	r3,zero,80086e6c <__swsetup_r+0x48>
80086ec0:	1100a00c 	andi	r4,r2,640
80086ec4:	01408004 	movi	r5,512
80086ec8:	217fe826 	beq	r4,r5,80086e6c <__swsetup_r+0x48>
80086ecc:	800b883a 	mov	r5,r16
80086ed0:	8809883a 	mov	r4,r17
80086ed4:	0089a800 	call	80089a80 <__smakebuf_r>
80086ed8:	8080030b 	ldhu	r2,12(r16)
80086edc:	80c00417 	ldw	r3,16(r16)
80086ee0:	003fe206 	br	80086e6c <__swsetup_r+0x48>
80086ee4:	80800517 	ldw	r2,20(r16)
80086ee8:	80000215 	stw	zero,8(r16)
80086eec:	0085c83a 	sub	r2,zero,r2
80086ef0:	80800615 	stw	r2,24(r16)
80086ef4:	183fe41e 	bne	r3,zero,80086e88 <__swsetup_r+0x64>
80086ef8:	80c0030b 	ldhu	r3,12(r16)
80086efc:	0005883a 	mov	r2,zero
80086f00:	1900200c 	andi	r4,r3,128
80086f04:	203fe126 	beq	r4,zero,80086e8c <__swsetup_r+0x68>
80086f08:	18c01014 	ori	r3,r3,64
80086f0c:	80c0030d 	sth	r3,12(r16)
80086f10:	00bfffc4 	movi	r2,-1
80086f14:	003fdd06 	br	80086e8c <__swsetup_r+0x68>
80086f18:	0088e4c0 	call	80088e4c <__sinit>
80086f1c:	003fcd06 	br	80086e54 <__swsetup_r+0x30>
80086f20:	0005883a 	mov	r2,zero
80086f24:	003fd606 	br	80086e80 <__swsetup_r+0x5c>
80086f28:	81400c17 	ldw	r5,48(r16)
80086f2c:	28000626 	beq	r5,zero,80086f48 <__swsetup_r+0x124>
80086f30:	80801004 	addi	r2,r16,64
80086f34:	28800326 	beq	r5,r2,80086f44 <__swsetup_r+0x120>
80086f38:	8809883a 	mov	r4,r17
80086f3c:	0088fc00 	call	80088fc0 <_free_r>
80086f40:	8100030b 	ldhu	r4,12(r16)
80086f44:	80000c15 	stw	zero,48(r16)
80086f48:	80c00417 	ldw	r3,16(r16)
80086f4c:	00bff6c4 	movi	r2,-37
80086f50:	1108703a 	and	r4,r2,r4
80086f54:	80000115 	stw	zero,4(r16)
80086f58:	80c00015 	stw	r3,0(r16)
80086f5c:	003fd506 	br	80086eb4 <__swsetup_r+0x90>
80086f60:	00800244 	movi	r2,9
80086f64:	88800015 	stw	r2,0(r17)
80086f68:	20801014 	ori	r2,r4,64
80086f6c:	8080030d 	sth	r2,12(r16)
80086f70:	00bfffc4 	movi	r2,-1
80086f74:	003fc506 	br	80086e8c <__swsetup_r+0x68>

80086f78 <_close_r>:
80086f78:	defffd04 	addi	sp,sp,-12
80086f7c:	dc000015 	stw	r16,0(sp)
80086f80:	042002b4 	movhi	r16,32778
80086f84:	dc400115 	stw	r17,4(sp)
80086f88:	8401de04 	addi	r16,r16,1912
80086f8c:	2023883a 	mov	r17,r4
80086f90:	2809883a 	mov	r4,r5
80086f94:	dfc00215 	stw	ra,8(sp)
80086f98:	80000015 	stw	zero,0(r16)
80086f9c:	0098b0c0 	call	80098b0c <close>
80086fa0:	00ffffc4 	movi	r3,-1
80086fa4:	10c00526 	beq	r2,r3,80086fbc <_close_r+0x44>
80086fa8:	dfc00217 	ldw	ra,8(sp)
80086fac:	dc400117 	ldw	r17,4(sp)
80086fb0:	dc000017 	ldw	r16,0(sp)
80086fb4:	dec00304 	addi	sp,sp,12
80086fb8:	f800283a 	ret
80086fbc:	80c00017 	ldw	r3,0(r16)
80086fc0:	183ff926 	beq	r3,zero,80086fa8 <_close_r+0x30>
80086fc4:	88c00015 	stw	r3,0(r17)
80086fc8:	003ff706 	br	80086fa8 <_close_r+0x30>

80086fcc <quorem>:
80086fcc:	defff704 	addi	sp,sp,-36
80086fd0:	dc800215 	stw	r18,8(sp)
80086fd4:	20800417 	ldw	r2,16(r4)
80086fd8:	2c800417 	ldw	r18,16(r5)
80086fdc:	dfc00815 	stw	ra,32(sp)
80086fe0:	ddc00715 	stw	r23,28(sp)
80086fe4:	dd800615 	stw	r22,24(sp)
80086fe8:	dd400515 	stw	r21,20(sp)
80086fec:	dd000415 	stw	r20,16(sp)
80086ff0:	dcc00315 	stw	r19,12(sp)
80086ff4:	dc400115 	stw	r17,4(sp)
80086ff8:	dc000015 	stw	r16,0(sp)
80086ffc:	14807116 	blt	r2,r18,800871c4 <quorem+0x1f8>
80087000:	94bfffc4 	addi	r18,r18,-1
80087004:	94ad883a 	add	r22,r18,r18
80087008:	b5ad883a 	add	r22,r22,r22
8008700c:	2c400504 	addi	r17,r5,20
80087010:	8da9883a 	add	r20,r17,r22
80087014:	25400504 	addi	r21,r4,20
80087018:	282f883a 	mov	r23,r5
8008701c:	adad883a 	add	r22,r21,r22
80087020:	a1400017 	ldw	r5,0(r20)
80087024:	2021883a 	mov	r16,r4
80087028:	b1000017 	ldw	r4,0(r22)
8008702c:	29400044 	addi	r5,r5,1
80087030:	00822880 	call	80082288 <__udivsi3>
80087034:	1027883a 	mov	r19,r2
80087038:	10002c26 	beq	r2,zero,800870ec <quorem+0x120>
8008703c:	a813883a 	mov	r9,r21
80087040:	880b883a 	mov	r5,r17
80087044:	0009883a 	mov	r4,zero
80087048:	000d883a 	mov	r6,zero
8008704c:	2a000017 	ldw	r8,0(r5)
80087050:	49c00017 	ldw	r7,0(r9)
80087054:	29400104 	addi	r5,r5,4
80087058:	40bfffcc 	andi	r2,r8,65535
8008705c:	14c5383a 	mul	r2,r2,r19
80087060:	4010d43a 	srli	r8,r8,16
80087064:	38ffffcc 	andi	r3,r7,65535
80087068:	1105883a 	add	r2,r2,r4
8008706c:	1008d43a 	srli	r4,r2,16
80087070:	44d1383a 	mul	r8,r8,r19
80087074:	198d883a 	add	r6,r3,r6
80087078:	10ffffcc 	andi	r3,r2,65535
8008707c:	30c7c83a 	sub	r3,r6,r3
80087080:	380ed43a 	srli	r7,r7,16
80087084:	4105883a 	add	r2,r8,r4
80087088:	180dd43a 	srai	r6,r3,16
8008708c:	113fffcc 	andi	r4,r2,65535
80087090:	390fc83a 	sub	r7,r7,r4
80087094:	398d883a 	add	r6,r7,r6
80087098:	300e943a 	slli	r7,r6,16
8008709c:	18ffffcc 	andi	r3,r3,65535
800870a0:	1008d43a 	srli	r4,r2,16
800870a4:	38ceb03a 	or	r7,r7,r3
800870a8:	49c00015 	stw	r7,0(r9)
800870ac:	300dd43a 	srai	r6,r6,16
800870b0:	4a400104 	addi	r9,r9,4
800870b4:	a17fe52e 	bgeu	r20,r5,8008704c <quorem+0x80>
800870b8:	b0800017 	ldw	r2,0(r22)
800870bc:	10000b1e 	bne	r2,zero,800870ec <quorem+0x120>
800870c0:	b0bfff04 	addi	r2,r22,-4
800870c4:	a880082e 	bgeu	r21,r2,800870e8 <quorem+0x11c>
800870c8:	b0ffff17 	ldw	r3,-4(r22)
800870cc:	18000326 	beq	r3,zero,800870dc <quorem+0x110>
800870d0:	00000506 	br	800870e8 <quorem+0x11c>
800870d4:	10c00017 	ldw	r3,0(r2)
800870d8:	1800031e 	bne	r3,zero,800870e8 <quorem+0x11c>
800870dc:	10bfff04 	addi	r2,r2,-4
800870e0:	94bfffc4 	addi	r18,r18,-1
800870e4:	a8bffb36 	bltu	r21,r2,800870d4 <quorem+0x108>
800870e8:	84800415 	stw	r18,16(r16)
800870ec:	b80b883a 	mov	r5,r23
800870f0:	8009883a 	mov	r4,r16
800870f4:	008aa900 	call	8008aa90 <__mcmp>
800870f8:	10002616 	blt	r2,zero,80087194 <quorem+0x1c8>
800870fc:	9cc00044 	addi	r19,r19,1
80087100:	a805883a 	mov	r2,r21
80087104:	000b883a 	mov	r5,zero
80087108:	11000017 	ldw	r4,0(r2)
8008710c:	89800017 	ldw	r6,0(r17)
80087110:	10800104 	addi	r2,r2,4
80087114:	20ffffcc 	andi	r3,r4,65535
80087118:	194b883a 	add	r5,r3,r5
8008711c:	30ffffcc 	andi	r3,r6,65535
80087120:	28c7c83a 	sub	r3,r5,r3
80087124:	300cd43a 	srli	r6,r6,16
80087128:	2008d43a 	srli	r4,r4,16
8008712c:	180bd43a 	srai	r5,r3,16
80087130:	18ffffcc 	andi	r3,r3,65535
80087134:	2189c83a 	sub	r4,r4,r6
80087138:	2149883a 	add	r4,r4,r5
8008713c:	200c943a 	slli	r6,r4,16
80087140:	8c400104 	addi	r17,r17,4
80087144:	200bd43a 	srai	r5,r4,16
80087148:	30c6b03a 	or	r3,r6,r3
8008714c:	10ffff15 	stw	r3,-4(r2)
80087150:	a47fed2e 	bgeu	r20,r17,80087108 <quorem+0x13c>
80087154:	9485883a 	add	r2,r18,r18
80087158:	1085883a 	add	r2,r2,r2
8008715c:	a887883a 	add	r3,r21,r2
80087160:	18800017 	ldw	r2,0(r3)
80087164:	10000b1e 	bne	r2,zero,80087194 <quorem+0x1c8>
80087168:	18bfff04 	addi	r2,r3,-4
8008716c:	a880082e 	bgeu	r21,r2,80087190 <quorem+0x1c4>
80087170:	18ffff17 	ldw	r3,-4(r3)
80087174:	18000326 	beq	r3,zero,80087184 <quorem+0x1b8>
80087178:	00000506 	br	80087190 <quorem+0x1c4>
8008717c:	10c00017 	ldw	r3,0(r2)
80087180:	1800031e 	bne	r3,zero,80087190 <quorem+0x1c4>
80087184:	10bfff04 	addi	r2,r2,-4
80087188:	94bfffc4 	addi	r18,r18,-1
8008718c:	a8bffb36 	bltu	r21,r2,8008717c <quorem+0x1b0>
80087190:	84800415 	stw	r18,16(r16)
80087194:	9805883a 	mov	r2,r19
80087198:	dfc00817 	ldw	ra,32(sp)
8008719c:	ddc00717 	ldw	r23,28(sp)
800871a0:	dd800617 	ldw	r22,24(sp)
800871a4:	dd400517 	ldw	r21,20(sp)
800871a8:	dd000417 	ldw	r20,16(sp)
800871ac:	dcc00317 	ldw	r19,12(sp)
800871b0:	dc800217 	ldw	r18,8(sp)
800871b4:	dc400117 	ldw	r17,4(sp)
800871b8:	dc000017 	ldw	r16,0(sp)
800871bc:	dec00904 	addi	sp,sp,36
800871c0:	f800283a 	ret
800871c4:	0005883a 	mov	r2,zero
800871c8:	003ff306 	br	80087198 <quorem+0x1cc>

800871cc <_dtoa_r>:
800871cc:	20801017 	ldw	r2,64(r4)
800871d0:	deffde04 	addi	sp,sp,-136
800871d4:	df002015 	stw	fp,128(sp)
800871d8:	dcc01b15 	stw	r19,108(sp)
800871dc:	dc801a15 	stw	r18,104(sp)
800871e0:	dc401915 	stw	r17,100(sp)
800871e4:	dc001815 	stw	r16,96(sp)
800871e8:	dfc02115 	stw	ra,132(sp)
800871ec:	ddc01f15 	stw	r23,124(sp)
800871f0:	dd801e15 	stw	r22,120(sp)
800871f4:	dd401d15 	stw	r21,116(sp)
800871f8:	dd001c15 	stw	r20,112(sp)
800871fc:	d9c00315 	stw	r7,12(sp)
80087200:	2039883a 	mov	fp,r4
80087204:	3023883a 	mov	r17,r6
80087208:	2825883a 	mov	r18,r5
8008720c:	dc002417 	ldw	r16,144(sp)
80087210:	3027883a 	mov	r19,r6
80087214:	10000826 	beq	r2,zero,80087238 <_dtoa_r+0x6c>
80087218:	21801117 	ldw	r6,68(r4)
8008721c:	00c00044 	movi	r3,1
80087220:	100b883a 	mov	r5,r2
80087224:	1986983a 	sll	r3,r3,r6
80087228:	11800115 	stw	r6,4(r2)
8008722c:	10c00215 	stw	r3,8(r2)
80087230:	008a2700 	call	8008a270 <_Bfree>
80087234:	e0001015 	stw	zero,64(fp)
80087238:	88002e16 	blt	r17,zero,800872f4 <_dtoa_r+0x128>
8008723c:	80000015 	stw	zero,0(r16)
80087240:	889ffc2c 	andhi	r2,r17,32752
80087244:	00dffc34 	movhi	r3,32752
80087248:	10c01c26 	beq	r2,r3,800872bc <_dtoa_r+0xf0>
8008724c:	000d883a 	mov	r6,zero
80087250:	000f883a 	mov	r7,zero
80087254:	9009883a 	mov	r4,r18
80087258:	980b883a 	mov	r5,r19
8008725c:	00974900 	call	80097490 <__eqdf2>
80087260:	10002b1e 	bne	r2,zero,80087310 <_dtoa_r+0x144>
80087264:	d9c02317 	ldw	r7,140(sp)
80087268:	00800044 	movi	r2,1
8008726c:	38800015 	stw	r2,0(r7)
80087270:	d8802517 	ldw	r2,148(sp)
80087274:	10019e26 	beq	r2,zero,800878f0 <_dtoa_r+0x724>
80087278:	d8c02517 	ldw	r3,148(sp)
8008727c:	00a002b4 	movhi	r2,32778
80087280:	10b0cb44 	addi	r2,r2,-15571
80087284:	18800015 	stw	r2,0(r3)
80087288:	10bfffc4 	addi	r2,r2,-1
8008728c:	dfc02117 	ldw	ra,132(sp)
80087290:	df002017 	ldw	fp,128(sp)
80087294:	ddc01f17 	ldw	r23,124(sp)
80087298:	dd801e17 	ldw	r22,120(sp)
8008729c:	dd401d17 	ldw	r21,116(sp)
800872a0:	dd001c17 	ldw	r20,112(sp)
800872a4:	dcc01b17 	ldw	r19,108(sp)
800872a8:	dc801a17 	ldw	r18,104(sp)
800872ac:	dc401917 	ldw	r17,100(sp)
800872b0:	dc001817 	ldw	r16,96(sp)
800872b4:	dec02204 	addi	sp,sp,136
800872b8:	f800283a 	ret
800872bc:	d8c02317 	ldw	r3,140(sp)
800872c0:	0089c3c4 	movi	r2,9999
800872c4:	18800015 	stw	r2,0(r3)
800872c8:	90017726 	beq	r18,zero,800878a8 <_dtoa_r+0x6dc>
800872cc:	00a002b4 	movhi	r2,32778
800872d0:	10b17704 	addi	r2,r2,-14884
800872d4:	d9002517 	ldw	r4,148(sp)
800872d8:	203fec26 	beq	r4,zero,8008728c <_dtoa_r+0xc0>
800872dc:	10c000c7 	ldb	r3,3(r2)
800872e0:	1801781e 	bne	r3,zero,800878c4 <_dtoa_r+0x6f8>
800872e4:	10c000c4 	addi	r3,r2,3
800872e8:	d9802517 	ldw	r6,148(sp)
800872ec:	30c00015 	stw	r3,0(r6)
800872f0:	003fe606 	br	8008728c <_dtoa_r+0xc0>
800872f4:	04e00034 	movhi	r19,32768
800872f8:	9cffffc4 	addi	r19,r19,-1
800872fc:	00800044 	movi	r2,1
80087300:	8ce6703a 	and	r19,r17,r19
80087304:	80800015 	stw	r2,0(r16)
80087308:	9823883a 	mov	r17,r19
8008730c:	003fcc06 	br	80087240 <_dtoa_r+0x74>
80087310:	d8800204 	addi	r2,sp,8
80087314:	d8800015 	stw	r2,0(sp)
80087318:	d9c00104 	addi	r7,sp,4
8008731c:	900b883a 	mov	r5,r18
80087320:	980d883a 	mov	r6,r19
80087324:	e009883a 	mov	r4,fp
80087328:	8820d53a 	srli	r16,r17,20
8008732c:	008ae5c0 	call	8008ae5c <__d2b>
80087330:	d8800915 	stw	r2,36(sp)
80087334:	8001651e 	bne	r16,zero,800878cc <_dtoa_r+0x700>
80087338:	dd800217 	ldw	r22,8(sp)
8008733c:	dc000117 	ldw	r16,4(sp)
80087340:	00800804 	movi	r2,32
80087344:	b421883a 	add	r16,r22,r16
80087348:	80c10c84 	addi	r3,r16,1074
8008734c:	10c2d10e 	bge	r2,r3,80087e94 <_dtoa_r+0xcc8>
80087350:	00801004 	movi	r2,64
80087354:	81010484 	addi	r4,r16,1042
80087358:	10c7c83a 	sub	r3,r2,r3
8008735c:	9108d83a 	srl	r4,r18,r4
80087360:	88e2983a 	sll	r17,r17,r3
80087364:	2448b03a 	or	r4,r4,r17
80087368:	00988580 	call	80098858 <__floatunsidf>
8008736c:	017f8434 	movhi	r5,65040
80087370:	01800044 	movi	r6,1
80087374:	1009883a 	mov	r4,r2
80087378:	194b883a 	add	r5,r3,r5
8008737c:	843fffc4 	addi	r16,r16,-1
80087380:	d9801115 	stw	r6,68(sp)
80087384:	000d883a 	mov	r6,zero
80087388:	01cffe34 	movhi	r7,16376
8008738c:	0097e000 	call	80097e00 <__subdf3>
80087390:	0198dbf4 	movhi	r6,25455
80087394:	01cff4f4 	movhi	r7,16339
80087398:	3190d844 	addi	r6,r6,17249
8008739c:	39e1e9c4 	addi	r7,r7,-30809
800873a0:	1009883a 	mov	r4,r2
800873a4:	180b883a 	mov	r5,r3
800873a8:	00976e80 	call	800976e8 <__muldf3>
800873ac:	01a2d874 	movhi	r6,35681
800873b0:	01cff1f4 	movhi	r7,16327
800873b4:	31b22cc4 	addi	r6,r6,-14157
800873b8:	39e28a04 	addi	r7,r7,-30168
800873bc:	180b883a 	mov	r5,r3
800873c0:	1009883a 	mov	r4,r2
800873c4:	00962fc0 	call	800962fc <__adddf3>
800873c8:	8009883a 	mov	r4,r16
800873cc:	1029883a 	mov	r20,r2
800873d0:	1823883a 	mov	r17,r3
800873d4:	009877c0 	call	8009877c <__floatsidf>
800873d8:	019427f4 	movhi	r6,20639
800873dc:	01cff4f4 	movhi	r7,16339
800873e0:	319e7ec4 	addi	r6,r6,31227
800873e4:	39d104c4 	addi	r7,r7,17427
800873e8:	1009883a 	mov	r4,r2
800873ec:	180b883a 	mov	r5,r3
800873f0:	00976e80 	call	800976e8 <__muldf3>
800873f4:	100d883a 	mov	r6,r2
800873f8:	180f883a 	mov	r7,r3
800873fc:	a009883a 	mov	r4,r20
80087400:	880b883a 	mov	r5,r17
80087404:	00962fc0 	call	800962fc <__adddf3>
80087408:	1009883a 	mov	r4,r2
8008740c:	180b883a 	mov	r5,r3
80087410:	1029883a 	mov	r20,r2
80087414:	1823883a 	mov	r17,r3
80087418:	00986fc0 	call	800986fc <__fixdfsi>
8008741c:	000d883a 	mov	r6,zero
80087420:	000f883a 	mov	r7,zero
80087424:	a009883a 	mov	r4,r20
80087428:	880b883a 	mov	r5,r17
8008742c:	d8800515 	stw	r2,20(sp)
80087430:	00975f40 	call	800975f4 <__ledf2>
80087434:	10028716 	blt	r2,zero,80087e54 <_dtoa_r+0xc88>
80087438:	d8c00517 	ldw	r3,20(sp)
8008743c:	00800584 	movi	r2,22
80087440:	10c27536 	bltu	r2,r3,80087e18 <_dtoa_r+0xc4c>
80087444:	180490fa 	slli	r2,r3,3
80087448:	00e002b4 	movhi	r3,32778
8008744c:	18f19204 	addi	r3,r3,-14776
80087450:	1885883a 	add	r2,r3,r2
80087454:	11000017 	ldw	r4,0(r2)
80087458:	11400117 	ldw	r5,4(r2)
8008745c:	900d883a 	mov	r6,r18
80087460:	980f883a 	mov	r7,r19
80087464:	00975180 	call	80097518 <__gedf2>
80087468:	00828d0e 	bge	zero,r2,80087ea0 <_dtoa_r+0xcd4>
8008746c:	d9000517 	ldw	r4,20(sp)
80087470:	d8000e15 	stw	zero,56(sp)
80087474:	213fffc4 	addi	r4,r4,-1
80087478:	d9000515 	stw	r4,20(sp)
8008747c:	b42dc83a 	sub	r22,r22,r16
80087480:	b5bfffc4 	addi	r22,r22,-1
80087484:	b0026f16 	blt	r22,zero,80087e44 <_dtoa_r+0xc78>
80087488:	d8000815 	stw	zero,32(sp)
8008748c:	d9c00517 	ldw	r7,20(sp)
80087490:	38026416 	blt	r7,zero,80087e24 <_dtoa_r+0xc58>
80087494:	b1ed883a 	add	r22,r22,r7
80087498:	d9c00d15 	stw	r7,52(sp)
8008749c:	d8000a15 	stw	zero,40(sp)
800874a0:	d9800317 	ldw	r6,12(sp)
800874a4:	00800244 	movi	r2,9
800874a8:	11811436 	bltu	r2,r6,800878fc <_dtoa_r+0x730>
800874ac:	00800144 	movi	r2,5
800874b0:	1184e10e 	bge	r2,r6,80088838 <_dtoa_r+0x166c>
800874b4:	31bfff04 	addi	r6,r6,-4
800874b8:	d9800315 	stw	r6,12(sp)
800874bc:	0023883a 	mov	r17,zero
800874c0:	d9800317 	ldw	r6,12(sp)
800874c4:	008000c4 	movi	r2,3
800874c8:	30836726 	beq	r6,r2,80088268 <_dtoa_r+0x109c>
800874cc:	1183410e 	bge	r2,r6,800881d4 <_dtoa_r+0x1008>
800874d0:	d9c00317 	ldw	r7,12(sp)
800874d4:	00800104 	movi	r2,4
800874d8:	38827c26 	beq	r7,r2,80087ecc <_dtoa_r+0xd00>
800874dc:	00800144 	movi	r2,5
800874e0:	3884c41e 	bne	r7,r2,800887f4 <_dtoa_r+0x1628>
800874e4:	00800044 	movi	r2,1
800874e8:	d8800b15 	stw	r2,44(sp)
800874ec:	d8c00517 	ldw	r3,20(sp)
800874f0:	d9002217 	ldw	r4,136(sp)
800874f4:	1907883a 	add	r3,r3,r4
800874f8:	19800044 	addi	r6,r3,1
800874fc:	d8c00c15 	stw	r3,48(sp)
80087500:	d9800615 	stw	r6,24(sp)
80087504:	0183a40e 	bge	zero,r6,80088398 <_dtoa_r+0x11cc>
80087508:	d9800617 	ldw	r6,24(sp)
8008750c:	3021883a 	mov	r16,r6
80087510:	e0001115 	stw	zero,68(fp)
80087514:	008005c4 	movi	r2,23
80087518:	1184c92e 	bgeu	r2,r6,80088840 <_dtoa_r+0x1674>
8008751c:	00c00044 	movi	r3,1
80087520:	00800104 	movi	r2,4
80087524:	1085883a 	add	r2,r2,r2
80087528:	11000504 	addi	r4,r2,20
8008752c:	180b883a 	mov	r5,r3
80087530:	18c00044 	addi	r3,r3,1
80087534:	313ffb2e 	bgeu	r6,r4,80087524 <_dtoa_r+0x358>
80087538:	e1401115 	stw	r5,68(fp)
8008753c:	e009883a 	mov	r4,fp
80087540:	008a1c80 	call	8008a1c8 <_Balloc>
80087544:	d8800715 	stw	r2,28(sp)
80087548:	e0801015 	stw	r2,64(fp)
8008754c:	00800384 	movi	r2,14
80087550:	1400f736 	bltu	r2,r16,80087930 <_dtoa_r+0x764>
80087554:	8800f626 	beq	r17,zero,80087930 <_dtoa_r+0x764>
80087558:	d9c00517 	ldw	r7,20(sp)
8008755c:	01c39a0e 	bge	zero,r7,800883c8 <_dtoa_r+0x11fc>
80087560:	388003cc 	andi	r2,r7,15
80087564:	100490fa 	slli	r2,r2,3
80087568:	382bd13a 	srai	r21,r7,4
8008756c:	00e002b4 	movhi	r3,32778
80087570:	18f19204 	addi	r3,r3,-14776
80087574:	1885883a 	add	r2,r3,r2
80087578:	a8c0040c 	andi	r3,r21,16
8008757c:	12400017 	ldw	r9,0(r2)
80087580:	12000117 	ldw	r8,4(r2)
80087584:	18037926 	beq	r3,zero,8008836c <_dtoa_r+0x11a0>
80087588:	00a002b4 	movhi	r2,32778
8008758c:	10b18804 	addi	r2,r2,-14816
80087590:	11800817 	ldw	r6,32(r2)
80087594:	11c00917 	ldw	r7,36(r2)
80087598:	9009883a 	mov	r4,r18
8008759c:	980b883a 	mov	r5,r19
800875a0:	da001715 	stw	r8,92(sp)
800875a4:	da401615 	stw	r9,88(sp)
800875a8:	0096ba80 	call	80096ba8 <__divdf3>
800875ac:	da001717 	ldw	r8,92(sp)
800875b0:	da401617 	ldw	r9,88(sp)
800875b4:	ad4003cc 	andi	r21,r21,15
800875b8:	040000c4 	movi	r16,3
800875bc:	1023883a 	mov	r17,r2
800875c0:	1829883a 	mov	r20,r3
800875c4:	a8001126 	beq	r21,zero,8008760c <_dtoa_r+0x440>
800875c8:	05e002b4 	movhi	r23,32778
800875cc:	bdf18804 	addi	r23,r23,-14816
800875d0:	4805883a 	mov	r2,r9
800875d4:	4007883a 	mov	r3,r8
800875d8:	a980004c 	andi	r6,r21,1
800875dc:	1009883a 	mov	r4,r2
800875e0:	a82bd07a 	srai	r21,r21,1
800875e4:	180b883a 	mov	r5,r3
800875e8:	30000426 	beq	r6,zero,800875fc <_dtoa_r+0x430>
800875ec:	b9800017 	ldw	r6,0(r23)
800875f0:	b9c00117 	ldw	r7,4(r23)
800875f4:	84000044 	addi	r16,r16,1
800875f8:	00976e80 	call	800976e8 <__muldf3>
800875fc:	bdc00204 	addi	r23,r23,8
80087600:	a83ff51e 	bne	r21,zero,800875d8 <_dtoa_r+0x40c>
80087604:	1013883a 	mov	r9,r2
80087608:	1811883a 	mov	r8,r3
8008760c:	480d883a 	mov	r6,r9
80087610:	400f883a 	mov	r7,r8
80087614:	8809883a 	mov	r4,r17
80087618:	a00b883a 	mov	r5,r20
8008761c:	0096ba80 	call	80096ba8 <__divdf3>
80087620:	d8800f15 	stw	r2,60(sp)
80087624:	d8c01015 	stw	r3,64(sp)
80087628:	d8c00e17 	ldw	r3,56(sp)
8008762c:	18000626 	beq	r3,zero,80087648 <_dtoa_r+0x47c>
80087630:	d9000f17 	ldw	r4,60(sp)
80087634:	d9401017 	ldw	r5,64(sp)
80087638:	000d883a 	mov	r6,zero
8008763c:	01cffc34 	movhi	r7,16368
80087640:	00975f40 	call	800975f4 <__ledf2>
80087644:	10040b16 	blt	r2,zero,80088674 <_dtoa_r+0x14a8>
80087648:	8009883a 	mov	r4,r16
8008764c:	009877c0 	call	8009877c <__floatsidf>
80087650:	d9800f17 	ldw	r6,60(sp)
80087654:	d9c01017 	ldw	r7,64(sp)
80087658:	1009883a 	mov	r4,r2
8008765c:	180b883a 	mov	r5,r3
80087660:	00976e80 	call	800976e8 <__muldf3>
80087664:	000d883a 	mov	r6,zero
80087668:	01d00734 	movhi	r7,16412
8008766c:	1009883a 	mov	r4,r2
80087670:	180b883a 	mov	r5,r3
80087674:	00962fc0 	call	800962fc <__adddf3>
80087678:	1021883a 	mov	r16,r2
8008767c:	d8800617 	ldw	r2,24(sp)
80087680:	047f3034 	movhi	r17,64704
80087684:	1c63883a 	add	r17,r3,r17
80087688:	10031826 	beq	r2,zero,800882ec <_dtoa_r+0x1120>
8008768c:	d8c00517 	ldw	r3,20(sp)
80087690:	db000617 	ldw	r12,24(sp)
80087694:	d8c01315 	stw	r3,76(sp)
80087698:	d9000b17 	ldw	r4,44(sp)
8008769c:	20038f26 	beq	r4,zero,800884dc <_dtoa_r+0x1310>
800876a0:	60bfffc4 	addi	r2,r12,-1
800876a4:	100490fa 	slli	r2,r2,3
800876a8:	00e002b4 	movhi	r3,32778
800876ac:	18f19204 	addi	r3,r3,-14776
800876b0:	1885883a 	add	r2,r3,r2
800876b4:	11800017 	ldw	r6,0(r2)
800876b8:	11c00117 	ldw	r7,4(r2)
800876bc:	d8800717 	ldw	r2,28(sp)
800876c0:	0009883a 	mov	r4,zero
800876c4:	014ff834 	movhi	r5,16352
800876c8:	db001615 	stw	r12,88(sp)
800876cc:	15c00044 	addi	r23,r2,1
800876d0:	0096ba80 	call	80096ba8 <__divdf3>
800876d4:	800d883a 	mov	r6,r16
800876d8:	880f883a 	mov	r7,r17
800876dc:	1009883a 	mov	r4,r2
800876e0:	180b883a 	mov	r5,r3
800876e4:	0097e000 	call	80097e00 <__subdf3>
800876e8:	d9401017 	ldw	r5,64(sp)
800876ec:	d9000f17 	ldw	r4,60(sp)
800876f0:	102b883a 	mov	r21,r2
800876f4:	d8c01215 	stw	r3,72(sp)
800876f8:	00986fc0 	call	800986fc <__fixdfsi>
800876fc:	1009883a 	mov	r4,r2
80087700:	1029883a 	mov	r20,r2
80087704:	009877c0 	call	8009877c <__floatsidf>
80087708:	d9000f17 	ldw	r4,60(sp)
8008770c:	d9401017 	ldw	r5,64(sp)
80087710:	100d883a 	mov	r6,r2
80087714:	180f883a 	mov	r7,r3
80087718:	0097e000 	call	80097e00 <__subdf3>
8008771c:	1823883a 	mov	r17,r3
80087720:	d8c00717 	ldw	r3,28(sp)
80087724:	d9401217 	ldw	r5,72(sp)
80087728:	a2000c04 	addi	r8,r20,48
8008772c:	1021883a 	mov	r16,r2
80087730:	1a000005 	stb	r8,0(r3)
80087734:	800d883a 	mov	r6,r16
80087738:	880f883a 	mov	r7,r17
8008773c:	a809883a 	mov	r4,r21
80087740:	4029883a 	mov	r20,r8
80087744:	00975180 	call	80097518 <__gedf2>
80087748:	00841d16 	blt	zero,r2,800887c0 <_dtoa_r+0x15f4>
8008774c:	800d883a 	mov	r6,r16
80087750:	880f883a 	mov	r7,r17
80087754:	0009883a 	mov	r4,zero
80087758:	014ffc34 	movhi	r5,16368
8008775c:	0097e000 	call	80097e00 <__subdf3>
80087760:	d9401217 	ldw	r5,72(sp)
80087764:	100d883a 	mov	r6,r2
80087768:	180f883a 	mov	r7,r3
8008776c:	a809883a 	mov	r4,r21
80087770:	00975180 	call	80097518 <__gedf2>
80087774:	db001617 	ldw	r12,88(sp)
80087778:	00840e16 	blt	zero,r2,800887b4 <_dtoa_r+0x15e8>
8008777c:	00800044 	movi	r2,1
80087780:	13006b0e 	bge	r2,r12,80087930 <_dtoa_r+0x764>
80087784:	d9000717 	ldw	r4,28(sp)
80087788:	dd800f15 	stw	r22,60(sp)
8008778c:	dcc01015 	stw	r19,64(sp)
80087790:	2319883a 	add	r12,r4,r12
80087794:	dcc01217 	ldw	r19,72(sp)
80087798:	602d883a 	mov	r22,r12
8008779c:	dc801215 	stw	r18,72(sp)
800877a0:	b825883a 	mov	r18,r23
800877a4:	00000906 	br	800877cc <_dtoa_r+0x600>
800877a8:	0097e000 	call	80097e00 <__subdf3>
800877ac:	a80d883a 	mov	r6,r21
800877b0:	980f883a 	mov	r7,r19
800877b4:	1009883a 	mov	r4,r2
800877b8:	180b883a 	mov	r5,r3
800877bc:	00975f40 	call	800975f4 <__ledf2>
800877c0:	1003e816 	blt	r2,zero,80088764 <_dtoa_r+0x1598>
800877c4:	b825883a 	mov	r18,r23
800877c8:	bd83e926 	beq	r23,r22,80088770 <_dtoa_r+0x15a4>
800877cc:	a809883a 	mov	r4,r21
800877d0:	980b883a 	mov	r5,r19
800877d4:	000d883a 	mov	r6,zero
800877d8:	01d00934 	movhi	r7,16420
800877dc:	00976e80 	call	800976e8 <__muldf3>
800877e0:	000d883a 	mov	r6,zero
800877e4:	01d00934 	movhi	r7,16420
800877e8:	8009883a 	mov	r4,r16
800877ec:	880b883a 	mov	r5,r17
800877f0:	102b883a 	mov	r21,r2
800877f4:	1827883a 	mov	r19,r3
800877f8:	00976e80 	call	800976e8 <__muldf3>
800877fc:	180b883a 	mov	r5,r3
80087800:	1009883a 	mov	r4,r2
80087804:	1821883a 	mov	r16,r3
80087808:	1023883a 	mov	r17,r2
8008780c:	00986fc0 	call	800986fc <__fixdfsi>
80087810:	1009883a 	mov	r4,r2
80087814:	1029883a 	mov	r20,r2
80087818:	009877c0 	call	8009877c <__floatsidf>
8008781c:	8809883a 	mov	r4,r17
80087820:	800b883a 	mov	r5,r16
80087824:	100d883a 	mov	r6,r2
80087828:	180f883a 	mov	r7,r3
8008782c:	0097e000 	call	80097e00 <__subdf3>
80087830:	a5000c04 	addi	r20,r20,48
80087834:	a80d883a 	mov	r6,r21
80087838:	980f883a 	mov	r7,r19
8008783c:	1009883a 	mov	r4,r2
80087840:	180b883a 	mov	r5,r3
80087844:	95000005 	stb	r20,0(r18)
80087848:	1021883a 	mov	r16,r2
8008784c:	1823883a 	mov	r17,r3
80087850:	00975f40 	call	800975f4 <__ledf2>
80087854:	bdc00044 	addi	r23,r23,1
80087858:	800d883a 	mov	r6,r16
8008785c:	880f883a 	mov	r7,r17
80087860:	0009883a 	mov	r4,zero
80087864:	014ffc34 	movhi	r5,16368
80087868:	103fcf0e 	bge	r2,zero,800877a8 <_dtoa_r+0x5dc>
8008786c:	d8c01317 	ldw	r3,76(sp)
80087870:	d8c00515 	stw	r3,20(sp)
80087874:	d9400917 	ldw	r5,36(sp)
80087878:	e009883a 	mov	r4,fp
8008787c:	008a2700 	call	8008a270 <_Bfree>
80087880:	d9000517 	ldw	r4,20(sp)
80087884:	d9802317 	ldw	r6,140(sp)
80087888:	d9c02517 	ldw	r7,148(sp)
8008788c:	b8000005 	stb	zero,0(r23)
80087890:	20800044 	addi	r2,r4,1
80087894:	30800015 	stw	r2,0(r6)
80087898:	3802aa26 	beq	r7,zero,80088344 <_dtoa_r+0x1178>
8008789c:	3dc00015 	stw	r23,0(r7)
800878a0:	d8800717 	ldw	r2,28(sp)
800878a4:	003e7906 	br	8008728c <_dtoa_r+0xc0>
800878a8:	00800434 	movhi	r2,16
800878ac:	10bfffc4 	addi	r2,r2,-1
800878b0:	88a2703a 	and	r17,r17,r2
800878b4:	883e851e 	bne	r17,zero,800872cc <_dtoa_r+0x100>
800878b8:	00a002b4 	movhi	r2,32778
800878bc:	10b17404 	addi	r2,r2,-14896
800878c0:	003e8406 	br	800872d4 <_dtoa_r+0x108>
800878c4:	10c00204 	addi	r3,r2,8
800878c8:	003e8706 	br	800872e8 <_dtoa_r+0x11c>
800878cc:	01400434 	movhi	r5,16
800878d0:	297fffc4 	addi	r5,r5,-1
800878d4:	994a703a 	and	r5,r19,r5
800878d8:	9009883a 	mov	r4,r18
800878dc:	843f0044 	addi	r16,r16,-1023
800878e0:	294ffc34 	orhi	r5,r5,16368
800878e4:	dd800217 	ldw	r22,8(sp)
800878e8:	d8001115 	stw	zero,68(sp)
800878ec:	003ea506 	br	80087384 <_dtoa_r+0x1b8>
800878f0:	00a002b4 	movhi	r2,32778
800878f4:	10b0cb04 	addi	r2,r2,-15572
800878f8:	003e6406 	br	8008728c <_dtoa_r+0xc0>
800878fc:	e0001115 	stw	zero,68(fp)
80087900:	000b883a 	mov	r5,zero
80087904:	e009883a 	mov	r4,fp
80087908:	008a1c80 	call	8008a1c8 <_Balloc>
8008790c:	01bfffc4 	movi	r6,-1
80087910:	01c00044 	movi	r7,1
80087914:	d8800715 	stw	r2,28(sp)
80087918:	d9800c15 	stw	r6,48(sp)
8008791c:	e0801015 	stw	r2,64(fp)
80087920:	d8000315 	stw	zero,12(sp)
80087924:	d9c00b15 	stw	r7,44(sp)
80087928:	d9800615 	stw	r6,24(sp)
8008792c:	d8002215 	stw	zero,136(sp)
80087930:	d8800117 	ldw	r2,4(sp)
80087934:	10008916 	blt	r2,zero,80087b5c <_dtoa_r+0x990>
80087938:	d9000517 	ldw	r4,20(sp)
8008793c:	00c00384 	movi	r3,14
80087940:	19008616 	blt	r3,r4,80087b5c <_dtoa_r+0x990>
80087944:	200490fa 	slli	r2,r4,3
80087948:	00e002b4 	movhi	r3,32778
8008794c:	d9802217 	ldw	r6,136(sp)
80087950:	18f19204 	addi	r3,r3,-14776
80087954:	1885883a 	add	r2,r3,r2
80087958:	14000017 	ldw	r16,0(r2)
8008795c:	14400117 	ldw	r17,4(r2)
80087960:	30016316 	blt	r6,zero,80087ef0 <_dtoa_r+0xd24>
80087964:	800d883a 	mov	r6,r16
80087968:	880f883a 	mov	r7,r17
8008796c:	9009883a 	mov	r4,r18
80087970:	980b883a 	mov	r5,r19
80087974:	0096ba80 	call	80096ba8 <__divdf3>
80087978:	180b883a 	mov	r5,r3
8008797c:	1009883a 	mov	r4,r2
80087980:	00986fc0 	call	800986fc <__fixdfsi>
80087984:	1009883a 	mov	r4,r2
80087988:	102b883a 	mov	r21,r2
8008798c:	009877c0 	call	8009877c <__floatsidf>
80087990:	800d883a 	mov	r6,r16
80087994:	880f883a 	mov	r7,r17
80087998:	1009883a 	mov	r4,r2
8008799c:	180b883a 	mov	r5,r3
800879a0:	00976e80 	call	800976e8 <__muldf3>
800879a4:	100d883a 	mov	r6,r2
800879a8:	180f883a 	mov	r7,r3
800879ac:	9009883a 	mov	r4,r18
800879b0:	980b883a 	mov	r5,r19
800879b4:	0097e000 	call	80097e00 <__subdf3>
800879b8:	d9c00717 	ldw	r7,28(sp)
800879bc:	1009883a 	mov	r4,r2
800879c0:	a8800c04 	addi	r2,r21,48
800879c4:	38800005 	stb	r2,0(r7)
800879c8:	3dc00044 	addi	r23,r7,1
800879cc:	d9c00617 	ldw	r7,24(sp)
800879d0:	01800044 	movi	r6,1
800879d4:	180b883a 	mov	r5,r3
800879d8:	2005883a 	mov	r2,r4
800879dc:	39803826 	beq	r7,r6,80087ac0 <_dtoa_r+0x8f4>
800879e0:	000d883a 	mov	r6,zero
800879e4:	01d00934 	movhi	r7,16420
800879e8:	00976e80 	call	800976e8 <__muldf3>
800879ec:	000d883a 	mov	r6,zero
800879f0:	000f883a 	mov	r7,zero
800879f4:	1009883a 	mov	r4,r2
800879f8:	180b883a 	mov	r5,r3
800879fc:	1025883a 	mov	r18,r2
80087a00:	1827883a 	mov	r19,r3
80087a04:	00974900 	call	80097490 <__eqdf2>
80087a08:	103f9a26 	beq	r2,zero,80087874 <_dtoa_r+0x6a8>
80087a0c:	d9c00617 	ldw	r7,24(sp)
80087a10:	d8c00717 	ldw	r3,28(sp)
80087a14:	b829883a 	mov	r20,r23
80087a18:	38bfffc4 	addi	r2,r7,-1
80087a1c:	18ad883a 	add	r22,r3,r2
80087a20:	00000a06 	br	80087a4c <_dtoa_r+0x880>
80087a24:	00976e80 	call	800976e8 <__muldf3>
80087a28:	000d883a 	mov	r6,zero
80087a2c:	000f883a 	mov	r7,zero
80087a30:	1009883a 	mov	r4,r2
80087a34:	180b883a 	mov	r5,r3
80087a38:	1025883a 	mov	r18,r2
80087a3c:	1827883a 	mov	r19,r3
80087a40:	b829883a 	mov	r20,r23
80087a44:	00974900 	call	80097490 <__eqdf2>
80087a48:	103f8a26 	beq	r2,zero,80087874 <_dtoa_r+0x6a8>
80087a4c:	800d883a 	mov	r6,r16
80087a50:	880f883a 	mov	r7,r17
80087a54:	9009883a 	mov	r4,r18
80087a58:	980b883a 	mov	r5,r19
80087a5c:	0096ba80 	call	80096ba8 <__divdf3>
80087a60:	180b883a 	mov	r5,r3
80087a64:	1009883a 	mov	r4,r2
80087a68:	00986fc0 	call	800986fc <__fixdfsi>
80087a6c:	1009883a 	mov	r4,r2
80087a70:	102b883a 	mov	r21,r2
80087a74:	009877c0 	call	8009877c <__floatsidf>
80087a78:	800d883a 	mov	r6,r16
80087a7c:	880f883a 	mov	r7,r17
80087a80:	1009883a 	mov	r4,r2
80087a84:	180b883a 	mov	r5,r3
80087a88:	00976e80 	call	800976e8 <__muldf3>
80087a8c:	100d883a 	mov	r6,r2
80087a90:	180f883a 	mov	r7,r3
80087a94:	9009883a 	mov	r4,r18
80087a98:	980b883a 	mov	r5,r19
80087a9c:	0097e000 	call	80097e00 <__subdf3>
80087aa0:	aa000c04 	addi	r8,r21,48
80087aa4:	a2000005 	stb	r8,0(r20)
80087aa8:	000d883a 	mov	r6,zero
80087aac:	01d00934 	movhi	r7,16420
80087ab0:	1009883a 	mov	r4,r2
80087ab4:	180b883a 	mov	r5,r3
80087ab8:	a5c00044 	addi	r23,r20,1
80087abc:	b53fd91e 	bne	r22,r20,80087a24 <_dtoa_r+0x858>
80087ac0:	100d883a 	mov	r6,r2
80087ac4:	180f883a 	mov	r7,r3
80087ac8:	1009883a 	mov	r4,r2
80087acc:	180b883a 	mov	r5,r3
80087ad0:	00962fc0 	call	800962fc <__adddf3>
80087ad4:	100d883a 	mov	r6,r2
80087ad8:	180f883a 	mov	r7,r3
80087adc:	8009883a 	mov	r4,r16
80087ae0:	880b883a 	mov	r5,r17
80087ae4:	1027883a 	mov	r19,r2
80087ae8:	1825883a 	mov	r18,r3
80087aec:	00975f40 	call	800975f4 <__ledf2>
80087af0:	10000816 	blt	r2,zero,80087b14 <_dtoa_r+0x948>
80087af4:	980d883a 	mov	r6,r19
80087af8:	900f883a 	mov	r7,r18
80087afc:	8009883a 	mov	r4,r16
80087b00:	880b883a 	mov	r5,r17
80087b04:	00974900 	call	80097490 <__eqdf2>
80087b08:	103f5a1e 	bne	r2,zero,80087874 <_dtoa_r+0x6a8>
80087b0c:	ad40004c 	andi	r21,r21,1
80087b10:	a83f5826 	beq	r21,zero,80087874 <_dtoa_r+0x6a8>
80087b14:	bd3fffc3 	ldbu	r20,-1(r23)
80087b18:	b8bfffc4 	addi	r2,r23,-1
80087b1c:	1007883a 	mov	r3,r2
80087b20:	01400e44 	movi	r5,57
80087b24:	d9800717 	ldw	r6,28(sp)
80087b28:	00000506 	br	80087b40 <_dtoa_r+0x974>
80087b2c:	18ffffc4 	addi	r3,r3,-1
80087b30:	11824726 	beq	r2,r6,80088450 <_dtoa_r+0x1284>
80087b34:	1d000003 	ldbu	r20,0(r3)
80087b38:	102f883a 	mov	r23,r2
80087b3c:	10bfffc4 	addi	r2,r2,-1
80087b40:	a1003fcc 	andi	r4,r20,255
80087b44:	2100201c 	xori	r4,r4,128
80087b48:	213fe004 	addi	r4,r4,-128
80087b4c:	217ff726 	beq	r4,r5,80087b2c <_dtoa_r+0x960>
80087b50:	a2000044 	addi	r8,r20,1
80087b54:	12000005 	stb	r8,0(r2)
80087b58:	003f4606 	br	80087874 <_dtoa_r+0x6a8>
80087b5c:	d9000b17 	ldw	r4,44(sp)
80087b60:	2000c826 	beq	r4,zero,80087e84 <_dtoa_r+0xcb8>
80087b64:	d9800317 	ldw	r6,12(sp)
80087b68:	00c00044 	movi	r3,1
80087b6c:	1980f90e 	bge	r3,r6,80087f54 <_dtoa_r+0xd88>
80087b70:	d8800617 	ldw	r2,24(sp)
80087b74:	d8c00a17 	ldw	r3,40(sp)
80087b78:	157fffc4 	addi	r21,r2,-1
80087b7c:	1d41f316 	blt	r3,r21,8008834c <_dtoa_r+0x1180>
80087b80:	1d6bc83a 	sub	r21,r3,r21
80087b84:	d9c00617 	ldw	r7,24(sp)
80087b88:	3802aa16 	blt	r7,zero,80088634 <_dtoa_r+0x1468>
80087b8c:	dd000817 	ldw	r20,32(sp)
80087b90:	d8800617 	ldw	r2,24(sp)
80087b94:	d8c00817 	ldw	r3,32(sp)
80087b98:	01400044 	movi	r5,1
80087b9c:	e009883a 	mov	r4,fp
80087ba0:	1887883a 	add	r3,r3,r2
80087ba4:	d8c00815 	stw	r3,32(sp)
80087ba8:	b0ad883a 	add	r22,r22,r2
80087bac:	008a5d40 	call	8008a5d4 <__i2b>
80087bb0:	1023883a 	mov	r17,r2
80087bb4:	a0000826 	beq	r20,zero,80087bd8 <_dtoa_r+0xa0c>
80087bb8:	0580070e 	bge	zero,r22,80087bd8 <_dtoa_r+0xa0c>
80087bbc:	a005883a 	mov	r2,r20
80087bc0:	b500b916 	blt	r22,r20,80087ea8 <_dtoa_r+0xcdc>
80087bc4:	d9000817 	ldw	r4,32(sp)
80087bc8:	a0a9c83a 	sub	r20,r20,r2
80087bcc:	b0adc83a 	sub	r22,r22,r2
80087bd0:	2089c83a 	sub	r4,r4,r2
80087bd4:	d9000815 	stw	r4,32(sp)
80087bd8:	d9800a17 	ldw	r6,40(sp)
80087bdc:	0181810e 	bge	zero,r6,800881e4 <_dtoa_r+0x1018>
80087be0:	d9c00b17 	ldw	r7,44(sp)
80087be4:	3800b326 	beq	r7,zero,80087eb4 <_dtoa_r+0xce8>
80087be8:	a800b226 	beq	r21,zero,80087eb4 <_dtoa_r+0xce8>
80087bec:	880b883a 	mov	r5,r17
80087bf0:	a80d883a 	mov	r6,r21
80087bf4:	e009883a 	mov	r4,fp
80087bf8:	008a8080 	call	8008a808 <__pow5mult>
80087bfc:	d9800917 	ldw	r6,36(sp)
80087c00:	100b883a 	mov	r5,r2
80087c04:	e009883a 	mov	r4,fp
80087c08:	1023883a 	mov	r17,r2
80087c0c:	008a6100 	call	8008a610 <__multiply>
80087c10:	1021883a 	mov	r16,r2
80087c14:	d8800a17 	ldw	r2,40(sp)
80087c18:	d9400917 	ldw	r5,36(sp)
80087c1c:	e009883a 	mov	r4,fp
80087c20:	1545c83a 	sub	r2,r2,r21
80087c24:	d8800a15 	stw	r2,40(sp)
80087c28:	008a2700 	call	8008a270 <_Bfree>
80087c2c:	d8c00a17 	ldw	r3,40(sp)
80087c30:	18009f1e 	bne	r3,zero,80087eb0 <_dtoa_r+0xce4>
80087c34:	05c00044 	movi	r23,1
80087c38:	e009883a 	mov	r4,fp
80087c3c:	b80b883a 	mov	r5,r23
80087c40:	008a5d40 	call	8008a5d4 <__i2b>
80087c44:	d9000d17 	ldw	r4,52(sp)
80087c48:	102b883a 	mov	r21,r2
80087c4c:	2000ce26 	beq	r4,zero,80087f88 <_dtoa_r+0xdbc>
80087c50:	200d883a 	mov	r6,r4
80087c54:	100b883a 	mov	r5,r2
80087c58:	e009883a 	mov	r4,fp
80087c5c:	008a8080 	call	8008a808 <__pow5mult>
80087c60:	d9800317 	ldw	r6,12(sp)
80087c64:	102b883a 	mov	r21,r2
80087c68:	b981810e 	bge	r23,r6,80088270 <_dtoa_r+0x10a4>
80087c6c:	0027883a 	mov	r19,zero
80087c70:	a8800417 	ldw	r2,16(r21)
80087c74:	05c00804 	movi	r23,32
80087c78:	10800104 	addi	r2,r2,4
80087c7c:	1085883a 	add	r2,r2,r2
80087c80:	1085883a 	add	r2,r2,r2
80087c84:	a885883a 	add	r2,r21,r2
80087c88:	11000017 	ldw	r4,0(r2)
80087c8c:	008a4bc0 	call	8008a4bc <__hi0bits>
80087c90:	b885c83a 	sub	r2,r23,r2
80087c94:	1585883a 	add	r2,r2,r22
80087c98:	108007cc 	andi	r2,r2,31
80087c9c:	1000b326 	beq	r2,zero,80087f6c <_dtoa_r+0xda0>
80087ca0:	00c00804 	movi	r3,32
80087ca4:	1887c83a 	sub	r3,r3,r2
80087ca8:	01000104 	movi	r4,4
80087cac:	20c2cd0e 	bge	r4,r3,800887e4 <_dtoa_r+0x1618>
80087cb0:	00c00704 	movi	r3,28
80087cb4:	1885c83a 	sub	r2,r3,r2
80087cb8:	d8c00817 	ldw	r3,32(sp)
80087cbc:	a0a9883a 	add	r20,r20,r2
80087cc0:	b0ad883a 	add	r22,r22,r2
80087cc4:	1887883a 	add	r3,r3,r2
80087cc8:	d8c00815 	stw	r3,32(sp)
80087ccc:	d9800817 	ldw	r6,32(sp)
80087cd0:	0180040e 	bge	zero,r6,80087ce4 <_dtoa_r+0xb18>
80087cd4:	800b883a 	mov	r5,r16
80087cd8:	e009883a 	mov	r4,fp
80087cdc:	008a9480 	call	8008a948 <__lshift>
80087ce0:	1021883a 	mov	r16,r2
80087ce4:	0580050e 	bge	zero,r22,80087cfc <_dtoa_r+0xb30>
80087ce8:	a80b883a 	mov	r5,r21
80087cec:	b00d883a 	mov	r6,r22
80087cf0:	e009883a 	mov	r4,fp
80087cf4:	008a9480 	call	8008a948 <__lshift>
80087cf8:	102b883a 	mov	r21,r2
80087cfc:	d9c00e17 	ldw	r7,56(sp)
80087d00:	3801211e 	bne	r7,zero,80088188 <_dtoa_r+0xfbc>
80087d04:	d9800617 	ldw	r6,24(sp)
80087d08:	0181380e 	bge	zero,r6,800881ec <_dtoa_r+0x1020>
80087d0c:	d8c00b17 	ldw	r3,44(sp)
80087d10:	1800ab1e 	bne	r3,zero,80087fc0 <_dtoa_r+0xdf4>
80087d14:	dc800717 	ldw	r18,28(sp)
80087d18:	dcc00617 	ldw	r19,24(sp)
80087d1c:	9029883a 	mov	r20,r18
80087d20:	00000206 	br	80087d2c <_dtoa_r+0xb60>
80087d24:	008a2980 	call	8008a298 <__multadd>
80087d28:	1021883a 	mov	r16,r2
80087d2c:	a80b883a 	mov	r5,r21
80087d30:	8009883a 	mov	r4,r16
80087d34:	0086fcc0 	call	80086fcc <quorem>
80087d38:	10800c04 	addi	r2,r2,48
80087d3c:	90800005 	stb	r2,0(r18)
80087d40:	94800044 	addi	r18,r18,1
80087d44:	9507c83a 	sub	r3,r18,r20
80087d48:	000f883a 	mov	r7,zero
80087d4c:	01800284 	movi	r6,10
80087d50:	800b883a 	mov	r5,r16
80087d54:	e009883a 	mov	r4,fp
80087d58:	1cfff216 	blt	r3,r19,80087d24 <_dtoa_r+0xb58>
80087d5c:	1011883a 	mov	r8,r2
80087d60:	d8800617 	ldw	r2,24(sp)
80087d64:	0082370e 	bge	zero,r2,80088644 <_dtoa_r+0x1478>
80087d68:	d9000717 	ldw	r4,28(sp)
80087d6c:	0025883a 	mov	r18,zero
80087d70:	20af883a 	add	r23,r4,r2
80087d74:	01800044 	movi	r6,1
80087d78:	800b883a 	mov	r5,r16
80087d7c:	e009883a 	mov	r4,fp
80087d80:	da001715 	stw	r8,92(sp)
80087d84:	008a9480 	call	8008a948 <__lshift>
80087d88:	a80b883a 	mov	r5,r21
80087d8c:	1009883a 	mov	r4,r2
80087d90:	d8800915 	stw	r2,36(sp)
80087d94:	008aa900 	call	8008aa90 <__mcmp>
80087d98:	da001717 	ldw	r8,92(sp)
80087d9c:	0081800e 	bge	zero,r2,800883a0 <_dtoa_r+0x11d4>
80087da0:	b93fffc3 	ldbu	r4,-1(r23)
80087da4:	b8bfffc4 	addi	r2,r23,-1
80087da8:	1007883a 	mov	r3,r2
80087dac:	01800e44 	movi	r6,57
80087db0:	d9c00717 	ldw	r7,28(sp)
80087db4:	00000506 	br	80087dcc <_dtoa_r+0xc00>
80087db8:	18ffffc4 	addi	r3,r3,-1
80087dbc:	11c12326 	beq	r2,r7,8008824c <_dtoa_r+0x1080>
80087dc0:	19000003 	ldbu	r4,0(r3)
80087dc4:	102f883a 	mov	r23,r2
80087dc8:	10bfffc4 	addi	r2,r2,-1
80087dcc:	21403fcc 	andi	r5,r4,255
80087dd0:	2940201c 	xori	r5,r5,128
80087dd4:	297fe004 	addi	r5,r5,-128
80087dd8:	29bff726 	beq	r5,r6,80087db8 <_dtoa_r+0xbec>
80087ddc:	21000044 	addi	r4,r4,1
80087de0:	11000005 	stb	r4,0(r2)
80087de4:	a80b883a 	mov	r5,r21
80087de8:	e009883a 	mov	r4,fp
80087dec:	008a2700 	call	8008a270 <_Bfree>
80087df0:	883ea026 	beq	r17,zero,80087874 <_dtoa_r+0x6a8>
80087df4:	90000426 	beq	r18,zero,80087e08 <_dtoa_r+0xc3c>
80087df8:	94400326 	beq	r18,r17,80087e08 <_dtoa_r+0xc3c>
80087dfc:	900b883a 	mov	r5,r18
80087e00:	e009883a 	mov	r4,fp
80087e04:	008a2700 	call	8008a270 <_Bfree>
80087e08:	880b883a 	mov	r5,r17
80087e0c:	e009883a 	mov	r4,fp
80087e10:	008a2700 	call	8008a270 <_Bfree>
80087e14:	003e9706 	br	80087874 <_dtoa_r+0x6a8>
80087e18:	01800044 	movi	r6,1
80087e1c:	d9800e15 	stw	r6,56(sp)
80087e20:	003d9606 	br	8008747c <_dtoa_r+0x2b0>
80087e24:	d8800817 	ldw	r2,32(sp)
80087e28:	d8c00517 	ldw	r3,20(sp)
80087e2c:	d8000d15 	stw	zero,52(sp)
80087e30:	10c5c83a 	sub	r2,r2,r3
80087e34:	00c9c83a 	sub	r4,zero,r3
80087e38:	d8800815 	stw	r2,32(sp)
80087e3c:	d9000a15 	stw	r4,40(sp)
80087e40:	003d9706 	br	800874a0 <_dtoa_r+0x2d4>
80087e44:	05adc83a 	sub	r22,zero,r22
80087e48:	dd800815 	stw	r22,32(sp)
80087e4c:	002d883a 	mov	r22,zero
80087e50:	003d8e06 	br	8008748c <_dtoa_r+0x2c0>
80087e54:	d9000517 	ldw	r4,20(sp)
80087e58:	009877c0 	call	8009877c <__floatsidf>
80087e5c:	100d883a 	mov	r6,r2
80087e60:	180f883a 	mov	r7,r3
80087e64:	a009883a 	mov	r4,r20
80087e68:	880b883a 	mov	r5,r17
80087e6c:	00974900 	call	80097490 <__eqdf2>
80087e70:	103d7126 	beq	r2,zero,80087438 <_dtoa_r+0x26c>
80087e74:	d9c00517 	ldw	r7,20(sp)
80087e78:	39ffffc4 	addi	r7,r7,-1
80087e7c:	d9c00515 	stw	r7,20(sp)
80087e80:	003d6d06 	br	80087438 <_dtoa_r+0x26c>
80087e84:	dd400a17 	ldw	r21,40(sp)
80087e88:	dd000817 	ldw	r20,32(sp)
80087e8c:	0023883a 	mov	r17,zero
80087e90:	003f4806 	br	80087bb4 <_dtoa_r+0x9e8>
80087e94:	10e3c83a 	sub	r17,r2,r3
80087e98:	9448983a 	sll	r4,r18,r17
80087e9c:	003d3206 	br	80087368 <_dtoa_r+0x19c>
80087ea0:	d8000e15 	stw	zero,56(sp)
80087ea4:	003d7506 	br	8008747c <_dtoa_r+0x2b0>
80087ea8:	b005883a 	mov	r2,r22
80087eac:	003f4506 	br	80087bc4 <_dtoa_r+0x9f8>
80087eb0:	dc000915 	stw	r16,36(sp)
80087eb4:	d9800a17 	ldw	r6,40(sp)
80087eb8:	d9400917 	ldw	r5,36(sp)
80087ebc:	e009883a 	mov	r4,fp
80087ec0:	008a8080 	call	8008a808 <__pow5mult>
80087ec4:	1021883a 	mov	r16,r2
80087ec8:	003f5a06 	br	80087c34 <_dtoa_r+0xa68>
80087ecc:	01c00044 	movi	r7,1
80087ed0:	d9c00b15 	stw	r7,44(sp)
80087ed4:	d8802217 	ldw	r2,136(sp)
80087ed8:	0081280e 	bge	zero,r2,8008837c <_dtoa_r+0x11b0>
80087edc:	100d883a 	mov	r6,r2
80087ee0:	1021883a 	mov	r16,r2
80087ee4:	d8800c15 	stw	r2,48(sp)
80087ee8:	d8800615 	stw	r2,24(sp)
80087eec:	003d8806 	br	80087510 <_dtoa_r+0x344>
80087ef0:	d8800617 	ldw	r2,24(sp)
80087ef4:	00be9b16 	blt	zero,r2,80087964 <_dtoa_r+0x798>
80087ef8:	10010f1e 	bne	r2,zero,80088338 <_dtoa_r+0x116c>
80087efc:	880b883a 	mov	r5,r17
80087f00:	000d883a 	mov	r6,zero
80087f04:	01d00534 	movhi	r7,16404
80087f08:	8009883a 	mov	r4,r16
80087f0c:	00976e80 	call	800976e8 <__muldf3>
80087f10:	900d883a 	mov	r6,r18
80087f14:	980f883a 	mov	r7,r19
80087f18:	1009883a 	mov	r4,r2
80087f1c:	180b883a 	mov	r5,r3
80087f20:	00975180 	call	80097518 <__gedf2>
80087f24:	002b883a 	mov	r21,zero
80087f28:	0023883a 	mov	r17,zero
80087f2c:	1000bf16 	blt	r2,zero,8008822c <_dtoa_r+0x1060>
80087f30:	d9802217 	ldw	r6,136(sp)
80087f34:	ddc00717 	ldw	r23,28(sp)
80087f38:	018c303a 	nor	r6,zero,r6
80087f3c:	d9800515 	stw	r6,20(sp)
80087f40:	a80b883a 	mov	r5,r21
80087f44:	e009883a 	mov	r4,fp
80087f48:	008a2700 	call	8008a270 <_Bfree>
80087f4c:	883e4926 	beq	r17,zero,80087874 <_dtoa_r+0x6a8>
80087f50:	003fad06 	br	80087e08 <_dtoa_r+0xc3c>
80087f54:	d9c01117 	ldw	r7,68(sp)
80087f58:	3801bc26 	beq	r7,zero,8008864c <_dtoa_r+0x1480>
80087f5c:	10810cc4 	addi	r2,r2,1075
80087f60:	dd400a17 	ldw	r21,40(sp)
80087f64:	dd000817 	ldw	r20,32(sp)
80087f68:	003f0a06 	br	80087b94 <_dtoa_r+0x9c8>
80087f6c:	00800704 	movi	r2,28
80087f70:	d9000817 	ldw	r4,32(sp)
80087f74:	a0a9883a 	add	r20,r20,r2
80087f78:	b0ad883a 	add	r22,r22,r2
80087f7c:	2089883a 	add	r4,r4,r2
80087f80:	d9000815 	stw	r4,32(sp)
80087f84:	003f5106 	br	80087ccc <_dtoa_r+0xb00>
80087f88:	d8c00317 	ldw	r3,12(sp)
80087f8c:	b8c1fc0e 	bge	r23,r3,80088780 <_dtoa_r+0x15b4>
80087f90:	0027883a 	mov	r19,zero
80087f94:	b805883a 	mov	r2,r23
80087f98:	003f3e06 	br	80087c94 <_dtoa_r+0xac8>
80087f9c:	880b883a 	mov	r5,r17
80087fa0:	e009883a 	mov	r4,fp
80087fa4:	000f883a 	mov	r7,zero
80087fa8:	01800284 	movi	r6,10
80087fac:	008a2980 	call	8008a298 <__multadd>
80087fb0:	d9000c17 	ldw	r4,48(sp)
80087fb4:	1023883a 	mov	r17,r2
80087fb8:	0102040e 	bge	zero,r4,800887cc <_dtoa_r+0x1600>
80087fbc:	d9000615 	stw	r4,24(sp)
80087fc0:	0500050e 	bge	zero,r20,80087fd8 <_dtoa_r+0xe0c>
80087fc4:	880b883a 	mov	r5,r17
80087fc8:	a00d883a 	mov	r6,r20
80087fcc:	e009883a 	mov	r4,fp
80087fd0:	008a9480 	call	8008a948 <__lshift>
80087fd4:	1023883a 	mov	r17,r2
80087fd8:	9801241e 	bne	r19,zero,8008846c <_dtoa_r+0x12a0>
80087fdc:	8829883a 	mov	r20,r17
80087fe0:	d9000617 	ldw	r4,24(sp)
80087fe4:	dcc00717 	ldw	r19,28(sp)
80087fe8:	9480004c 	andi	r18,r18,1
80087fec:	20bfffc4 	addi	r2,r4,-1
80087ff0:	9885883a 	add	r2,r19,r2
80087ff4:	d8800415 	stw	r2,16(sp)
80087ff8:	dc800615 	stw	r18,24(sp)
80087ffc:	a80b883a 	mov	r5,r21
80088000:	8009883a 	mov	r4,r16
80088004:	0086fcc0 	call	80086fcc <quorem>
80088008:	880b883a 	mov	r5,r17
8008800c:	8009883a 	mov	r4,r16
80088010:	102f883a 	mov	r23,r2
80088014:	008aa900 	call	8008aa90 <__mcmp>
80088018:	a80b883a 	mov	r5,r21
8008801c:	a00d883a 	mov	r6,r20
80088020:	e009883a 	mov	r4,fp
80088024:	102d883a 	mov	r22,r2
80088028:	008aaf00 	call	8008aaf0 <__mdiff>
8008802c:	1007883a 	mov	r3,r2
80088030:	10800317 	ldw	r2,12(r2)
80088034:	bc800c04 	addi	r18,r23,48
80088038:	180b883a 	mov	r5,r3
8008803c:	10004e1e 	bne	r2,zero,80088178 <_dtoa_r+0xfac>
80088040:	8009883a 	mov	r4,r16
80088044:	d8c01615 	stw	r3,88(sp)
80088048:	008aa900 	call	8008aa90 <__mcmp>
8008804c:	d8c01617 	ldw	r3,88(sp)
80088050:	e009883a 	mov	r4,fp
80088054:	d8801615 	stw	r2,88(sp)
80088058:	180b883a 	mov	r5,r3
8008805c:	008a2700 	call	8008a270 <_Bfree>
80088060:	d8801617 	ldw	r2,88(sp)
80088064:	1000041e 	bne	r2,zero,80088078 <_dtoa_r+0xeac>
80088068:	d9800317 	ldw	r6,12(sp)
8008806c:	3000021e 	bne	r6,zero,80088078 <_dtoa_r+0xeac>
80088070:	d8c00617 	ldw	r3,24(sp)
80088074:	18003726 	beq	r3,zero,80088154 <_dtoa_r+0xf88>
80088078:	b0002016 	blt	r22,zero,800880fc <_dtoa_r+0xf30>
8008807c:	b000041e 	bne	r22,zero,80088090 <_dtoa_r+0xec4>
80088080:	d9000317 	ldw	r4,12(sp)
80088084:	2000021e 	bne	r4,zero,80088090 <_dtoa_r+0xec4>
80088088:	d8c00617 	ldw	r3,24(sp)
8008808c:	18001b26 	beq	r3,zero,800880fc <_dtoa_r+0xf30>
80088090:	00810716 	blt	zero,r2,800884b0 <_dtoa_r+0x12e4>
80088094:	d8c00417 	ldw	r3,16(sp)
80088098:	9d800044 	addi	r22,r19,1
8008809c:	9c800005 	stb	r18,0(r19)
800880a0:	b02f883a 	mov	r23,r22
800880a4:	98c10626 	beq	r19,r3,800884c0 <_dtoa_r+0x12f4>
800880a8:	800b883a 	mov	r5,r16
800880ac:	000f883a 	mov	r7,zero
800880b0:	01800284 	movi	r6,10
800880b4:	e009883a 	mov	r4,fp
800880b8:	008a2980 	call	8008a298 <__multadd>
800880bc:	1021883a 	mov	r16,r2
800880c0:	000f883a 	mov	r7,zero
800880c4:	01800284 	movi	r6,10
800880c8:	880b883a 	mov	r5,r17
800880cc:	e009883a 	mov	r4,fp
800880d0:	8d002526 	beq	r17,r20,80088168 <_dtoa_r+0xf9c>
800880d4:	008a2980 	call	8008a298 <__multadd>
800880d8:	a00b883a 	mov	r5,r20
800880dc:	000f883a 	mov	r7,zero
800880e0:	01800284 	movi	r6,10
800880e4:	e009883a 	mov	r4,fp
800880e8:	1023883a 	mov	r17,r2
800880ec:	008a2980 	call	8008a298 <__multadd>
800880f0:	1029883a 	mov	r20,r2
800880f4:	b027883a 	mov	r19,r22
800880f8:	003fc006 	br	80087ffc <_dtoa_r+0xe30>
800880fc:	9011883a 	mov	r8,r18
80088100:	00800e0e 	bge	zero,r2,8008813c <_dtoa_r+0xf70>
80088104:	800b883a 	mov	r5,r16
80088108:	01800044 	movi	r6,1
8008810c:	e009883a 	mov	r4,fp
80088110:	da001715 	stw	r8,92(sp)
80088114:	008a9480 	call	8008a948 <__lshift>
80088118:	a80b883a 	mov	r5,r21
8008811c:	1009883a 	mov	r4,r2
80088120:	1021883a 	mov	r16,r2
80088124:	008aa900 	call	8008aa90 <__mcmp>
80088128:	da001717 	ldw	r8,92(sp)
8008812c:	0081960e 	bge	zero,r2,80088788 <_dtoa_r+0x15bc>
80088130:	00800e44 	movi	r2,57
80088134:	40817026 	beq	r8,r2,800886f8 <_dtoa_r+0x152c>
80088138:	ba000c44 	addi	r8,r23,49
8008813c:	8825883a 	mov	r18,r17
80088140:	9dc00044 	addi	r23,r19,1
80088144:	9a000005 	stb	r8,0(r19)
80088148:	a023883a 	mov	r17,r20
8008814c:	dc000915 	stw	r16,36(sp)
80088150:	003f2406 	br	80087de4 <_dtoa_r+0xc18>
80088154:	00800e44 	movi	r2,57
80088158:	9011883a 	mov	r8,r18
8008815c:	90816626 	beq	r18,r2,800886f8 <_dtoa_r+0x152c>
80088160:	05bff516 	blt	zero,r22,80088138 <_dtoa_r+0xf6c>
80088164:	003ff506 	br	8008813c <_dtoa_r+0xf70>
80088168:	008a2980 	call	8008a298 <__multadd>
8008816c:	1023883a 	mov	r17,r2
80088170:	1029883a 	mov	r20,r2
80088174:	003fdf06 	br	800880f4 <_dtoa_r+0xf28>
80088178:	e009883a 	mov	r4,fp
8008817c:	008a2700 	call	8008a270 <_Bfree>
80088180:	00800044 	movi	r2,1
80088184:	003fbc06 	br	80088078 <_dtoa_r+0xeac>
80088188:	a80b883a 	mov	r5,r21
8008818c:	8009883a 	mov	r4,r16
80088190:	008aa900 	call	8008aa90 <__mcmp>
80088194:	103edb0e 	bge	r2,zero,80087d04 <_dtoa_r+0xb38>
80088198:	800b883a 	mov	r5,r16
8008819c:	000f883a 	mov	r7,zero
800881a0:	01800284 	movi	r6,10
800881a4:	e009883a 	mov	r4,fp
800881a8:	008a2980 	call	8008a298 <__multadd>
800881ac:	1021883a 	mov	r16,r2
800881b0:	d8800517 	ldw	r2,20(sp)
800881b4:	d8c00b17 	ldw	r3,44(sp)
800881b8:	10bfffc4 	addi	r2,r2,-1
800881bc:	d8800515 	stw	r2,20(sp)
800881c0:	183f761e 	bne	r3,zero,80087f9c <_dtoa_r+0xdd0>
800881c4:	d9000c17 	ldw	r4,48(sp)
800881c8:	0101730e 	bge	zero,r4,80088798 <_dtoa_r+0x15cc>
800881cc:	d9000615 	stw	r4,24(sp)
800881d0:	003ed006 	br	80087d14 <_dtoa_r+0xb48>
800881d4:	00800084 	movi	r2,2
800881d8:	3081861e 	bne	r6,r2,800887f4 <_dtoa_r+0x1628>
800881dc:	d8000b15 	stw	zero,44(sp)
800881e0:	003f3c06 	br	80087ed4 <_dtoa_r+0xd08>
800881e4:	dc000917 	ldw	r16,36(sp)
800881e8:	003e9206 	br	80087c34 <_dtoa_r+0xa68>
800881ec:	d9c00317 	ldw	r7,12(sp)
800881f0:	00800084 	movi	r2,2
800881f4:	11fec50e 	bge	r2,r7,80087d0c <_dtoa_r+0xb40>
800881f8:	d9000617 	ldw	r4,24(sp)
800881fc:	20013c1e 	bne	r4,zero,800886f0 <_dtoa_r+0x1524>
80088200:	a80b883a 	mov	r5,r21
80088204:	000f883a 	mov	r7,zero
80088208:	01800144 	movi	r6,5
8008820c:	e009883a 	mov	r4,fp
80088210:	008a2980 	call	8008a298 <__multadd>
80088214:	100b883a 	mov	r5,r2
80088218:	8009883a 	mov	r4,r16
8008821c:	102b883a 	mov	r21,r2
80088220:	008aa900 	call	8008aa90 <__mcmp>
80088224:	dc000915 	stw	r16,36(sp)
80088228:	00bf410e 	bge	zero,r2,80087f30 <_dtoa_r+0xd64>
8008822c:	d9c00717 	ldw	r7,28(sp)
80088230:	00800c44 	movi	r2,49
80088234:	38800005 	stb	r2,0(r7)
80088238:	d8800517 	ldw	r2,20(sp)
8008823c:	3dc00044 	addi	r23,r7,1
80088240:	10800044 	addi	r2,r2,1
80088244:	d8800515 	stw	r2,20(sp)
80088248:	003f3d06 	br	80087f40 <_dtoa_r+0xd74>
8008824c:	d9800517 	ldw	r6,20(sp)
80088250:	d9c00717 	ldw	r7,28(sp)
80088254:	00800c44 	movi	r2,49
80088258:	31800044 	addi	r6,r6,1
8008825c:	d9800515 	stw	r6,20(sp)
80088260:	38800005 	stb	r2,0(r7)
80088264:	003edf06 	br	80087de4 <_dtoa_r+0xc18>
80088268:	d8000b15 	stw	zero,44(sp)
8008826c:	003c9f06 	br	800874ec <_dtoa_r+0x320>
80088270:	903e7e1e 	bne	r18,zero,80087c6c <_dtoa_r+0xaa0>
80088274:	00800434 	movhi	r2,16
80088278:	10bfffc4 	addi	r2,r2,-1
8008827c:	9884703a 	and	r2,r19,r2
80088280:	1000ea1e 	bne	r2,zero,8008862c <_dtoa_r+0x1460>
80088284:	9cdffc2c 	andhi	r19,r19,32752
80088288:	9800e826 	beq	r19,zero,8008862c <_dtoa_r+0x1460>
8008828c:	d9c00817 	ldw	r7,32(sp)
80088290:	b5800044 	addi	r22,r22,1
80088294:	04c00044 	movi	r19,1
80088298:	39c00044 	addi	r7,r7,1
8008829c:	d9c00815 	stw	r7,32(sp)
800882a0:	d8800d17 	ldw	r2,52(sp)
800882a4:	103e721e 	bne	r2,zero,80087c70 <_dtoa_r+0xaa4>
800882a8:	00800044 	movi	r2,1
800882ac:	003e7906 	br	80087c94 <_dtoa_r+0xac8>
800882b0:	8009883a 	mov	r4,r16
800882b4:	009877c0 	call	8009877c <__floatsidf>
800882b8:	d9800f17 	ldw	r6,60(sp)
800882bc:	d9c01017 	ldw	r7,64(sp)
800882c0:	1009883a 	mov	r4,r2
800882c4:	180b883a 	mov	r5,r3
800882c8:	00976e80 	call	800976e8 <__muldf3>
800882cc:	000d883a 	mov	r6,zero
800882d0:	01d00734 	movhi	r7,16412
800882d4:	1009883a 	mov	r4,r2
800882d8:	180b883a 	mov	r5,r3
800882dc:	00962fc0 	call	800962fc <__adddf3>
800882e0:	047f3034 	movhi	r17,64704
800882e4:	1021883a 	mov	r16,r2
800882e8:	1c63883a 	add	r17,r3,r17
800882ec:	d9000f17 	ldw	r4,60(sp)
800882f0:	d9401017 	ldw	r5,64(sp)
800882f4:	000d883a 	mov	r6,zero
800882f8:	01d00534 	movhi	r7,16404
800882fc:	0097e000 	call	80097e00 <__subdf3>
80088300:	800d883a 	mov	r6,r16
80088304:	880f883a 	mov	r7,r17
80088308:	1009883a 	mov	r4,r2
8008830c:	180b883a 	mov	r5,r3
80088310:	102b883a 	mov	r21,r2
80088314:	1829883a 	mov	r20,r3
80088318:	00975180 	call	80097518 <__gedf2>
8008831c:	00806c16 	blt	zero,r2,800884d0 <_dtoa_r+0x1304>
80088320:	89e0003c 	xorhi	r7,r17,32768
80088324:	800d883a 	mov	r6,r16
80088328:	a809883a 	mov	r4,r21
8008832c:	a00b883a 	mov	r5,r20
80088330:	00975f40 	call	800975f4 <__ledf2>
80088334:	103d7e0e 	bge	r2,zero,80087930 <_dtoa_r+0x764>
80088338:	002b883a 	mov	r21,zero
8008833c:	0023883a 	mov	r17,zero
80088340:	003efb06 	br	80087f30 <_dtoa_r+0xd64>
80088344:	d8800717 	ldw	r2,28(sp)
80088348:	003bd006 	br	8008728c <_dtoa_r+0xc0>
8008834c:	d9000a17 	ldw	r4,40(sp)
80088350:	d9800d17 	ldw	r6,52(sp)
80088354:	dd400a15 	stw	r21,40(sp)
80088358:	a905c83a 	sub	r2,r21,r4
8008835c:	308d883a 	add	r6,r6,r2
80088360:	d9800d15 	stw	r6,52(sp)
80088364:	002b883a 	mov	r21,zero
80088368:	003e0606 	br	80087b84 <_dtoa_r+0x9b8>
8008836c:	9023883a 	mov	r17,r18
80088370:	9829883a 	mov	r20,r19
80088374:	04000084 	movi	r16,2
80088378:	003c9206 	br	800875c4 <_dtoa_r+0x3f8>
8008837c:	04000044 	movi	r16,1
80088380:	dc000c15 	stw	r16,48(sp)
80088384:	dc000615 	stw	r16,24(sp)
80088388:	dc002215 	stw	r16,136(sp)
8008838c:	e0001115 	stw	zero,68(fp)
80088390:	000b883a 	mov	r5,zero
80088394:	003c6906 	br	8008753c <_dtoa_r+0x370>
80088398:	3021883a 	mov	r16,r6
8008839c:	003ffb06 	br	8008838c <_dtoa_r+0x11c0>
800883a0:	1000021e 	bne	r2,zero,800883ac <_dtoa_r+0x11e0>
800883a4:	4200004c 	andi	r8,r8,1
800883a8:	403e7d1e 	bne	r8,zero,80087da0 <_dtoa_r+0xbd4>
800883ac:	01000c04 	movi	r4,48
800883b0:	00000106 	br	800883b8 <_dtoa_r+0x11ec>
800883b4:	102f883a 	mov	r23,r2
800883b8:	b8bfffc4 	addi	r2,r23,-1
800883bc:	10c00007 	ldb	r3,0(r2)
800883c0:	193ffc26 	beq	r3,r4,800883b4 <_dtoa_r+0x11e8>
800883c4:	003e8706 	br	80087de4 <_dtoa_r+0xc18>
800883c8:	d8800517 	ldw	r2,20(sp)
800883cc:	00a3c83a 	sub	r17,zero,r2
800883d0:	8800a426 	beq	r17,zero,80088664 <_dtoa_r+0x1498>
800883d4:	888003cc 	andi	r2,r17,15
800883d8:	100490fa 	slli	r2,r2,3
800883dc:	00e002b4 	movhi	r3,32778
800883e0:	18f19204 	addi	r3,r3,-14776
800883e4:	1885883a 	add	r2,r3,r2
800883e8:	11800017 	ldw	r6,0(r2)
800883ec:	11c00117 	ldw	r7,4(r2)
800883f0:	9009883a 	mov	r4,r18
800883f4:	980b883a 	mov	r5,r19
800883f8:	8823d13a 	srai	r17,r17,4
800883fc:	00976e80 	call	800976e8 <__muldf3>
80088400:	d8800f15 	stw	r2,60(sp)
80088404:	d8c01015 	stw	r3,64(sp)
80088408:	8800e826 	beq	r17,zero,800887ac <_dtoa_r+0x15e0>
8008840c:	052002b4 	movhi	r20,32778
80088410:	a5318804 	addi	r20,r20,-14816
80088414:	04000084 	movi	r16,2
80088418:	8980004c 	andi	r6,r17,1
8008841c:	1009883a 	mov	r4,r2
80088420:	8823d07a 	srai	r17,r17,1
80088424:	180b883a 	mov	r5,r3
80088428:	30000426 	beq	r6,zero,8008843c <_dtoa_r+0x1270>
8008842c:	a1800017 	ldw	r6,0(r20)
80088430:	a1c00117 	ldw	r7,4(r20)
80088434:	84000044 	addi	r16,r16,1
80088438:	00976e80 	call	800976e8 <__muldf3>
8008843c:	a5000204 	addi	r20,r20,8
80088440:	883ff51e 	bne	r17,zero,80088418 <_dtoa_r+0x124c>
80088444:	d8800f15 	stw	r2,60(sp)
80088448:	d8c01015 	stw	r3,64(sp)
8008844c:	003c7606 	br	80087628 <_dtoa_r+0x45c>
80088450:	00c00c04 	movi	r3,48
80088454:	10c00005 	stb	r3,0(r2)
80088458:	d8c00517 	ldw	r3,20(sp)
8008845c:	bd3fffc3 	ldbu	r20,-1(r23)
80088460:	18c00044 	addi	r3,r3,1
80088464:	d8c00515 	stw	r3,20(sp)
80088468:	003db906 	br	80087b50 <_dtoa_r+0x984>
8008846c:	89400117 	ldw	r5,4(r17)
80088470:	e009883a 	mov	r4,fp
80088474:	008a1c80 	call	8008a1c8 <_Balloc>
80088478:	89800417 	ldw	r6,16(r17)
8008847c:	89400304 	addi	r5,r17,12
80088480:	11000304 	addi	r4,r2,12
80088484:	31800084 	addi	r6,r6,2
80088488:	318d883a 	add	r6,r6,r6
8008848c:	318d883a 	add	r6,r6,r6
80088490:	1027883a 	mov	r19,r2
80088494:	0082cec0 	call	80082cec <memcpy>
80088498:	01800044 	movi	r6,1
8008849c:	980b883a 	mov	r5,r19
800884a0:	e009883a 	mov	r4,fp
800884a4:	008a9480 	call	8008a948 <__lshift>
800884a8:	1029883a 	mov	r20,r2
800884ac:	003ecc06 	br	80087fe0 <_dtoa_r+0xe14>
800884b0:	00800e44 	movi	r2,57
800884b4:	90809026 	beq	r18,r2,800886f8 <_dtoa_r+0x152c>
800884b8:	92000044 	addi	r8,r18,1
800884bc:	003f1f06 	br	8008813c <_dtoa_r+0xf70>
800884c0:	9011883a 	mov	r8,r18
800884c4:	8825883a 	mov	r18,r17
800884c8:	a023883a 	mov	r17,r20
800884cc:	003e2906 	br	80087d74 <_dtoa_r+0xba8>
800884d0:	002b883a 	mov	r21,zero
800884d4:	0023883a 	mov	r17,zero
800884d8:	003f5406 	br	8008822c <_dtoa_r+0x1060>
800884dc:	61bfffc4 	addi	r6,r12,-1
800884e0:	300490fa 	slli	r2,r6,3
800884e4:	00e002b4 	movhi	r3,32778
800884e8:	18f19204 	addi	r3,r3,-14776
800884ec:	1885883a 	add	r2,r3,r2
800884f0:	11000017 	ldw	r4,0(r2)
800884f4:	11400117 	ldw	r5,4(r2)
800884f8:	d8800717 	ldw	r2,28(sp)
800884fc:	880f883a 	mov	r7,r17
80088500:	d9801215 	stw	r6,72(sp)
80088504:	800d883a 	mov	r6,r16
80088508:	db001615 	stw	r12,88(sp)
8008850c:	15c00044 	addi	r23,r2,1
80088510:	00976e80 	call	800976e8 <__muldf3>
80088514:	d9401017 	ldw	r5,64(sp)
80088518:	d9000f17 	ldw	r4,60(sp)
8008851c:	d8c01515 	stw	r3,84(sp)
80088520:	d8801415 	stw	r2,80(sp)
80088524:	00986fc0 	call	800986fc <__fixdfsi>
80088528:	1009883a 	mov	r4,r2
8008852c:	1021883a 	mov	r16,r2
80088530:	009877c0 	call	8009877c <__floatsidf>
80088534:	d9000f17 	ldw	r4,60(sp)
80088538:	d9401017 	ldw	r5,64(sp)
8008853c:	100d883a 	mov	r6,r2
80088540:	180f883a 	mov	r7,r3
80088544:	0097e000 	call	80097e00 <__subdf3>
80088548:	1829883a 	mov	r20,r3
8008854c:	d8c00717 	ldw	r3,28(sp)
80088550:	84000c04 	addi	r16,r16,48
80088554:	1023883a 	mov	r17,r2
80088558:	1c000005 	stb	r16,0(r3)
8008855c:	db001617 	ldw	r12,88(sp)
80088560:	00800044 	movi	r2,1
80088564:	60802226 	beq	r12,r2,800885f0 <_dtoa_r+0x1424>
80088568:	d9c00717 	ldw	r7,28(sp)
8008856c:	8805883a 	mov	r2,r17
80088570:	b82b883a 	mov	r21,r23
80088574:	3b19883a 	add	r12,r7,r12
80088578:	6023883a 	mov	r17,r12
8008857c:	a007883a 	mov	r3,r20
80088580:	dc800f15 	stw	r18,60(sp)
80088584:	000d883a 	mov	r6,zero
80088588:	01d00934 	movhi	r7,16420
8008858c:	1009883a 	mov	r4,r2
80088590:	180b883a 	mov	r5,r3
80088594:	00976e80 	call	800976e8 <__muldf3>
80088598:	180b883a 	mov	r5,r3
8008859c:	1009883a 	mov	r4,r2
800885a0:	1829883a 	mov	r20,r3
800885a4:	1025883a 	mov	r18,r2
800885a8:	00986fc0 	call	800986fc <__fixdfsi>
800885ac:	1009883a 	mov	r4,r2
800885b0:	1021883a 	mov	r16,r2
800885b4:	009877c0 	call	8009877c <__floatsidf>
800885b8:	100d883a 	mov	r6,r2
800885bc:	180f883a 	mov	r7,r3
800885c0:	9009883a 	mov	r4,r18
800885c4:	a00b883a 	mov	r5,r20
800885c8:	84000c04 	addi	r16,r16,48
800885cc:	0097e000 	call	80097e00 <__subdf3>
800885d0:	ad400044 	addi	r21,r21,1
800885d4:	ac3fffc5 	stb	r16,-1(r21)
800885d8:	ac7fea1e 	bne	r21,r17,80088584 <_dtoa_r+0x13b8>
800885dc:	1023883a 	mov	r17,r2
800885e0:	d8801217 	ldw	r2,72(sp)
800885e4:	dc800f17 	ldw	r18,60(sp)
800885e8:	1829883a 	mov	r20,r3
800885ec:	b8af883a 	add	r23,r23,r2
800885f0:	d9001417 	ldw	r4,80(sp)
800885f4:	d9401517 	ldw	r5,84(sp)
800885f8:	000d883a 	mov	r6,zero
800885fc:	01cff834 	movhi	r7,16352
80088600:	00962fc0 	call	800962fc <__adddf3>
80088604:	880d883a 	mov	r6,r17
80088608:	a00f883a 	mov	r7,r20
8008860c:	1009883a 	mov	r4,r2
80088610:	180b883a 	mov	r5,r3
80088614:	00975f40 	call	800975f4 <__ledf2>
80088618:	10003e0e 	bge	r2,zero,80088714 <_dtoa_r+0x1548>
8008861c:	d9001317 	ldw	r4,76(sp)
80088620:	bd3fffc3 	ldbu	r20,-1(r23)
80088624:	d9000515 	stw	r4,20(sp)
80088628:	003d3b06 	br	80087b18 <_dtoa_r+0x94c>
8008862c:	0027883a 	mov	r19,zero
80088630:	003f1b06 	br	800882a0 <_dtoa_r+0x10d4>
80088634:	d8800817 	ldw	r2,32(sp)
80088638:	11e9c83a 	sub	r20,r2,r7
8008863c:	0005883a 	mov	r2,zero
80088640:	003d5406 	br	80087b94 <_dtoa_r+0x9c8>
80088644:	00800044 	movi	r2,1
80088648:	003dc706 	br	80087d68 <_dtoa_r+0xb9c>
8008864c:	d8c00217 	ldw	r3,8(sp)
80088650:	00800d84 	movi	r2,54
80088654:	dd400a17 	ldw	r21,40(sp)
80088658:	10c5c83a 	sub	r2,r2,r3
8008865c:	dd000817 	ldw	r20,32(sp)
80088660:	003d4c06 	br	80087b94 <_dtoa_r+0x9c8>
80088664:	dc800f15 	stw	r18,60(sp)
80088668:	dcc01015 	stw	r19,64(sp)
8008866c:	04000084 	movi	r16,2
80088670:	003bed06 	br	80087628 <_dtoa_r+0x45c>
80088674:	d9000617 	ldw	r4,24(sp)
80088678:	203f0d26 	beq	r4,zero,800882b0 <_dtoa_r+0x10e4>
8008867c:	d9800c17 	ldw	r6,48(sp)
80088680:	01bcab0e 	bge	zero,r6,80087930 <_dtoa_r+0x764>
80088684:	d9401017 	ldw	r5,64(sp)
80088688:	d9000f17 	ldw	r4,60(sp)
8008868c:	000d883a 	mov	r6,zero
80088690:	01d00934 	movhi	r7,16420
80088694:	00976e80 	call	800976e8 <__muldf3>
80088698:	81000044 	addi	r4,r16,1
8008869c:	d8800f15 	stw	r2,60(sp)
800886a0:	d8c01015 	stw	r3,64(sp)
800886a4:	009877c0 	call	8009877c <__floatsidf>
800886a8:	d9800f17 	ldw	r6,60(sp)
800886ac:	d9c01017 	ldw	r7,64(sp)
800886b0:	1009883a 	mov	r4,r2
800886b4:	180b883a 	mov	r5,r3
800886b8:	00976e80 	call	800976e8 <__muldf3>
800886bc:	01d00734 	movhi	r7,16412
800886c0:	000d883a 	mov	r6,zero
800886c4:	1009883a 	mov	r4,r2
800886c8:	180b883a 	mov	r5,r3
800886cc:	00962fc0 	call	800962fc <__adddf3>
800886d0:	d9c00517 	ldw	r7,20(sp)
800886d4:	047f3034 	movhi	r17,64704
800886d8:	1021883a 	mov	r16,r2
800886dc:	39ffffc4 	addi	r7,r7,-1
800886e0:	d9c01315 	stw	r7,76(sp)
800886e4:	1c63883a 	add	r17,r3,r17
800886e8:	db000c17 	ldw	r12,48(sp)
800886ec:	003bea06 	br	80087698 <_dtoa_r+0x4cc>
800886f0:	dc000915 	stw	r16,36(sp)
800886f4:	003e0e06 	br	80087f30 <_dtoa_r+0xd64>
800886f8:	01000e44 	movi	r4,57
800886fc:	8825883a 	mov	r18,r17
80088700:	9dc00044 	addi	r23,r19,1
80088704:	99000005 	stb	r4,0(r19)
80088708:	a023883a 	mov	r17,r20
8008870c:	dc000915 	stw	r16,36(sp)
80088710:	003da406 	br	80087da4 <_dtoa_r+0xbd8>
80088714:	d9801417 	ldw	r6,80(sp)
80088718:	d9c01517 	ldw	r7,84(sp)
8008871c:	0009883a 	mov	r4,zero
80088720:	014ff834 	movhi	r5,16352
80088724:	0097e000 	call	80097e00 <__subdf3>
80088728:	880d883a 	mov	r6,r17
8008872c:	a00f883a 	mov	r7,r20
80088730:	1009883a 	mov	r4,r2
80088734:	180b883a 	mov	r5,r3
80088738:	00975180 	call	80097518 <__gedf2>
8008873c:	00bc7c0e 	bge	zero,r2,80087930 <_dtoa_r+0x764>
80088740:	01000c04 	movi	r4,48
80088744:	00000106 	br	8008874c <_dtoa_r+0x1580>
80088748:	102f883a 	mov	r23,r2
8008874c:	b8bfffc4 	addi	r2,r23,-1
80088750:	10c00007 	ldb	r3,0(r2)
80088754:	193ffc26 	beq	r3,r4,80088748 <_dtoa_r+0x157c>
80088758:	d9801317 	ldw	r6,76(sp)
8008875c:	d9800515 	stw	r6,20(sp)
80088760:	003c4406 	br	80087874 <_dtoa_r+0x6a8>
80088764:	d9801317 	ldw	r6,76(sp)
80088768:	d9800515 	stw	r6,20(sp)
8008876c:	003cea06 	br	80087b18 <_dtoa_r+0x94c>
80088770:	dd800f17 	ldw	r22,60(sp)
80088774:	dcc01017 	ldw	r19,64(sp)
80088778:	dc801217 	ldw	r18,72(sp)
8008877c:	003c6c06 	br	80087930 <_dtoa_r+0x764>
80088780:	903e031e 	bne	r18,zero,80087f90 <_dtoa_r+0xdc4>
80088784:	003ebb06 	br	80088274 <_dtoa_r+0x10a8>
80088788:	103e6c1e 	bne	r2,zero,8008813c <_dtoa_r+0xf70>
8008878c:	4080004c 	andi	r2,r8,1
80088790:	103e6a26 	beq	r2,zero,8008813c <_dtoa_r+0xf70>
80088794:	003e6606 	br	80088130 <_dtoa_r+0xf64>
80088798:	d8c00317 	ldw	r3,12(sp)
8008879c:	00800084 	movi	r2,2
800887a0:	10c02916 	blt	r2,r3,80088848 <_dtoa_r+0x167c>
800887a4:	d9000c17 	ldw	r4,48(sp)
800887a8:	003e8806 	br	800881cc <_dtoa_r+0x1000>
800887ac:	04000084 	movi	r16,2
800887b0:	003b9d06 	br	80087628 <_dtoa_r+0x45c>
800887b4:	d9001317 	ldw	r4,76(sp)
800887b8:	d9000515 	stw	r4,20(sp)
800887bc:	003cd606 	br	80087b18 <_dtoa_r+0x94c>
800887c0:	d8801317 	ldw	r2,76(sp)
800887c4:	d8800515 	stw	r2,20(sp)
800887c8:	003c2a06 	br	80087874 <_dtoa_r+0x6a8>
800887cc:	d9800317 	ldw	r6,12(sp)
800887d0:	00800084 	movi	r2,2
800887d4:	11801516 	blt	r2,r6,8008882c <_dtoa_r+0x1660>
800887d8:	d9c00c17 	ldw	r7,48(sp)
800887dc:	d9c00615 	stw	r7,24(sp)
800887e0:	003df706 	br	80087fc0 <_dtoa_r+0xdf4>
800887e4:	193d3926 	beq	r3,r4,80087ccc <_dtoa_r+0xb00>
800887e8:	00c00f04 	movi	r3,60
800887ec:	1885c83a 	sub	r2,r3,r2
800887f0:	003ddf06 	br	80087f70 <_dtoa_r+0xda4>
800887f4:	e009883a 	mov	r4,fp
800887f8:	e0001115 	stw	zero,68(fp)
800887fc:	000b883a 	mov	r5,zero
80088800:	008a1c80 	call	8008a1c8 <_Balloc>
80088804:	d8800715 	stw	r2,28(sp)
80088808:	d8c00717 	ldw	r3,28(sp)
8008880c:	00bfffc4 	movi	r2,-1
80088810:	01000044 	movi	r4,1
80088814:	d8800c15 	stw	r2,48(sp)
80088818:	e0c01015 	stw	r3,64(fp)
8008881c:	d9000b15 	stw	r4,44(sp)
80088820:	d8800615 	stw	r2,24(sp)
80088824:	d8002215 	stw	zero,136(sp)
80088828:	003c4106 	br	80087930 <_dtoa_r+0x764>
8008882c:	d8c00c17 	ldw	r3,48(sp)
80088830:	d8c00615 	stw	r3,24(sp)
80088834:	003e7006 	br	800881f8 <_dtoa_r+0x102c>
80088838:	04400044 	movi	r17,1
8008883c:	003b2006 	br	800874c0 <_dtoa_r+0x2f4>
80088840:	000b883a 	mov	r5,zero
80088844:	003b3d06 	br	8008753c <_dtoa_r+0x370>
80088848:	d8800c17 	ldw	r2,48(sp)
8008884c:	d8800615 	stw	r2,24(sp)
80088850:	003e6906 	br	800881f8 <_dtoa_r+0x102c>

80088854 <__sflush_r>:
80088854:	2880030b 	ldhu	r2,12(r5)
80088858:	defffb04 	addi	sp,sp,-20
8008885c:	dcc00315 	stw	r19,12(sp)
80088860:	dc400115 	stw	r17,4(sp)
80088864:	dfc00415 	stw	ra,16(sp)
80088868:	dc800215 	stw	r18,8(sp)
8008886c:	dc000015 	stw	r16,0(sp)
80088870:	10c0020c 	andi	r3,r2,8
80088874:	2823883a 	mov	r17,r5
80088878:	2027883a 	mov	r19,r4
8008887c:	1800311e 	bne	r3,zero,80088944 <__sflush_r+0xf0>
80088880:	28c00117 	ldw	r3,4(r5)
80088884:	10820014 	ori	r2,r2,2048
80088888:	2880030d 	sth	r2,12(r5)
8008888c:	00c04b0e 	bge	zero,r3,800889bc <__sflush_r+0x168>
80088890:	8a000a17 	ldw	r8,40(r17)
80088894:	40002326 	beq	r8,zero,80088924 <__sflush_r+0xd0>
80088898:	9c000017 	ldw	r16,0(r19)
8008889c:	10c4000c 	andi	r3,r2,4096
800888a0:	98000015 	stw	zero,0(r19)
800888a4:	18004826 	beq	r3,zero,800889c8 <__sflush_r+0x174>
800888a8:	89801417 	ldw	r6,80(r17)
800888ac:	10c0010c 	andi	r3,r2,4
800888b0:	18000626 	beq	r3,zero,800888cc <__sflush_r+0x78>
800888b4:	88c00117 	ldw	r3,4(r17)
800888b8:	88800c17 	ldw	r2,48(r17)
800888bc:	30cdc83a 	sub	r6,r6,r3
800888c0:	10000226 	beq	r2,zero,800888cc <__sflush_r+0x78>
800888c4:	88800f17 	ldw	r2,60(r17)
800888c8:	308dc83a 	sub	r6,r6,r2
800888cc:	89400717 	ldw	r5,28(r17)
800888d0:	000f883a 	mov	r7,zero
800888d4:	9809883a 	mov	r4,r19
800888d8:	403ee83a 	callr	r8
800888dc:	00ffffc4 	movi	r3,-1
800888e0:	10c04426 	beq	r2,r3,800889f4 <__sflush_r+0x1a0>
800888e4:	88c0030b 	ldhu	r3,12(r17)
800888e8:	89000417 	ldw	r4,16(r17)
800888ec:	88000115 	stw	zero,4(r17)
800888f0:	197dffcc 	andi	r5,r3,63487
800888f4:	8940030d 	sth	r5,12(r17)
800888f8:	89000015 	stw	r4,0(r17)
800888fc:	18c4000c 	andi	r3,r3,4096
80088900:	18002c1e 	bne	r3,zero,800889b4 <__sflush_r+0x160>
80088904:	89400c17 	ldw	r5,48(r17)
80088908:	9c000015 	stw	r16,0(r19)
8008890c:	28000526 	beq	r5,zero,80088924 <__sflush_r+0xd0>
80088910:	88801004 	addi	r2,r17,64
80088914:	28800226 	beq	r5,r2,80088920 <__sflush_r+0xcc>
80088918:	9809883a 	mov	r4,r19
8008891c:	0088fc00 	call	80088fc0 <_free_r>
80088920:	88000c15 	stw	zero,48(r17)
80088924:	0005883a 	mov	r2,zero
80088928:	dfc00417 	ldw	ra,16(sp)
8008892c:	dcc00317 	ldw	r19,12(sp)
80088930:	dc800217 	ldw	r18,8(sp)
80088934:	dc400117 	ldw	r17,4(sp)
80088938:	dc000017 	ldw	r16,0(sp)
8008893c:	dec00504 	addi	sp,sp,20
80088940:	f800283a 	ret
80088944:	2c800417 	ldw	r18,16(r5)
80088948:	903ff626 	beq	r18,zero,80088924 <__sflush_r+0xd0>
8008894c:	2c000017 	ldw	r16,0(r5)
80088950:	108000cc 	andi	r2,r2,3
80088954:	2c800015 	stw	r18,0(r5)
80088958:	84a1c83a 	sub	r16,r16,r18
8008895c:	1000131e 	bne	r2,zero,800889ac <__sflush_r+0x158>
80088960:	28800517 	ldw	r2,20(r5)
80088964:	88800215 	stw	r2,8(r17)
80088968:	04000316 	blt	zero,r16,80088978 <__sflush_r+0x124>
8008896c:	003fed06 	br	80088924 <__sflush_r+0xd0>
80088970:	90a5883a 	add	r18,r18,r2
80088974:	043feb0e 	bge	zero,r16,80088924 <__sflush_r+0xd0>
80088978:	88800917 	ldw	r2,36(r17)
8008897c:	89400717 	ldw	r5,28(r17)
80088980:	800f883a 	mov	r7,r16
80088984:	900d883a 	mov	r6,r18
80088988:	9809883a 	mov	r4,r19
8008898c:	103ee83a 	callr	r2
80088990:	80a1c83a 	sub	r16,r16,r2
80088994:	00bff616 	blt	zero,r2,80088970 <__sflush_r+0x11c>
80088998:	88c0030b 	ldhu	r3,12(r17)
8008899c:	00bfffc4 	movi	r2,-1
800889a0:	18c01014 	ori	r3,r3,64
800889a4:	88c0030d 	sth	r3,12(r17)
800889a8:	003fdf06 	br	80088928 <__sflush_r+0xd4>
800889ac:	0005883a 	mov	r2,zero
800889b0:	003fec06 	br	80088964 <__sflush_r+0x110>
800889b4:	88801415 	stw	r2,80(r17)
800889b8:	003fd206 	br	80088904 <__sflush_r+0xb0>
800889bc:	28c00f17 	ldw	r3,60(r5)
800889c0:	00ffb316 	blt	zero,r3,80088890 <__sflush_r+0x3c>
800889c4:	003fd706 	br	80088924 <__sflush_r+0xd0>
800889c8:	89400717 	ldw	r5,28(r17)
800889cc:	000d883a 	mov	r6,zero
800889d0:	01c00044 	movi	r7,1
800889d4:	9809883a 	mov	r4,r19
800889d8:	403ee83a 	callr	r8
800889dc:	100d883a 	mov	r6,r2
800889e0:	00bfffc4 	movi	r2,-1
800889e4:	30801426 	beq	r6,r2,80088a38 <__sflush_r+0x1e4>
800889e8:	8880030b 	ldhu	r2,12(r17)
800889ec:	8a000a17 	ldw	r8,40(r17)
800889f0:	003fae06 	br	800888ac <__sflush_r+0x58>
800889f4:	98c00017 	ldw	r3,0(r19)
800889f8:	183fba26 	beq	r3,zero,800888e4 <__sflush_r+0x90>
800889fc:	01000744 	movi	r4,29
80088a00:	19000626 	beq	r3,r4,80088a1c <__sflush_r+0x1c8>
80088a04:	01000584 	movi	r4,22
80088a08:	19000426 	beq	r3,r4,80088a1c <__sflush_r+0x1c8>
80088a0c:	88c0030b 	ldhu	r3,12(r17)
80088a10:	18c01014 	ori	r3,r3,64
80088a14:	88c0030d 	sth	r3,12(r17)
80088a18:	003fc306 	br	80088928 <__sflush_r+0xd4>
80088a1c:	8880030b 	ldhu	r2,12(r17)
80088a20:	88c00417 	ldw	r3,16(r17)
80088a24:	88000115 	stw	zero,4(r17)
80088a28:	10bdffcc 	andi	r2,r2,63487
80088a2c:	8880030d 	sth	r2,12(r17)
80088a30:	88c00015 	stw	r3,0(r17)
80088a34:	003fb306 	br	80088904 <__sflush_r+0xb0>
80088a38:	98800017 	ldw	r2,0(r19)
80088a3c:	103fea26 	beq	r2,zero,800889e8 <__sflush_r+0x194>
80088a40:	00c00744 	movi	r3,29
80088a44:	10c00226 	beq	r2,r3,80088a50 <__sflush_r+0x1fc>
80088a48:	00c00584 	movi	r3,22
80088a4c:	10c0031e 	bne	r2,r3,80088a5c <__sflush_r+0x208>
80088a50:	9c000015 	stw	r16,0(r19)
80088a54:	0005883a 	mov	r2,zero
80088a58:	003fb306 	br	80088928 <__sflush_r+0xd4>
80088a5c:	88c0030b 	ldhu	r3,12(r17)
80088a60:	3005883a 	mov	r2,r6
80088a64:	18c01014 	ori	r3,r3,64
80088a68:	88c0030d 	sth	r3,12(r17)
80088a6c:	003fae06 	br	80088928 <__sflush_r+0xd4>

80088a70 <_fflush_r>:
80088a70:	defffd04 	addi	sp,sp,-12
80088a74:	dc000115 	stw	r16,4(sp)
80088a78:	dfc00215 	stw	ra,8(sp)
80088a7c:	2021883a 	mov	r16,r4
80088a80:	20000226 	beq	r4,zero,80088a8c <_fflush_r+0x1c>
80088a84:	20800e17 	ldw	r2,56(r4)
80088a88:	10000c26 	beq	r2,zero,80088abc <_fflush_r+0x4c>
80088a8c:	2880030f 	ldh	r2,12(r5)
80088a90:	1000051e 	bne	r2,zero,80088aa8 <_fflush_r+0x38>
80088a94:	0005883a 	mov	r2,zero
80088a98:	dfc00217 	ldw	ra,8(sp)
80088a9c:	dc000117 	ldw	r16,4(sp)
80088aa0:	dec00304 	addi	sp,sp,12
80088aa4:	f800283a 	ret
80088aa8:	8009883a 	mov	r4,r16
80088aac:	dfc00217 	ldw	ra,8(sp)
80088ab0:	dc000117 	ldw	r16,4(sp)
80088ab4:	dec00304 	addi	sp,sp,12
80088ab8:	00888541 	jmpi	80088854 <__sflush_r>
80088abc:	d9400015 	stw	r5,0(sp)
80088ac0:	0088e4c0 	call	80088e4c <__sinit>
80088ac4:	d9400017 	ldw	r5,0(sp)
80088ac8:	003ff006 	br	80088a8c <_fflush_r+0x1c>

80088acc <fflush>:
80088acc:	20000526 	beq	r4,zero,80088ae4 <fflush+0x18>
80088ad0:	00a002b4 	movhi	r2,32778
80088ad4:	10ba7304 	addi	r2,r2,-5684
80088ad8:	200b883a 	mov	r5,r4
80088adc:	11000017 	ldw	r4,0(r2)
80088ae0:	0088a701 	jmpi	80088a70 <_fflush_r>
80088ae4:	00a002b4 	movhi	r2,32778
80088ae8:	10ba7204 	addi	r2,r2,-5688
80088aec:	11000017 	ldw	r4,0(r2)
80088af0:	01600274 	movhi	r5,32777
80088af4:	29629c04 	addi	r5,r5,-30096
80088af8:	00898501 	jmpi	80089850 <_fwalk_reent>

80088afc <__fp_unlock>:
80088afc:	0005883a 	mov	r2,zero
80088b00:	f800283a 	ret

80088b04 <_cleanup_r>:
80088b04:	01600274 	movhi	r5,32777
80088b08:	294bf404 	addi	r5,r5,12240
80088b0c:	00898501 	jmpi	80089850 <_fwalk_reent>

80088b10 <__sinit.part.1>:
80088b10:	defff704 	addi	sp,sp,-36
80088b14:	00e00274 	movhi	r3,32777
80088b18:	dfc00815 	stw	ra,32(sp)
80088b1c:	ddc00715 	stw	r23,28(sp)
80088b20:	dd800615 	stw	r22,24(sp)
80088b24:	dd400515 	stw	r21,20(sp)
80088b28:	dd000415 	stw	r20,16(sp)
80088b2c:	dcc00315 	stw	r19,12(sp)
80088b30:	dc800215 	stw	r18,8(sp)
80088b34:	dc400115 	stw	r17,4(sp)
80088b38:	dc000015 	stw	r16,0(sp)
80088b3c:	18e2c104 	addi	r3,r3,-29948
80088b40:	24000117 	ldw	r16,4(r4)
80088b44:	20c00f15 	stw	r3,60(r4)
80088b48:	2080bb04 	addi	r2,r4,748
80088b4c:	00c000c4 	movi	r3,3
80088b50:	20c0b915 	stw	r3,740(r4)
80088b54:	2080ba15 	stw	r2,744(r4)
80088b58:	2000b815 	stw	zero,736(r4)
80088b5c:	05c00204 	movi	r23,8
80088b60:	00800104 	movi	r2,4
80088b64:	2025883a 	mov	r18,r4
80088b68:	b80d883a 	mov	r6,r23
80088b6c:	81001704 	addi	r4,r16,92
80088b70:	000b883a 	mov	r5,zero
80088b74:	80000015 	stw	zero,0(r16)
80088b78:	80000115 	stw	zero,4(r16)
80088b7c:	80000215 	stw	zero,8(r16)
80088b80:	8080030d 	sth	r2,12(r16)
80088b84:	80001915 	stw	zero,100(r16)
80088b88:	8000038d 	sth	zero,14(r16)
80088b8c:	80000415 	stw	zero,16(r16)
80088b90:	80000515 	stw	zero,20(r16)
80088b94:	80000615 	stw	zero,24(r16)
80088b98:	008a0a00 	call	8008a0a0 <memset>
80088b9c:	05a00234 	movhi	r22,32776
80088ba0:	94400217 	ldw	r17,8(r18)
80088ba4:	05600234 	movhi	r21,32776
80088ba8:	05200234 	movhi	r20,32776
80088bac:	04e00234 	movhi	r19,32776
80088bb0:	b58c5904 	addi	r22,r22,12644
80088bb4:	ad4c7004 	addi	r21,r21,12736
80088bb8:	a50c8f04 	addi	r20,r20,12860
80088bbc:	9ccca604 	addi	r19,r19,12952
80088bc0:	85800815 	stw	r22,32(r16)
80088bc4:	85400915 	stw	r21,36(r16)
80088bc8:	85000a15 	stw	r20,40(r16)
80088bcc:	84c00b15 	stw	r19,44(r16)
80088bd0:	84000715 	stw	r16,28(r16)
80088bd4:	00800284 	movi	r2,10
80088bd8:	8880030d 	sth	r2,12(r17)
80088bdc:	00800044 	movi	r2,1
80088be0:	b80d883a 	mov	r6,r23
80088be4:	89001704 	addi	r4,r17,92
80088be8:	000b883a 	mov	r5,zero
80088bec:	88000015 	stw	zero,0(r17)
80088bf0:	88000115 	stw	zero,4(r17)
80088bf4:	88000215 	stw	zero,8(r17)
80088bf8:	88001915 	stw	zero,100(r17)
80088bfc:	8880038d 	sth	r2,14(r17)
80088c00:	88000415 	stw	zero,16(r17)
80088c04:	88000515 	stw	zero,20(r17)
80088c08:	88000615 	stw	zero,24(r17)
80088c0c:	008a0a00 	call	8008a0a0 <memset>
80088c10:	94000317 	ldw	r16,12(r18)
80088c14:	00800484 	movi	r2,18
80088c18:	8c400715 	stw	r17,28(r17)
80088c1c:	8d800815 	stw	r22,32(r17)
80088c20:	8d400915 	stw	r21,36(r17)
80088c24:	8d000a15 	stw	r20,40(r17)
80088c28:	8cc00b15 	stw	r19,44(r17)
80088c2c:	8080030d 	sth	r2,12(r16)
80088c30:	00800084 	movi	r2,2
80088c34:	80000015 	stw	zero,0(r16)
80088c38:	80000115 	stw	zero,4(r16)
80088c3c:	80000215 	stw	zero,8(r16)
80088c40:	80001915 	stw	zero,100(r16)
80088c44:	8080038d 	sth	r2,14(r16)
80088c48:	80000415 	stw	zero,16(r16)
80088c4c:	80000515 	stw	zero,20(r16)
80088c50:	80000615 	stw	zero,24(r16)
80088c54:	b80d883a 	mov	r6,r23
80088c58:	000b883a 	mov	r5,zero
80088c5c:	81001704 	addi	r4,r16,92
80088c60:	008a0a00 	call	8008a0a0 <memset>
80088c64:	00800044 	movi	r2,1
80088c68:	84000715 	stw	r16,28(r16)
80088c6c:	85800815 	stw	r22,32(r16)
80088c70:	85400915 	stw	r21,36(r16)
80088c74:	85000a15 	stw	r20,40(r16)
80088c78:	84c00b15 	stw	r19,44(r16)
80088c7c:	90800e15 	stw	r2,56(r18)
80088c80:	dfc00817 	ldw	ra,32(sp)
80088c84:	ddc00717 	ldw	r23,28(sp)
80088c88:	dd800617 	ldw	r22,24(sp)
80088c8c:	dd400517 	ldw	r21,20(sp)
80088c90:	dd000417 	ldw	r20,16(sp)
80088c94:	dcc00317 	ldw	r19,12(sp)
80088c98:	dc800217 	ldw	r18,8(sp)
80088c9c:	dc400117 	ldw	r17,4(sp)
80088ca0:	dc000017 	ldw	r16,0(sp)
80088ca4:	dec00904 	addi	sp,sp,36
80088ca8:	f800283a 	ret

80088cac <__fp_lock>:
80088cac:	0005883a 	mov	r2,zero
80088cb0:	f800283a 	ret

80088cb4 <__sfmoreglue>:
80088cb4:	defffc04 	addi	sp,sp,-16
80088cb8:	dc400115 	stw	r17,4(sp)
80088cbc:	2c7fffc4 	addi	r17,r5,-1
80088cc0:	8c401a24 	muli	r17,r17,104
80088cc4:	dc800215 	stw	r18,8(sp)
80088cc8:	2825883a 	mov	r18,r5
80088ccc:	89401d04 	addi	r5,r17,116
80088cd0:	dc000015 	stw	r16,0(sp)
80088cd4:	dfc00315 	stw	ra,12(sp)
80088cd8:	00824640 	call	80082464 <_malloc_r>
80088cdc:	1021883a 	mov	r16,r2
80088ce0:	10000726 	beq	r2,zero,80088d00 <__sfmoreglue+0x4c>
80088ce4:	11000304 	addi	r4,r2,12
80088ce8:	10000015 	stw	zero,0(r2)
80088cec:	14800115 	stw	r18,4(r2)
80088cf0:	11000215 	stw	r4,8(r2)
80088cf4:	89801a04 	addi	r6,r17,104
80088cf8:	000b883a 	mov	r5,zero
80088cfc:	008a0a00 	call	8008a0a0 <memset>
80088d00:	8005883a 	mov	r2,r16
80088d04:	dfc00317 	ldw	ra,12(sp)
80088d08:	dc800217 	ldw	r18,8(sp)
80088d0c:	dc400117 	ldw	r17,4(sp)
80088d10:	dc000017 	ldw	r16,0(sp)
80088d14:	dec00404 	addi	sp,sp,16
80088d18:	f800283a 	ret

80088d1c <__sfp>:
80088d1c:	defffb04 	addi	sp,sp,-20
80088d20:	dc000015 	stw	r16,0(sp)
80088d24:	042002b4 	movhi	r16,32778
80088d28:	843a7204 	addi	r16,r16,-5688
80088d2c:	dcc00315 	stw	r19,12(sp)
80088d30:	2027883a 	mov	r19,r4
80088d34:	81000017 	ldw	r4,0(r16)
80088d38:	dfc00415 	stw	ra,16(sp)
80088d3c:	dc800215 	stw	r18,8(sp)
80088d40:	20800e17 	ldw	r2,56(r4)
80088d44:	dc400115 	stw	r17,4(sp)
80088d48:	1000021e 	bne	r2,zero,80088d54 <__sfp+0x38>
80088d4c:	0088b100 	call	80088b10 <__sinit.part.1>
80088d50:	81000017 	ldw	r4,0(r16)
80088d54:	2480b804 	addi	r18,r4,736
80088d58:	047fffc4 	movi	r17,-1
80088d5c:	91000117 	ldw	r4,4(r18)
80088d60:	94000217 	ldw	r16,8(r18)
80088d64:	213fffc4 	addi	r4,r4,-1
80088d68:	20000a16 	blt	r4,zero,80088d94 <__sfp+0x78>
80088d6c:	8080030f 	ldh	r2,12(r16)
80088d70:	10000c26 	beq	r2,zero,80088da4 <__sfp+0x88>
80088d74:	80c01d04 	addi	r3,r16,116
80088d78:	00000206 	br	80088d84 <__sfp+0x68>
80088d7c:	18bfe60f 	ldh	r2,-104(r3)
80088d80:	10000826 	beq	r2,zero,80088da4 <__sfp+0x88>
80088d84:	213fffc4 	addi	r4,r4,-1
80088d88:	1c3ffd04 	addi	r16,r3,-12
80088d8c:	18c01a04 	addi	r3,r3,104
80088d90:	247ffa1e 	bne	r4,r17,80088d7c <__sfp+0x60>
80088d94:	90800017 	ldw	r2,0(r18)
80088d98:	10001d26 	beq	r2,zero,80088e10 <__sfp+0xf4>
80088d9c:	1025883a 	mov	r18,r2
80088da0:	003fee06 	br	80088d5c <__sfp+0x40>
80088da4:	00bfffc4 	movi	r2,-1
80088da8:	8080038d 	sth	r2,14(r16)
80088dac:	00800044 	movi	r2,1
80088db0:	8080030d 	sth	r2,12(r16)
80088db4:	80001915 	stw	zero,100(r16)
80088db8:	80000015 	stw	zero,0(r16)
80088dbc:	80000215 	stw	zero,8(r16)
80088dc0:	80000115 	stw	zero,4(r16)
80088dc4:	80000415 	stw	zero,16(r16)
80088dc8:	80000515 	stw	zero,20(r16)
80088dcc:	80000615 	stw	zero,24(r16)
80088dd0:	01800204 	movi	r6,8
80088dd4:	000b883a 	mov	r5,zero
80088dd8:	81001704 	addi	r4,r16,92
80088ddc:	008a0a00 	call	8008a0a0 <memset>
80088de0:	8005883a 	mov	r2,r16
80088de4:	80000c15 	stw	zero,48(r16)
80088de8:	80000d15 	stw	zero,52(r16)
80088dec:	80001115 	stw	zero,68(r16)
80088df0:	80001215 	stw	zero,72(r16)
80088df4:	dfc00417 	ldw	ra,16(sp)
80088df8:	dcc00317 	ldw	r19,12(sp)
80088dfc:	dc800217 	ldw	r18,8(sp)
80088e00:	dc400117 	ldw	r17,4(sp)
80088e04:	dc000017 	ldw	r16,0(sp)
80088e08:	dec00504 	addi	sp,sp,20
80088e0c:	f800283a 	ret
80088e10:	01400104 	movi	r5,4
80088e14:	9809883a 	mov	r4,r19
80088e18:	0088cb40 	call	80088cb4 <__sfmoreglue>
80088e1c:	90800015 	stw	r2,0(r18)
80088e20:	103fde1e 	bne	r2,zero,80088d9c <__sfp+0x80>
80088e24:	00800304 	movi	r2,12
80088e28:	98800015 	stw	r2,0(r19)
80088e2c:	0005883a 	mov	r2,zero
80088e30:	003ff006 	br	80088df4 <__sfp+0xd8>

80088e34 <_cleanup>:
80088e34:	00a002b4 	movhi	r2,32778
80088e38:	10ba7204 	addi	r2,r2,-5688
80088e3c:	11000017 	ldw	r4,0(r2)
80088e40:	01600274 	movhi	r5,32777
80088e44:	294bf404 	addi	r5,r5,12240
80088e48:	00898501 	jmpi	80089850 <_fwalk_reent>

80088e4c <__sinit>:
80088e4c:	20800e17 	ldw	r2,56(r4)
80088e50:	10000126 	beq	r2,zero,80088e58 <__sinit+0xc>
80088e54:	f800283a 	ret
80088e58:	0088b101 	jmpi	80088b10 <__sinit.part.1>

80088e5c <__sfp_lock_acquire>:
80088e5c:	f800283a 	ret

80088e60 <__sfp_lock_release>:
80088e60:	f800283a 	ret

80088e64 <__sinit_lock_acquire>:
80088e64:	f800283a 	ret

80088e68 <__sinit_lock_release>:
80088e68:	f800283a 	ret

80088e6c <__fp_lock_all>:
80088e6c:	00a002b4 	movhi	r2,32778
80088e70:	10ba7304 	addi	r2,r2,-5684
80088e74:	11000017 	ldw	r4,0(r2)
80088e78:	01600274 	movhi	r5,32777
80088e7c:	29632b04 	addi	r5,r5,-29524
80088e80:	008978c1 	jmpi	8008978c <_fwalk>

80088e84 <__fp_unlock_all>:
80088e84:	00a002b4 	movhi	r2,32778
80088e88:	10ba7304 	addi	r2,r2,-5684
80088e8c:	11000017 	ldw	r4,0(r2)
80088e90:	01600274 	movhi	r5,32777
80088e94:	2962bf04 	addi	r5,r5,-29956
80088e98:	008978c1 	jmpi	8008978c <_fwalk>

80088e9c <_malloc_trim_r>:
80088e9c:	defffb04 	addi	sp,sp,-20
80088ea0:	dcc00315 	stw	r19,12(sp)
80088ea4:	04e002b4 	movhi	r19,32778
80088ea8:	dc800215 	stw	r18,8(sp)
80088eac:	dc400115 	stw	r17,4(sp)
80088eb0:	dc000015 	stw	r16,0(sp)
80088eb4:	dfc00415 	stw	ra,16(sp)
80088eb8:	2821883a 	mov	r16,r5
80088ebc:	9cf44004 	addi	r19,r19,-12032
80088ec0:	2025883a 	mov	r18,r4
80088ec4:	0098ed80 	call	80098ed8 <__malloc_lock>
80088ec8:	98800217 	ldw	r2,8(r19)
80088ecc:	14400117 	ldw	r17,4(r2)
80088ed0:	00bfff04 	movi	r2,-4
80088ed4:	88a2703a 	and	r17,r17,r2
80088ed8:	8c21c83a 	sub	r16,r17,r16
80088edc:	8403fbc4 	addi	r16,r16,4079
80088ee0:	8020d33a 	srli	r16,r16,12
80088ee4:	0083ffc4 	movi	r2,4095
80088ee8:	843fffc4 	addi	r16,r16,-1
80088eec:	8020933a 	slli	r16,r16,12
80088ef0:	1400060e 	bge	r2,r16,80088f0c <_malloc_trim_r+0x70>
80088ef4:	000b883a 	mov	r5,zero
80088ef8:	9009883a 	mov	r4,r18
80088efc:	008301c0 	call	8008301c <_sbrk_r>
80088f00:	98c00217 	ldw	r3,8(r19)
80088f04:	1c47883a 	add	r3,r3,r17
80088f08:	10c00a26 	beq	r2,r3,80088f34 <_malloc_trim_r+0x98>
80088f0c:	9009883a 	mov	r4,r18
80088f10:	0098edc0 	call	80098edc <__malloc_unlock>
80088f14:	0005883a 	mov	r2,zero
80088f18:	dfc00417 	ldw	ra,16(sp)
80088f1c:	dcc00317 	ldw	r19,12(sp)
80088f20:	dc800217 	ldw	r18,8(sp)
80088f24:	dc400117 	ldw	r17,4(sp)
80088f28:	dc000017 	ldw	r16,0(sp)
80088f2c:	dec00504 	addi	sp,sp,20
80088f30:	f800283a 	ret
80088f34:	040bc83a 	sub	r5,zero,r16
80088f38:	9009883a 	mov	r4,r18
80088f3c:	008301c0 	call	8008301c <_sbrk_r>
80088f40:	00ffffc4 	movi	r3,-1
80088f44:	10c00d26 	beq	r2,r3,80088f7c <_malloc_trim_r+0xe0>
80088f48:	00e002b4 	movhi	r3,32778
80088f4c:	18c1e904 	addi	r3,r3,1956
80088f50:	18800017 	ldw	r2,0(r3)
80088f54:	99000217 	ldw	r4,8(r19)
80088f58:	8c23c83a 	sub	r17,r17,r16
80088f5c:	8c400054 	ori	r17,r17,1
80088f60:	1421c83a 	sub	r16,r2,r16
80088f64:	24400115 	stw	r17,4(r4)
80088f68:	9009883a 	mov	r4,r18
80088f6c:	1c000015 	stw	r16,0(r3)
80088f70:	0098edc0 	call	80098edc <__malloc_unlock>
80088f74:	00800044 	movi	r2,1
80088f78:	003fe706 	br	80088f18 <_malloc_trim_r+0x7c>
80088f7c:	000b883a 	mov	r5,zero
80088f80:	9009883a 	mov	r4,r18
80088f84:	008301c0 	call	8008301c <_sbrk_r>
80088f88:	99000217 	ldw	r4,8(r19)
80088f8c:	014003c4 	movi	r5,15
80088f90:	1107c83a 	sub	r3,r2,r4
80088f94:	28ffdd0e 	bge	r5,r3,80088f0c <_malloc_trim_r+0x70>
80088f98:	016002b4 	movhi	r5,32778
80088f9c:	297a7404 	addi	r5,r5,-5680
80088fa0:	29400017 	ldw	r5,0(r5)
80088fa4:	18c00054 	ori	r3,r3,1
80088fa8:	20c00115 	stw	r3,4(r4)
80088fac:	00e002b4 	movhi	r3,32778
80088fb0:	1145c83a 	sub	r2,r2,r5
80088fb4:	18c1e904 	addi	r3,r3,1956
80088fb8:	18800015 	stw	r2,0(r3)
80088fbc:	003fd306 	br	80088f0c <_malloc_trim_r+0x70>

80088fc0 <_free_r>:
80088fc0:	28004126 	beq	r5,zero,800890c8 <_free_r+0x108>
80088fc4:	defffd04 	addi	sp,sp,-12
80088fc8:	dc400115 	stw	r17,4(sp)
80088fcc:	dc000015 	stw	r16,0(sp)
80088fd0:	2023883a 	mov	r17,r4
80088fd4:	2821883a 	mov	r16,r5
80088fd8:	dfc00215 	stw	ra,8(sp)
80088fdc:	0098ed80 	call	80098ed8 <__malloc_lock>
80088fe0:	81ffff17 	ldw	r7,-4(r16)
80088fe4:	00bfff84 	movi	r2,-2
80088fe8:	012002b4 	movhi	r4,32778
80088fec:	81bffe04 	addi	r6,r16,-8
80088ff0:	3884703a 	and	r2,r7,r2
80088ff4:	21344004 	addi	r4,r4,-12032
80088ff8:	308b883a 	add	r5,r6,r2
80088ffc:	2a400117 	ldw	r9,4(r5)
80089000:	22000217 	ldw	r8,8(r4)
80089004:	00ffff04 	movi	r3,-4
80089008:	48c6703a 	and	r3,r9,r3
8008900c:	2a005726 	beq	r5,r8,8008916c <_free_r+0x1ac>
80089010:	28c00115 	stw	r3,4(r5)
80089014:	39c0004c 	andi	r7,r7,1
80089018:	3800091e 	bne	r7,zero,80089040 <_free_r+0x80>
8008901c:	823ffe17 	ldw	r8,-8(r16)
80089020:	22400204 	addi	r9,r4,8
80089024:	320dc83a 	sub	r6,r6,r8
80089028:	31c00217 	ldw	r7,8(r6)
8008902c:	1205883a 	add	r2,r2,r8
80089030:	3a406526 	beq	r7,r9,800891c8 <_free_r+0x208>
80089034:	32000317 	ldw	r8,12(r6)
80089038:	3a000315 	stw	r8,12(r7)
8008903c:	41c00215 	stw	r7,8(r8)
80089040:	28cf883a 	add	r7,r5,r3
80089044:	39c00117 	ldw	r7,4(r7)
80089048:	39c0004c 	andi	r7,r7,1
8008904c:	38003a26 	beq	r7,zero,80089138 <_free_r+0x178>
80089050:	10c00054 	ori	r3,r2,1
80089054:	30c00115 	stw	r3,4(r6)
80089058:	3087883a 	add	r3,r6,r2
8008905c:	18800015 	stw	r2,0(r3)
80089060:	00c07fc4 	movi	r3,511
80089064:	18801936 	bltu	r3,r2,800890cc <_free_r+0x10c>
80089068:	1004d0fa 	srli	r2,r2,3
8008906c:	01c00044 	movi	r7,1
80089070:	21400117 	ldw	r5,4(r4)
80089074:	10c00044 	addi	r3,r2,1
80089078:	18c7883a 	add	r3,r3,r3
8008907c:	1005d0ba 	srai	r2,r2,2
80089080:	18c7883a 	add	r3,r3,r3
80089084:	18c7883a 	add	r3,r3,r3
80089088:	1907883a 	add	r3,r3,r4
8008908c:	3884983a 	sll	r2,r7,r2
80089090:	19c00017 	ldw	r7,0(r3)
80089094:	1a3ffe04 	addi	r8,r3,-8
80089098:	1144b03a 	or	r2,r2,r5
8008909c:	32000315 	stw	r8,12(r6)
800890a0:	31c00215 	stw	r7,8(r6)
800890a4:	20800115 	stw	r2,4(r4)
800890a8:	19800015 	stw	r6,0(r3)
800890ac:	39800315 	stw	r6,12(r7)
800890b0:	8809883a 	mov	r4,r17
800890b4:	dfc00217 	ldw	ra,8(sp)
800890b8:	dc400117 	ldw	r17,4(sp)
800890bc:	dc000017 	ldw	r16,0(sp)
800890c0:	dec00304 	addi	sp,sp,12
800890c4:	0098edc1 	jmpi	80098edc <__malloc_unlock>
800890c8:	f800283a 	ret
800890cc:	100ad27a 	srli	r5,r2,9
800890d0:	00c00104 	movi	r3,4
800890d4:	19404a36 	bltu	r3,r5,80089200 <_free_r+0x240>
800890d8:	100ad1ba 	srli	r5,r2,6
800890dc:	28c00e44 	addi	r3,r5,57
800890e0:	18c7883a 	add	r3,r3,r3
800890e4:	29400e04 	addi	r5,r5,56
800890e8:	18c7883a 	add	r3,r3,r3
800890ec:	18c7883a 	add	r3,r3,r3
800890f0:	1909883a 	add	r4,r3,r4
800890f4:	20c00017 	ldw	r3,0(r4)
800890f8:	01e002b4 	movhi	r7,32778
800890fc:	213ffe04 	addi	r4,r4,-8
80089100:	39f44004 	addi	r7,r7,-12032
80089104:	20c04426 	beq	r4,r3,80089218 <_free_r+0x258>
80089108:	01ffff04 	movi	r7,-4
8008910c:	19400117 	ldw	r5,4(r3)
80089110:	29ca703a 	and	r5,r5,r7
80089114:	1140022e 	bgeu	r2,r5,80089120 <_free_r+0x160>
80089118:	18c00217 	ldw	r3,8(r3)
8008911c:	20fffb1e 	bne	r4,r3,8008910c <_free_r+0x14c>
80089120:	19000317 	ldw	r4,12(r3)
80089124:	31000315 	stw	r4,12(r6)
80089128:	30c00215 	stw	r3,8(r6)
8008912c:	21800215 	stw	r6,8(r4)
80089130:	19800315 	stw	r6,12(r3)
80089134:	003fde06 	br	800890b0 <_free_r+0xf0>
80089138:	29c00217 	ldw	r7,8(r5)
8008913c:	10c5883a 	add	r2,r2,r3
80089140:	00e002b4 	movhi	r3,32778
80089144:	18f44204 	addi	r3,r3,-12024
80089148:	38c03b26 	beq	r7,r3,80089238 <_free_r+0x278>
8008914c:	2a000317 	ldw	r8,12(r5)
80089150:	11400054 	ori	r5,r2,1
80089154:	3087883a 	add	r3,r6,r2
80089158:	3a000315 	stw	r8,12(r7)
8008915c:	41c00215 	stw	r7,8(r8)
80089160:	31400115 	stw	r5,4(r6)
80089164:	18800015 	stw	r2,0(r3)
80089168:	003fbd06 	br	80089060 <_free_r+0xa0>
8008916c:	39c0004c 	andi	r7,r7,1
80089170:	10c5883a 	add	r2,r2,r3
80089174:	3800071e 	bne	r7,zero,80089194 <_free_r+0x1d4>
80089178:	81fffe17 	ldw	r7,-8(r16)
8008917c:	31cdc83a 	sub	r6,r6,r7
80089180:	30c00317 	ldw	r3,12(r6)
80089184:	31400217 	ldw	r5,8(r6)
80089188:	11c5883a 	add	r2,r2,r7
8008918c:	28c00315 	stw	r3,12(r5)
80089190:	19400215 	stw	r5,8(r3)
80089194:	10c00054 	ori	r3,r2,1
80089198:	30c00115 	stw	r3,4(r6)
8008919c:	00e002b4 	movhi	r3,32778
800891a0:	18fa7504 	addi	r3,r3,-5676
800891a4:	18c00017 	ldw	r3,0(r3)
800891a8:	21800215 	stw	r6,8(r4)
800891ac:	10ffc036 	bltu	r2,r3,800890b0 <_free_r+0xf0>
800891b0:	00a002b4 	movhi	r2,32778
800891b4:	1081dd04 	addi	r2,r2,1908
800891b8:	11400017 	ldw	r5,0(r2)
800891bc:	8809883a 	mov	r4,r17
800891c0:	0088e9c0 	call	80088e9c <_malloc_trim_r>
800891c4:	003fba06 	br	800890b0 <_free_r+0xf0>
800891c8:	28c9883a 	add	r4,r5,r3
800891cc:	21000117 	ldw	r4,4(r4)
800891d0:	2100004c 	andi	r4,r4,1
800891d4:	2000391e 	bne	r4,zero,800892bc <_free_r+0x2fc>
800891d8:	29c00217 	ldw	r7,8(r5)
800891dc:	29000317 	ldw	r4,12(r5)
800891e0:	1885883a 	add	r2,r3,r2
800891e4:	10c00054 	ori	r3,r2,1
800891e8:	39000315 	stw	r4,12(r7)
800891ec:	21c00215 	stw	r7,8(r4)
800891f0:	30c00115 	stw	r3,4(r6)
800891f4:	308d883a 	add	r6,r6,r2
800891f8:	30800015 	stw	r2,0(r6)
800891fc:	003fac06 	br	800890b0 <_free_r+0xf0>
80089200:	00c00504 	movi	r3,20
80089204:	19401536 	bltu	r3,r5,8008925c <_free_r+0x29c>
80089208:	28c01704 	addi	r3,r5,92
8008920c:	18c7883a 	add	r3,r3,r3
80089210:	294016c4 	addi	r5,r5,91
80089214:	003fb406 	br	800890e8 <_free_r+0x128>
80089218:	280bd0ba 	srai	r5,r5,2
8008921c:	00c00044 	movi	r3,1
80089220:	38800117 	ldw	r2,4(r7)
80089224:	194a983a 	sll	r5,r3,r5
80089228:	2007883a 	mov	r3,r4
8008922c:	2884b03a 	or	r2,r5,r2
80089230:	38800115 	stw	r2,4(r7)
80089234:	003fbb06 	br	80089124 <_free_r+0x164>
80089238:	21800515 	stw	r6,20(r4)
8008923c:	21800415 	stw	r6,16(r4)
80089240:	10c00054 	ori	r3,r2,1
80089244:	31c00315 	stw	r7,12(r6)
80089248:	31c00215 	stw	r7,8(r6)
8008924c:	30c00115 	stw	r3,4(r6)
80089250:	308d883a 	add	r6,r6,r2
80089254:	30800015 	stw	r2,0(r6)
80089258:	003f9506 	br	800890b0 <_free_r+0xf0>
8008925c:	00c01504 	movi	r3,84
80089260:	19400536 	bltu	r3,r5,80089278 <_free_r+0x2b8>
80089264:	100ad33a 	srli	r5,r2,12
80089268:	28c01bc4 	addi	r3,r5,111
8008926c:	18c7883a 	add	r3,r3,r3
80089270:	29401b84 	addi	r5,r5,110
80089274:	003f9c06 	br	800890e8 <_free_r+0x128>
80089278:	00c05504 	movi	r3,340
8008927c:	19400536 	bltu	r3,r5,80089294 <_free_r+0x2d4>
80089280:	100ad3fa 	srli	r5,r2,15
80089284:	28c01e04 	addi	r3,r5,120
80089288:	18c7883a 	add	r3,r3,r3
8008928c:	29401dc4 	addi	r5,r5,119
80089290:	003f9506 	br	800890e8 <_free_r+0x128>
80089294:	00c15504 	movi	r3,1364
80089298:	19400536 	bltu	r3,r5,800892b0 <_free_r+0x2f0>
8008929c:	100ad4ba 	srli	r5,r2,18
800892a0:	28c01f44 	addi	r3,r5,125
800892a4:	18c7883a 	add	r3,r3,r3
800892a8:	29401f04 	addi	r5,r5,124
800892ac:	003f8e06 	br	800890e8 <_free_r+0x128>
800892b0:	00c03f84 	movi	r3,254
800892b4:	01401f84 	movi	r5,126
800892b8:	003f8b06 	br	800890e8 <_free_r+0x128>
800892bc:	10c00054 	ori	r3,r2,1
800892c0:	30c00115 	stw	r3,4(r6)
800892c4:	308d883a 	add	r6,r6,r2
800892c8:	30800015 	stw	r2,0(r6)
800892cc:	003f7806 	br	800890b0 <_free_r+0xf0>

800892d0 <__sfvwrite_r>:
800892d0:	30800217 	ldw	r2,8(r6)
800892d4:	10006726 	beq	r2,zero,80089474 <__sfvwrite_r+0x1a4>
800892d8:	28c0030b 	ldhu	r3,12(r5)
800892dc:	defff404 	addi	sp,sp,-48
800892e0:	dd400715 	stw	r21,28(sp)
800892e4:	dd000615 	stw	r20,24(sp)
800892e8:	dc000215 	stw	r16,8(sp)
800892ec:	dfc00b15 	stw	ra,44(sp)
800892f0:	df000a15 	stw	fp,40(sp)
800892f4:	ddc00915 	stw	r23,36(sp)
800892f8:	dd800815 	stw	r22,32(sp)
800892fc:	dcc00515 	stw	r19,20(sp)
80089300:	dc800415 	stw	r18,16(sp)
80089304:	dc400315 	stw	r17,12(sp)
80089308:	1880020c 	andi	r2,r3,8
8008930c:	2821883a 	mov	r16,r5
80089310:	202b883a 	mov	r21,r4
80089314:	3029883a 	mov	r20,r6
80089318:	10002726 	beq	r2,zero,800893b8 <__sfvwrite_r+0xe8>
8008931c:	28800417 	ldw	r2,16(r5)
80089320:	10002526 	beq	r2,zero,800893b8 <__sfvwrite_r+0xe8>
80089324:	1880008c 	andi	r2,r3,2
80089328:	a4400017 	ldw	r17,0(r20)
8008932c:	10002a26 	beq	r2,zero,800893d8 <__sfvwrite_r+0x108>
80089330:	05a00034 	movhi	r22,32768
80089334:	0027883a 	mov	r19,zero
80089338:	0025883a 	mov	r18,zero
8008933c:	b5bf0004 	addi	r22,r22,-1024
80089340:	980d883a 	mov	r6,r19
80089344:	a809883a 	mov	r4,r21
80089348:	90004626 	beq	r18,zero,80089464 <__sfvwrite_r+0x194>
8008934c:	900f883a 	mov	r7,r18
80089350:	b480022e 	bgeu	r22,r18,8008935c <__sfvwrite_r+0x8c>
80089354:	01e00034 	movhi	r7,32768
80089358:	39ff0004 	addi	r7,r7,-1024
8008935c:	80800917 	ldw	r2,36(r16)
80089360:	81400717 	ldw	r5,28(r16)
80089364:	103ee83a 	callr	r2
80089368:	0080570e 	bge	zero,r2,800894c8 <__sfvwrite_r+0x1f8>
8008936c:	a0c00217 	ldw	r3,8(r20)
80089370:	98a7883a 	add	r19,r19,r2
80089374:	90a5c83a 	sub	r18,r18,r2
80089378:	1885c83a 	sub	r2,r3,r2
8008937c:	a0800215 	stw	r2,8(r20)
80089380:	103fef1e 	bne	r2,zero,80089340 <__sfvwrite_r+0x70>
80089384:	0005883a 	mov	r2,zero
80089388:	dfc00b17 	ldw	ra,44(sp)
8008938c:	df000a17 	ldw	fp,40(sp)
80089390:	ddc00917 	ldw	r23,36(sp)
80089394:	dd800817 	ldw	r22,32(sp)
80089398:	dd400717 	ldw	r21,28(sp)
8008939c:	dd000617 	ldw	r20,24(sp)
800893a0:	dcc00517 	ldw	r19,20(sp)
800893a4:	dc800417 	ldw	r18,16(sp)
800893a8:	dc400317 	ldw	r17,12(sp)
800893ac:	dc000217 	ldw	r16,8(sp)
800893b0:	dec00c04 	addi	sp,sp,48
800893b4:	f800283a 	ret
800893b8:	800b883a 	mov	r5,r16
800893bc:	a809883a 	mov	r4,r21
800893c0:	0086e240 	call	80086e24 <__swsetup_r>
800893c4:	1000eb1e 	bne	r2,zero,80089774 <__sfvwrite_r+0x4a4>
800893c8:	80c0030b 	ldhu	r3,12(r16)
800893cc:	a4400017 	ldw	r17,0(r20)
800893d0:	1880008c 	andi	r2,r3,2
800893d4:	103fd61e 	bne	r2,zero,80089330 <__sfvwrite_r+0x60>
800893d8:	1880004c 	andi	r2,r3,1
800893dc:	10003f1e 	bne	r2,zero,800894dc <__sfvwrite_r+0x20c>
800893e0:	0039883a 	mov	fp,zero
800893e4:	0025883a 	mov	r18,zero
800893e8:	90001a26 	beq	r18,zero,80089454 <__sfvwrite_r+0x184>
800893ec:	1880800c 	andi	r2,r3,512
800893f0:	84c00217 	ldw	r19,8(r16)
800893f4:	10002126 	beq	r2,zero,8008947c <__sfvwrite_r+0x1ac>
800893f8:	982f883a 	mov	r23,r19
800893fc:	94c09336 	bltu	r18,r19,8008964c <__sfvwrite_r+0x37c>
80089400:	1881200c 	andi	r2,r3,1152
80089404:	10009e1e 	bne	r2,zero,80089680 <__sfvwrite_r+0x3b0>
80089408:	81000017 	ldw	r4,0(r16)
8008940c:	b80d883a 	mov	r6,r23
80089410:	e00b883a 	mov	r5,fp
80089414:	0089f440 	call	80089f44 <memmove>
80089418:	80c00217 	ldw	r3,8(r16)
8008941c:	81000017 	ldw	r4,0(r16)
80089420:	9005883a 	mov	r2,r18
80089424:	1ce7c83a 	sub	r19,r3,r19
80089428:	25cf883a 	add	r7,r4,r23
8008942c:	84c00215 	stw	r19,8(r16)
80089430:	81c00015 	stw	r7,0(r16)
80089434:	a0c00217 	ldw	r3,8(r20)
80089438:	e0b9883a 	add	fp,fp,r2
8008943c:	90a5c83a 	sub	r18,r18,r2
80089440:	18a7c83a 	sub	r19,r3,r2
80089444:	a4c00215 	stw	r19,8(r20)
80089448:	983fce26 	beq	r19,zero,80089384 <__sfvwrite_r+0xb4>
8008944c:	80c0030b 	ldhu	r3,12(r16)
80089450:	903fe61e 	bne	r18,zero,800893ec <__sfvwrite_r+0x11c>
80089454:	8f000017 	ldw	fp,0(r17)
80089458:	8c800117 	ldw	r18,4(r17)
8008945c:	8c400204 	addi	r17,r17,8
80089460:	003fe106 	br	800893e8 <__sfvwrite_r+0x118>
80089464:	8cc00017 	ldw	r19,0(r17)
80089468:	8c800117 	ldw	r18,4(r17)
8008946c:	8c400204 	addi	r17,r17,8
80089470:	003fb306 	br	80089340 <__sfvwrite_r+0x70>
80089474:	0005883a 	mov	r2,zero
80089478:	f800283a 	ret
8008947c:	81000017 	ldw	r4,0(r16)
80089480:	80800417 	ldw	r2,16(r16)
80089484:	11005736 	bltu	r2,r4,800895e4 <__sfvwrite_r+0x314>
80089488:	85c00517 	ldw	r23,20(r16)
8008948c:	95c05536 	bltu	r18,r23,800895e4 <__sfvwrite_r+0x314>
80089490:	00a00034 	movhi	r2,32768
80089494:	10bfffc4 	addi	r2,r2,-1
80089498:	9009883a 	mov	r4,r18
8008949c:	1480012e 	bgeu	r2,r18,800894a4 <__sfvwrite_r+0x1d4>
800894a0:	1009883a 	mov	r4,r2
800894a4:	b80b883a 	mov	r5,r23
800894a8:	00821900 	call	80082190 <__divsi3>
800894ac:	15cf383a 	mul	r7,r2,r23
800894b0:	81400717 	ldw	r5,28(r16)
800894b4:	80800917 	ldw	r2,36(r16)
800894b8:	e00d883a 	mov	r6,fp
800894bc:	a809883a 	mov	r4,r21
800894c0:	103ee83a 	callr	r2
800894c4:	00bfdb16 	blt	zero,r2,80089434 <__sfvwrite_r+0x164>
800894c8:	8080030b 	ldhu	r2,12(r16)
800894cc:	10801014 	ori	r2,r2,64
800894d0:	8080030d 	sth	r2,12(r16)
800894d4:	00bfffc4 	movi	r2,-1
800894d8:	003fab06 	br	80089388 <__sfvwrite_r+0xb8>
800894dc:	0027883a 	mov	r19,zero
800894e0:	0011883a 	mov	r8,zero
800894e4:	0039883a 	mov	fp,zero
800894e8:	0025883a 	mov	r18,zero
800894ec:	90001f26 	beq	r18,zero,8008956c <__sfvwrite_r+0x29c>
800894f0:	40005a26 	beq	r8,zero,8008965c <__sfvwrite_r+0x38c>
800894f4:	982d883a 	mov	r22,r19
800894f8:	94c0012e 	bgeu	r18,r19,80089500 <__sfvwrite_r+0x230>
800894fc:	902d883a 	mov	r22,r18
80089500:	81000017 	ldw	r4,0(r16)
80089504:	80800417 	ldw	r2,16(r16)
80089508:	b02f883a 	mov	r23,r22
8008950c:	81c00517 	ldw	r7,20(r16)
80089510:	1100032e 	bgeu	r2,r4,80089520 <__sfvwrite_r+0x250>
80089514:	80c00217 	ldw	r3,8(r16)
80089518:	38c7883a 	add	r3,r7,r3
8008951c:	1d801816 	blt	r3,r22,80089580 <__sfvwrite_r+0x2b0>
80089520:	b1c03e16 	blt	r22,r7,8008961c <__sfvwrite_r+0x34c>
80089524:	80800917 	ldw	r2,36(r16)
80089528:	81400717 	ldw	r5,28(r16)
8008952c:	e00d883a 	mov	r6,fp
80089530:	da000115 	stw	r8,4(sp)
80089534:	a809883a 	mov	r4,r21
80089538:	103ee83a 	callr	r2
8008953c:	102f883a 	mov	r23,r2
80089540:	da000117 	ldw	r8,4(sp)
80089544:	00bfe00e 	bge	zero,r2,800894c8 <__sfvwrite_r+0x1f8>
80089548:	9de7c83a 	sub	r19,r19,r23
8008954c:	98001f26 	beq	r19,zero,800895cc <__sfvwrite_r+0x2fc>
80089550:	a0800217 	ldw	r2,8(r20)
80089554:	e5f9883a 	add	fp,fp,r23
80089558:	95e5c83a 	sub	r18,r18,r23
8008955c:	15efc83a 	sub	r23,r2,r23
80089560:	a5c00215 	stw	r23,8(r20)
80089564:	b83f8726 	beq	r23,zero,80089384 <__sfvwrite_r+0xb4>
80089568:	903fe11e 	bne	r18,zero,800894f0 <__sfvwrite_r+0x220>
8008956c:	8f000017 	ldw	fp,0(r17)
80089570:	8c800117 	ldw	r18,4(r17)
80089574:	0011883a 	mov	r8,zero
80089578:	8c400204 	addi	r17,r17,8
8008957c:	003fdb06 	br	800894ec <__sfvwrite_r+0x21c>
80089580:	180d883a 	mov	r6,r3
80089584:	e00b883a 	mov	r5,fp
80089588:	da000115 	stw	r8,4(sp)
8008958c:	d8c00015 	stw	r3,0(sp)
80089590:	0089f440 	call	80089f44 <memmove>
80089594:	d8c00017 	ldw	r3,0(sp)
80089598:	80800017 	ldw	r2,0(r16)
8008959c:	800b883a 	mov	r5,r16
800895a0:	a809883a 	mov	r4,r21
800895a4:	10c5883a 	add	r2,r2,r3
800895a8:	80800015 	stw	r2,0(r16)
800895ac:	d8c00015 	stw	r3,0(sp)
800895b0:	0088a700 	call	80088a70 <_fflush_r>
800895b4:	d8c00017 	ldw	r3,0(sp)
800895b8:	da000117 	ldw	r8,4(sp)
800895bc:	103fc21e 	bne	r2,zero,800894c8 <__sfvwrite_r+0x1f8>
800895c0:	182f883a 	mov	r23,r3
800895c4:	9de7c83a 	sub	r19,r19,r23
800895c8:	983fe11e 	bne	r19,zero,80089550 <__sfvwrite_r+0x280>
800895cc:	800b883a 	mov	r5,r16
800895d0:	a809883a 	mov	r4,r21
800895d4:	0088a700 	call	80088a70 <_fflush_r>
800895d8:	103fbb1e 	bne	r2,zero,800894c8 <__sfvwrite_r+0x1f8>
800895dc:	0011883a 	mov	r8,zero
800895e0:	003fdb06 	br	80089550 <__sfvwrite_r+0x280>
800895e4:	94c0012e 	bgeu	r18,r19,800895ec <__sfvwrite_r+0x31c>
800895e8:	9027883a 	mov	r19,r18
800895ec:	980d883a 	mov	r6,r19
800895f0:	e00b883a 	mov	r5,fp
800895f4:	0089f440 	call	80089f44 <memmove>
800895f8:	80800217 	ldw	r2,8(r16)
800895fc:	80c00017 	ldw	r3,0(r16)
80089600:	14c5c83a 	sub	r2,r2,r19
80089604:	1cc7883a 	add	r3,r3,r19
80089608:	80800215 	stw	r2,8(r16)
8008960c:	80c00015 	stw	r3,0(r16)
80089610:	10004326 	beq	r2,zero,80089720 <__sfvwrite_r+0x450>
80089614:	9805883a 	mov	r2,r19
80089618:	003f8606 	br	80089434 <__sfvwrite_r+0x164>
8008961c:	b00d883a 	mov	r6,r22
80089620:	e00b883a 	mov	r5,fp
80089624:	da000115 	stw	r8,4(sp)
80089628:	0089f440 	call	80089f44 <memmove>
8008962c:	80800217 	ldw	r2,8(r16)
80089630:	80c00017 	ldw	r3,0(r16)
80089634:	da000117 	ldw	r8,4(sp)
80089638:	1585c83a 	sub	r2,r2,r22
8008963c:	1dad883a 	add	r22,r3,r22
80089640:	80800215 	stw	r2,8(r16)
80089644:	85800015 	stw	r22,0(r16)
80089648:	003fbf06 	br	80089548 <__sfvwrite_r+0x278>
8008964c:	81000017 	ldw	r4,0(r16)
80089650:	9027883a 	mov	r19,r18
80089654:	902f883a 	mov	r23,r18
80089658:	003f6c06 	br	8008940c <__sfvwrite_r+0x13c>
8008965c:	900d883a 	mov	r6,r18
80089660:	01400284 	movi	r5,10
80089664:	e009883a 	mov	r4,fp
80089668:	0089e600 	call	80089e60 <memchr>
8008966c:	10003e26 	beq	r2,zero,80089768 <__sfvwrite_r+0x498>
80089670:	10800044 	addi	r2,r2,1
80089674:	1727c83a 	sub	r19,r2,fp
80089678:	02000044 	movi	r8,1
8008967c:	003f9d06 	br	800894f4 <__sfvwrite_r+0x224>
80089680:	80800517 	ldw	r2,20(r16)
80089684:	81400417 	ldw	r5,16(r16)
80089688:	81c00017 	ldw	r7,0(r16)
8008968c:	10a7883a 	add	r19,r2,r2
80089690:	9885883a 	add	r2,r19,r2
80089694:	1026d7fa 	srli	r19,r2,31
80089698:	396dc83a 	sub	r22,r7,r5
8008969c:	b1000044 	addi	r4,r22,1
800896a0:	9885883a 	add	r2,r19,r2
800896a4:	1027d07a 	srai	r19,r2,1
800896a8:	2485883a 	add	r2,r4,r18
800896ac:	980d883a 	mov	r6,r19
800896b0:	9880022e 	bgeu	r19,r2,800896bc <__sfvwrite_r+0x3ec>
800896b4:	1027883a 	mov	r19,r2
800896b8:	100d883a 	mov	r6,r2
800896bc:	18c1000c 	andi	r3,r3,1024
800896c0:	18001c26 	beq	r3,zero,80089734 <__sfvwrite_r+0x464>
800896c4:	300b883a 	mov	r5,r6
800896c8:	a809883a 	mov	r4,r21
800896cc:	00824640 	call	80082464 <_malloc_r>
800896d0:	102f883a 	mov	r23,r2
800896d4:	10002926 	beq	r2,zero,8008977c <__sfvwrite_r+0x4ac>
800896d8:	81400417 	ldw	r5,16(r16)
800896dc:	b00d883a 	mov	r6,r22
800896e0:	1009883a 	mov	r4,r2
800896e4:	0082cec0 	call	80082cec <memcpy>
800896e8:	8080030b 	ldhu	r2,12(r16)
800896ec:	00fedfc4 	movi	r3,-1153
800896f0:	10c4703a 	and	r2,r2,r3
800896f4:	10802014 	ori	r2,r2,128
800896f8:	8080030d 	sth	r2,12(r16)
800896fc:	bd89883a 	add	r4,r23,r22
80089700:	9d8fc83a 	sub	r7,r19,r22
80089704:	85c00415 	stw	r23,16(r16)
80089708:	84c00515 	stw	r19,20(r16)
8008970c:	81000015 	stw	r4,0(r16)
80089710:	9027883a 	mov	r19,r18
80089714:	81c00215 	stw	r7,8(r16)
80089718:	902f883a 	mov	r23,r18
8008971c:	003f3b06 	br	8008940c <__sfvwrite_r+0x13c>
80089720:	800b883a 	mov	r5,r16
80089724:	a809883a 	mov	r4,r21
80089728:	0088a700 	call	80088a70 <_fflush_r>
8008972c:	103fb926 	beq	r2,zero,80089614 <__sfvwrite_r+0x344>
80089730:	003f6506 	br	800894c8 <__sfvwrite_r+0x1f8>
80089734:	a809883a 	mov	r4,r21
80089738:	008b38c0 	call	8008b38c <_realloc_r>
8008973c:	102f883a 	mov	r23,r2
80089740:	103fee1e 	bne	r2,zero,800896fc <__sfvwrite_r+0x42c>
80089744:	81400417 	ldw	r5,16(r16)
80089748:	a809883a 	mov	r4,r21
8008974c:	0088fc00 	call	80088fc0 <_free_r>
80089750:	8080030b 	ldhu	r2,12(r16)
80089754:	00ffdfc4 	movi	r3,-129
80089758:	1884703a 	and	r2,r3,r2
8008975c:	00c00304 	movi	r3,12
80089760:	a8c00015 	stw	r3,0(r21)
80089764:	003f5906 	br	800894cc <__sfvwrite_r+0x1fc>
80089768:	94c00044 	addi	r19,r18,1
8008976c:	02000044 	movi	r8,1
80089770:	003f6006 	br	800894f4 <__sfvwrite_r+0x224>
80089774:	00bfffc4 	movi	r2,-1
80089778:	003f0306 	br	80089388 <__sfvwrite_r+0xb8>
8008977c:	00800304 	movi	r2,12
80089780:	a8800015 	stw	r2,0(r21)
80089784:	8080030b 	ldhu	r2,12(r16)
80089788:	003f5006 	br	800894cc <__sfvwrite_r+0x1fc>

8008978c <_fwalk>:
8008978c:	defff704 	addi	sp,sp,-36
80089790:	dd000415 	stw	r20,16(sp)
80089794:	dfc00815 	stw	ra,32(sp)
80089798:	ddc00715 	stw	r23,28(sp)
8008979c:	dd800615 	stw	r22,24(sp)
800897a0:	dd400515 	stw	r21,20(sp)
800897a4:	dcc00315 	stw	r19,12(sp)
800897a8:	dc800215 	stw	r18,8(sp)
800897ac:	dc400115 	stw	r17,4(sp)
800897b0:	dc000015 	stw	r16,0(sp)
800897b4:	2500b804 	addi	r20,r4,736
800897b8:	a0002326 	beq	r20,zero,80089848 <_fwalk+0xbc>
800897bc:	282b883a 	mov	r21,r5
800897c0:	002f883a 	mov	r23,zero
800897c4:	05800044 	movi	r22,1
800897c8:	04ffffc4 	movi	r19,-1
800897cc:	a4400117 	ldw	r17,4(r20)
800897d0:	a4800217 	ldw	r18,8(r20)
800897d4:	8c7fffc4 	addi	r17,r17,-1
800897d8:	88000d16 	blt	r17,zero,80089810 <_fwalk+0x84>
800897dc:	94000304 	addi	r16,r18,12
800897e0:	94800384 	addi	r18,r18,14
800897e4:	8080000b 	ldhu	r2,0(r16)
800897e8:	8c7fffc4 	addi	r17,r17,-1
800897ec:	813ffd04 	addi	r4,r16,-12
800897f0:	b080042e 	bgeu	r22,r2,80089804 <_fwalk+0x78>
800897f4:	9080000f 	ldh	r2,0(r18)
800897f8:	14c00226 	beq	r2,r19,80089804 <_fwalk+0x78>
800897fc:	a83ee83a 	callr	r21
80089800:	b8aeb03a 	or	r23,r23,r2
80089804:	84001a04 	addi	r16,r16,104
80089808:	94801a04 	addi	r18,r18,104
8008980c:	8cfff51e 	bne	r17,r19,800897e4 <_fwalk+0x58>
80089810:	a5000017 	ldw	r20,0(r20)
80089814:	a03fed1e 	bne	r20,zero,800897cc <_fwalk+0x40>
80089818:	b805883a 	mov	r2,r23
8008981c:	dfc00817 	ldw	ra,32(sp)
80089820:	ddc00717 	ldw	r23,28(sp)
80089824:	dd800617 	ldw	r22,24(sp)
80089828:	dd400517 	ldw	r21,20(sp)
8008982c:	dd000417 	ldw	r20,16(sp)
80089830:	dcc00317 	ldw	r19,12(sp)
80089834:	dc800217 	ldw	r18,8(sp)
80089838:	dc400117 	ldw	r17,4(sp)
8008983c:	dc000017 	ldw	r16,0(sp)
80089840:	dec00904 	addi	sp,sp,36
80089844:	f800283a 	ret
80089848:	002f883a 	mov	r23,zero
8008984c:	003ff206 	br	80089818 <_fwalk+0x8c>

80089850 <_fwalk_reent>:
80089850:	defff704 	addi	sp,sp,-36
80089854:	dd000415 	stw	r20,16(sp)
80089858:	dfc00815 	stw	ra,32(sp)
8008985c:	ddc00715 	stw	r23,28(sp)
80089860:	dd800615 	stw	r22,24(sp)
80089864:	dd400515 	stw	r21,20(sp)
80089868:	dcc00315 	stw	r19,12(sp)
8008986c:	dc800215 	stw	r18,8(sp)
80089870:	dc400115 	stw	r17,4(sp)
80089874:	dc000015 	stw	r16,0(sp)
80089878:	2500b804 	addi	r20,r4,736
8008987c:	a0002326 	beq	r20,zero,8008990c <_fwalk_reent+0xbc>
80089880:	282b883a 	mov	r21,r5
80089884:	2027883a 	mov	r19,r4
80089888:	002f883a 	mov	r23,zero
8008988c:	05800044 	movi	r22,1
80089890:	04bfffc4 	movi	r18,-1
80089894:	a4400117 	ldw	r17,4(r20)
80089898:	a4000217 	ldw	r16,8(r20)
8008989c:	8c7fffc4 	addi	r17,r17,-1
800898a0:	88000c16 	blt	r17,zero,800898d4 <_fwalk_reent+0x84>
800898a4:	84000304 	addi	r16,r16,12
800898a8:	8080000b 	ldhu	r2,0(r16)
800898ac:	8c7fffc4 	addi	r17,r17,-1
800898b0:	817ffd04 	addi	r5,r16,-12
800898b4:	b080052e 	bgeu	r22,r2,800898cc <_fwalk_reent+0x7c>
800898b8:	8080008f 	ldh	r2,2(r16)
800898bc:	9809883a 	mov	r4,r19
800898c0:	14800226 	beq	r2,r18,800898cc <_fwalk_reent+0x7c>
800898c4:	a83ee83a 	callr	r21
800898c8:	b8aeb03a 	or	r23,r23,r2
800898cc:	84001a04 	addi	r16,r16,104
800898d0:	8cbff51e 	bne	r17,r18,800898a8 <_fwalk_reent+0x58>
800898d4:	a5000017 	ldw	r20,0(r20)
800898d8:	a03fee1e 	bne	r20,zero,80089894 <_fwalk_reent+0x44>
800898dc:	b805883a 	mov	r2,r23
800898e0:	dfc00817 	ldw	ra,32(sp)
800898e4:	ddc00717 	ldw	r23,28(sp)
800898e8:	dd800617 	ldw	r22,24(sp)
800898ec:	dd400517 	ldw	r21,20(sp)
800898f0:	dd000417 	ldw	r20,16(sp)
800898f4:	dcc00317 	ldw	r19,12(sp)
800898f8:	dc800217 	ldw	r18,8(sp)
800898fc:	dc400117 	ldw	r17,4(sp)
80089900:	dc000017 	ldw	r16,0(sp)
80089904:	dec00904 	addi	sp,sp,36
80089908:	f800283a 	ret
8008990c:	002f883a 	mov	r23,zero
80089910:	003ff206 	br	800898dc <_fwalk_reent+0x8c>

80089914 <iswspace>:
80089914:	00803fc4 	movi	r2,255
80089918:	11000836 	bltu	r2,r4,8008993c <iswspace+0x28>
8008991c:	00a002b4 	movhi	r2,32778
80089920:	10ba7604 	addi	r2,r2,-5672
80089924:	10800017 	ldw	r2,0(r2)
80089928:	1109883a 	add	r4,r2,r4
8008992c:	20800043 	ldbu	r2,1(r4)
80089930:	1080020c 	andi	r2,r2,8
80089934:	10803fcc 	andi	r2,r2,255
80089938:	f800283a 	ret
8008993c:	0005883a 	mov	r2,zero
80089940:	f800283a 	ret

80089944 <_setlocale_r>:
80089944:	30001b26 	beq	r6,zero,800899b4 <_setlocale_r+0x70>
80089948:	016002b4 	movhi	r5,32778
8008994c:	defffe04 	addi	sp,sp,-8
80089950:	29717804 	addi	r5,r5,-14880
80089954:	3009883a 	mov	r4,r6
80089958:	dc000015 	stw	r16,0(sp)
8008995c:	dfc00115 	stw	ra,4(sp)
80089960:	3021883a 	mov	r16,r6
80089964:	008bcf00 	call	8008bcf0 <strcmp>
80089968:	1000061e 	bne	r2,zero,80089984 <_setlocale_r+0x40>
8008996c:	00a002b4 	movhi	r2,32778
80089970:	10b0b004 	addi	r2,r2,-15680
80089974:	dfc00117 	ldw	ra,4(sp)
80089978:	dc000017 	ldw	r16,0(sp)
8008997c:	dec00204 	addi	sp,sp,8
80089980:	f800283a 	ret
80089984:	016002b4 	movhi	r5,32778
80089988:	2970b004 	addi	r5,r5,-15680
8008998c:	8009883a 	mov	r4,r16
80089990:	008bcf00 	call	8008bcf0 <strcmp>
80089994:	103ff526 	beq	r2,zero,8008996c <_setlocale_r+0x28>
80089998:	016002b4 	movhi	r5,32778
8008999c:	29733604 	addi	r5,r5,-13096
800899a0:	8009883a 	mov	r4,r16
800899a4:	008bcf00 	call	8008bcf0 <strcmp>
800899a8:	103ff026 	beq	r2,zero,8008996c <_setlocale_r+0x28>
800899ac:	0005883a 	mov	r2,zero
800899b0:	003ff006 	br	80089974 <_setlocale_r+0x30>
800899b4:	00a002b4 	movhi	r2,32778
800899b8:	10b0b004 	addi	r2,r2,-15680
800899bc:	f800283a 	ret

800899c0 <__locale_charset>:
800899c0:	00a002b4 	movhi	r2,32778
800899c4:	10b54a04 	addi	r2,r2,-10968
800899c8:	f800283a 	ret

800899cc <__locale_mb_cur_max>:
800899cc:	00a002b4 	movhi	r2,32778
800899d0:	10ba7704 	addi	r2,r2,-5668
800899d4:	10800017 	ldw	r2,0(r2)
800899d8:	f800283a 	ret

800899dc <__locale_msgcharset>:
800899dc:	00a002b4 	movhi	r2,32778
800899e0:	10b54204 	addi	r2,r2,-11000
800899e4:	f800283a 	ret

800899e8 <__locale_cjk_lang>:
800899e8:	0005883a 	mov	r2,zero
800899ec:	f800283a 	ret

800899f0 <_localeconv_r>:
800899f0:	00a002b4 	movhi	r2,32778
800899f4:	10b55204 	addi	r2,r2,-10936
800899f8:	f800283a 	ret

800899fc <setlocale>:
800899fc:	00a002b4 	movhi	r2,32778
80089a00:	10ba7304 	addi	r2,r2,-5684
80089a04:	280d883a 	mov	r6,r5
80089a08:	200b883a 	mov	r5,r4
80089a0c:	11000017 	ldw	r4,0(r2)
80089a10:	00899441 	jmpi	80089944 <_setlocale_r>

80089a14 <localeconv>:
80089a14:	00a002b4 	movhi	r2,32778
80089a18:	10b55204 	addi	r2,r2,-10936
80089a1c:	f800283a 	ret

80089a20 <_lseek_r>:
80089a20:	defffd04 	addi	sp,sp,-12
80089a24:	2805883a 	mov	r2,r5
80089a28:	dc000015 	stw	r16,0(sp)
80089a2c:	042002b4 	movhi	r16,32778
80089a30:	dc400115 	stw	r17,4(sp)
80089a34:	300b883a 	mov	r5,r6
80089a38:	8401de04 	addi	r16,r16,1912
80089a3c:	2023883a 	mov	r17,r4
80089a40:	380d883a 	mov	r6,r7
80089a44:	1009883a 	mov	r4,r2
80089a48:	dfc00215 	stw	ra,8(sp)
80089a4c:	80000015 	stw	zero,0(r16)
80089a50:	0098dfc0 	call	80098dfc <lseek>
80089a54:	00ffffc4 	movi	r3,-1
80089a58:	10c00526 	beq	r2,r3,80089a70 <_lseek_r+0x50>
80089a5c:	dfc00217 	ldw	ra,8(sp)
80089a60:	dc400117 	ldw	r17,4(sp)
80089a64:	dc000017 	ldw	r16,0(sp)
80089a68:	dec00304 	addi	sp,sp,12
80089a6c:	f800283a 	ret
80089a70:	80c00017 	ldw	r3,0(r16)
80089a74:	183ff926 	beq	r3,zero,80089a5c <_lseek_r+0x3c>
80089a78:	88c00015 	stw	r3,0(r17)
80089a7c:	003ff706 	br	80089a5c <_lseek_r+0x3c>

80089a80 <__smakebuf_r>:
80089a80:	2880030b 	ldhu	r2,12(r5)
80089a84:	10c0008c 	andi	r3,r2,2
80089a88:	1800411e 	bne	r3,zero,80089b90 <__smakebuf_r+0x110>
80089a8c:	deffec04 	addi	sp,sp,-80
80089a90:	dc000f15 	stw	r16,60(sp)
80089a94:	2821883a 	mov	r16,r5
80089a98:	2940038f 	ldh	r5,14(r5)
80089a9c:	dc401015 	stw	r17,64(sp)
80089aa0:	dfc01315 	stw	ra,76(sp)
80089aa4:	dcc01215 	stw	r19,72(sp)
80089aa8:	dc801115 	stw	r18,68(sp)
80089aac:	2023883a 	mov	r17,r4
80089ab0:	28001c16 	blt	r5,zero,80089b24 <__smakebuf_r+0xa4>
80089ab4:	d80d883a 	mov	r6,sp
80089ab8:	00932dc0 	call	800932dc <_fstat_r>
80089abc:	10001816 	blt	r2,zero,80089b20 <__smakebuf_r+0xa0>
80089ac0:	d8800117 	ldw	r2,4(sp)
80089ac4:	00e00014 	movui	r3,32768
80089ac8:	10bc000c 	andi	r2,r2,61440
80089acc:	14c80020 	cmpeqi	r19,r2,8192
80089ad0:	10c03726 	beq	r2,r3,80089bb0 <__smakebuf_r+0x130>
80089ad4:	80c0030b 	ldhu	r3,12(r16)
80089ad8:	18c20014 	ori	r3,r3,2048
80089adc:	80c0030d 	sth	r3,12(r16)
80089ae0:	00c80004 	movi	r3,8192
80089ae4:	10c0521e 	bne	r2,r3,80089c30 <__smakebuf_r+0x1b0>
80089ae8:	8140038f 	ldh	r5,14(r16)
80089aec:	8809883a 	mov	r4,r17
80089af0:	0093ec40 	call	80093ec4 <_isatty_r>
80089af4:	10004c26 	beq	r2,zero,80089c28 <__smakebuf_r+0x1a8>
80089af8:	8080030b 	ldhu	r2,12(r16)
80089afc:	80c010c4 	addi	r3,r16,67
80089b00:	80c00015 	stw	r3,0(r16)
80089b04:	10800054 	ori	r2,r2,1
80089b08:	8080030d 	sth	r2,12(r16)
80089b0c:	00800044 	movi	r2,1
80089b10:	80c00415 	stw	r3,16(r16)
80089b14:	80800515 	stw	r2,20(r16)
80089b18:	04810004 	movi	r18,1024
80089b1c:	00000706 	br	80089b3c <__smakebuf_r+0xbc>
80089b20:	8080030b 	ldhu	r2,12(r16)
80089b24:	10c0200c 	andi	r3,r2,128
80089b28:	18001f1e 	bne	r3,zero,80089ba8 <__smakebuf_r+0x128>
80089b2c:	04810004 	movi	r18,1024
80089b30:	10820014 	ori	r2,r2,2048
80089b34:	8080030d 	sth	r2,12(r16)
80089b38:	0027883a 	mov	r19,zero
80089b3c:	900b883a 	mov	r5,r18
80089b40:	8809883a 	mov	r4,r17
80089b44:	00824640 	call	80082464 <_malloc_r>
80089b48:	10002c26 	beq	r2,zero,80089bfc <__smakebuf_r+0x17c>
80089b4c:	80c0030b 	ldhu	r3,12(r16)
80089b50:	01200274 	movhi	r4,32777
80089b54:	2122c104 	addi	r4,r4,-29948
80089b58:	89000f15 	stw	r4,60(r17)
80089b5c:	18c02014 	ori	r3,r3,128
80089b60:	80c0030d 	sth	r3,12(r16)
80089b64:	80800015 	stw	r2,0(r16)
80089b68:	80800415 	stw	r2,16(r16)
80089b6c:	84800515 	stw	r18,20(r16)
80089b70:	98001a1e 	bne	r19,zero,80089bdc <__smakebuf_r+0x15c>
80089b74:	dfc01317 	ldw	ra,76(sp)
80089b78:	dcc01217 	ldw	r19,72(sp)
80089b7c:	dc801117 	ldw	r18,68(sp)
80089b80:	dc401017 	ldw	r17,64(sp)
80089b84:	dc000f17 	ldw	r16,60(sp)
80089b88:	dec01404 	addi	sp,sp,80
80089b8c:	f800283a 	ret
80089b90:	288010c4 	addi	r2,r5,67
80089b94:	28800015 	stw	r2,0(r5)
80089b98:	28800415 	stw	r2,16(r5)
80089b9c:	00800044 	movi	r2,1
80089ba0:	28800515 	stw	r2,20(r5)
80089ba4:	f800283a 	ret
80089ba8:	04801004 	movi	r18,64
80089bac:	003fe006 	br	80089b30 <__smakebuf_r+0xb0>
80089bb0:	81000a17 	ldw	r4,40(r16)
80089bb4:	00e00234 	movhi	r3,32776
80089bb8:	18cc8f04 	addi	r3,r3,12860
80089bbc:	20ffc51e 	bne	r4,r3,80089ad4 <__smakebuf_r+0x54>
80089bc0:	8080030b 	ldhu	r2,12(r16)
80089bc4:	04810004 	movi	r18,1024
80089bc8:	84801315 	stw	r18,76(r16)
80089bcc:	1484b03a 	or	r2,r2,r18
80089bd0:	8080030d 	sth	r2,12(r16)
80089bd4:	0027883a 	mov	r19,zero
80089bd8:	003fd806 	br	80089b3c <__smakebuf_r+0xbc>
80089bdc:	8140038f 	ldh	r5,14(r16)
80089be0:	8809883a 	mov	r4,r17
80089be4:	0093ec40 	call	80093ec4 <_isatty_r>
80089be8:	103fe226 	beq	r2,zero,80089b74 <__smakebuf_r+0xf4>
80089bec:	8080030b 	ldhu	r2,12(r16)
80089bf0:	10800054 	ori	r2,r2,1
80089bf4:	8080030d 	sth	r2,12(r16)
80089bf8:	003fde06 	br	80089b74 <__smakebuf_r+0xf4>
80089bfc:	8080030b 	ldhu	r2,12(r16)
80089c00:	10c0800c 	andi	r3,r2,512
80089c04:	183fdb1e 	bne	r3,zero,80089b74 <__smakebuf_r+0xf4>
80089c08:	10800094 	ori	r2,r2,2
80089c0c:	80c010c4 	addi	r3,r16,67
80089c10:	8080030d 	sth	r2,12(r16)
80089c14:	00800044 	movi	r2,1
80089c18:	80c00015 	stw	r3,0(r16)
80089c1c:	80c00415 	stw	r3,16(r16)
80089c20:	80800515 	stw	r2,20(r16)
80089c24:	003fd306 	br	80089b74 <__smakebuf_r+0xf4>
80089c28:	04810004 	movi	r18,1024
80089c2c:	003fc306 	br	80089b3c <__smakebuf_r+0xbc>
80089c30:	0027883a 	mov	r19,zero
80089c34:	04810004 	movi	r18,1024
80089c38:	003fc006 	br	80089b3c <__smakebuf_r+0xbc>

80089c3c <_mbrtowc_r>:
80089c3c:	defff704 	addi	sp,sp,-36
80089c40:	00a002b4 	movhi	r2,32778
80089c44:	dc800715 	stw	r18,28(sp)
80089c48:	dc400615 	stw	r17,24(sp)
80089c4c:	dc000515 	stw	r16,20(sp)
80089c50:	10ba7804 	addi	r2,r2,-5664
80089c54:	dfc00815 	stw	ra,32(sp)
80089c58:	2021883a 	mov	r16,r4
80089c5c:	dc400917 	ldw	r17,36(sp)
80089c60:	14800017 	ldw	r18,0(r2)
80089c64:	30001626 	beq	r6,zero,80089cc0 <_mbrtowc_r+0x84>
80089c68:	d9400215 	stw	r5,8(sp)
80089c6c:	d9800315 	stw	r6,12(sp)
80089c70:	d9c00415 	stw	r7,16(sp)
80089c74:	00899c00 	call	800899c0 <__locale_charset>
80089c78:	d9c00417 	ldw	r7,16(sp)
80089c7c:	d9800317 	ldw	r6,12(sp)
80089c80:	d9400217 	ldw	r5,8(sp)
80089c84:	d8800015 	stw	r2,0(sp)
80089c88:	dc400115 	stw	r17,4(sp)
80089c8c:	8009883a 	mov	r4,r16
80089c90:	903ee83a 	callr	r18
80089c94:	00ffffc4 	movi	r3,-1
80089c98:	10c0031e 	bne	r2,r3,80089ca8 <_mbrtowc_r+0x6c>
80089c9c:	88000015 	stw	zero,0(r17)
80089ca0:	00c02284 	movi	r3,138
80089ca4:	80c00015 	stw	r3,0(r16)
80089ca8:	dfc00817 	ldw	ra,32(sp)
80089cac:	dc800717 	ldw	r18,28(sp)
80089cb0:	dc400617 	ldw	r17,24(sp)
80089cb4:	dc000517 	ldw	r16,20(sp)
80089cb8:	dec00904 	addi	sp,sp,36
80089cbc:	f800283a 	ret
80089cc0:	00899c00 	call	800899c0 <__locale_charset>
80089cc4:	01a002b4 	movhi	r6,32778
80089cc8:	31b33604 	addi	r6,r6,-13096
80089ccc:	dc400115 	stw	r17,4(sp)
80089cd0:	d8800015 	stw	r2,0(sp)
80089cd4:	01c00044 	movi	r7,1
80089cd8:	000b883a 	mov	r5,zero
80089cdc:	8009883a 	mov	r4,r16
80089ce0:	903ee83a 	callr	r18
80089ce4:	003feb06 	br	80089c94 <_mbrtowc_r+0x58>

80089ce8 <mbrtowc>:
80089ce8:	defff704 	addi	sp,sp,-36
80089cec:	00a002b4 	movhi	r2,32778
80089cf0:	dc800415 	stw	r18,16(sp)
80089cf4:	dc400315 	stw	r17,12(sp)
80089cf8:	10ba7304 	addi	r2,r2,-5684
80089cfc:	dfc00815 	stw	ra,32(sp)
80089d00:	dd400715 	stw	r21,28(sp)
80089d04:	dd000615 	stw	r20,24(sp)
80089d08:	dcc00515 	stw	r19,20(sp)
80089d0c:	dc000215 	stw	r16,8(sp)
80089d10:	3825883a 	mov	r18,r7
80089d14:	14400017 	ldw	r17,0(r2)
80089d18:	28001c26 	beq	r5,zero,80089d8c <mbrtowc+0xa4>
80089d1c:	00a002b4 	movhi	r2,32778
80089d20:	10ba7804 	addi	r2,r2,-5664
80089d24:	15400017 	ldw	r21,0(r2)
80089d28:	2821883a 	mov	r16,r5
80089d2c:	2027883a 	mov	r19,r4
80089d30:	3029883a 	mov	r20,r6
80089d34:	00899c00 	call	800899c0 <__locale_charset>
80089d38:	d8800015 	stw	r2,0(sp)
80089d3c:	dc800115 	stw	r18,4(sp)
80089d40:	a00f883a 	mov	r7,r20
80089d44:	800d883a 	mov	r6,r16
80089d48:	980b883a 	mov	r5,r19
80089d4c:	8809883a 	mov	r4,r17
80089d50:	a83ee83a 	callr	r21
80089d54:	00ffffc4 	movi	r3,-1
80089d58:	10c0031e 	bne	r2,r3,80089d68 <mbrtowc+0x80>
80089d5c:	90000015 	stw	zero,0(r18)
80089d60:	00c02284 	movi	r3,138
80089d64:	88c00015 	stw	r3,0(r17)
80089d68:	dfc00817 	ldw	ra,32(sp)
80089d6c:	dd400717 	ldw	r21,28(sp)
80089d70:	dd000617 	ldw	r20,24(sp)
80089d74:	dcc00517 	ldw	r19,20(sp)
80089d78:	dc800417 	ldw	r18,16(sp)
80089d7c:	dc400317 	ldw	r17,12(sp)
80089d80:	dc000217 	ldw	r16,8(sp)
80089d84:	dec00904 	addi	sp,sp,36
80089d88:	f800283a 	ret
80089d8c:	00a002b4 	movhi	r2,32778
80089d90:	10ba7804 	addi	r2,r2,-5664
80089d94:	14000017 	ldw	r16,0(r2)
80089d98:	00899c00 	call	800899c0 <__locale_charset>
80089d9c:	01a002b4 	movhi	r6,32778
80089da0:	31b33604 	addi	r6,r6,-13096
80089da4:	dc800115 	stw	r18,4(sp)
80089da8:	d8800015 	stw	r2,0(sp)
80089dac:	01c00044 	movi	r7,1
80089db0:	000b883a 	mov	r5,zero
80089db4:	8809883a 	mov	r4,r17
80089db8:	803ee83a 	callr	r16
80089dbc:	003fe506 	br	80089d54 <mbrtowc+0x6c>

80089dc0 <__ascii_mbtowc>:
80089dc0:	deffff04 	addi	sp,sp,-4
80089dc4:	28000826 	beq	r5,zero,80089de8 <__ascii_mbtowc+0x28>
80089dc8:	30000926 	beq	r6,zero,80089df0 <__ascii_mbtowc+0x30>
80089dcc:	38000b26 	beq	r7,zero,80089dfc <__ascii_mbtowc+0x3c>
80089dd0:	30800003 	ldbu	r2,0(r6)
80089dd4:	28800015 	stw	r2,0(r5)
80089dd8:	30800003 	ldbu	r2,0(r6)
80089ddc:	1004c03a 	cmpne	r2,r2,zero
80089de0:	dec00104 	addi	sp,sp,4
80089de4:	f800283a 	ret
80089de8:	d80b883a 	mov	r5,sp
80089dec:	303ff71e 	bne	r6,zero,80089dcc <__ascii_mbtowc+0xc>
80089df0:	0005883a 	mov	r2,zero
80089df4:	dec00104 	addi	sp,sp,4
80089df8:	f800283a 	ret
80089dfc:	00bfff84 	movi	r2,-2
80089e00:	003ff706 	br	80089de0 <__ascii_mbtowc+0x20>

80089e04 <_mbtowc_r>:
80089e04:	00a002b4 	movhi	r2,32778
80089e08:	defff804 	addi	sp,sp,-32
80089e0c:	10ba7804 	addi	r2,r2,-5664
80089e10:	dfc00715 	stw	ra,28(sp)
80089e14:	dc000615 	stw	r16,24(sp)
80089e18:	14000017 	ldw	r16,0(r2)
80089e1c:	d9000215 	stw	r4,8(sp)
80089e20:	d9400315 	stw	r5,12(sp)
80089e24:	d9800415 	stw	r6,16(sp)
80089e28:	d9c00515 	stw	r7,20(sp)
80089e2c:	00899c00 	call	800899c0 <__locale_charset>
80089e30:	d8800015 	stw	r2,0(sp)
80089e34:	d8800817 	ldw	r2,32(sp)
80089e38:	d9c00517 	ldw	r7,20(sp)
80089e3c:	d9800417 	ldw	r6,16(sp)
80089e40:	d9400317 	ldw	r5,12(sp)
80089e44:	d9000217 	ldw	r4,8(sp)
80089e48:	d8800115 	stw	r2,4(sp)
80089e4c:	803ee83a 	callr	r16
80089e50:	dfc00717 	ldw	ra,28(sp)
80089e54:	dc000617 	ldw	r16,24(sp)
80089e58:	dec00804 	addi	sp,sp,32
80089e5c:	f800283a 	ret

80089e60 <memchr>:
80089e60:	208000cc 	andi	r2,r4,3
80089e64:	280f883a 	mov	r7,r5
80089e68:	10003426 	beq	r2,zero,80089f3c <memchr+0xdc>
80089e6c:	30bfffc4 	addi	r2,r6,-1
80089e70:	30001a26 	beq	r6,zero,80089edc <memchr+0x7c>
80089e74:	20c00003 	ldbu	r3,0(r4)
80089e78:	29803fcc 	andi	r6,r5,255
80089e7c:	30c0051e 	bne	r6,r3,80089e94 <memchr+0x34>
80089e80:	00001806 	br	80089ee4 <memchr+0x84>
80089e84:	10001526 	beq	r2,zero,80089edc <memchr+0x7c>
80089e88:	20c00003 	ldbu	r3,0(r4)
80089e8c:	10bfffc4 	addi	r2,r2,-1
80089e90:	30c01426 	beq	r6,r3,80089ee4 <memchr+0x84>
80089e94:	21000044 	addi	r4,r4,1
80089e98:	20c000cc 	andi	r3,r4,3
80089e9c:	183ff91e 	bne	r3,zero,80089e84 <memchr+0x24>
80089ea0:	020000c4 	movi	r8,3
80089ea4:	40801136 	bltu	r8,r2,80089eec <memchr+0x8c>
80089ea8:	10000c26 	beq	r2,zero,80089edc <memchr+0x7c>
80089eac:	20c00003 	ldbu	r3,0(r4)
80089eb0:	29403fcc 	andi	r5,r5,255
80089eb4:	28c00b26 	beq	r5,r3,80089ee4 <memchr+0x84>
80089eb8:	20c00044 	addi	r3,r4,1
80089ebc:	39803fcc 	andi	r6,r7,255
80089ec0:	2089883a 	add	r4,r4,r2
80089ec4:	00000306 	br	80089ed4 <memchr+0x74>
80089ec8:	18c00044 	addi	r3,r3,1
80089ecc:	197fffc3 	ldbu	r5,-1(r3)
80089ed0:	31400526 	beq	r6,r5,80089ee8 <memchr+0x88>
80089ed4:	1805883a 	mov	r2,r3
80089ed8:	20fffb1e 	bne	r4,r3,80089ec8 <memchr+0x68>
80089edc:	0005883a 	mov	r2,zero
80089ee0:	f800283a 	ret
80089ee4:	2005883a 	mov	r2,r4
80089ee8:	f800283a 	ret
80089eec:	28c03fcc 	andi	r3,r5,255
80089ef0:	1812923a 	slli	r9,r3,8
80089ef4:	02ffbff4 	movhi	r11,65279
80089ef8:	02a02074 	movhi	r10,32897
80089efc:	48d2b03a 	or	r9,r9,r3
80089f00:	4806943a 	slli	r3,r9,16
80089f04:	5affbfc4 	addi	r11,r11,-257
80089f08:	52a02004 	addi	r10,r10,-32640
80089f0c:	48d2b03a 	or	r9,r9,r3
80089f10:	20c00017 	ldw	r3,0(r4)
80089f14:	48c6f03a 	xor	r3,r9,r3
80089f18:	1acd883a 	add	r6,r3,r11
80089f1c:	00c6303a 	nor	r3,zero,r3
80089f20:	30c6703a 	and	r3,r6,r3
80089f24:	1a86703a 	and	r3,r3,r10
80089f28:	183fe01e 	bne	r3,zero,80089eac <memchr+0x4c>
80089f2c:	10bfff04 	addi	r2,r2,-4
80089f30:	21000104 	addi	r4,r4,4
80089f34:	40bff636 	bltu	r8,r2,80089f10 <memchr+0xb0>
80089f38:	003fdb06 	br	80089ea8 <memchr+0x48>
80089f3c:	3005883a 	mov	r2,r6
80089f40:	003fd706 	br	80089ea0 <memchr+0x40>

80089f44 <memmove>:
80089f44:	2005883a 	mov	r2,r4
80089f48:	29000b2e 	bgeu	r5,r4,80089f78 <memmove+0x34>
80089f4c:	298f883a 	add	r7,r5,r6
80089f50:	21c0092e 	bgeu	r4,r7,80089f78 <memmove+0x34>
80089f54:	2187883a 	add	r3,r4,r6
80089f58:	198bc83a 	sub	r5,r3,r6
80089f5c:	30004826 	beq	r6,zero,8008a080 <memmove+0x13c>
80089f60:	39ffffc4 	addi	r7,r7,-1
80089f64:	39000003 	ldbu	r4,0(r7)
80089f68:	18ffffc4 	addi	r3,r3,-1
80089f6c:	19000005 	stb	r4,0(r3)
80089f70:	28fffb1e 	bne	r5,r3,80089f60 <memmove+0x1c>
80089f74:	f800283a 	ret
80089f78:	00c003c4 	movi	r3,15
80089f7c:	1980412e 	bgeu	r3,r6,8008a084 <memmove+0x140>
80089f80:	2886b03a 	or	r3,r5,r2
80089f84:	18c000cc 	andi	r3,r3,3
80089f88:	1800401e 	bne	r3,zero,8008a08c <memmove+0x148>
80089f8c:	33fffc04 	addi	r15,r6,-16
80089f90:	781ed13a 	srli	r15,r15,4
80089f94:	28c00104 	addi	r3,r5,4
80089f98:	13400104 	addi	r13,r2,4
80089f9c:	781c913a 	slli	r14,r15,4
80089fa0:	2b000204 	addi	r12,r5,8
80089fa4:	12c00204 	addi	r11,r2,8
80089fa8:	73800504 	addi	r14,r14,20
80089fac:	2a800304 	addi	r10,r5,12
80089fb0:	12400304 	addi	r9,r2,12
80089fb4:	2b9d883a 	add	r14,r5,r14
80089fb8:	2811883a 	mov	r8,r5
80089fbc:	100f883a 	mov	r7,r2
80089fc0:	41000017 	ldw	r4,0(r8)
80089fc4:	39c00404 	addi	r7,r7,16
80089fc8:	18c00404 	addi	r3,r3,16
80089fcc:	393ffc15 	stw	r4,-16(r7)
80089fd0:	193ffc17 	ldw	r4,-16(r3)
80089fd4:	6b400404 	addi	r13,r13,16
80089fd8:	5ac00404 	addi	r11,r11,16
80089fdc:	693ffc15 	stw	r4,-16(r13)
80089fe0:	61000017 	ldw	r4,0(r12)
80089fe4:	4a400404 	addi	r9,r9,16
80089fe8:	42000404 	addi	r8,r8,16
80089fec:	593ffc15 	stw	r4,-16(r11)
80089ff0:	51000017 	ldw	r4,0(r10)
80089ff4:	63000404 	addi	r12,r12,16
80089ff8:	52800404 	addi	r10,r10,16
80089ffc:	493ffc15 	stw	r4,-16(r9)
8008a000:	1bbfef1e 	bne	r3,r14,80089fc0 <memmove+0x7c>
8008a004:	79000044 	addi	r4,r15,1
8008a008:	2008913a 	slli	r4,r4,4
8008a00c:	328003cc 	andi	r10,r6,15
8008a010:	02c000c4 	movi	r11,3
8008a014:	1107883a 	add	r3,r2,r4
8008a018:	290b883a 	add	r5,r5,r4
8008a01c:	5a801e2e 	bgeu	r11,r10,8008a098 <memmove+0x154>
8008a020:	1813883a 	mov	r9,r3
8008a024:	2811883a 	mov	r8,r5
8008a028:	500f883a 	mov	r7,r10
8008a02c:	41000017 	ldw	r4,0(r8)
8008a030:	4a400104 	addi	r9,r9,4
8008a034:	39ffff04 	addi	r7,r7,-4
8008a038:	493fff15 	stw	r4,-4(r9)
8008a03c:	42000104 	addi	r8,r8,4
8008a040:	59fffa36 	bltu	r11,r7,8008a02c <memmove+0xe8>
8008a044:	513fff04 	addi	r4,r10,-4
8008a048:	2008d0ba 	srli	r4,r4,2
8008a04c:	318000cc 	andi	r6,r6,3
8008a050:	21000044 	addi	r4,r4,1
8008a054:	2109883a 	add	r4,r4,r4
8008a058:	2109883a 	add	r4,r4,r4
8008a05c:	1907883a 	add	r3,r3,r4
8008a060:	290b883a 	add	r5,r5,r4
8008a064:	30000b26 	beq	r6,zero,8008a094 <memmove+0x150>
8008a068:	198d883a 	add	r6,r3,r6
8008a06c:	29c00003 	ldbu	r7,0(r5)
8008a070:	18c00044 	addi	r3,r3,1
8008a074:	29400044 	addi	r5,r5,1
8008a078:	19ffffc5 	stb	r7,-1(r3)
8008a07c:	19bffb1e 	bne	r3,r6,8008a06c <memmove+0x128>
8008a080:	f800283a 	ret
8008a084:	1007883a 	mov	r3,r2
8008a088:	003ff606 	br	8008a064 <memmove+0x120>
8008a08c:	1007883a 	mov	r3,r2
8008a090:	003ff506 	br	8008a068 <memmove+0x124>
8008a094:	f800283a 	ret
8008a098:	500d883a 	mov	r6,r10
8008a09c:	003ff106 	br	8008a064 <memmove+0x120>

8008a0a0 <memset>:
8008a0a0:	20c000cc 	andi	r3,r4,3
8008a0a4:	2005883a 	mov	r2,r4
8008a0a8:	18004426 	beq	r3,zero,8008a1bc <memset+0x11c>
8008a0ac:	31ffffc4 	addi	r7,r6,-1
8008a0b0:	30004026 	beq	r6,zero,8008a1b4 <memset+0x114>
8008a0b4:	2813883a 	mov	r9,r5
8008a0b8:	200d883a 	mov	r6,r4
8008a0bc:	2007883a 	mov	r3,r4
8008a0c0:	00000406 	br	8008a0d4 <memset+0x34>
8008a0c4:	3a3fffc4 	addi	r8,r7,-1
8008a0c8:	31800044 	addi	r6,r6,1
8008a0cc:	38003926 	beq	r7,zero,8008a1b4 <memset+0x114>
8008a0d0:	400f883a 	mov	r7,r8
8008a0d4:	18c00044 	addi	r3,r3,1
8008a0d8:	32400005 	stb	r9,0(r6)
8008a0dc:	1a0000cc 	andi	r8,r3,3
8008a0e0:	403ff81e 	bne	r8,zero,8008a0c4 <memset+0x24>
8008a0e4:	010000c4 	movi	r4,3
8008a0e8:	21c02d2e 	bgeu	r4,r7,8008a1a0 <memset+0x100>
8008a0ec:	29003fcc 	andi	r4,r5,255
8008a0f0:	200c923a 	slli	r6,r4,8
8008a0f4:	3108b03a 	or	r4,r6,r4
8008a0f8:	200c943a 	slli	r6,r4,16
8008a0fc:	218cb03a 	or	r6,r4,r6
8008a100:	010003c4 	movi	r4,15
8008a104:	21c0182e 	bgeu	r4,r7,8008a168 <memset+0xc8>
8008a108:	3b3ffc04 	addi	r12,r7,-16
8008a10c:	6018d13a 	srli	r12,r12,4
8008a110:	1a000104 	addi	r8,r3,4
8008a114:	1ac00204 	addi	r11,r3,8
8008a118:	6008913a 	slli	r4,r12,4
8008a11c:	1a800304 	addi	r10,r3,12
8008a120:	1813883a 	mov	r9,r3
8008a124:	21000504 	addi	r4,r4,20
8008a128:	1909883a 	add	r4,r3,r4
8008a12c:	49800015 	stw	r6,0(r9)
8008a130:	41800015 	stw	r6,0(r8)
8008a134:	59800015 	stw	r6,0(r11)
8008a138:	51800015 	stw	r6,0(r10)
8008a13c:	42000404 	addi	r8,r8,16
8008a140:	4a400404 	addi	r9,r9,16
8008a144:	5ac00404 	addi	r11,r11,16
8008a148:	52800404 	addi	r10,r10,16
8008a14c:	413ff71e 	bne	r8,r4,8008a12c <memset+0x8c>
8008a150:	63000044 	addi	r12,r12,1
8008a154:	6018913a 	slli	r12,r12,4
8008a158:	39c003cc 	andi	r7,r7,15
8008a15c:	010000c4 	movi	r4,3
8008a160:	1b07883a 	add	r3,r3,r12
8008a164:	21c00e2e 	bgeu	r4,r7,8008a1a0 <memset+0x100>
8008a168:	1813883a 	mov	r9,r3
8008a16c:	3811883a 	mov	r8,r7
8008a170:	010000c4 	movi	r4,3
8008a174:	49800015 	stw	r6,0(r9)
8008a178:	423fff04 	addi	r8,r8,-4
8008a17c:	4a400104 	addi	r9,r9,4
8008a180:	223ffc36 	bltu	r4,r8,8008a174 <memset+0xd4>
8008a184:	393fff04 	addi	r4,r7,-4
8008a188:	2008d0ba 	srli	r4,r4,2
8008a18c:	39c000cc 	andi	r7,r7,3
8008a190:	21000044 	addi	r4,r4,1
8008a194:	2109883a 	add	r4,r4,r4
8008a198:	2109883a 	add	r4,r4,r4
8008a19c:	1907883a 	add	r3,r3,r4
8008a1a0:	38000526 	beq	r7,zero,8008a1b8 <memset+0x118>
8008a1a4:	19cf883a 	add	r7,r3,r7
8008a1a8:	19400005 	stb	r5,0(r3)
8008a1ac:	18c00044 	addi	r3,r3,1
8008a1b0:	38fffd1e 	bne	r7,r3,8008a1a8 <memset+0x108>
8008a1b4:	f800283a 	ret
8008a1b8:	f800283a 	ret
8008a1bc:	2007883a 	mov	r3,r4
8008a1c0:	300f883a 	mov	r7,r6
8008a1c4:	003fc706 	br	8008a0e4 <memset+0x44>

8008a1c8 <_Balloc>:
8008a1c8:	20801317 	ldw	r2,76(r4)
8008a1cc:	defffc04 	addi	sp,sp,-16
8008a1d0:	dc400115 	stw	r17,4(sp)
8008a1d4:	dc000015 	stw	r16,0(sp)
8008a1d8:	dfc00315 	stw	ra,12(sp)
8008a1dc:	dc800215 	stw	r18,8(sp)
8008a1e0:	2023883a 	mov	r17,r4
8008a1e4:	2821883a 	mov	r16,r5
8008a1e8:	10000f26 	beq	r2,zero,8008a228 <_Balloc+0x60>
8008a1ec:	8407883a 	add	r3,r16,r16
8008a1f0:	18c7883a 	add	r3,r3,r3
8008a1f4:	10c7883a 	add	r3,r2,r3
8008a1f8:	18800017 	ldw	r2,0(r3)
8008a1fc:	10001126 	beq	r2,zero,8008a244 <_Balloc+0x7c>
8008a200:	11000017 	ldw	r4,0(r2)
8008a204:	19000015 	stw	r4,0(r3)
8008a208:	10000415 	stw	zero,16(r2)
8008a20c:	10000315 	stw	zero,12(r2)
8008a210:	dfc00317 	ldw	ra,12(sp)
8008a214:	dc800217 	ldw	r18,8(sp)
8008a218:	dc400117 	ldw	r17,4(sp)
8008a21c:	dc000017 	ldw	r16,0(sp)
8008a220:	dec00404 	addi	sp,sp,16
8008a224:	f800283a 	ret
8008a228:	01800844 	movi	r6,33
8008a22c:	01400104 	movi	r5,4
8008a230:	0092f0c0 	call	80092f0c <_calloc_r>
8008a234:	88801315 	stw	r2,76(r17)
8008a238:	103fec1e 	bne	r2,zero,8008a1ec <_Balloc+0x24>
8008a23c:	0005883a 	mov	r2,zero
8008a240:	003ff306 	br	8008a210 <_Balloc+0x48>
8008a244:	01400044 	movi	r5,1
8008a248:	2c24983a 	sll	r18,r5,r16
8008a24c:	8809883a 	mov	r4,r17
8008a250:	91800144 	addi	r6,r18,5
8008a254:	318d883a 	add	r6,r6,r6
8008a258:	318d883a 	add	r6,r6,r6
8008a25c:	0092f0c0 	call	80092f0c <_calloc_r>
8008a260:	103ff626 	beq	r2,zero,8008a23c <_Balloc+0x74>
8008a264:	14000115 	stw	r16,4(r2)
8008a268:	14800215 	stw	r18,8(r2)
8008a26c:	003fe606 	br	8008a208 <_Balloc+0x40>

8008a270 <_Bfree>:
8008a270:	28000826 	beq	r5,zero,8008a294 <_Bfree+0x24>
8008a274:	28c00117 	ldw	r3,4(r5)
8008a278:	20801317 	ldw	r2,76(r4)
8008a27c:	18c7883a 	add	r3,r3,r3
8008a280:	18c7883a 	add	r3,r3,r3
8008a284:	10c5883a 	add	r2,r2,r3
8008a288:	10c00017 	ldw	r3,0(r2)
8008a28c:	28c00015 	stw	r3,0(r5)
8008a290:	11400015 	stw	r5,0(r2)
8008a294:	f800283a 	ret

8008a298 <__multadd>:
8008a298:	defffa04 	addi	sp,sp,-24
8008a29c:	dc800315 	stw	r18,12(sp)
8008a2a0:	dc400215 	stw	r17,8(sp)
8008a2a4:	dc000115 	stw	r16,4(sp)
8008a2a8:	2823883a 	mov	r17,r5
8008a2ac:	2c000417 	ldw	r16,16(r5)
8008a2b0:	dfc00515 	stw	ra,20(sp)
8008a2b4:	dcc00415 	stw	r19,16(sp)
8008a2b8:	2025883a 	mov	r18,r4
8008a2bc:	29400504 	addi	r5,r5,20
8008a2c0:	0011883a 	mov	r8,zero
8008a2c4:	28c00017 	ldw	r3,0(r5)
8008a2c8:	29400104 	addi	r5,r5,4
8008a2cc:	42000044 	addi	r8,r8,1
8008a2d0:	18bfffcc 	andi	r2,r3,65535
8008a2d4:	1185383a 	mul	r2,r2,r6
8008a2d8:	1806d43a 	srli	r3,r3,16
8008a2dc:	11cf883a 	add	r7,r2,r7
8008a2e0:	3808d43a 	srli	r4,r7,16
8008a2e4:	1987383a 	mul	r3,r3,r6
8008a2e8:	38bfffcc 	andi	r2,r7,65535
8008a2ec:	1907883a 	add	r3,r3,r4
8008a2f0:	1808943a 	slli	r4,r3,16
8008a2f4:	180ed43a 	srli	r7,r3,16
8008a2f8:	2085883a 	add	r2,r4,r2
8008a2fc:	28bfff15 	stw	r2,-4(r5)
8008a300:	443ff016 	blt	r8,r16,8008a2c4 <__multadd+0x2c>
8008a304:	38000926 	beq	r7,zero,8008a32c <__multadd+0x94>
8008a308:	88800217 	ldw	r2,8(r17)
8008a30c:	80800f0e 	bge	r16,r2,8008a34c <__multadd+0xb4>
8008a310:	80800144 	addi	r2,r16,5
8008a314:	1085883a 	add	r2,r2,r2
8008a318:	1085883a 	add	r2,r2,r2
8008a31c:	8885883a 	add	r2,r17,r2
8008a320:	11c00015 	stw	r7,0(r2)
8008a324:	84000044 	addi	r16,r16,1
8008a328:	8c000415 	stw	r16,16(r17)
8008a32c:	8805883a 	mov	r2,r17
8008a330:	dfc00517 	ldw	ra,20(sp)
8008a334:	dcc00417 	ldw	r19,16(sp)
8008a338:	dc800317 	ldw	r18,12(sp)
8008a33c:	dc400217 	ldw	r17,8(sp)
8008a340:	dc000117 	ldw	r16,4(sp)
8008a344:	dec00604 	addi	sp,sp,24
8008a348:	f800283a 	ret
8008a34c:	89400117 	ldw	r5,4(r17)
8008a350:	9009883a 	mov	r4,r18
8008a354:	d9c00015 	stw	r7,0(sp)
8008a358:	29400044 	addi	r5,r5,1
8008a35c:	008a1c80 	call	8008a1c8 <_Balloc>
8008a360:	89800417 	ldw	r6,16(r17)
8008a364:	89400304 	addi	r5,r17,12
8008a368:	11000304 	addi	r4,r2,12
8008a36c:	31800084 	addi	r6,r6,2
8008a370:	318d883a 	add	r6,r6,r6
8008a374:	318d883a 	add	r6,r6,r6
8008a378:	1027883a 	mov	r19,r2
8008a37c:	0082cec0 	call	80082cec <memcpy>
8008a380:	d9c00017 	ldw	r7,0(sp)
8008a384:	88000a26 	beq	r17,zero,8008a3b0 <__multadd+0x118>
8008a388:	88c00117 	ldw	r3,4(r17)
8008a38c:	90801317 	ldw	r2,76(r18)
8008a390:	18c7883a 	add	r3,r3,r3
8008a394:	18c7883a 	add	r3,r3,r3
8008a398:	10c5883a 	add	r2,r2,r3
8008a39c:	10c00017 	ldw	r3,0(r2)
8008a3a0:	88c00015 	stw	r3,0(r17)
8008a3a4:	14400015 	stw	r17,0(r2)
8008a3a8:	9823883a 	mov	r17,r19
8008a3ac:	003fd806 	br	8008a310 <__multadd+0x78>
8008a3b0:	9823883a 	mov	r17,r19
8008a3b4:	003fd606 	br	8008a310 <__multadd+0x78>

8008a3b8 <__s2b>:
8008a3b8:	defff904 	addi	sp,sp,-28
8008a3bc:	dc400115 	stw	r17,4(sp)
8008a3c0:	dc000015 	stw	r16,0(sp)
8008a3c4:	2023883a 	mov	r17,r4
8008a3c8:	2821883a 	mov	r16,r5
8008a3cc:	39000204 	addi	r4,r7,8
8008a3d0:	01400244 	movi	r5,9
8008a3d4:	dcc00315 	stw	r19,12(sp)
8008a3d8:	dc800215 	stw	r18,8(sp)
8008a3dc:	dfc00615 	stw	ra,24(sp)
8008a3e0:	dd400515 	stw	r21,20(sp)
8008a3e4:	dd000415 	stw	r20,16(sp)
8008a3e8:	3825883a 	mov	r18,r7
8008a3ec:	3027883a 	mov	r19,r6
8008a3f0:	00821900 	call	80082190 <__divsi3>
8008a3f4:	00c00044 	movi	r3,1
8008a3f8:	000b883a 	mov	r5,zero
8008a3fc:	1880030e 	bge	r3,r2,8008a40c <__s2b+0x54>
8008a400:	18c7883a 	add	r3,r3,r3
8008a404:	29400044 	addi	r5,r5,1
8008a408:	18bffd16 	blt	r3,r2,8008a400 <__s2b+0x48>
8008a40c:	8809883a 	mov	r4,r17
8008a410:	008a1c80 	call	8008a1c8 <_Balloc>
8008a414:	d8c00717 	ldw	r3,28(sp)
8008a418:	10c00515 	stw	r3,20(r2)
8008a41c:	00c00044 	movi	r3,1
8008a420:	10c00415 	stw	r3,16(r2)
8008a424:	00c00244 	movi	r3,9
8008a428:	1cc0210e 	bge	r3,r19,8008a4b0 <__s2b+0xf8>
8008a42c:	80eb883a 	add	r21,r16,r3
8008a430:	a829883a 	mov	r20,r21
8008a434:	84e1883a 	add	r16,r16,r19
8008a438:	a1c00007 	ldb	r7,0(r20)
8008a43c:	01800284 	movi	r6,10
8008a440:	a5000044 	addi	r20,r20,1
8008a444:	100b883a 	mov	r5,r2
8008a448:	39fff404 	addi	r7,r7,-48
8008a44c:	8809883a 	mov	r4,r17
8008a450:	008a2980 	call	8008a298 <__multadd>
8008a454:	a43ff81e 	bne	r20,r16,8008a438 <__s2b+0x80>
8008a458:	ace1883a 	add	r16,r21,r19
8008a45c:	843ffe04 	addi	r16,r16,-8
8008a460:	9c800a0e 	bge	r19,r18,8008a48c <__s2b+0xd4>
8008a464:	94e5c83a 	sub	r18,r18,r19
8008a468:	84a5883a 	add	r18,r16,r18
8008a46c:	81c00007 	ldb	r7,0(r16)
8008a470:	01800284 	movi	r6,10
8008a474:	84000044 	addi	r16,r16,1
8008a478:	100b883a 	mov	r5,r2
8008a47c:	39fff404 	addi	r7,r7,-48
8008a480:	8809883a 	mov	r4,r17
8008a484:	008a2980 	call	8008a298 <__multadd>
8008a488:	84bff81e 	bne	r16,r18,8008a46c <__s2b+0xb4>
8008a48c:	dfc00617 	ldw	ra,24(sp)
8008a490:	dd400517 	ldw	r21,20(sp)
8008a494:	dd000417 	ldw	r20,16(sp)
8008a498:	dcc00317 	ldw	r19,12(sp)
8008a49c:	dc800217 	ldw	r18,8(sp)
8008a4a0:	dc400117 	ldw	r17,4(sp)
8008a4a4:	dc000017 	ldw	r16,0(sp)
8008a4a8:	dec00704 	addi	sp,sp,28
8008a4ac:	f800283a 	ret
8008a4b0:	84000284 	addi	r16,r16,10
8008a4b4:	1827883a 	mov	r19,r3
8008a4b8:	003fe906 	br	8008a460 <__s2b+0xa8>

8008a4bc <__hi0bits>:
8008a4bc:	20bfffec 	andhi	r2,r4,65535
8008a4c0:	1000141e 	bne	r2,zero,8008a514 <__hi0bits+0x58>
8008a4c4:	2008943a 	slli	r4,r4,16
8008a4c8:	00800404 	movi	r2,16
8008a4cc:	20ffc02c 	andhi	r3,r4,65280
8008a4d0:	1800021e 	bne	r3,zero,8008a4dc <__hi0bits+0x20>
8008a4d4:	2008923a 	slli	r4,r4,8
8008a4d8:	10800204 	addi	r2,r2,8
8008a4dc:	20fc002c 	andhi	r3,r4,61440
8008a4e0:	1800021e 	bne	r3,zero,8008a4ec <__hi0bits+0x30>
8008a4e4:	2008913a 	slli	r4,r4,4
8008a4e8:	10800104 	addi	r2,r2,4
8008a4ec:	20f0002c 	andhi	r3,r4,49152
8008a4f0:	1800031e 	bne	r3,zero,8008a500 <__hi0bits+0x44>
8008a4f4:	2109883a 	add	r4,r4,r4
8008a4f8:	10800084 	addi	r2,r2,2
8008a4fc:	2109883a 	add	r4,r4,r4
8008a500:	20000316 	blt	r4,zero,8008a510 <__hi0bits+0x54>
8008a504:	2110002c 	andhi	r4,r4,16384
8008a508:	2000041e 	bne	r4,zero,8008a51c <__hi0bits+0x60>
8008a50c:	00800804 	movi	r2,32
8008a510:	f800283a 	ret
8008a514:	0005883a 	mov	r2,zero
8008a518:	003fec06 	br	8008a4cc <__hi0bits+0x10>
8008a51c:	10800044 	addi	r2,r2,1
8008a520:	f800283a 	ret

8008a524 <__lo0bits>:
8008a524:	20c00017 	ldw	r3,0(r4)
8008a528:	188001cc 	andi	r2,r3,7
8008a52c:	10000826 	beq	r2,zero,8008a550 <__lo0bits+0x2c>
8008a530:	1880004c 	andi	r2,r3,1
8008a534:	1000211e 	bne	r2,zero,8008a5bc <__lo0bits+0x98>
8008a538:	1880008c 	andi	r2,r3,2
8008a53c:	1000211e 	bne	r2,zero,8008a5c4 <__lo0bits+0xa0>
8008a540:	1806d0ba 	srli	r3,r3,2
8008a544:	00800084 	movi	r2,2
8008a548:	20c00015 	stw	r3,0(r4)
8008a54c:	f800283a 	ret
8008a550:	18bfffcc 	andi	r2,r3,65535
8008a554:	10001326 	beq	r2,zero,8008a5a4 <__lo0bits+0x80>
8008a558:	0005883a 	mov	r2,zero
8008a55c:	19403fcc 	andi	r5,r3,255
8008a560:	2800021e 	bne	r5,zero,8008a56c <__lo0bits+0x48>
8008a564:	1806d23a 	srli	r3,r3,8
8008a568:	10800204 	addi	r2,r2,8
8008a56c:	194003cc 	andi	r5,r3,15
8008a570:	2800021e 	bne	r5,zero,8008a57c <__lo0bits+0x58>
8008a574:	1806d13a 	srli	r3,r3,4
8008a578:	10800104 	addi	r2,r2,4
8008a57c:	194000cc 	andi	r5,r3,3
8008a580:	2800021e 	bne	r5,zero,8008a58c <__lo0bits+0x68>
8008a584:	1806d0ba 	srli	r3,r3,2
8008a588:	10800084 	addi	r2,r2,2
8008a58c:	1940004c 	andi	r5,r3,1
8008a590:	2800081e 	bne	r5,zero,8008a5b4 <__lo0bits+0x90>
8008a594:	1806d07a 	srli	r3,r3,1
8008a598:	1800051e 	bne	r3,zero,8008a5b0 <__lo0bits+0x8c>
8008a59c:	00800804 	movi	r2,32
8008a5a0:	f800283a 	ret
8008a5a4:	1806d43a 	srli	r3,r3,16
8008a5a8:	00800404 	movi	r2,16
8008a5ac:	003feb06 	br	8008a55c <__lo0bits+0x38>
8008a5b0:	10800044 	addi	r2,r2,1
8008a5b4:	20c00015 	stw	r3,0(r4)
8008a5b8:	f800283a 	ret
8008a5bc:	0005883a 	mov	r2,zero
8008a5c0:	f800283a 	ret
8008a5c4:	1806d07a 	srli	r3,r3,1
8008a5c8:	00800044 	movi	r2,1
8008a5cc:	20c00015 	stw	r3,0(r4)
8008a5d0:	f800283a 	ret

8008a5d4 <__i2b>:
8008a5d4:	defffd04 	addi	sp,sp,-12
8008a5d8:	dc000015 	stw	r16,0(sp)
8008a5dc:	04000044 	movi	r16,1
8008a5e0:	dc400115 	stw	r17,4(sp)
8008a5e4:	2823883a 	mov	r17,r5
8008a5e8:	800b883a 	mov	r5,r16
8008a5ec:	dfc00215 	stw	ra,8(sp)
8008a5f0:	008a1c80 	call	8008a1c8 <_Balloc>
8008a5f4:	14400515 	stw	r17,20(r2)
8008a5f8:	14000415 	stw	r16,16(r2)
8008a5fc:	dfc00217 	ldw	ra,8(sp)
8008a600:	dc400117 	ldw	r17,4(sp)
8008a604:	dc000017 	ldw	r16,0(sp)
8008a608:	dec00304 	addi	sp,sp,12
8008a60c:	f800283a 	ret

8008a610 <__multiply>:
8008a610:	defffa04 	addi	sp,sp,-24
8008a614:	dcc00315 	stw	r19,12(sp)
8008a618:	dc800215 	stw	r18,8(sp)
8008a61c:	34c00417 	ldw	r19,16(r6)
8008a620:	2c800417 	ldw	r18,16(r5)
8008a624:	dd000415 	stw	r20,16(sp)
8008a628:	dc400115 	stw	r17,4(sp)
8008a62c:	dfc00515 	stw	ra,20(sp)
8008a630:	dc000015 	stw	r16,0(sp)
8008a634:	2829883a 	mov	r20,r5
8008a638:	3023883a 	mov	r17,r6
8008a63c:	94c0050e 	bge	r18,r19,8008a654 <__multiply+0x44>
8008a640:	9007883a 	mov	r3,r18
8008a644:	3029883a 	mov	r20,r6
8008a648:	9825883a 	mov	r18,r19
8008a64c:	2823883a 	mov	r17,r5
8008a650:	1827883a 	mov	r19,r3
8008a654:	a0800217 	ldw	r2,8(r20)
8008a658:	94e1883a 	add	r16,r18,r19
8008a65c:	a1400117 	ldw	r5,4(r20)
8008a660:	1400010e 	bge	r2,r16,8008a668 <__multiply+0x58>
8008a664:	29400044 	addi	r5,r5,1
8008a668:	008a1c80 	call	8008a1c8 <_Balloc>
8008a66c:	8415883a 	add	r10,r16,r16
8008a670:	12c00504 	addi	r11,r2,20
8008a674:	5295883a 	add	r10,r10,r10
8008a678:	5a95883a 	add	r10,r11,r10
8008a67c:	5807883a 	mov	r3,r11
8008a680:	5a80032e 	bgeu	r11,r10,8008a690 <__multiply+0x80>
8008a684:	18000015 	stw	zero,0(r3)
8008a688:	18c00104 	addi	r3,r3,4
8008a68c:	1abffd36 	bltu	r3,r10,8008a684 <__multiply+0x74>
8008a690:	9ce7883a 	add	r19,r19,r19
8008a694:	94a5883a 	add	r18,r18,r18
8008a698:	89800504 	addi	r6,r17,20
8008a69c:	9ce7883a 	add	r19,r19,r19
8008a6a0:	a3400504 	addi	r13,r20,20
8008a6a4:	94a5883a 	add	r18,r18,r18
8008a6a8:	34d9883a 	add	r12,r6,r19
8008a6ac:	6c93883a 	add	r9,r13,r18
8008a6b0:	3300422e 	bgeu	r6,r12,8008a7bc <__multiply+0x1ac>
8008a6b4:	37c00017 	ldw	ra,0(r6)
8008a6b8:	fbffffcc 	andi	r15,ra,65535
8008a6bc:	78001b26 	beq	r15,zero,8008a72c <__multiply+0x11c>
8008a6c0:	5811883a 	mov	r8,r11
8008a6c4:	681d883a 	mov	r14,r13
8008a6c8:	000f883a 	mov	r7,zero
8008a6cc:	71000017 	ldw	r4,0(r14)
8008a6d0:	40c00017 	ldw	r3,0(r8)
8008a6d4:	73800104 	addi	r14,r14,4
8008a6d8:	217fffcc 	andi	r5,r4,65535
8008a6dc:	2bcb383a 	mul	r5,r5,r15
8008a6e0:	2008d43a 	srli	r4,r4,16
8008a6e4:	1c7fffcc 	andi	r17,r3,65535
8008a6e8:	2c4b883a 	add	r5,r5,r17
8008a6ec:	29cb883a 	add	r5,r5,r7
8008a6f0:	23c9383a 	mul	r4,r4,r15
8008a6f4:	1806d43a 	srli	r3,r3,16
8008a6f8:	280ed43a 	srli	r7,r5,16
8008a6fc:	297fffcc 	andi	r5,r5,65535
8008a700:	20c7883a 	add	r3,r4,r3
8008a704:	19c7883a 	add	r3,r3,r7
8008a708:	1808943a 	slli	r4,r3,16
8008a70c:	4023883a 	mov	r17,r8
8008a710:	180ed43a 	srli	r7,r3,16
8008a714:	214ab03a 	or	r5,r4,r5
8008a718:	41400015 	stw	r5,0(r8)
8008a71c:	42000104 	addi	r8,r8,4
8008a720:	727fea36 	bltu	r14,r9,8008a6cc <__multiply+0xbc>
8008a724:	89c00115 	stw	r7,4(r17)
8008a728:	37c00017 	ldw	ra,0(r6)
8008a72c:	f83ed43a 	srli	ra,ra,16
8008a730:	f8001f26 	beq	ra,zero,8008a7b0 <__multiply+0x1a0>
8008a734:	58c00017 	ldw	r3,0(r11)
8008a738:	681d883a 	mov	r14,r13
8008a73c:	581f883a 	mov	r15,r11
8008a740:	1811883a 	mov	r8,r3
8008a744:	5825883a 	mov	r18,r11
8008a748:	000f883a 	mov	r7,zero
8008a74c:	00000106 	br	8008a754 <__multiply+0x144>
8008a750:	8825883a 	mov	r18,r17
8008a754:	7140000b 	ldhu	r5,0(r14)
8008a758:	4010d43a 	srli	r8,r8,16
8008a75c:	193fffcc 	andi	r4,r3,65535
8008a760:	2fcb383a 	mul	r5,r5,ra
8008a764:	7bc00104 	addi	r15,r15,4
8008a768:	73800104 	addi	r14,r14,4
8008a76c:	2a0b883a 	add	r5,r5,r8
8008a770:	29cb883a 	add	r5,r5,r7
8008a774:	2806943a 	slli	r3,r5,16
8008a778:	94400104 	addi	r17,r18,4
8008a77c:	280ad43a 	srli	r5,r5,16
8008a780:	1908b03a 	or	r4,r3,r4
8008a784:	793fff15 	stw	r4,-4(r15)
8008a788:	70ffff17 	ldw	r3,-4(r14)
8008a78c:	8a000017 	ldw	r8,0(r17)
8008a790:	1806d43a 	srli	r3,r3,16
8008a794:	413fffcc 	andi	r4,r8,65535
8008a798:	1fc7383a 	mul	r3,r3,ra
8008a79c:	1907883a 	add	r3,r3,r4
8008a7a0:	1947883a 	add	r3,r3,r5
8008a7a4:	180ed43a 	srli	r7,r3,16
8008a7a8:	727fe936 	bltu	r14,r9,8008a750 <__multiply+0x140>
8008a7ac:	90c00115 	stw	r3,4(r18)
8008a7b0:	31800104 	addi	r6,r6,4
8008a7b4:	5ac00104 	addi	r11,r11,4
8008a7b8:	333fbe36 	bltu	r6,r12,8008a6b4 <__multiply+0xa4>
8008a7bc:	0400090e 	bge	zero,r16,8008a7e4 <__multiply+0x1d4>
8008a7c0:	50ffff17 	ldw	r3,-4(r10)
8008a7c4:	52bfff04 	addi	r10,r10,-4
8008a7c8:	18000326 	beq	r3,zero,8008a7d8 <__multiply+0x1c8>
8008a7cc:	00000506 	br	8008a7e4 <__multiply+0x1d4>
8008a7d0:	50c00017 	ldw	r3,0(r10)
8008a7d4:	1800031e 	bne	r3,zero,8008a7e4 <__multiply+0x1d4>
8008a7d8:	843fffc4 	addi	r16,r16,-1
8008a7dc:	52bfff04 	addi	r10,r10,-4
8008a7e0:	803ffb1e 	bne	r16,zero,8008a7d0 <__multiply+0x1c0>
8008a7e4:	14000415 	stw	r16,16(r2)
8008a7e8:	dfc00517 	ldw	ra,20(sp)
8008a7ec:	dd000417 	ldw	r20,16(sp)
8008a7f0:	dcc00317 	ldw	r19,12(sp)
8008a7f4:	dc800217 	ldw	r18,8(sp)
8008a7f8:	dc400117 	ldw	r17,4(sp)
8008a7fc:	dc000017 	ldw	r16,0(sp)
8008a800:	dec00604 	addi	sp,sp,24
8008a804:	f800283a 	ret

8008a808 <__pow5mult>:
8008a808:	defffa04 	addi	sp,sp,-24
8008a80c:	dcc00315 	stw	r19,12(sp)
8008a810:	dc000015 	stw	r16,0(sp)
8008a814:	dfc00515 	stw	ra,20(sp)
8008a818:	dd000415 	stw	r20,16(sp)
8008a81c:	dc800215 	stw	r18,8(sp)
8008a820:	dc400115 	stw	r17,4(sp)
8008a824:	308000cc 	andi	r2,r6,3
8008a828:	3021883a 	mov	r16,r6
8008a82c:	2027883a 	mov	r19,r4
8008a830:	10002f1e 	bne	r2,zero,8008a8f0 <__pow5mult+0xe8>
8008a834:	2825883a 	mov	r18,r5
8008a838:	8021d0ba 	srai	r16,r16,2
8008a83c:	80001a26 	beq	r16,zero,8008a8a8 <__pow5mult+0xa0>
8008a840:	9c401217 	ldw	r17,72(r19)
8008a844:	8800061e 	bne	r17,zero,8008a860 <__pow5mult+0x58>
8008a848:	00003406 	br	8008a91c <__pow5mult+0x114>
8008a84c:	8021d07a 	srai	r16,r16,1
8008a850:	80001526 	beq	r16,zero,8008a8a8 <__pow5mult+0xa0>
8008a854:	88800017 	ldw	r2,0(r17)
8008a858:	10001c26 	beq	r2,zero,8008a8cc <__pow5mult+0xc4>
8008a85c:	1023883a 	mov	r17,r2
8008a860:	8080004c 	andi	r2,r16,1
8008a864:	103ff926 	beq	r2,zero,8008a84c <__pow5mult+0x44>
8008a868:	880d883a 	mov	r6,r17
8008a86c:	900b883a 	mov	r5,r18
8008a870:	9809883a 	mov	r4,r19
8008a874:	008a6100 	call	8008a610 <__multiply>
8008a878:	90001b26 	beq	r18,zero,8008a8e8 <__pow5mult+0xe0>
8008a87c:	91000117 	ldw	r4,4(r18)
8008a880:	98c01317 	ldw	r3,76(r19)
8008a884:	8021d07a 	srai	r16,r16,1
8008a888:	2109883a 	add	r4,r4,r4
8008a88c:	2109883a 	add	r4,r4,r4
8008a890:	1907883a 	add	r3,r3,r4
8008a894:	19000017 	ldw	r4,0(r3)
8008a898:	91000015 	stw	r4,0(r18)
8008a89c:	1c800015 	stw	r18,0(r3)
8008a8a0:	1025883a 	mov	r18,r2
8008a8a4:	803feb1e 	bne	r16,zero,8008a854 <__pow5mult+0x4c>
8008a8a8:	9005883a 	mov	r2,r18
8008a8ac:	dfc00517 	ldw	ra,20(sp)
8008a8b0:	dd000417 	ldw	r20,16(sp)
8008a8b4:	dcc00317 	ldw	r19,12(sp)
8008a8b8:	dc800217 	ldw	r18,8(sp)
8008a8bc:	dc400117 	ldw	r17,4(sp)
8008a8c0:	dc000017 	ldw	r16,0(sp)
8008a8c4:	dec00604 	addi	sp,sp,24
8008a8c8:	f800283a 	ret
8008a8cc:	880d883a 	mov	r6,r17
8008a8d0:	880b883a 	mov	r5,r17
8008a8d4:	9809883a 	mov	r4,r19
8008a8d8:	008a6100 	call	8008a610 <__multiply>
8008a8dc:	88800015 	stw	r2,0(r17)
8008a8e0:	10000015 	stw	zero,0(r2)
8008a8e4:	003fdd06 	br	8008a85c <__pow5mult+0x54>
8008a8e8:	1025883a 	mov	r18,r2
8008a8ec:	003fd706 	br	8008a84c <__pow5mult+0x44>
8008a8f0:	10bfffc4 	addi	r2,r2,-1
8008a8f4:	1085883a 	add	r2,r2,r2
8008a8f8:	00e002b4 	movhi	r3,32778
8008a8fc:	18f17b04 	addi	r3,r3,-14868
8008a900:	1085883a 	add	r2,r2,r2
8008a904:	1885883a 	add	r2,r3,r2
8008a908:	11800017 	ldw	r6,0(r2)
8008a90c:	000f883a 	mov	r7,zero
8008a910:	008a2980 	call	8008a298 <__multadd>
8008a914:	1025883a 	mov	r18,r2
8008a918:	003fc706 	br	8008a838 <__pow5mult+0x30>
8008a91c:	05000044 	movi	r20,1
8008a920:	a00b883a 	mov	r5,r20
8008a924:	9809883a 	mov	r4,r19
8008a928:	008a1c80 	call	8008a1c8 <_Balloc>
8008a92c:	1023883a 	mov	r17,r2
8008a930:	00809c44 	movi	r2,625
8008a934:	88800515 	stw	r2,20(r17)
8008a938:	8d000415 	stw	r20,16(r17)
8008a93c:	9c401215 	stw	r17,72(r19)
8008a940:	88000015 	stw	zero,0(r17)
8008a944:	003fc606 	br	8008a860 <__pow5mult+0x58>

8008a948 <__lshift>:
8008a948:	defff904 	addi	sp,sp,-28
8008a94c:	dd400515 	stw	r21,20(sp)
8008a950:	dcc00315 	stw	r19,12(sp)
8008a954:	302bd17a 	srai	r21,r6,5
8008a958:	2cc00417 	ldw	r19,16(r5)
8008a95c:	28800217 	ldw	r2,8(r5)
8008a960:	dd000415 	stw	r20,16(sp)
8008a964:	ace7883a 	add	r19,r21,r19
8008a968:	dc800215 	stw	r18,8(sp)
8008a96c:	dc400115 	stw	r17,4(sp)
8008a970:	dc000015 	stw	r16,0(sp)
8008a974:	dfc00615 	stw	ra,24(sp)
8008a978:	9c000044 	addi	r16,r19,1
8008a97c:	2823883a 	mov	r17,r5
8008a980:	3029883a 	mov	r20,r6
8008a984:	2025883a 	mov	r18,r4
8008a988:	29400117 	ldw	r5,4(r5)
8008a98c:	1400030e 	bge	r2,r16,8008a99c <__lshift+0x54>
8008a990:	1085883a 	add	r2,r2,r2
8008a994:	29400044 	addi	r5,r5,1
8008a998:	143ffd16 	blt	r2,r16,8008a990 <__lshift+0x48>
8008a99c:	9009883a 	mov	r4,r18
8008a9a0:	008a1c80 	call	8008a1c8 <_Balloc>
8008a9a4:	10c00504 	addi	r3,r2,20
8008a9a8:	0540070e 	bge	zero,r21,8008a9c8 <__lshift+0x80>
8008a9ac:	ad6b883a 	add	r21,r21,r21
8008a9b0:	ad6b883a 	add	r21,r21,r21
8008a9b4:	1809883a 	mov	r4,r3
8008a9b8:	1d47883a 	add	r3,r3,r21
8008a9bc:	20000015 	stw	zero,0(r4)
8008a9c0:	21000104 	addi	r4,r4,4
8008a9c4:	193ffd1e 	bne	r3,r4,8008a9bc <__lshift+0x74>
8008a9c8:	8a000417 	ldw	r8,16(r17)
8008a9cc:	89000504 	addi	r4,r17,20
8008a9d0:	a18007cc 	andi	r6,r20,31
8008a9d4:	4211883a 	add	r8,r8,r8
8008a9d8:	4211883a 	add	r8,r8,r8
8008a9dc:	2211883a 	add	r8,r4,r8
8008a9e0:	30002326 	beq	r6,zero,8008aa70 <__lshift+0x128>
8008a9e4:	02400804 	movi	r9,32
8008a9e8:	4993c83a 	sub	r9,r9,r6
8008a9ec:	000b883a 	mov	r5,zero
8008a9f0:	21c00017 	ldw	r7,0(r4)
8008a9f4:	1815883a 	mov	r10,r3
8008a9f8:	18c00104 	addi	r3,r3,4
8008a9fc:	398e983a 	sll	r7,r7,r6
8008aa00:	21000104 	addi	r4,r4,4
8008aa04:	394ab03a 	or	r5,r7,r5
8008aa08:	197fff15 	stw	r5,-4(r3)
8008aa0c:	217fff17 	ldw	r5,-4(r4)
8008aa10:	2a4ad83a 	srl	r5,r5,r9
8008aa14:	223ff636 	bltu	r4,r8,8008a9f0 <__lshift+0xa8>
8008aa18:	51400115 	stw	r5,4(r10)
8008aa1c:	28001a1e 	bne	r5,zero,8008aa88 <__lshift+0x140>
8008aa20:	843fffc4 	addi	r16,r16,-1
8008aa24:	14000415 	stw	r16,16(r2)
8008aa28:	88000826 	beq	r17,zero,8008aa4c <__lshift+0x104>
8008aa2c:	89000117 	ldw	r4,4(r17)
8008aa30:	90c01317 	ldw	r3,76(r18)
8008aa34:	2109883a 	add	r4,r4,r4
8008aa38:	2109883a 	add	r4,r4,r4
8008aa3c:	1907883a 	add	r3,r3,r4
8008aa40:	19000017 	ldw	r4,0(r3)
8008aa44:	89000015 	stw	r4,0(r17)
8008aa48:	1c400015 	stw	r17,0(r3)
8008aa4c:	dfc00617 	ldw	ra,24(sp)
8008aa50:	dd400517 	ldw	r21,20(sp)
8008aa54:	dd000417 	ldw	r20,16(sp)
8008aa58:	dcc00317 	ldw	r19,12(sp)
8008aa5c:	dc800217 	ldw	r18,8(sp)
8008aa60:	dc400117 	ldw	r17,4(sp)
8008aa64:	dc000017 	ldw	r16,0(sp)
8008aa68:	dec00704 	addi	sp,sp,28
8008aa6c:	f800283a 	ret
8008aa70:	21400017 	ldw	r5,0(r4)
8008aa74:	18c00104 	addi	r3,r3,4
8008aa78:	21000104 	addi	r4,r4,4
8008aa7c:	197fff15 	stw	r5,-4(r3)
8008aa80:	223ffb36 	bltu	r4,r8,8008aa70 <__lshift+0x128>
8008aa84:	003fe606 	br	8008aa20 <__lshift+0xd8>
8008aa88:	9c000084 	addi	r16,r19,2
8008aa8c:	003fe406 	br	8008aa20 <__lshift+0xd8>

8008aa90 <__mcmp>:
8008aa90:	20800417 	ldw	r2,16(r4)
8008aa94:	28c00417 	ldw	r3,16(r5)
8008aa98:	10c5c83a 	sub	r2,r2,r3
8008aa9c:	1000111e 	bne	r2,zero,8008aae4 <__mcmp+0x54>
8008aaa0:	18c7883a 	add	r3,r3,r3
8008aaa4:	18c7883a 	add	r3,r3,r3
8008aaa8:	21000504 	addi	r4,r4,20
8008aaac:	29400504 	addi	r5,r5,20
8008aab0:	20c5883a 	add	r2,r4,r3
8008aab4:	28cb883a 	add	r5,r5,r3
8008aab8:	00000106 	br	8008aac0 <__mcmp+0x30>
8008aabc:	20800a2e 	bgeu	r4,r2,8008aae8 <__mcmp+0x58>
8008aac0:	10bfff04 	addi	r2,r2,-4
8008aac4:	297fff04 	addi	r5,r5,-4
8008aac8:	11800017 	ldw	r6,0(r2)
8008aacc:	28c00017 	ldw	r3,0(r5)
8008aad0:	30fffa26 	beq	r6,r3,8008aabc <__mcmp+0x2c>
8008aad4:	30c00236 	bltu	r6,r3,8008aae0 <__mcmp+0x50>
8008aad8:	00800044 	movi	r2,1
8008aadc:	f800283a 	ret
8008aae0:	00bfffc4 	movi	r2,-1
8008aae4:	f800283a 	ret
8008aae8:	0005883a 	mov	r2,zero
8008aaec:	f800283a 	ret

8008aaf0 <__mdiff>:
8008aaf0:	28c00417 	ldw	r3,16(r5)
8008aaf4:	30800417 	ldw	r2,16(r6)
8008aaf8:	defffa04 	addi	sp,sp,-24
8008aafc:	dcc00315 	stw	r19,12(sp)
8008ab00:	dc800215 	stw	r18,8(sp)
8008ab04:	dfc00515 	stw	ra,20(sp)
8008ab08:	dd000415 	stw	r20,16(sp)
8008ab0c:	dc400115 	stw	r17,4(sp)
8008ab10:	dc000015 	stw	r16,0(sp)
8008ab14:	1887c83a 	sub	r3,r3,r2
8008ab18:	2825883a 	mov	r18,r5
8008ab1c:	3027883a 	mov	r19,r6
8008ab20:	1800141e 	bne	r3,zero,8008ab74 <__mdiff+0x84>
8008ab24:	1085883a 	add	r2,r2,r2
8008ab28:	1085883a 	add	r2,r2,r2
8008ab2c:	2a000504 	addi	r8,r5,20
8008ab30:	34000504 	addi	r16,r6,20
8008ab34:	4087883a 	add	r3,r8,r2
8008ab38:	8085883a 	add	r2,r16,r2
8008ab3c:	00000106 	br	8008ab44 <__mdiff+0x54>
8008ab40:	40c0592e 	bgeu	r8,r3,8008aca8 <__mdiff+0x1b8>
8008ab44:	18ffff04 	addi	r3,r3,-4
8008ab48:	10bfff04 	addi	r2,r2,-4
8008ab4c:	19c00017 	ldw	r7,0(r3)
8008ab50:	11400017 	ldw	r5,0(r2)
8008ab54:	397ffa26 	beq	r7,r5,8008ab40 <__mdiff+0x50>
8008ab58:	3940592e 	bgeu	r7,r5,8008acc0 <__mdiff+0x1d0>
8008ab5c:	9005883a 	mov	r2,r18
8008ab60:	4023883a 	mov	r17,r8
8008ab64:	9825883a 	mov	r18,r19
8008ab68:	05000044 	movi	r20,1
8008ab6c:	1027883a 	mov	r19,r2
8008ab70:	00000406 	br	8008ab84 <__mdiff+0x94>
8008ab74:	18005616 	blt	r3,zero,8008acd0 <__mdiff+0x1e0>
8008ab78:	34400504 	addi	r17,r6,20
8008ab7c:	2c000504 	addi	r16,r5,20
8008ab80:	0029883a 	mov	r20,zero
8008ab84:	91400117 	ldw	r5,4(r18)
8008ab88:	008a1c80 	call	8008a1c8 <_Balloc>
8008ab8c:	92400417 	ldw	r9,16(r18)
8008ab90:	9b000417 	ldw	r12,16(r19)
8008ab94:	12c00504 	addi	r11,r2,20
8008ab98:	4a51883a 	add	r8,r9,r9
8008ab9c:	6319883a 	add	r12,r12,r12
8008aba0:	4211883a 	add	r8,r8,r8
8008aba4:	6319883a 	add	r12,r12,r12
8008aba8:	15000315 	stw	r20,12(r2)
8008abac:	8211883a 	add	r8,r16,r8
8008abb0:	8b19883a 	add	r12,r17,r12
8008abb4:	0007883a 	mov	r3,zero
8008abb8:	81400017 	ldw	r5,0(r16)
8008abbc:	89c00017 	ldw	r7,0(r17)
8008abc0:	59800104 	addi	r6,r11,4
8008abc4:	293fffcc 	andi	r4,r5,65535
8008abc8:	20c7883a 	add	r3,r4,r3
8008abcc:	393fffcc 	andi	r4,r7,65535
8008abd0:	1909c83a 	sub	r4,r3,r4
8008abd4:	280ad43a 	srli	r5,r5,16
8008abd8:	380ed43a 	srli	r7,r7,16
8008abdc:	2007d43a 	srai	r3,r4,16
8008abe0:	213fffcc 	andi	r4,r4,65535
8008abe4:	29cbc83a 	sub	r5,r5,r7
8008abe8:	28c7883a 	add	r3,r5,r3
8008abec:	180a943a 	slli	r5,r3,16
8008abf0:	8c400104 	addi	r17,r17,4
8008abf4:	84000104 	addi	r16,r16,4
8008abf8:	2908b03a 	or	r4,r5,r4
8008abfc:	59000015 	stw	r4,0(r11)
8008ac00:	1807d43a 	srai	r3,r3,16
8008ac04:	3015883a 	mov	r10,r6
8008ac08:	3017883a 	mov	r11,r6
8008ac0c:	8b3fea36 	bltu	r17,r12,8008abb8 <__mdiff+0xc8>
8008ac10:	8200162e 	bgeu	r16,r8,8008ac6c <__mdiff+0x17c>
8008ac14:	8017883a 	mov	r11,r16
8008ac18:	59400017 	ldw	r5,0(r11)
8008ac1c:	31800104 	addi	r6,r6,4
8008ac20:	5ac00104 	addi	r11,r11,4
8008ac24:	293fffcc 	andi	r4,r5,65535
8008ac28:	20c7883a 	add	r3,r4,r3
8008ac2c:	280ed43a 	srli	r7,r5,16
8008ac30:	180bd43a 	srai	r5,r3,16
8008ac34:	193fffcc 	andi	r4,r3,65535
8008ac38:	3947883a 	add	r3,r7,r5
8008ac3c:	180a943a 	slli	r5,r3,16
8008ac40:	1807d43a 	srai	r3,r3,16
8008ac44:	2908b03a 	or	r4,r5,r4
8008ac48:	313fff15 	stw	r4,-4(r6)
8008ac4c:	5a3ff236 	bltu	r11,r8,8008ac18 <__mdiff+0x128>
8008ac50:	0406303a 	nor	r3,zero,r16
8008ac54:	1a07883a 	add	r3,r3,r8
8008ac58:	1806d0ba 	srli	r3,r3,2
8008ac5c:	18c00044 	addi	r3,r3,1
8008ac60:	18c7883a 	add	r3,r3,r3
8008ac64:	18c7883a 	add	r3,r3,r3
8008ac68:	50d5883a 	add	r10,r10,r3
8008ac6c:	50ffff04 	addi	r3,r10,-4
8008ac70:	2000041e 	bne	r4,zero,8008ac84 <__mdiff+0x194>
8008ac74:	18ffff04 	addi	r3,r3,-4
8008ac78:	19000017 	ldw	r4,0(r3)
8008ac7c:	4a7fffc4 	addi	r9,r9,-1
8008ac80:	203ffc26 	beq	r4,zero,8008ac74 <__mdiff+0x184>
8008ac84:	12400415 	stw	r9,16(r2)
8008ac88:	dfc00517 	ldw	ra,20(sp)
8008ac8c:	dd000417 	ldw	r20,16(sp)
8008ac90:	dcc00317 	ldw	r19,12(sp)
8008ac94:	dc800217 	ldw	r18,8(sp)
8008ac98:	dc400117 	ldw	r17,4(sp)
8008ac9c:	dc000017 	ldw	r16,0(sp)
8008aca0:	dec00604 	addi	sp,sp,24
8008aca4:	f800283a 	ret
8008aca8:	000b883a 	mov	r5,zero
8008acac:	008a1c80 	call	8008a1c8 <_Balloc>
8008acb0:	00c00044 	movi	r3,1
8008acb4:	10c00415 	stw	r3,16(r2)
8008acb8:	10000515 	stw	zero,20(r2)
8008acbc:	003ff206 	br	8008ac88 <__mdiff+0x198>
8008acc0:	8023883a 	mov	r17,r16
8008acc4:	0029883a 	mov	r20,zero
8008acc8:	4021883a 	mov	r16,r8
8008accc:	003fad06 	br	8008ab84 <__mdiff+0x94>
8008acd0:	9005883a 	mov	r2,r18
8008acd4:	94400504 	addi	r17,r18,20
8008acd8:	9c000504 	addi	r16,r19,20
8008acdc:	9825883a 	mov	r18,r19
8008ace0:	05000044 	movi	r20,1
8008ace4:	1027883a 	mov	r19,r2
8008ace8:	003fa606 	br	8008ab84 <__mdiff+0x94>

8008acec <__ulp>:
8008acec:	295ffc2c 	andhi	r5,r5,32752
8008acf0:	00bf3034 	movhi	r2,64704
8008acf4:	2887883a 	add	r3,r5,r2
8008acf8:	00c0020e 	bge	zero,r3,8008ad04 <__ulp+0x18>
8008acfc:	0005883a 	mov	r2,zero
8008ad00:	f800283a 	ret
8008ad04:	00c7c83a 	sub	r3,zero,r3
8008ad08:	1807d53a 	srai	r3,r3,20
8008ad0c:	008004c4 	movi	r2,19
8008ad10:	10c00b0e 	bge	r2,r3,8008ad40 <__ulp+0x54>
8008ad14:	18bffb04 	addi	r2,r3,-20
8008ad18:	01000784 	movi	r4,30
8008ad1c:	0007883a 	mov	r3,zero
8008ad20:	20800516 	blt	r4,r2,8008ad38 <__ulp+0x4c>
8008ad24:	010007c4 	movi	r4,31
8008ad28:	2089c83a 	sub	r4,r4,r2
8008ad2c:	00800044 	movi	r2,1
8008ad30:	1104983a 	sll	r2,r2,r4
8008ad34:	f800283a 	ret
8008ad38:	00800044 	movi	r2,1
8008ad3c:	f800283a 	ret
8008ad40:	01400234 	movhi	r5,8
8008ad44:	28c7d83a 	sra	r3,r5,r3
8008ad48:	0005883a 	mov	r2,zero
8008ad4c:	f800283a 	ret

8008ad50 <__b2d>:
8008ad50:	defffa04 	addi	sp,sp,-24
8008ad54:	dc000015 	stw	r16,0(sp)
8008ad58:	24000417 	ldw	r16,16(r4)
8008ad5c:	dc400115 	stw	r17,4(sp)
8008ad60:	24400504 	addi	r17,r4,20
8008ad64:	8421883a 	add	r16,r16,r16
8008ad68:	8421883a 	add	r16,r16,r16
8008ad6c:	8c21883a 	add	r16,r17,r16
8008ad70:	dc800215 	stw	r18,8(sp)
8008ad74:	84bfff17 	ldw	r18,-4(r16)
8008ad78:	dd000415 	stw	r20,16(sp)
8008ad7c:	dcc00315 	stw	r19,12(sp)
8008ad80:	9009883a 	mov	r4,r18
8008ad84:	2829883a 	mov	r20,r5
8008ad88:	dfc00515 	stw	ra,20(sp)
8008ad8c:	008a4bc0 	call	8008a4bc <__hi0bits>
8008ad90:	00c00804 	movi	r3,32
8008ad94:	1889c83a 	sub	r4,r3,r2
8008ad98:	a1000015 	stw	r4,0(r20)
8008ad9c:	01000284 	movi	r4,10
8008ada0:	84ffff04 	addi	r19,r16,-4
8008ada4:	20801216 	blt	r4,r2,8008adf0 <__b2d+0xa0>
8008ada8:	018002c4 	movi	r6,11
8008adac:	308dc83a 	sub	r6,r6,r2
8008adb0:	9186d83a 	srl	r3,r18,r6
8008adb4:	18cffc34 	orhi	r3,r3,16368
8008adb8:	8cc0212e 	bgeu	r17,r19,8008ae40 <__b2d+0xf0>
8008adbc:	813ffe17 	ldw	r4,-8(r16)
8008adc0:	218cd83a 	srl	r6,r4,r6
8008adc4:	10800544 	addi	r2,r2,21
8008adc8:	9084983a 	sll	r2,r18,r2
8008adcc:	1184b03a 	or	r2,r2,r6
8008add0:	dfc00517 	ldw	ra,20(sp)
8008add4:	dd000417 	ldw	r20,16(sp)
8008add8:	dcc00317 	ldw	r19,12(sp)
8008addc:	dc800217 	ldw	r18,8(sp)
8008ade0:	dc400117 	ldw	r17,4(sp)
8008ade4:	dc000017 	ldw	r16,0(sp)
8008ade8:	dec00604 	addi	sp,sp,24
8008adec:	f800283a 	ret
8008adf0:	8cc00f2e 	bgeu	r17,r19,8008ae30 <__b2d+0xe0>
8008adf4:	117ffd44 	addi	r5,r2,-11
8008adf8:	80bffe17 	ldw	r2,-8(r16)
8008adfc:	28000e26 	beq	r5,zero,8008ae38 <__b2d+0xe8>
8008ae00:	1949c83a 	sub	r4,r3,r5
8008ae04:	9164983a 	sll	r18,r18,r5
8008ae08:	1106d83a 	srl	r3,r2,r4
8008ae0c:	81bffe04 	addi	r6,r16,-8
8008ae10:	948ffc34 	orhi	r18,r18,16368
8008ae14:	90c6b03a 	or	r3,r18,r3
8008ae18:	89800e2e 	bgeu	r17,r6,8008ae54 <__b2d+0x104>
8008ae1c:	81bffd17 	ldw	r6,-12(r16)
8008ae20:	1144983a 	sll	r2,r2,r5
8008ae24:	310ad83a 	srl	r5,r6,r4
8008ae28:	2884b03a 	or	r2,r5,r2
8008ae2c:	003fe806 	br	8008add0 <__b2d+0x80>
8008ae30:	10bffd44 	addi	r2,r2,-11
8008ae34:	1000041e 	bne	r2,zero,8008ae48 <__b2d+0xf8>
8008ae38:	90cffc34 	orhi	r3,r18,16368
8008ae3c:	003fe406 	br	8008add0 <__b2d+0x80>
8008ae40:	000d883a 	mov	r6,zero
8008ae44:	003fdf06 	br	8008adc4 <__b2d+0x74>
8008ae48:	90a4983a 	sll	r18,r18,r2
8008ae4c:	0005883a 	mov	r2,zero
8008ae50:	003ff906 	br	8008ae38 <__b2d+0xe8>
8008ae54:	1144983a 	sll	r2,r2,r5
8008ae58:	003fdd06 	br	8008add0 <__b2d+0x80>

8008ae5c <__d2b>:
8008ae5c:	defff804 	addi	sp,sp,-32
8008ae60:	dc000215 	stw	r16,8(sp)
8008ae64:	3021883a 	mov	r16,r6
8008ae68:	dc400315 	stw	r17,12(sp)
8008ae6c:	8022907a 	slli	r17,r16,1
8008ae70:	dd000615 	stw	r20,24(sp)
8008ae74:	2829883a 	mov	r20,r5
8008ae78:	01400044 	movi	r5,1
8008ae7c:	dcc00515 	stw	r19,20(sp)
8008ae80:	dc800415 	stw	r18,16(sp)
8008ae84:	dfc00715 	stw	ra,28(sp)
8008ae88:	3825883a 	mov	r18,r7
8008ae8c:	8822d57a 	srli	r17,r17,21
8008ae90:	008a1c80 	call	8008a1c8 <_Balloc>
8008ae94:	1027883a 	mov	r19,r2
8008ae98:	00800434 	movhi	r2,16
8008ae9c:	10bfffc4 	addi	r2,r2,-1
8008aea0:	808c703a 	and	r6,r16,r2
8008aea4:	88000126 	beq	r17,zero,8008aeac <__d2b+0x50>
8008aea8:	31800434 	orhi	r6,r6,16
8008aeac:	d9800015 	stw	r6,0(sp)
8008aeb0:	a0002426 	beq	r20,zero,8008af44 <__d2b+0xe8>
8008aeb4:	d9000104 	addi	r4,sp,4
8008aeb8:	dd000115 	stw	r20,4(sp)
8008aebc:	008a5240 	call	8008a524 <__lo0bits>
8008aec0:	d8c00017 	ldw	r3,0(sp)
8008aec4:	10002f1e 	bne	r2,zero,8008af84 <__d2b+0x128>
8008aec8:	d9000117 	ldw	r4,4(sp)
8008aecc:	99000515 	stw	r4,20(r19)
8008aed0:	1821003a 	cmpeq	r16,r3,zero
8008aed4:	01000084 	movi	r4,2
8008aed8:	2421c83a 	sub	r16,r4,r16
8008aedc:	98c00615 	stw	r3,24(r19)
8008aee0:	9c000415 	stw	r16,16(r19)
8008aee4:	88001f1e 	bne	r17,zero,8008af64 <__d2b+0x108>
8008aee8:	10bef384 	addi	r2,r2,-1074
8008aeec:	90800015 	stw	r2,0(r18)
8008aef0:	00900034 	movhi	r2,16384
8008aef4:	10bfffc4 	addi	r2,r2,-1
8008aef8:	8085883a 	add	r2,r16,r2
8008aefc:	1085883a 	add	r2,r2,r2
8008af00:	1085883a 	add	r2,r2,r2
8008af04:	9885883a 	add	r2,r19,r2
8008af08:	11000517 	ldw	r4,20(r2)
8008af0c:	8020917a 	slli	r16,r16,5
8008af10:	008a4bc0 	call	8008a4bc <__hi0bits>
8008af14:	d8c00817 	ldw	r3,32(sp)
8008af18:	8085c83a 	sub	r2,r16,r2
8008af1c:	18800015 	stw	r2,0(r3)
8008af20:	9805883a 	mov	r2,r19
8008af24:	dfc00717 	ldw	ra,28(sp)
8008af28:	dd000617 	ldw	r20,24(sp)
8008af2c:	dcc00517 	ldw	r19,20(sp)
8008af30:	dc800417 	ldw	r18,16(sp)
8008af34:	dc400317 	ldw	r17,12(sp)
8008af38:	dc000217 	ldw	r16,8(sp)
8008af3c:	dec00804 	addi	sp,sp,32
8008af40:	f800283a 	ret
8008af44:	d809883a 	mov	r4,sp
8008af48:	008a5240 	call	8008a524 <__lo0bits>
8008af4c:	d8c00017 	ldw	r3,0(sp)
8008af50:	04000044 	movi	r16,1
8008af54:	9c000415 	stw	r16,16(r19)
8008af58:	98c00515 	stw	r3,20(r19)
8008af5c:	10800804 	addi	r2,r2,32
8008af60:	883fe126 	beq	r17,zero,8008aee8 <__d2b+0x8c>
8008af64:	00c00d44 	movi	r3,53
8008af68:	8c7ef344 	addi	r17,r17,-1075
8008af6c:	88a3883a 	add	r17,r17,r2
8008af70:	1885c83a 	sub	r2,r3,r2
8008af74:	d8c00817 	ldw	r3,32(sp)
8008af78:	94400015 	stw	r17,0(r18)
8008af7c:	18800015 	stw	r2,0(r3)
8008af80:	003fe706 	br	8008af20 <__d2b+0xc4>
8008af84:	01000804 	movi	r4,32
8008af88:	2089c83a 	sub	r4,r4,r2
8008af8c:	1908983a 	sll	r4,r3,r4
8008af90:	d9400117 	ldw	r5,4(sp)
8008af94:	1886d83a 	srl	r3,r3,r2
8008af98:	2148b03a 	or	r4,r4,r5
8008af9c:	99000515 	stw	r4,20(r19)
8008afa0:	d8c00015 	stw	r3,0(sp)
8008afa4:	003fca06 	br	8008aed0 <__d2b+0x74>

8008afa8 <__ratio>:
8008afa8:	defff904 	addi	sp,sp,-28
8008afac:	dc400315 	stw	r17,12(sp)
8008afb0:	2823883a 	mov	r17,r5
8008afb4:	d9400104 	addi	r5,sp,4
8008afb8:	dfc00615 	stw	ra,24(sp)
8008afbc:	dcc00515 	stw	r19,20(sp)
8008afc0:	dc800415 	stw	r18,16(sp)
8008afc4:	2027883a 	mov	r19,r4
8008afc8:	dc000215 	stw	r16,8(sp)
8008afcc:	008ad500 	call	8008ad50 <__b2d>
8008afd0:	d80b883a 	mov	r5,sp
8008afd4:	8809883a 	mov	r4,r17
8008afd8:	1025883a 	mov	r18,r2
8008afdc:	1821883a 	mov	r16,r3
8008afe0:	008ad500 	call	8008ad50 <__b2d>
8008afe4:	8a000417 	ldw	r8,16(r17)
8008afe8:	99000417 	ldw	r4,16(r19)
8008afec:	d9400117 	ldw	r5,4(sp)
8008aff0:	2209c83a 	sub	r4,r4,r8
8008aff4:	2010917a 	slli	r8,r4,5
8008aff8:	d9000017 	ldw	r4,0(sp)
8008affc:	2909c83a 	sub	r4,r5,r4
8008b000:	4109883a 	add	r4,r8,r4
8008b004:	01000e0e 	bge	zero,r4,8008b040 <__ratio+0x98>
8008b008:	2008953a 	slli	r4,r4,20
8008b00c:	2421883a 	add	r16,r4,r16
8008b010:	100d883a 	mov	r6,r2
8008b014:	180f883a 	mov	r7,r3
8008b018:	9009883a 	mov	r4,r18
8008b01c:	800b883a 	mov	r5,r16
8008b020:	0096ba80 	call	80096ba8 <__divdf3>
8008b024:	dfc00617 	ldw	ra,24(sp)
8008b028:	dcc00517 	ldw	r19,20(sp)
8008b02c:	dc800417 	ldw	r18,16(sp)
8008b030:	dc400317 	ldw	r17,12(sp)
8008b034:	dc000217 	ldw	r16,8(sp)
8008b038:	dec00704 	addi	sp,sp,28
8008b03c:	f800283a 	ret
8008b040:	2008953a 	slli	r4,r4,20
8008b044:	1907c83a 	sub	r3,r3,r4
8008b048:	003ff106 	br	8008b010 <__ratio+0x68>

8008b04c <_mprec_log10>:
8008b04c:	defffe04 	addi	sp,sp,-8
8008b050:	dc000015 	stw	r16,0(sp)
8008b054:	dfc00115 	stw	ra,4(sp)
8008b058:	008005c4 	movi	r2,23
8008b05c:	2021883a 	mov	r16,r4
8008b060:	11000d0e 	bge	r2,r4,8008b098 <_mprec_log10+0x4c>
8008b064:	0005883a 	mov	r2,zero
8008b068:	00cffc34 	movhi	r3,16368
8008b06c:	843fffc4 	addi	r16,r16,-1
8008b070:	000d883a 	mov	r6,zero
8008b074:	01d00934 	movhi	r7,16420
8008b078:	1009883a 	mov	r4,r2
8008b07c:	180b883a 	mov	r5,r3
8008b080:	00976e80 	call	800976e8 <__muldf3>
8008b084:	803ff91e 	bne	r16,zero,8008b06c <_mprec_log10+0x20>
8008b088:	dfc00117 	ldw	ra,4(sp)
8008b08c:	dc000017 	ldw	r16,0(sp)
8008b090:	dec00204 	addi	sp,sp,8
8008b094:	f800283a 	ret
8008b098:	202090fa 	slli	r16,r4,3
8008b09c:	00a002b4 	movhi	r2,32778
8008b0a0:	10b19204 	addi	r2,r2,-14776
8008b0a4:	1421883a 	add	r16,r2,r16
8008b0a8:	80800017 	ldw	r2,0(r16)
8008b0ac:	80c00117 	ldw	r3,4(r16)
8008b0b0:	dfc00117 	ldw	ra,4(sp)
8008b0b4:	dc000017 	ldw	r16,0(sp)
8008b0b8:	dec00204 	addi	sp,sp,8
8008b0bc:	f800283a 	ret

8008b0c0 <__copybits>:
8008b0c0:	297fffc4 	addi	r5,r5,-1
8008b0c4:	280fd17a 	srai	r7,r5,5
8008b0c8:	30c00417 	ldw	r3,16(r6)
8008b0cc:	30800504 	addi	r2,r6,20
8008b0d0:	39c00044 	addi	r7,r7,1
8008b0d4:	18c7883a 	add	r3,r3,r3
8008b0d8:	39cf883a 	add	r7,r7,r7
8008b0dc:	18c7883a 	add	r3,r3,r3
8008b0e0:	39cf883a 	add	r7,r7,r7
8008b0e4:	10c7883a 	add	r3,r2,r3
8008b0e8:	21cf883a 	add	r7,r4,r7
8008b0ec:	10c00d2e 	bgeu	r2,r3,8008b124 <__copybits+0x64>
8008b0f0:	200b883a 	mov	r5,r4
8008b0f4:	12000017 	ldw	r8,0(r2)
8008b0f8:	29400104 	addi	r5,r5,4
8008b0fc:	10800104 	addi	r2,r2,4
8008b100:	2a3fff15 	stw	r8,-4(r5)
8008b104:	10fffb36 	bltu	r2,r3,8008b0f4 <__copybits+0x34>
8008b108:	1985c83a 	sub	r2,r3,r6
8008b10c:	10bffac4 	addi	r2,r2,-21
8008b110:	1004d0ba 	srli	r2,r2,2
8008b114:	10800044 	addi	r2,r2,1
8008b118:	1085883a 	add	r2,r2,r2
8008b11c:	1085883a 	add	r2,r2,r2
8008b120:	2089883a 	add	r4,r4,r2
8008b124:	21c0032e 	bgeu	r4,r7,8008b134 <__copybits+0x74>
8008b128:	20000015 	stw	zero,0(r4)
8008b12c:	21000104 	addi	r4,r4,4
8008b130:	21fffd36 	bltu	r4,r7,8008b128 <__copybits+0x68>
8008b134:	f800283a 	ret

8008b138 <__any_on>:
8008b138:	20c00417 	ldw	r3,16(r4)
8008b13c:	2805d17a 	srai	r2,r5,5
8008b140:	21000504 	addi	r4,r4,20
8008b144:	18800d0e 	bge	r3,r2,8008b17c <__any_on+0x44>
8008b148:	18c7883a 	add	r3,r3,r3
8008b14c:	18c7883a 	add	r3,r3,r3
8008b150:	20c7883a 	add	r3,r4,r3
8008b154:	20c0192e 	bgeu	r4,r3,8008b1bc <__any_on+0x84>
8008b158:	18bfff17 	ldw	r2,-4(r3)
8008b15c:	18ffff04 	addi	r3,r3,-4
8008b160:	1000041e 	bne	r2,zero,8008b174 <__any_on+0x3c>
8008b164:	20c0142e 	bgeu	r4,r3,8008b1b8 <__any_on+0x80>
8008b168:	18ffff04 	addi	r3,r3,-4
8008b16c:	19400017 	ldw	r5,0(r3)
8008b170:	283ffc26 	beq	r5,zero,8008b164 <__any_on+0x2c>
8008b174:	00800044 	movi	r2,1
8008b178:	f800283a 	ret
8008b17c:	10c00a0e 	bge	r2,r3,8008b1a8 <__any_on+0x70>
8008b180:	1085883a 	add	r2,r2,r2
8008b184:	1085883a 	add	r2,r2,r2
8008b188:	294007cc 	andi	r5,r5,31
8008b18c:	2087883a 	add	r3,r4,r2
8008b190:	283ff026 	beq	r5,zero,8008b154 <__any_on+0x1c>
8008b194:	19800017 	ldw	r6,0(r3)
8008b198:	3144d83a 	srl	r2,r6,r5
8008b19c:	114a983a 	sll	r5,r2,r5
8008b1a0:	317ff41e 	bne	r6,r5,8008b174 <__any_on+0x3c>
8008b1a4:	003feb06 	br	8008b154 <__any_on+0x1c>
8008b1a8:	1085883a 	add	r2,r2,r2
8008b1ac:	1085883a 	add	r2,r2,r2
8008b1b0:	2087883a 	add	r3,r4,r2
8008b1b4:	003fe706 	br	8008b154 <__any_on+0x1c>
8008b1b8:	f800283a 	ret
8008b1bc:	0005883a 	mov	r2,zero
8008b1c0:	f800283a 	ret

8008b1c4 <_putc_r>:
8008b1c4:	defffc04 	addi	sp,sp,-16
8008b1c8:	dc000215 	stw	r16,8(sp)
8008b1cc:	dfc00315 	stw	ra,12(sp)
8008b1d0:	2021883a 	mov	r16,r4
8008b1d4:	20000226 	beq	r4,zero,8008b1e0 <_putc_r+0x1c>
8008b1d8:	20800e17 	ldw	r2,56(r4)
8008b1dc:	10001b26 	beq	r2,zero,8008b24c <_putc_r+0x88>
8008b1e0:	30800217 	ldw	r2,8(r6)
8008b1e4:	10bfffc4 	addi	r2,r2,-1
8008b1e8:	30800215 	stw	r2,8(r6)
8008b1ec:	10000a16 	blt	r2,zero,8008b218 <_putc_r+0x54>
8008b1f0:	30800017 	ldw	r2,0(r6)
8008b1f4:	11400005 	stb	r5,0(r2)
8008b1f8:	30800017 	ldw	r2,0(r6)
8008b1fc:	10c00044 	addi	r3,r2,1
8008b200:	30c00015 	stw	r3,0(r6)
8008b204:	10800003 	ldbu	r2,0(r2)
8008b208:	dfc00317 	ldw	ra,12(sp)
8008b20c:	dc000217 	ldw	r16,8(sp)
8008b210:	dec00404 	addi	sp,sp,16
8008b214:	f800283a 	ret
8008b218:	30c00617 	ldw	r3,24(r6)
8008b21c:	10c00616 	blt	r2,r3,8008b238 <_putc_r+0x74>
8008b220:	30800017 	ldw	r2,0(r6)
8008b224:	00c00284 	movi	r3,10
8008b228:	11400005 	stb	r5,0(r2)
8008b22c:	30800017 	ldw	r2,0(r6)
8008b230:	11400003 	ldbu	r5,0(r2)
8008b234:	28fff11e 	bne	r5,r3,8008b1fc <_putc_r+0x38>
8008b238:	8009883a 	mov	r4,r16
8008b23c:	dfc00317 	ldw	ra,12(sp)
8008b240:	dc000217 	ldw	r16,8(sp)
8008b244:	dec00404 	addi	sp,sp,16
8008b248:	0092db41 	jmpi	80092db4 <__swbuf_r>
8008b24c:	d9400015 	stw	r5,0(sp)
8008b250:	d9800115 	stw	r6,4(sp)
8008b254:	0088e4c0 	call	80088e4c <__sinit>
8008b258:	d9800117 	ldw	r6,4(sp)
8008b25c:	d9400017 	ldw	r5,0(sp)
8008b260:	003fdf06 	br	8008b1e0 <_putc_r+0x1c>

8008b264 <putc>:
8008b264:	00a002b4 	movhi	r2,32778
8008b268:	defffc04 	addi	sp,sp,-16
8008b26c:	10ba7304 	addi	r2,r2,-5684
8008b270:	dc000115 	stw	r16,4(sp)
8008b274:	14000017 	ldw	r16,0(r2)
8008b278:	dc400215 	stw	r17,8(sp)
8008b27c:	dfc00315 	stw	ra,12(sp)
8008b280:	2023883a 	mov	r17,r4
8008b284:	80000226 	beq	r16,zero,8008b290 <putc+0x2c>
8008b288:	80800e17 	ldw	r2,56(r16)
8008b28c:	10001a26 	beq	r2,zero,8008b2f8 <putc+0x94>
8008b290:	28800217 	ldw	r2,8(r5)
8008b294:	10bfffc4 	addi	r2,r2,-1
8008b298:	28800215 	stw	r2,8(r5)
8008b29c:	10000b16 	blt	r2,zero,8008b2cc <putc+0x68>
8008b2a0:	28800017 	ldw	r2,0(r5)
8008b2a4:	14400005 	stb	r17,0(r2)
8008b2a8:	28800017 	ldw	r2,0(r5)
8008b2ac:	10c00044 	addi	r3,r2,1
8008b2b0:	28c00015 	stw	r3,0(r5)
8008b2b4:	10800003 	ldbu	r2,0(r2)
8008b2b8:	dfc00317 	ldw	ra,12(sp)
8008b2bc:	dc400217 	ldw	r17,8(sp)
8008b2c0:	dc000117 	ldw	r16,4(sp)
8008b2c4:	dec00404 	addi	sp,sp,16
8008b2c8:	f800283a 	ret
8008b2cc:	28c00617 	ldw	r3,24(r5)
8008b2d0:	10c00e16 	blt	r2,r3,8008b30c <putc+0xa8>
8008b2d4:	28800017 	ldw	r2,0(r5)
8008b2d8:	01000284 	movi	r4,10
8008b2dc:	14400005 	stb	r17,0(r2)
8008b2e0:	28800017 	ldw	r2,0(r5)
8008b2e4:	10c00003 	ldbu	r3,0(r2)
8008b2e8:	193ff01e 	bne	r3,r4,8008b2ac <putc+0x48>
8008b2ec:	280d883a 	mov	r6,r5
8008b2f0:	180b883a 	mov	r5,r3
8008b2f4:	00000706 	br	8008b314 <putc+0xb0>
8008b2f8:	8009883a 	mov	r4,r16
8008b2fc:	d9400015 	stw	r5,0(sp)
8008b300:	0088e4c0 	call	80088e4c <__sinit>
8008b304:	d9400017 	ldw	r5,0(sp)
8008b308:	003fe106 	br	8008b290 <putc+0x2c>
8008b30c:	280d883a 	mov	r6,r5
8008b310:	880b883a 	mov	r5,r17
8008b314:	8009883a 	mov	r4,r16
8008b318:	dfc00317 	ldw	ra,12(sp)
8008b31c:	dc400217 	ldw	r17,8(sp)
8008b320:	dc000117 	ldw	r16,4(sp)
8008b324:	dec00404 	addi	sp,sp,16
8008b328:	0092db41 	jmpi	80092db4 <__swbuf_r>

8008b32c <_read_r>:
8008b32c:	defffd04 	addi	sp,sp,-12
8008b330:	2805883a 	mov	r2,r5
8008b334:	dc000015 	stw	r16,0(sp)
8008b338:	042002b4 	movhi	r16,32778
8008b33c:	dc400115 	stw	r17,4(sp)
8008b340:	300b883a 	mov	r5,r6
8008b344:	8401de04 	addi	r16,r16,1912
8008b348:	2023883a 	mov	r17,r4
8008b34c:	380d883a 	mov	r6,r7
8008b350:	1009883a 	mov	r4,r2
8008b354:	dfc00215 	stw	ra,8(sp)
8008b358:	80000015 	stw	zero,0(r16)
8008b35c:	0098ee00 	call	80098ee0 <read>
8008b360:	00ffffc4 	movi	r3,-1
8008b364:	10c00526 	beq	r2,r3,8008b37c <_read_r+0x50>
8008b368:	dfc00217 	ldw	ra,8(sp)
8008b36c:	dc400117 	ldw	r17,4(sp)
8008b370:	dc000017 	ldw	r16,0(sp)
8008b374:	dec00304 	addi	sp,sp,12
8008b378:	f800283a 	ret
8008b37c:	80c00017 	ldw	r3,0(r16)
8008b380:	183ff926 	beq	r3,zero,8008b368 <_read_r+0x3c>
8008b384:	88c00015 	stw	r3,0(r17)
8008b388:	003ff706 	br	8008b368 <_read_r+0x3c>

8008b38c <_realloc_r>:
8008b38c:	defff604 	addi	sp,sp,-40
8008b390:	dc800215 	stw	r18,8(sp)
8008b394:	dfc00915 	stw	ra,36(sp)
8008b398:	df000815 	stw	fp,32(sp)
8008b39c:	ddc00715 	stw	r23,28(sp)
8008b3a0:	dd800615 	stw	r22,24(sp)
8008b3a4:	dd400515 	stw	r21,20(sp)
8008b3a8:	dd000415 	stw	r20,16(sp)
8008b3ac:	dcc00315 	stw	r19,12(sp)
8008b3b0:	dc400115 	stw	r17,4(sp)
8008b3b4:	dc000015 	stw	r16,0(sp)
8008b3b8:	3025883a 	mov	r18,r6
8008b3bc:	2800b726 	beq	r5,zero,8008b69c <_realloc_r+0x310>
8008b3c0:	282b883a 	mov	r21,r5
8008b3c4:	2029883a 	mov	r20,r4
8008b3c8:	0098ed80 	call	80098ed8 <__malloc_lock>
8008b3cc:	a8bfff17 	ldw	r2,-4(r21)
8008b3d0:	043fff04 	movi	r16,-4
8008b3d4:	90c002c4 	addi	r3,r18,11
8008b3d8:	01000584 	movi	r4,22
8008b3dc:	acfffe04 	addi	r19,r21,-8
8008b3e0:	1420703a 	and	r16,r2,r16
8008b3e4:	20c0332e 	bgeu	r4,r3,8008b4b4 <_realloc_r+0x128>
8008b3e8:	047ffe04 	movi	r17,-8
8008b3ec:	1c62703a 	and	r17,r3,r17
8008b3f0:	8807883a 	mov	r3,r17
8008b3f4:	88005816 	blt	r17,zero,8008b558 <_realloc_r+0x1cc>
8008b3f8:	8c805736 	bltu	r17,r18,8008b558 <_realloc_r+0x1cc>
8008b3fc:	80c0300e 	bge	r16,r3,8008b4c0 <_realloc_r+0x134>
8008b400:	072002b4 	movhi	fp,32778
8008b404:	e7344004 	addi	fp,fp,-12032
8008b408:	e1c00217 	ldw	r7,8(fp)
8008b40c:	9c09883a 	add	r4,r19,r16
8008b410:	22000117 	ldw	r8,4(r4)
8008b414:	21c06326 	beq	r4,r7,8008b5a4 <_realloc_r+0x218>
8008b418:	017fff84 	movi	r5,-2
8008b41c:	414a703a 	and	r5,r8,r5
8008b420:	214b883a 	add	r5,r4,r5
8008b424:	29800117 	ldw	r6,4(r5)
8008b428:	3180004c 	andi	r6,r6,1
8008b42c:	30003f26 	beq	r6,zero,8008b52c <_realloc_r+0x1a0>
8008b430:	1080004c 	andi	r2,r2,1
8008b434:	10008326 	beq	r2,zero,8008b644 <_realloc_r+0x2b8>
8008b438:	900b883a 	mov	r5,r18
8008b43c:	a009883a 	mov	r4,r20
8008b440:	00824640 	call	80082464 <_malloc_r>
8008b444:	1025883a 	mov	r18,r2
8008b448:	10011e26 	beq	r2,zero,8008b8c4 <_realloc_r+0x538>
8008b44c:	a93fff17 	ldw	r4,-4(r21)
8008b450:	10fffe04 	addi	r3,r2,-8
8008b454:	00bfff84 	movi	r2,-2
8008b458:	2084703a 	and	r2,r4,r2
8008b45c:	9885883a 	add	r2,r19,r2
8008b460:	1880ee26 	beq	r3,r2,8008b81c <_realloc_r+0x490>
8008b464:	81bfff04 	addi	r6,r16,-4
8008b468:	00800904 	movi	r2,36
8008b46c:	1180b836 	bltu	r2,r6,8008b750 <_realloc_r+0x3c4>
8008b470:	00c004c4 	movi	r3,19
8008b474:	19809636 	bltu	r3,r6,8008b6d0 <_realloc_r+0x344>
8008b478:	9005883a 	mov	r2,r18
8008b47c:	a807883a 	mov	r3,r21
8008b480:	19000017 	ldw	r4,0(r3)
8008b484:	11000015 	stw	r4,0(r2)
8008b488:	19000117 	ldw	r4,4(r3)
8008b48c:	11000115 	stw	r4,4(r2)
8008b490:	18c00217 	ldw	r3,8(r3)
8008b494:	10c00215 	stw	r3,8(r2)
8008b498:	a80b883a 	mov	r5,r21
8008b49c:	a009883a 	mov	r4,r20
8008b4a0:	0088fc00 	call	80088fc0 <_free_r>
8008b4a4:	a009883a 	mov	r4,r20
8008b4a8:	0098edc0 	call	80098edc <__malloc_unlock>
8008b4ac:	9005883a 	mov	r2,r18
8008b4b0:	00001206 	br	8008b4fc <_realloc_r+0x170>
8008b4b4:	00c00404 	movi	r3,16
8008b4b8:	1823883a 	mov	r17,r3
8008b4bc:	003fce06 	br	8008b3f8 <_realloc_r+0x6c>
8008b4c0:	a825883a 	mov	r18,r21
8008b4c4:	8445c83a 	sub	r2,r16,r17
8008b4c8:	00c003c4 	movi	r3,15
8008b4cc:	18802636 	bltu	r3,r2,8008b568 <_realloc_r+0x1dc>
8008b4d0:	99800117 	ldw	r6,4(r19)
8008b4d4:	9c07883a 	add	r3,r19,r16
8008b4d8:	3180004c 	andi	r6,r6,1
8008b4dc:	3420b03a 	or	r16,r6,r16
8008b4e0:	9c000115 	stw	r16,4(r19)
8008b4e4:	18800117 	ldw	r2,4(r3)
8008b4e8:	10800054 	ori	r2,r2,1
8008b4ec:	18800115 	stw	r2,4(r3)
8008b4f0:	a009883a 	mov	r4,r20
8008b4f4:	0098edc0 	call	80098edc <__malloc_unlock>
8008b4f8:	9005883a 	mov	r2,r18
8008b4fc:	dfc00917 	ldw	ra,36(sp)
8008b500:	df000817 	ldw	fp,32(sp)
8008b504:	ddc00717 	ldw	r23,28(sp)
8008b508:	dd800617 	ldw	r22,24(sp)
8008b50c:	dd400517 	ldw	r21,20(sp)
8008b510:	dd000417 	ldw	r20,16(sp)
8008b514:	dcc00317 	ldw	r19,12(sp)
8008b518:	dc800217 	ldw	r18,8(sp)
8008b51c:	dc400117 	ldw	r17,4(sp)
8008b520:	dc000017 	ldw	r16,0(sp)
8008b524:	dec00a04 	addi	sp,sp,40
8008b528:	f800283a 	ret
8008b52c:	017fff04 	movi	r5,-4
8008b530:	414a703a 	and	r5,r8,r5
8008b534:	814d883a 	add	r6,r16,r5
8008b538:	30c01f16 	blt	r6,r3,8008b5b8 <_realloc_r+0x22c>
8008b53c:	20800317 	ldw	r2,12(r4)
8008b540:	20c00217 	ldw	r3,8(r4)
8008b544:	a825883a 	mov	r18,r21
8008b548:	3021883a 	mov	r16,r6
8008b54c:	18800315 	stw	r2,12(r3)
8008b550:	10c00215 	stw	r3,8(r2)
8008b554:	003fdb06 	br	8008b4c4 <_realloc_r+0x138>
8008b558:	00800304 	movi	r2,12
8008b55c:	a0800015 	stw	r2,0(r20)
8008b560:	0005883a 	mov	r2,zero
8008b564:	003fe506 	br	8008b4fc <_realloc_r+0x170>
8008b568:	98c00117 	ldw	r3,4(r19)
8008b56c:	9c4b883a 	add	r5,r19,r17
8008b570:	11000054 	ori	r4,r2,1
8008b574:	18c0004c 	andi	r3,r3,1
8008b578:	1c62b03a 	or	r17,r3,r17
8008b57c:	9c400115 	stw	r17,4(r19)
8008b580:	29000115 	stw	r4,4(r5)
8008b584:	2885883a 	add	r2,r5,r2
8008b588:	10c00117 	ldw	r3,4(r2)
8008b58c:	29400204 	addi	r5,r5,8
8008b590:	a009883a 	mov	r4,r20
8008b594:	18c00054 	ori	r3,r3,1
8008b598:	10c00115 	stw	r3,4(r2)
8008b59c:	0088fc00 	call	80088fc0 <_free_r>
8008b5a0:	003fd306 	br	8008b4f0 <_realloc_r+0x164>
8008b5a4:	017fff04 	movi	r5,-4
8008b5a8:	414a703a 	and	r5,r8,r5
8008b5ac:	89800404 	addi	r6,r17,16
8008b5b0:	8151883a 	add	r8,r16,r5
8008b5b4:	4180590e 	bge	r8,r6,8008b71c <_realloc_r+0x390>
8008b5b8:	1080004c 	andi	r2,r2,1
8008b5bc:	103f9e1e 	bne	r2,zero,8008b438 <_realloc_r+0xac>
8008b5c0:	adbffe17 	ldw	r22,-8(r21)
8008b5c4:	00bfff04 	movi	r2,-4
8008b5c8:	9dadc83a 	sub	r22,r19,r22
8008b5cc:	b1800117 	ldw	r6,4(r22)
8008b5d0:	3084703a 	and	r2,r6,r2
8008b5d4:	20002026 	beq	r4,zero,8008b658 <_realloc_r+0x2cc>
8008b5d8:	80af883a 	add	r23,r16,r2
8008b5dc:	b96f883a 	add	r23,r23,r5
8008b5e0:	21c05f26 	beq	r4,r7,8008b760 <_realloc_r+0x3d4>
8008b5e4:	b8c01c16 	blt	r23,r3,8008b658 <_realloc_r+0x2cc>
8008b5e8:	20800317 	ldw	r2,12(r4)
8008b5ec:	20c00217 	ldw	r3,8(r4)
8008b5f0:	81bfff04 	addi	r6,r16,-4
8008b5f4:	01000904 	movi	r4,36
8008b5f8:	18800315 	stw	r2,12(r3)
8008b5fc:	10c00215 	stw	r3,8(r2)
8008b600:	b0c00217 	ldw	r3,8(r22)
8008b604:	b0800317 	ldw	r2,12(r22)
8008b608:	b4800204 	addi	r18,r22,8
8008b60c:	18800315 	stw	r2,12(r3)
8008b610:	10c00215 	stw	r3,8(r2)
8008b614:	21801b36 	bltu	r4,r6,8008b684 <_realloc_r+0x2f8>
8008b618:	008004c4 	movi	r2,19
8008b61c:	1180352e 	bgeu	r2,r6,8008b6f4 <_realloc_r+0x368>
8008b620:	a8800017 	ldw	r2,0(r21)
8008b624:	b0800215 	stw	r2,8(r22)
8008b628:	a8800117 	ldw	r2,4(r21)
8008b62c:	b0800315 	stw	r2,12(r22)
8008b630:	008006c4 	movi	r2,27
8008b634:	11807f36 	bltu	r2,r6,8008b834 <_realloc_r+0x4a8>
8008b638:	b0800404 	addi	r2,r22,16
8008b63c:	ad400204 	addi	r21,r21,8
8008b640:	00002d06 	br	8008b6f8 <_realloc_r+0x36c>
8008b644:	adbffe17 	ldw	r22,-8(r21)
8008b648:	00bfff04 	movi	r2,-4
8008b64c:	9dadc83a 	sub	r22,r19,r22
8008b650:	b1000117 	ldw	r4,4(r22)
8008b654:	2084703a 	and	r2,r4,r2
8008b658:	b03f7726 	beq	r22,zero,8008b438 <_realloc_r+0xac>
8008b65c:	80af883a 	add	r23,r16,r2
8008b660:	b8ff7516 	blt	r23,r3,8008b438 <_realloc_r+0xac>
8008b664:	b0800317 	ldw	r2,12(r22)
8008b668:	b0c00217 	ldw	r3,8(r22)
8008b66c:	81bfff04 	addi	r6,r16,-4
8008b670:	01000904 	movi	r4,36
8008b674:	18800315 	stw	r2,12(r3)
8008b678:	10c00215 	stw	r3,8(r2)
8008b67c:	b4800204 	addi	r18,r22,8
8008b680:	21bfe52e 	bgeu	r4,r6,8008b618 <_realloc_r+0x28c>
8008b684:	a80b883a 	mov	r5,r21
8008b688:	9009883a 	mov	r4,r18
8008b68c:	0089f440 	call	80089f44 <memmove>
8008b690:	b821883a 	mov	r16,r23
8008b694:	b027883a 	mov	r19,r22
8008b698:	003f8a06 	br	8008b4c4 <_realloc_r+0x138>
8008b69c:	300b883a 	mov	r5,r6
8008b6a0:	dfc00917 	ldw	ra,36(sp)
8008b6a4:	df000817 	ldw	fp,32(sp)
8008b6a8:	ddc00717 	ldw	r23,28(sp)
8008b6ac:	dd800617 	ldw	r22,24(sp)
8008b6b0:	dd400517 	ldw	r21,20(sp)
8008b6b4:	dd000417 	ldw	r20,16(sp)
8008b6b8:	dcc00317 	ldw	r19,12(sp)
8008b6bc:	dc800217 	ldw	r18,8(sp)
8008b6c0:	dc400117 	ldw	r17,4(sp)
8008b6c4:	dc000017 	ldw	r16,0(sp)
8008b6c8:	dec00a04 	addi	sp,sp,40
8008b6cc:	00824641 	jmpi	80082464 <_malloc_r>
8008b6d0:	a8c00017 	ldw	r3,0(r21)
8008b6d4:	90c00015 	stw	r3,0(r18)
8008b6d8:	a8c00117 	ldw	r3,4(r21)
8008b6dc:	90c00115 	stw	r3,4(r18)
8008b6e0:	00c006c4 	movi	r3,27
8008b6e4:	19804536 	bltu	r3,r6,8008b7fc <_realloc_r+0x470>
8008b6e8:	90800204 	addi	r2,r18,8
8008b6ec:	a8c00204 	addi	r3,r21,8
8008b6f0:	003f6306 	br	8008b480 <_realloc_r+0xf4>
8008b6f4:	9005883a 	mov	r2,r18
8008b6f8:	a8c00017 	ldw	r3,0(r21)
8008b6fc:	b821883a 	mov	r16,r23
8008b700:	b027883a 	mov	r19,r22
8008b704:	10c00015 	stw	r3,0(r2)
8008b708:	a8c00117 	ldw	r3,4(r21)
8008b70c:	10c00115 	stw	r3,4(r2)
8008b710:	a8c00217 	ldw	r3,8(r21)
8008b714:	10c00215 	stw	r3,8(r2)
8008b718:	003f6a06 	br	8008b4c4 <_realloc_r+0x138>
8008b71c:	9c67883a 	add	r19,r19,r17
8008b720:	4445c83a 	sub	r2,r8,r17
8008b724:	e4c00215 	stw	r19,8(fp)
8008b728:	10800054 	ori	r2,r2,1
8008b72c:	98800115 	stw	r2,4(r19)
8008b730:	a8bfff17 	ldw	r2,-4(r21)
8008b734:	a009883a 	mov	r4,r20
8008b738:	1080004c 	andi	r2,r2,1
8008b73c:	1462b03a 	or	r17,r2,r17
8008b740:	ac7fff15 	stw	r17,-4(r21)
8008b744:	0098edc0 	call	80098edc <__malloc_unlock>
8008b748:	a805883a 	mov	r2,r21
8008b74c:	003f6b06 	br	8008b4fc <_realloc_r+0x170>
8008b750:	a80b883a 	mov	r5,r21
8008b754:	9009883a 	mov	r4,r18
8008b758:	0089f440 	call	80089f44 <memmove>
8008b75c:	003f4e06 	br	8008b498 <_realloc_r+0x10c>
8008b760:	89000404 	addi	r4,r17,16
8008b764:	b93fbc16 	blt	r23,r4,8008b658 <_realloc_r+0x2cc>
8008b768:	b0800317 	ldw	r2,12(r22)
8008b76c:	b0c00217 	ldw	r3,8(r22)
8008b770:	81bfff04 	addi	r6,r16,-4
8008b774:	01000904 	movi	r4,36
8008b778:	18800315 	stw	r2,12(r3)
8008b77c:	10c00215 	stw	r3,8(r2)
8008b780:	b4800204 	addi	r18,r22,8
8008b784:	21804336 	bltu	r4,r6,8008b894 <_realloc_r+0x508>
8008b788:	008004c4 	movi	r2,19
8008b78c:	11803f2e 	bgeu	r2,r6,8008b88c <_realloc_r+0x500>
8008b790:	a8800017 	ldw	r2,0(r21)
8008b794:	b0800215 	stw	r2,8(r22)
8008b798:	a8800117 	ldw	r2,4(r21)
8008b79c:	b0800315 	stw	r2,12(r22)
8008b7a0:	008006c4 	movi	r2,27
8008b7a4:	11803f36 	bltu	r2,r6,8008b8a4 <_realloc_r+0x518>
8008b7a8:	b0800404 	addi	r2,r22,16
8008b7ac:	ad400204 	addi	r21,r21,8
8008b7b0:	a8c00017 	ldw	r3,0(r21)
8008b7b4:	10c00015 	stw	r3,0(r2)
8008b7b8:	a8c00117 	ldw	r3,4(r21)
8008b7bc:	10c00115 	stw	r3,4(r2)
8008b7c0:	a8c00217 	ldw	r3,8(r21)
8008b7c4:	10c00215 	stw	r3,8(r2)
8008b7c8:	b447883a 	add	r3,r22,r17
8008b7cc:	bc45c83a 	sub	r2,r23,r17
8008b7d0:	e0c00215 	stw	r3,8(fp)
8008b7d4:	10800054 	ori	r2,r2,1
8008b7d8:	18800115 	stw	r2,4(r3)
8008b7dc:	b0800117 	ldw	r2,4(r22)
8008b7e0:	a009883a 	mov	r4,r20
8008b7e4:	1080004c 	andi	r2,r2,1
8008b7e8:	1462b03a 	or	r17,r2,r17
8008b7ec:	b4400115 	stw	r17,4(r22)
8008b7f0:	0098edc0 	call	80098edc <__malloc_unlock>
8008b7f4:	9005883a 	mov	r2,r18
8008b7f8:	003f4006 	br	8008b4fc <_realloc_r+0x170>
8008b7fc:	a8c00217 	ldw	r3,8(r21)
8008b800:	90c00215 	stw	r3,8(r18)
8008b804:	a8c00317 	ldw	r3,12(r21)
8008b808:	90c00315 	stw	r3,12(r18)
8008b80c:	30801126 	beq	r6,r2,8008b854 <_realloc_r+0x4c8>
8008b810:	90800404 	addi	r2,r18,16
8008b814:	a8c00404 	addi	r3,r21,16
8008b818:	003f1906 	br	8008b480 <_realloc_r+0xf4>
8008b81c:	90ffff17 	ldw	r3,-4(r18)
8008b820:	00bfff04 	movi	r2,-4
8008b824:	a825883a 	mov	r18,r21
8008b828:	1884703a 	and	r2,r3,r2
8008b82c:	80a1883a 	add	r16,r16,r2
8008b830:	003f2406 	br	8008b4c4 <_realloc_r+0x138>
8008b834:	a8800217 	ldw	r2,8(r21)
8008b838:	b0800415 	stw	r2,16(r22)
8008b83c:	a8800317 	ldw	r2,12(r21)
8008b840:	b0800515 	stw	r2,20(r22)
8008b844:	31000a26 	beq	r6,r4,8008b870 <_realloc_r+0x4e4>
8008b848:	b0800604 	addi	r2,r22,24
8008b84c:	ad400404 	addi	r21,r21,16
8008b850:	003fa906 	br	8008b6f8 <_realloc_r+0x36c>
8008b854:	a9000417 	ldw	r4,16(r21)
8008b858:	90800604 	addi	r2,r18,24
8008b85c:	a8c00604 	addi	r3,r21,24
8008b860:	91000415 	stw	r4,16(r18)
8008b864:	a9000517 	ldw	r4,20(r21)
8008b868:	91000515 	stw	r4,20(r18)
8008b86c:	003f0406 	br	8008b480 <_realloc_r+0xf4>
8008b870:	a8c00417 	ldw	r3,16(r21)
8008b874:	ad400604 	addi	r21,r21,24
8008b878:	b0800804 	addi	r2,r22,32
8008b87c:	b0c00615 	stw	r3,24(r22)
8008b880:	a8ffff17 	ldw	r3,-4(r21)
8008b884:	b0c00715 	stw	r3,28(r22)
8008b888:	003f9b06 	br	8008b6f8 <_realloc_r+0x36c>
8008b88c:	9005883a 	mov	r2,r18
8008b890:	003fc706 	br	8008b7b0 <_realloc_r+0x424>
8008b894:	a80b883a 	mov	r5,r21
8008b898:	9009883a 	mov	r4,r18
8008b89c:	0089f440 	call	80089f44 <memmove>
8008b8a0:	003fc906 	br	8008b7c8 <_realloc_r+0x43c>
8008b8a4:	a8800217 	ldw	r2,8(r21)
8008b8a8:	b0800415 	stw	r2,16(r22)
8008b8ac:	a8800317 	ldw	r2,12(r21)
8008b8b0:	b0800515 	stw	r2,20(r22)
8008b8b4:	31000726 	beq	r6,r4,8008b8d4 <_realloc_r+0x548>
8008b8b8:	b0800604 	addi	r2,r22,24
8008b8bc:	ad400404 	addi	r21,r21,16
8008b8c0:	003fbb06 	br	8008b7b0 <_realloc_r+0x424>
8008b8c4:	a009883a 	mov	r4,r20
8008b8c8:	0098edc0 	call	80098edc <__malloc_unlock>
8008b8cc:	0005883a 	mov	r2,zero
8008b8d0:	003f0a06 	br	8008b4fc <_realloc_r+0x170>
8008b8d4:	a8c00417 	ldw	r3,16(r21)
8008b8d8:	ad400604 	addi	r21,r21,24
8008b8dc:	b0800804 	addi	r2,r22,32
8008b8e0:	b0c00615 	stw	r3,24(r22)
8008b8e4:	a8ffff17 	ldw	r3,-4(r21)
8008b8e8:	b0c00715 	stw	r3,28(r22)
8008b8ec:	003fb006 	br	8008b7b0 <_realloc_r+0x424>

8008b8f0 <lflush>:
8008b8f0:	2080030b 	ldhu	r2,12(r4)
8008b8f4:	00c00244 	movi	r3,9
8008b8f8:	1080024c 	andi	r2,r2,9
8008b8fc:	10c00226 	beq	r2,r3,8008b908 <lflush+0x18>
8008b900:	0005883a 	mov	r2,zero
8008b904:	f800283a 	ret
8008b908:	0088acc1 	jmpi	80088acc <fflush>

8008b90c <__srefill_r>:
8008b90c:	defffc04 	addi	sp,sp,-16
8008b910:	dc400115 	stw	r17,4(sp)
8008b914:	dc000015 	stw	r16,0(sp)
8008b918:	dfc00315 	stw	ra,12(sp)
8008b91c:	dc800215 	stw	r18,8(sp)
8008b920:	2023883a 	mov	r17,r4
8008b924:	2821883a 	mov	r16,r5
8008b928:	20000226 	beq	r4,zero,8008b934 <__srefill_r+0x28>
8008b92c:	20800e17 	ldw	r2,56(r4)
8008b930:	10003c26 	beq	r2,zero,8008ba24 <__srefill_r+0x118>
8008b934:	80c0030b 	ldhu	r3,12(r16)
8008b938:	1908000c 	andi	r4,r3,8192
8008b93c:	1805883a 	mov	r2,r3
8008b940:	2000071e 	bne	r4,zero,8008b960 <__srefill_r+0x54>
8008b944:	81001917 	ldw	r4,100(r16)
8008b948:	18880014 	ori	r2,r3,8192
8008b94c:	00f7ffc4 	movi	r3,-8193
8008b950:	20c8703a 	and	r4,r4,r3
8008b954:	8080030d 	sth	r2,12(r16)
8008b958:	1007883a 	mov	r3,r2
8008b95c:	81001915 	stw	r4,100(r16)
8008b960:	80000115 	stw	zero,4(r16)
8008b964:	1100080c 	andi	r4,r2,32
8008b968:	2000571e 	bne	r4,zero,8008bac8 <__srefill_r+0x1bc>
8008b96c:	1100010c 	andi	r4,r2,4
8008b970:	20001f26 	beq	r4,zero,8008b9f0 <__srefill_r+0xe4>
8008b974:	81400c17 	ldw	r5,48(r16)
8008b978:	28000826 	beq	r5,zero,8008b99c <__srefill_r+0x90>
8008b97c:	80801004 	addi	r2,r16,64
8008b980:	28800226 	beq	r5,r2,8008b98c <__srefill_r+0x80>
8008b984:	8809883a 	mov	r4,r17
8008b988:	0088fc00 	call	80088fc0 <_free_r>
8008b98c:	80800f17 	ldw	r2,60(r16)
8008b990:	80000c15 	stw	zero,48(r16)
8008b994:	80800115 	stw	r2,4(r16)
8008b998:	1000391e 	bne	r2,zero,8008ba80 <__srefill_r+0x174>
8008b99c:	80800417 	ldw	r2,16(r16)
8008b9a0:	10004b26 	beq	r2,zero,8008bad0 <__srefill_r+0x1c4>
8008b9a4:	8480030b 	ldhu	r18,12(r16)
8008b9a8:	908000cc 	andi	r2,r18,3
8008b9ac:	10001f1e 	bne	r2,zero,8008ba2c <__srefill_r+0x120>
8008b9b0:	81800417 	ldw	r6,16(r16)
8008b9b4:	80800817 	ldw	r2,32(r16)
8008b9b8:	81c00517 	ldw	r7,20(r16)
8008b9bc:	81400717 	ldw	r5,28(r16)
8008b9c0:	81800015 	stw	r6,0(r16)
8008b9c4:	8809883a 	mov	r4,r17
8008b9c8:	103ee83a 	callr	r2
8008b9cc:	80800115 	stw	r2,4(r16)
8008b9d0:	00800e0e 	bge	zero,r2,8008ba0c <__srefill_r+0x100>
8008b9d4:	0005883a 	mov	r2,zero
8008b9d8:	dfc00317 	ldw	ra,12(sp)
8008b9dc:	dc800217 	ldw	r18,8(sp)
8008b9e0:	dc400117 	ldw	r17,4(sp)
8008b9e4:	dc000017 	ldw	r16,0(sp)
8008b9e8:	dec00404 	addi	sp,sp,16
8008b9ec:	f800283a 	ret
8008b9f0:	1100040c 	andi	r4,r2,16
8008b9f4:	20003026 	beq	r4,zero,8008bab8 <__srefill_r+0x1ac>
8008b9f8:	1080020c 	andi	r2,r2,8
8008b9fc:	1000241e 	bne	r2,zero,8008ba90 <__srefill_r+0x184>
8008ba00:	18c00114 	ori	r3,r3,4
8008ba04:	80c0030d 	sth	r3,12(r16)
8008ba08:	003fe406 	br	8008b99c <__srefill_r+0x90>
8008ba0c:	80c0030b 	ldhu	r3,12(r16)
8008ba10:	1000161e 	bne	r2,zero,8008ba6c <__srefill_r+0x160>
8008ba14:	18c00814 	ori	r3,r3,32
8008ba18:	00bfffc4 	movi	r2,-1
8008ba1c:	80c0030d 	sth	r3,12(r16)
8008ba20:	003fed06 	br	8008b9d8 <__srefill_r+0xcc>
8008ba24:	0088e4c0 	call	80088e4c <__sinit>
8008ba28:	003fc206 	br	8008b934 <__srefill_r+0x28>
8008ba2c:	00a002b4 	movhi	r2,32778
8008ba30:	10ba7204 	addi	r2,r2,-5688
8008ba34:	11000017 	ldw	r4,0(r2)
8008ba38:	01600274 	movhi	r5,32777
8008ba3c:	00800044 	movi	r2,1
8008ba40:	296e3c04 	addi	r5,r5,-18192
8008ba44:	8080030d 	sth	r2,12(r16)
8008ba48:	008978c0 	call	8008978c <_fwalk>
8008ba4c:	00800244 	movi	r2,9
8008ba50:	8480030d 	sth	r18,12(r16)
8008ba54:	9480024c 	andi	r18,r18,9
8008ba58:	90bfd51e 	bne	r18,r2,8008b9b0 <__srefill_r+0xa4>
8008ba5c:	800b883a 	mov	r5,r16
8008ba60:	8809883a 	mov	r4,r17
8008ba64:	00888540 	call	80088854 <__sflush_r>
8008ba68:	003fd106 	br	8008b9b0 <__srefill_r+0xa4>
8008ba6c:	18c01014 	ori	r3,r3,64
8008ba70:	80000115 	stw	zero,4(r16)
8008ba74:	00bfffc4 	movi	r2,-1
8008ba78:	80c0030d 	sth	r3,12(r16)
8008ba7c:	003fd606 	br	8008b9d8 <__srefill_r+0xcc>
8008ba80:	80c00e17 	ldw	r3,56(r16)
8008ba84:	0005883a 	mov	r2,zero
8008ba88:	80c00015 	stw	r3,0(r16)
8008ba8c:	003fd206 	br	8008b9d8 <__srefill_r+0xcc>
8008ba90:	800b883a 	mov	r5,r16
8008ba94:	8809883a 	mov	r4,r17
8008ba98:	0088a700 	call	80088a70 <_fflush_r>
8008ba9c:	10000a1e 	bne	r2,zero,8008bac8 <__srefill_r+0x1bc>
8008baa0:	8080030b 	ldhu	r2,12(r16)
8008baa4:	00fffdc4 	movi	r3,-9
8008baa8:	80000215 	stw	zero,8(r16)
8008baac:	1886703a 	and	r3,r3,r2
8008bab0:	80000615 	stw	zero,24(r16)
8008bab4:	003fd206 	br	8008ba00 <__srefill_r+0xf4>
8008bab8:	00800244 	movi	r2,9
8008babc:	88800015 	stw	r2,0(r17)
8008bac0:	18c01014 	ori	r3,r3,64
8008bac4:	80c0030d 	sth	r3,12(r16)
8008bac8:	00bfffc4 	movi	r2,-1
8008bacc:	003fc206 	br	8008b9d8 <__srefill_r+0xcc>
8008bad0:	800b883a 	mov	r5,r16
8008bad4:	8809883a 	mov	r4,r17
8008bad8:	0089a800 	call	80089a80 <__smakebuf_r>
8008badc:	003fb106 	br	8008b9a4 <__srefill_r+0x98>

8008bae0 <__fpclassifyd>:
8008bae0:	00a00034 	movhi	r2,32768
8008bae4:	10bfffc4 	addi	r2,r2,-1
8008bae8:	2884703a 	and	r2,r5,r2
8008baec:	10000726 	beq	r2,zero,8008bb0c <__fpclassifyd+0x2c>
8008baf0:	00fffc34 	movhi	r3,65520
8008baf4:	019ff834 	movhi	r6,32736
8008baf8:	28c7883a 	add	r3,r5,r3
8008bafc:	31bfffc4 	addi	r6,r6,-1
8008bb00:	30c00536 	bltu	r6,r3,8008bb18 <__fpclassifyd+0x38>
8008bb04:	00800104 	movi	r2,4
8008bb08:	f800283a 	ret
8008bb0c:	2000021e 	bne	r4,zero,8008bb18 <__fpclassifyd+0x38>
8008bb10:	00800084 	movi	r2,2
8008bb14:	f800283a 	ret
8008bb18:	00dffc34 	movhi	r3,32752
8008bb1c:	019ff834 	movhi	r6,32736
8008bb20:	28cb883a 	add	r5,r5,r3
8008bb24:	31bfffc4 	addi	r6,r6,-1
8008bb28:	317ff62e 	bgeu	r6,r5,8008bb04 <__fpclassifyd+0x24>
8008bb2c:	01400434 	movhi	r5,16
8008bb30:	297fffc4 	addi	r5,r5,-1
8008bb34:	28800236 	bltu	r5,r2,8008bb40 <__fpclassifyd+0x60>
8008bb38:	008000c4 	movi	r2,3
8008bb3c:	f800283a 	ret
8008bb40:	10c00226 	beq	r2,r3,8008bb4c <__fpclassifyd+0x6c>
8008bb44:	0005883a 	mov	r2,zero
8008bb48:	f800283a 	ret
8008bb4c:	2005003a 	cmpeq	r2,r4,zero
8008bb50:	f800283a 	ret

8008bb54 <__sccl>:
8008bb54:	2a000003 	ldbu	r8,0(r5)
8008bb58:	00801784 	movi	r2,94
8008bb5c:	40802a26 	beq	r8,r2,8008bc08 <__sccl+0xb4>
8008bb60:	29400044 	addi	r5,r5,1
8008bb64:	000f883a 	mov	r7,zero
8008bb68:	0013883a 	mov	r9,zero
8008bb6c:	2007883a 	mov	r3,r4
8008bb70:	21804004 	addi	r6,r4,256
8008bb74:	19c00005 	stb	r7,0(r3)
8008bb78:	18c00044 	addi	r3,r3,1
8008bb7c:	19bffd1e 	bne	r3,r6,8008bb74 <__sccl+0x20>
8008bb80:	40001126 	beq	r8,zero,8008bbc8 <__sccl+0x74>
8008bb84:	00800044 	movi	r2,1
8008bb88:	124fc83a 	sub	r7,r2,r9
8008bb8c:	02800b44 	movi	r10,45
8008bb90:	02c01744 	movi	r11,93
8008bb94:	2205883a 	add	r2,r4,r8
8008bb98:	11c00005 	stb	r7,0(r2)
8008bb9c:	28800044 	addi	r2,r5,1
8008bba0:	28c00003 	ldbu	r3,0(r5)
8008bba4:	1a800a26 	beq	r3,r10,8008bbd0 <__sccl+0x7c>
8008bba8:	1ac00426 	beq	r3,r11,8008bbbc <__sccl+0x68>
8008bbac:	18000426 	beq	r3,zero,8008bbc0 <__sccl+0x6c>
8008bbb0:	1811883a 	mov	r8,r3
8008bbb4:	100b883a 	mov	r5,r2
8008bbb8:	003ff606 	br	8008bb94 <__sccl+0x40>
8008bbbc:	f800283a 	ret
8008bbc0:	2805883a 	mov	r2,r5
8008bbc4:	f800283a 	ret
8008bbc8:	28bfffc4 	addi	r2,r5,-1
8008bbcc:	f800283a 	ret
8008bbd0:	12400003 	ldbu	r9,0(r2)
8008bbd4:	4ac01126 	beq	r9,r11,8008bc1c <__sccl+0xc8>
8008bbd8:	4a001016 	blt	r9,r8,8008bc1c <__sccl+0xc8>
8008bbdc:	41800044 	addi	r6,r8,1
8008bbe0:	29400084 	addi	r5,r5,2
8008bbe4:	2187883a 	add	r3,r4,r6
8008bbe8:	00000106 	br	8008bbf0 <__sccl+0x9c>
8008bbec:	31800044 	addi	r6,r6,1
8008bbf0:	19c00005 	stb	r7,0(r3)
8008bbf4:	3011883a 	mov	r8,r6
8008bbf8:	18c00044 	addi	r3,r3,1
8008bbfc:	327ffb16 	blt	r6,r9,8008bbec <__sccl+0x98>
8008bc00:	10800084 	addi	r2,r2,2
8008bc04:	003fe606 	br	8008bba0 <__sccl+0x4c>
8008bc08:	2a000043 	ldbu	r8,1(r5)
8008bc0c:	01c00044 	movi	r7,1
8008bc10:	29400084 	addi	r5,r5,2
8008bc14:	02400044 	movi	r9,1
8008bc18:	003fd406 	br	8008bb6c <__sccl+0x18>
8008bc1c:	5011883a 	mov	r8,r10
8008bc20:	003fe406 	br	8008bbb4 <__sccl+0x60>

8008bc24 <nanf>:
8008bc24:	009ff034 	movhi	r2,32704
8008bc28:	f800283a 	ret

8008bc2c <_sprintf_r>:
8008bc2c:	deffe404 	addi	sp,sp,-112
8008bc30:	2807883a 	mov	r3,r5
8008bc34:	dfc01a15 	stw	ra,104(sp)
8008bc38:	d9c01b15 	stw	r7,108(sp)
8008bc3c:	00a00034 	movhi	r2,32768
8008bc40:	10bfffc4 	addi	r2,r2,-1
8008bc44:	02008204 	movi	r8,520
8008bc48:	d8800215 	stw	r2,8(sp)
8008bc4c:	d8800515 	stw	r2,20(sp)
8008bc50:	d9c01b04 	addi	r7,sp,108
8008bc54:	d80b883a 	mov	r5,sp
8008bc58:	00bfffc4 	movi	r2,-1
8008bc5c:	d8c00015 	stw	r3,0(sp)
8008bc60:	d8c00415 	stw	r3,16(sp)
8008bc64:	da00030d 	sth	r8,12(sp)
8008bc68:	d880038d 	sth	r2,14(sp)
8008bc6c:	008f3140 	call	8008f314 <___svfprintf_internal_r>
8008bc70:	d8c00017 	ldw	r3,0(sp)
8008bc74:	18000005 	stb	zero,0(r3)
8008bc78:	dfc01a17 	ldw	ra,104(sp)
8008bc7c:	dec01c04 	addi	sp,sp,112
8008bc80:	f800283a 	ret

8008bc84 <sprintf>:
8008bc84:	deffe304 	addi	sp,sp,-116
8008bc88:	2007883a 	mov	r3,r4
8008bc8c:	dfc01a15 	stw	ra,104(sp)
8008bc90:	d9801b15 	stw	r6,108(sp)
8008bc94:	d9c01c15 	stw	r7,112(sp)
8008bc98:	012002b4 	movhi	r4,32778
8008bc9c:	213a7304 	addi	r4,r4,-5684
8008bca0:	21000017 	ldw	r4,0(r4)
8008bca4:	00a00034 	movhi	r2,32768
8008bca8:	10bfffc4 	addi	r2,r2,-1
8008bcac:	280d883a 	mov	r6,r5
8008bcb0:	02008204 	movi	r8,520
8008bcb4:	d8800215 	stw	r2,8(sp)
8008bcb8:	d8800515 	stw	r2,20(sp)
8008bcbc:	d9c01b04 	addi	r7,sp,108
8008bcc0:	d80b883a 	mov	r5,sp
8008bcc4:	00bfffc4 	movi	r2,-1
8008bcc8:	d8c00015 	stw	r3,0(sp)
8008bccc:	d8c00415 	stw	r3,16(sp)
8008bcd0:	da00030d 	sth	r8,12(sp)
8008bcd4:	d880038d 	sth	r2,14(sp)
8008bcd8:	008f3140 	call	8008f314 <___svfprintf_internal_r>
8008bcdc:	d8c00017 	ldw	r3,0(sp)
8008bce0:	18000005 	stb	zero,0(r3)
8008bce4:	dfc01a17 	ldw	ra,104(sp)
8008bce8:	dec01d04 	addi	sp,sp,116
8008bcec:	f800283a 	ret

8008bcf0 <strcmp>:
8008bcf0:	2144b03a 	or	r2,r4,r5
8008bcf4:	108000cc 	andi	r2,r2,3
8008bcf8:	1000171e 	bne	r2,zero,8008bd58 <strcmp+0x68>
8008bcfc:	20800017 	ldw	r2,0(r4)
8008bd00:	28c00017 	ldw	r3,0(r5)
8008bd04:	10c0141e 	bne	r2,r3,8008bd58 <strcmp+0x68>
8008bd08:	027fbff4 	movhi	r9,65279
8008bd0c:	4a7fbfc4 	addi	r9,r9,-257
8008bd10:	0086303a 	nor	r3,zero,r2
8008bd14:	02202074 	movhi	r8,32897
8008bd18:	1245883a 	add	r2,r2,r9
8008bd1c:	42202004 	addi	r8,r8,-32640
8008bd20:	10c4703a 	and	r2,r2,r3
8008bd24:	1204703a 	and	r2,r2,r8
8008bd28:	10000226 	beq	r2,zero,8008bd34 <strcmp+0x44>
8008bd2c:	00002306 	br	8008bdbc <strcmp+0xcc>
8008bd30:	1000221e 	bne	r2,zero,8008bdbc <strcmp+0xcc>
8008bd34:	21000104 	addi	r4,r4,4
8008bd38:	20c00017 	ldw	r3,0(r4)
8008bd3c:	29400104 	addi	r5,r5,4
8008bd40:	29800017 	ldw	r6,0(r5)
8008bd44:	1a4f883a 	add	r7,r3,r9
8008bd48:	00c4303a 	nor	r2,zero,r3
8008bd4c:	3884703a 	and	r2,r7,r2
8008bd50:	1204703a 	and	r2,r2,r8
8008bd54:	19bff626 	beq	r3,r6,8008bd30 <strcmp+0x40>
8008bd58:	20800003 	ldbu	r2,0(r4)
8008bd5c:	10c03fcc 	andi	r3,r2,255
8008bd60:	18c0201c 	xori	r3,r3,128
8008bd64:	18ffe004 	addi	r3,r3,-128
8008bd68:	18000c26 	beq	r3,zero,8008bd9c <strcmp+0xac>
8008bd6c:	29800007 	ldb	r6,0(r5)
8008bd70:	19800326 	beq	r3,r6,8008bd80 <strcmp+0x90>
8008bd74:	00001306 	br	8008bdc4 <strcmp+0xd4>
8008bd78:	29800007 	ldb	r6,0(r5)
8008bd7c:	11800b1e 	bne	r2,r6,8008bdac <strcmp+0xbc>
8008bd80:	21000044 	addi	r4,r4,1
8008bd84:	20c00003 	ldbu	r3,0(r4)
8008bd88:	29400044 	addi	r5,r5,1
8008bd8c:	18803fcc 	andi	r2,r3,255
8008bd90:	1080201c 	xori	r2,r2,128
8008bd94:	10bfe004 	addi	r2,r2,-128
8008bd98:	103ff71e 	bne	r2,zero,8008bd78 <strcmp+0x88>
8008bd9c:	0007883a 	mov	r3,zero
8008bda0:	28800003 	ldbu	r2,0(r5)
8008bda4:	1885c83a 	sub	r2,r3,r2
8008bda8:	f800283a 	ret
8008bdac:	28800003 	ldbu	r2,0(r5)
8008bdb0:	18c03fcc 	andi	r3,r3,255
8008bdb4:	1885c83a 	sub	r2,r3,r2
8008bdb8:	f800283a 	ret
8008bdbc:	0005883a 	mov	r2,zero
8008bdc0:	f800283a 	ret
8008bdc4:	10c03fcc 	andi	r3,r2,255
8008bdc8:	003ff506 	br	8008bda0 <strcmp+0xb0>

8008bdcc <sulp>:
8008bdcc:	defffd04 	addi	sp,sp,-12
8008bdd0:	dc400115 	stw	r17,4(sp)
8008bdd4:	3023883a 	mov	r17,r6
8008bdd8:	dc000015 	stw	r16,0(sp)
8008bddc:	dfc00215 	stw	ra,8(sp)
8008bde0:	2821883a 	mov	r16,r5
8008bde4:	008acec0 	call	8008acec <__ulp>
8008bde8:	88000c26 	beq	r17,zero,8008be1c <sulp+0x50>
8008bdec:	841ffc2c 	andhi	r16,r16,32752
8008bdf0:	8020d53a 	srli	r16,r16,20
8008bdf4:	01c01ac4 	movi	r7,107
8008bdf8:	3c21c83a 	sub	r16,r7,r16
8008bdfc:	0400070e 	bge	zero,r16,8008be1c <sulp+0x50>
8008be00:	8020953a 	slli	r16,r16,20
8008be04:	01cffc34 	movhi	r7,16368
8008be08:	000d883a 	mov	r6,zero
8008be0c:	81cf883a 	add	r7,r16,r7
8008be10:	1009883a 	mov	r4,r2
8008be14:	180b883a 	mov	r5,r3
8008be18:	00976e80 	call	800976e8 <__muldf3>
8008be1c:	dfc00217 	ldw	ra,8(sp)
8008be20:	dc400117 	ldw	r17,4(sp)
8008be24:	dc000017 	ldw	r16,0(sp)
8008be28:	dec00304 	addi	sp,sp,12
8008be2c:	f800283a 	ret

8008be30 <_strtod_r>:
8008be30:	deffe204 	addi	sp,sp,-120
8008be34:	ddc01b15 	stw	r23,108(sp)
8008be38:	dd001815 	stw	r20,96(sp)
8008be3c:	dc801615 	stw	r18,88(sp)
8008be40:	dc401515 	stw	r17,84(sp)
8008be44:	dc001415 	stw	r16,80(sp)
8008be48:	d9400615 	stw	r5,24(sp)
8008be4c:	dfc01d15 	stw	ra,116(sp)
8008be50:	df001c15 	stw	fp,112(sp)
8008be54:	dd801a15 	stw	r22,104(sp)
8008be58:	dd401915 	stw	r21,100(sp)
8008be5c:	dcc01715 	stw	r19,92(sp)
8008be60:	2021883a 	mov	r16,r4
8008be64:	d8000515 	stw	zero,20(sp)
8008be68:	2809883a 	mov	r4,r5
8008be6c:	20800003 	ldbu	r2,0(r4)
8008be70:	01e00274 	movhi	r7,32777
8008be74:	282f883a 	mov	r23,r5
8008be78:	10c03fcc 	andi	r3,r2,255
8008be7c:	01400b44 	movi	r5,45
8008be80:	39efa904 	addi	r7,r7,-16732
8008be84:	3029883a 	mov	r20,r6
8008be88:	0025883a 	mov	r18,zero
8008be8c:	0023883a 	mov	r17,zero
8008be90:	28c0ba36 	bltu	r5,r3,8008c17c <_strtod_r+0x34c>
8008be94:	180690ba 	slli	r3,r3,2
8008be98:	19c7883a 	add	r3,r3,r7
8008be9c:	18c00017 	ldw	r3,0(r3)
8008bea0:	1800683a 	jmp	r3
8008bea4:	8008bf64 	muli	zero,r16,8957
8008bea8:	8008c17c 	xorhi	zero,r16,8965
8008beac:	8008c17c 	xorhi	zero,r16,8965
8008beb0:	8008c17c 	xorhi	zero,r16,8965
8008beb4:	8008c17c 	xorhi	zero,r16,8965
8008beb8:	8008c17c 	xorhi	zero,r16,8965
8008bebc:	8008c17c 	xorhi	zero,r16,8965
8008bec0:	8008c17c 	xorhi	zero,r16,8965
8008bec4:	8008c17c 	xorhi	zero,r16,8965
8008bec8:	8008c168 	cmpgeui	zero,r16,8965
8008becc:	8008c168 	cmpgeui	zero,r16,8965
8008bed0:	8008c168 	cmpgeui	zero,r16,8965
8008bed4:	8008c168 	cmpgeui	zero,r16,8965
8008bed8:	8008c168 	cmpgeui	zero,r16,8965
8008bedc:	8008c17c 	xorhi	zero,r16,8965
8008bee0:	8008c17c 	xorhi	zero,r16,8965
8008bee4:	8008c17c 	xorhi	zero,r16,8965
8008bee8:	8008c17c 	xorhi	zero,r16,8965
8008beec:	8008c17c 	xorhi	zero,r16,8965
8008bef0:	8008c17c 	xorhi	zero,r16,8965
8008bef4:	8008c17c 	xorhi	zero,r16,8965
8008bef8:	8008c17c 	xorhi	zero,r16,8965
8008befc:	8008c17c 	xorhi	zero,r16,8965
8008bf00:	8008c17c 	xorhi	zero,r16,8965
8008bf04:	8008c17c 	xorhi	zero,r16,8965
8008bf08:	8008c17c 	xorhi	zero,r16,8965
8008bf0c:	8008c17c 	xorhi	zero,r16,8965
8008bf10:	8008c17c 	xorhi	zero,r16,8965
8008bf14:	8008c17c 	xorhi	zero,r16,8965
8008bf18:	8008c17c 	xorhi	zero,r16,8965
8008bf1c:	8008c17c 	xorhi	zero,r16,8965
8008bf20:	8008c17c 	xorhi	zero,r16,8965
8008bf24:	8008c168 	cmpgeui	zero,r16,8965
8008bf28:	8008c17c 	xorhi	zero,r16,8965
8008bf2c:	8008c17c 	xorhi	zero,r16,8965
8008bf30:	8008c17c 	xorhi	zero,r16,8965
8008bf34:	8008c17c 	xorhi	zero,r16,8965
8008bf38:	8008c17c 	xorhi	zero,r16,8965
8008bf3c:	8008c17c 	xorhi	zero,r16,8965
8008bf40:	8008c17c 	xorhi	zero,r16,8965
8008bf44:	8008c17c 	xorhi	zero,r16,8965
8008bf48:	8008c17c 	xorhi	zero,r16,8965
8008bf4c:	8008c17c 	xorhi	zero,r16,8965
8008bf50:	8008bfbc 	xorhi	zero,r16,8958
8008bf54:	8008c17c 	xorhi	zero,r16,8965
8008bf58:	8008c15c 	xori	zero,r16,8965
8008bf5c:	00801244 	movi	r2,73
8008bf60:	88843526 	beq	r17,r2,8008d038 <_strtod_r+0x1208>
8008bf64:	002b883a 	mov	r21,zero
8008bf68:	002d883a 	mov	r22,zero
8008bf6c:	a0000526 	beq	r20,zero,8008bf84 <_strtod_r+0x154>
8008bf70:	d8000715 	stw	zero,28(sp)
8008bf74:	a5c00015 	stw	r23,0(r20)
8008bf78:	d9000717 	ldw	r4,28(sp)
8008bf7c:	20000126 	beq	r4,zero,8008bf84 <_strtod_r+0x154>
8008bf80:	b5a0003c 	xorhi	r22,r22,32768
8008bf84:	a805883a 	mov	r2,r21
8008bf88:	b007883a 	mov	r3,r22
8008bf8c:	dfc01d17 	ldw	ra,116(sp)
8008bf90:	df001c17 	ldw	fp,112(sp)
8008bf94:	ddc01b17 	ldw	r23,108(sp)
8008bf98:	dd801a17 	ldw	r22,104(sp)
8008bf9c:	dd401917 	ldw	r21,100(sp)
8008bfa0:	dd001817 	ldw	r20,96(sp)
8008bfa4:	dcc01717 	ldw	r19,92(sp)
8008bfa8:	dc801617 	ldw	r18,88(sp)
8008bfac:	dc401517 	ldw	r17,84(sp)
8008bfb0:	dc001417 	ldw	r16,80(sp)
8008bfb4:	dec01e04 	addi	sp,sp,120
8008bfb8:	f800283a 	ret
8008bfbc:	d8000715 	stw	zero,28(sp)
8008bfc0:	24c00044 	addi	r19,r4,1
8008bfc4:	dcc00615 	stw	r19,24(sp)
8008bfc8:	20800043 	ldbu	r2,1(r4)
8008bfcc:	10c03fcc 	andi	r3,r2,255
8008bfd0:	18c0201c 	xori	r3,r3,128
8008bfd4:	18ffe004 	addi	r3,r3,-128
8008bfd8:	183fe226 	beq	r3,zero,8008bf64 <_strtod_r+0x134>
8008bfdc:	11403fcc 	andi	r5,r2,255
8008bfe0:	2940201c 	xori	r5,r5,128
8008bfe4:	297fe004 	addi	r5,r5,-128
8008bfe8:	00c00c04 	movi	r3,48
8008bfec:	28c0e526 	beq	r5,r3,8008c384 <_strtod_r+0x554>
8008bff0:	dcc00815 	stw	r19,32(sp)
8008bff4:	0025883a 	mov	r18,zero
8008bff8:	10fff404 	addi	r3,r2,-48
8008bffc:	18c03fcc 	andi	r3,r3,255
8008c000:	01000244 	movi	r4,9
8008c004:	20c37536 	bltu	r4,r3,8008cddc <_strtod_r+0xfac>
8008c008:	dd400817 	ldw	r21,32(sp)
8008c00c:	0027883a 	mov	r19,zero
8008c010:	0039883a 	mov	fp,zero
8008c014:	002d883a 	mov	r22,zero
8008c018:	01400204 	movi	r5,8
8008c01c:	2d805a16 	blt	r5,r22,8008c188 <_strtod_r+0x358>
8008c020:	e70002a4 	muli	fp,fp,10
8008c024:	10c03fcc 	andi	r3,r2,255
8008c028:	18c0201c 	xori	r3,r3,128
8008c02c:	18ffe004 	addi	r3,r3,-128
8008c030:	e0f9883a 	add	fp,fp,r3
8008c034:	e73ff404 	addi	fp,fp,-48
8008c038:	ad400044 	addi	r21,r21,1
8008c03c:	dd400615 	stw	r21,24(sp)
8008c040:	a8800003 	ldbu	r2,0(r21)
8008c044:	b5800044 	addi	r22,r22,1
8008c048:	10fff404 	addi	r3,r2,-48
8008c04c:	18c03fcc 	andi	r3,r3,255
8008c050:	20fff22e 	bgeu	r4,r3,8008c01c <_strtod_r+0x1ec>
8008c054:	14403fcc 	andi	r17,r2,255
8008c058:	8c40201c 	xori	r17,r17,128
8008c05c:	8c7fe004 	addi	r17,r17,-128
8008c060:	8009883a 	mov	r4,r16
8008c064:	00899f00 	call	800899f0 <_localeconv_r>
8008c068:	11400017 	ldw	r5,0(r2)
8008c06c:	8009883a 	mov	r4,r16
8008c070:	d9401315 	stw	r5,76(sp)
8008c074:	00899f00 	call	800899f0 <_localeconv_r>
8008c078:	11000017 	ldw	r4,0(r2)
8008c07c:	00832a00 	call	800832a0 <strlen>
8008c080:	d9401317 	ldw	r5,76(sp)
8008c084:	100d883a 	mov	r6,r2
8008c088:	a809883a 	mov	r4,r21
8008c08c:	0093f180 	call	80093f18 <strncmp>
8008c090:	1000ce26 	beq	r2,zero,8008c3cc <_strtod_r+0x59c>
8008c094:	b013883a 	mov	r9,r22
8008c098:	000b883a 	mov	r5,zero
8008c09c:	0015883a 	mov	r10,zero
8008c0a0:	0017883a 	mov	r11,zero
8008c0a4:	00801944 	movi	r2,101
8008c0a8:	88807826 	beq	r17,r2,8008c28c <_strtod_r+0x45c>
8008c0ac:	00801144 	movi	r2,69
8008c0b0:	88807626 	beq	r17,r2,8008c28c <_strtod_r+0x45c>
8008c0b4:	002b883a 	mov	r21,zero
8008c0b8:	48003d1e 	bne	r9,zero,8008c1b0 <_strtod_r+0x380>
8008c0bc:	2800391e 	bne	r5,zero,8008c1a4 <_strtod_r+0x374>
8008c0c0:	9000381e 	bne	r18,zero,8008c1a4 <_strtod_r+0x374>
8008c0c4:	583fa71e 	bne	r11,zero,8008bf64 <_strtod_r+0x134>
8008c0c8:	00801384 	movi	r2,78
8008c0cc:	88800526 	beq	r17,r2,8008c0e4 <_strtod_r+0x2b4>
8008c0d0:	147fa20e 	bge	r2,r17,8008bf5c <_strtod_r+0x12c>
8008c0d4:	00801a44 	movi	r2,105
8008c0d8:	8883d726 	beq	r17,r2,8008d038 <_strtod_r+0x1208>
8008c0dc:	00801b84 	movi	r2,110
8008c0e0:	88bfa01e 	bne	r17,r2,8008bf64 <_strtod_r+0x134>
8008c0e4:	016002b4 	movhi	r5,32778
8008c0e8:	d9000617 	ldw	r4,24(sp)
8008c0ec:	2971c704 	addi	r5,r5,-14564
8008c0f0:	01c00644 	movi	r7,25
8008c0f4:	00000b06 	br	8008c124 <_strtod_r+0x2f4>
8008c0f8:	21000044 	addi	r4,r4,1
8008c0fc:	20800003 	ldbu	r2,0(r4)
8008c100:	10ffefc4 	addi	r3,r2,-65
8008c104:	10803fcc 	andi	r2,r2,255
8008c108:	1080201c 	xori	r2,r2,128
8008c10c:	18c03fcc 	andi	r3,r3,255
8008c110:	10bfe004 	addi	r2,r2,-128
8008c114:	38c00136 	bltu	r7,r3,8008c11c <_strtod_r+0x2ec>
8008c118:	10800804 	addi	r2,r2,32
8008c11c:	29400044 	addi	r5,r5,1
8008c120:	11bf901e 	bne	r2,r6,8008bf64 <_strtod_r+0x134>
8008c124:	29800007 	ldb	r6,0(r5)
8008c128:	303ff31e 	bne	r6,zero,8008c0f8 <_strtod_r+0x2c8>
8008c12c:	20800044 	addi	r2,r4,1
8008c130:	d8800615 	stw	r2,24(sp)
8008c134:	20c00047 	ldb	r3,1(r4)
8008c138:	00800a04 	movi	r2,40
8008c13c:	18849d26 	beq	r3,r2,8008d3b4 <_strtod_r+0x1584>
8008c140:	047ffe34 	movhi	r17,65528
8008c144:	0025883a 	mov	r18,zero
8008c148:	902b883a 	mov	r21,r18
8008c14c:	882d883a 	mov	r22,r17
8008c150:	a03f8926 	beq	r20,zero,8008bf78 <_strtod_r+0x148>
8008c154:	ddc00617 	ldw	r23,24(sp)
8008c158:	003f8606 	br	8008bf74 <_strtod_r+0x144>
8008c15c:	00800044 	movi	r2,1
8008c160:	d8800715 	stw	r2,28(sp)
8008c164:	003f9606 	br	8008bfc0 <_strtod_r+0x190>
8008c168:	21000044 	addi	r4,r4,1
8008c16c:	d9000615 	stw	r4,24(sp)
8008c170:	20800003 	ldbu	r2,0(r4)
8008c174:	10c03fcc 	andi	r3,r2,255
8008c178:	28ff462e 	bgeu	r5,r3,8008be94 <_strtod_r+0x64>
8008c17c:	2027883a 	mov	r19,r4
8008c180:	d8000715 	stw	zero,28(sp)
8008c184:	003f9506 	br	8008bfdc <_strtod_r+0x1ac>
8008c188:	9cc002a4 	muli	r19,r19,10
8008c18c:	10803fcc 	andi	r2,r2,255
8008c190:	1080201c 	xori	r2,r2,128
8008c194:	10bfe004 	addi	r2,r2,-128
8008c198:	9885883a 	add	r2,r19,r2
8008c19c:	14fff404 	addi	r19,r2,-48
8008c1a0:	003fa506 	br	8008c038 <_strtod_r+0x208>
8008c1a4:	002b883a 	mov	r21,zero
8008c1a8:	002d883a 	mov	r22,zero
8008c1ac:	003fe806 	br	8008c150 <_strtod_r+0x320>
8008c1b0:	aaabc83a 	sub	r21,r21,r10
8008c1b4:	b000011e 	bne	r22,zero,8008c1bc <_strtod_r+0x38c>
8008c1b8:	482d883a 	mov	r22,r9
8008c1bc:	00800404 	movi	r2,16
8008c1c0:	482f883a 	mov	r23,r9
8008c1c4:	1240010e 	bge	r2,r9,8008c1cc <_strtod_r+0x39c>
8008c1c8:	102f883a 	mov	r23,r2
8008c1cc:	e009883a 	mov	r4,fp
8008c1d0:	da401315 	stw	r9,76(sp)
8008c1d4:	00988580 	call	80098858 <__floatunsidf>
8008c1d8:	1025883a 	mov	r18,r2
8008c1dc:	00800244 	movi	r2,9
8008c1e0:	1823883a 	mov	r17,r3
8008c1e4:	da401317 	ldw	r9,76(sp)
8008c1e8:	15c0160e 	bge	r2,r23,8008c244 <_strtod_r+0x414>
8008c1ec:	b8bffdc4 	addi	r2,r23,-9
8008c1f0:	100490fa 	slli	r2,r2,3
8008c1f4:	180b883a 	mov	r5,r3
8008c1f8:	00e002b4 	movhi	r3,32778
8008c1fc:	18f19204 	addi	r3,r3,-14776
8008c200:	1885883a 	add	r2,r3,r2
8008c204:	11800017 	ldw	r6,0(r2)
8008c208:	11c00117 	ldw	r7,4(r2)
8008c20c:	9009883a 	mov	r4,r18
8008c210:	00976e80 	call	800976e8 <__muldf3>
8008c214:	9809883a 	mov	r4,r19
8008c218:	1025883a 	mov	r18,r2
8008c21c:	1823883a 	mov	r17,r3
8008c220:	00988580 	call	80098858 <__floatunsidf>
8008c224:	9009883a 	mov	r4,r18
8008c228:	880b883a 	mov	r5,r17
8008c22c:	100d883a 	mov	r6,r2
8008c230:	180f883a 	mov	r7,r3
8008c234:	00962fc0 	call	800962fc <__adddf3>
8008c238:	da401317 	ldw	r9,76(sp)
8008c23c:	1025883a 	mov	r18,r2
8008c240:	1823883a 	mov	r17,r3
8008c244:	008003c4 	movi	r2,15
8008c248:	12407b16 	blt	r2,r9,8008c438 <_strtod_r+0x608>
8008c24c:	a83fbe26 	beq	r21,zero,8008c148 <_strtod_r+0x318>
8008c250:	0543670e 	bge	zero,r21,8008cff0 <_strtod_r+0x11c0>
8008c254:	00c00584 	movi	r3,22
8008c258:	1d42e816 	blt	r3,r21,8008cdfc <_strtod_r+0xfcc>
8008c25c:	a82a90fa 	slli	r21,r21,3
8008c260:	00a002b4 	movhi	r2,32778
8008c264:	10b19204 	addi	r2,r2,-14776
8008c268:	1545883a 	add	r2,r2,r21
8008c26c:	11000017 	ldw	r4,0(r2)
8008c270:	11400117 	ldw	r5,4(r2)
8008c274:	900d883a 	mov	r6,r18
8008c278:	880f883a 	mov	r7,r17
8008c27c:	00976e80 	call	800976e8 <__muldf3>
8008c280:	102b883a 	mov	r21,r2
8008c284:	182d883a 	mov	r22,r3
8008c288:	003fb106 	br	8008c150 <_strtod_r+0x320>
8008c28c:	4801b526 	beq	r9,zero,8008c964 <_strtod_r+0xb34>
8008c290:	ddc00617 	ldw	r23,24(sp)
8008c294:	00c00ac4 	movi	r3,43
8008c298:	b8800044 	addi	r2,r23,1
8008c29c:	d8800615 	stw	r2,24(sp)
8008c2a0:	b8800047 	ldb	r2,1(r23)
8008c2a4:	10c1e926 	beq	r2,r3,8008ca4c <_strtod_r+0xc1c>
8008c2a8:	00c00b44 	movi	r3,45
8008c2ac:	10c1ec26 	beq	r2,r3,8008ca60 <_strtod_r+0xc30>
8008c2b0:	1023883a 	mov	r17,r2
8008c2b4:	0019883a 	mov	r12,zero
8008c2b8:	88bff404 	addi	r2,r17,-48
8008c2bc:	00c00244 	movi	r3,9
8008c2c0:	1881b736 	bltu	r3,r2,8008c9a0 <_strtod_r+0xb70>
8008c2c4:	00800c04 	movi	r2,48
8008c2c8:	8880071e 	bne	r17,r2,8008c2e8 <_strtod_r+0x4b8>
8008c2cc:	d8800617 	ldw	r2,24(sp)
8008c2d0:	8807883a 	mov	r3,r17
8008c2d4:	10800044 	addi	r2,r2,1
8008c2d8:	d8800615 	stw	r2,24(sp)
8008c2dc:	14400007 	ldb	r17,0(r2)
8008c2e0:	10800044 	addi	r2,r2,1
8008c2e4:	88fffc26 	beq	r17,r3,8008c2d8 <_strtod_r+0x4a8>
8008c2e8:	88bff3c4 	addi	r2,r17,-49
8008c2ec:	00c00204 	movi	r3,8
8008c2f0:	18bf7036 	bltu	r3,r2,8008c0b4 <_strtod_r+0x284>
8008c2f4:	db800617 	ldw	r14,24(sp)
8008c2f8:	88bff404 	addi	r2,r17,-48
8008c2fc:	03400244 	movi	r13,9
8008c300:	71c00044 	addi	r7,r14,1
8008c304:	d9c00615 	stw	r7,24(sp)
8008c308:	74400043 	ldbu	r17,1(r14)
8008c30c:	88fff404 	addi	r3,r17,-48
8008c310:	8c403fcc 	andi	r17,r17,255
8008c314:	8c40201c 	xori	r17,r17,128
8008c318:	18c03fcc 	andi	r3,r3,255
8008c31c:	8c7fe004 	addi	r17,r17,-128
8008c320:	68c00e36 	bltu	r13,r3,8008c35c <_strtod_r+0x52c>
8008c324:	71000084 	addi	r4,r14,2
8008c328:	d9000615 	stw	r4,24(sp)
8008c32c:	108002a4 	muli	r2,r2,10
8008c330:	21800003 	ldbu	r6,0(r4)
8008c334:	200f883a 	mov	r7,r4
8008c338:	1463883a 	add	r17,r2,r17
8008c33c:	30fff404 	addi	r3,r6,-48
8008c340:	88bff404 	addi	r2,r17,-48
8008c344:	34403fcc 	andi	r17,r6,255
8008c348:	8c40201c 	xori	r17,r17,128
8008c34c:	18c03fcc 	andi	r3,r3,255
8008c350:	8c7fe004 	addi	r17,r17,-128
8008c354:	21000044 	addi	r4,r4,1
8008c358:	68fff32e 	bgeu	r13,r3,8008c328 <_strtod_r+0x4f8>
8008c35c:	3b8fc83a 	sub	r7,r7,r14
8008c360:	00c00204 	movi	r3,8
8008c364:	19c29716 	blt	r3,r7,8008cdc4 <_strtod_r+0xf94>
8008c368:	102b883a 	mov	r21,r2
8008c36c:	009387c4 	movi	r2,19999
8008c370:	1540010e 	bge	r2,r21,8008c378 <_strtod_r+0x548>
8008c374:	102b883a 	mov	r21,r2
8008c378:	603f4f26 	beq	r12,zero,8008c0b8 <_strtod_r+0x288>
8008c37c:	056bc83a 	sub	r21,zero,r21
8008c380:	003f4d06 	br	8008c0b8 <_strtod_r+0x288>
8008c384:	98800047 	ldb	r2,1(r19)
8008c388:	00c01604 	movi	r3,88
8008c38c:	10c1de26 	beq	r2,r3,8008cb08 <_strtod_r+0xcd8>
8008c390:	00c01e04 	movi	r3,120
8008c394:	10c1dc26 	beq	r2,r3,8008cb08 <_strtod_r+0xcd8>
8008c398:	98c00044 	addi	r3,r19,1
8008c39c:	1827883a 	mov	r19,r3
8008c3a0:	d8c00615 	stw	r3,24(sp)
8008c3a4:	18c00044 	addi	r3,r3,1
8008c3a8:	18bfffc3 	ldbu	r2,-1(r3)
8008c3ac:	11003fcc 	andi	r4,r2,255
8008c3b0:	2100201c 	xori	r4,r4,128
8008c3b4:	213fe004 	addi	r4,r4,-128
8008c3b8:	217ff826 	beq	r4,r5,8008c39c <_strtod_r+0x56c>
8008c3bc:	203f7926 	beq	r4,zero,8008c1a4 <_strtod_r+0x374>
8008c3c0:	dcc00815 	stw	r19,32(sp)
8008c3c4:	04800044 	movi	r18,1
8008c3c8:	003f0b06 	br	8008bff8 <_strtod_r+0x1c8>
8008c3cc:	8009883a 	mov	r4,r16
8008c3d0:	00899f00 	call	800899f0 <_localeconv_r>
8008c3d4:	11000017 	ldw	r4,0(r2)
8008c3d8:	00832a00 	call	800832a0 <strlen>
8008c3dc:	d8c00617 	ldw	r3,24(sp)
8008c3e0:	1885883a 	add	r2,r3,r2
8008c3e4:	d8800615 	stw	r2,24(sp)
8008c3e8:	14400007 	ldb	r17,0(r2)
8008c3ec:	b001881e 	bne	r22,zero,8008ca10 <_strtod_r+0xbe0>
8008c3f0:	00c00c04 	movi	r3,48
8008c3f4:	88c3391e 	bne	r17,r3,8008d0dc <_strtod_r+0x12ac>
8008c3f8:	10c00044 	addi	r3,r2,1
8008c3fc:	8809883a 	mov	r4,r17
8008c400:	d8c00615 	stw	r3,24(sp)
8008c404:	1c400007 	ldb	r17,0(r3)
8008c408:	188bc83a 	sub	r5,r3,r2
8008c40c:	18c00044 	addi	r3,r3,1
8008c410:	893ffb26 	beq	r17,r4,8008c400 <_strtod_r+0x5d0>
8008c414:	88bff3c4 	addi	r2,r17,-49
8008c418:	00c00204 	movi	r3,8
8008c41c:	1882e72e 	bgeu	r3,r2,8008cfbc <_strtod_r+0x118c>
8008c420:	00801944 	movi	r2,101
8008c424:	88814d26 	beq	r17,r2,8008c95c <_strtod_r+0xb2c>
8008c428:	0013883a 	mov	r9,zero
8008c42c:	0015883a 	mov	r10,zero
8008c430:	02c00044 	movi	r11,1
8008c434:	003f1d06 	br	8008c0ac <_strtod_r+0x27c>
8008c438:	4defc83a 	sub	r23,r9,r23
8008c43c:	bd6f883a 	add	r23,r23,r21
8008c440:	05c21e0e 	bge	zero,r23,8008ccbc <_strtod_r+0xe8c>
8008c444:	b88003cc 	andi	r2,r23,15
8008c448:	10000d26 	beq	r2,zero,8008c480 <_strtod_r+0x650>
8008c44c:	100490fa 	slli	r2,r2,3
8008c450:	00e002b4 	movhi	r3,32778
8008c454:	18f19204 	addi	r3,r3,-14776
8008c458:	1885883a 	add	r2,r3,r2
8008c45c:	11000017 	ldw	r4,0(r2)
8008c460:	11400117 	ldw	r5,4(r2)
8008c464:	900d883a 	mov	r6,r18
8008c468:	880f883a 	mov	r7,r17
8008c46c:	da401315 	stw	r9,76(sp)
8008c470:	00976e80 	call	800976e8 <__muldf3>
8008c474:	da401317 	ldw	r9,76(sp)
8008c478:	1025883a 	mov	r18,r2
8008c47c:	1823883a 	mov	r17,r3
8008c480:	023ffc04 	movi	r8,-16
8008c484:	ba10703a 	and	r8,r23,r8
8008c488:	40003c26 	beq	r8,zero,8008c57c <_strtod_r+0x74c>
8008c48c:	00804d04 	movi	r2,308
8008c490:	1201cd16 	blt	r2,r8,8008cbc8 <_strtod_r+0xd98>
8008c494:	4011d13a 	srai	r8,r8,4
8008c498:	03000044 	movi	r12,1
8008c49c:	62037c0e 	bge	r12,r8,8008d290 <_strtod_r+0x1460>
8008c4a0:	012002b4 	movhi	r4,32778
8008c4a4:	21318804 	addi	r4,r4,-14816
8008c4a8:	2015883a 	mov	r10,r4
8008c4ac:	0027883a 	mov	r19,zero
8008c4b0:	d9000915 	stw	r4,36(sp)
8008c4b4:	9005883a 	mov	r2,r18
8008c4b8:	8807883a 	mov	r3,r17
8008c4bc:	dc000c15 	stw	r16,48(sp)
8008c4c0:	dc800e15 	stw	r18,56(sp)
8008c4c4:	9821883a 	mov	r16,r19
8008c4c8:	0009883a 	mov	r4,zero
8008c4cc:	8827883a 	mov	r19,r17
8008c4d0:	602f883a 	mov	r23,r12
8008c4d4:	da400a15 	stw	r9,40(sp)
8008c4d8:	5025883a 	mov	r18,r10
8008c4dc:	4023883a 	mov	r17,r8
8008c4e0:	8980004c 	andi	r6,r17,1
8008c4e4:	30000626 	beq	r6,zero,8008c500 <_strtod_r+0x6d0>
8008c4e8:	91800017 	ldw	r6,0(r18)
8008c4ec:	91c00117 	ldw	r7,4(r18)
8008c4f0:	1009883a 	mov	r4,r2
8008c4f4:	180b883a 	mov	r5,r3
8008c4f8:	00976e80 	call	800976e8 <__muldf3>
8008c4fc:	01000044 	movi	r4,1
8008c500:	8823d07a 	srai	r17,r17,1
8008c504:	84000044 	addi	r16,r16,1
8008c508:	94800204 	addi	r18,r18,8
8008c50c:	8dfff41e 	bne	r17,r23,8008c4e0 <_strtod_r+0x6b0>
8008c510:	21003fcc 	andi	r4,r4,255
8008c514:	9823883a 	mov	r17,r19
8008c518:	da400a17 	ldw	r9,40(sp)
8008c51c:	8027883a 	mov	r19,r16
8008c520:	dc800e17 	ldw	r18,56(sp)
8008c524:	dc000c17 	ldw	r16,48(sp)
8008c528:	2003b11e 	bne	r4,zero,8008d3f0 <_strtod_r+0x15c0>
8008c52c:	981690fa 	slli	r11,r19,3
8008c530:	d8800917 	ldw	r2,36(sp)
8008c534:	01ff2c34 	movhi	r7,64688
8008c538:	900d883a 	mov	r6,r18
8008c53c:	12ef883a 	add	r23,r2,r11
8008c540:	b9000017 	ldw	r4,0(r23)
8008c544:	b9400117 	ldw	r5,4(r23)
8008c548:	89cf883a 	add	r7,r17,r7
8008c54c:	da401315 	stw	r9,76(sp)
8008c550:	00976e80 	call	800976e8 <__muldf3>
8008c554:	1025883a 	mov	r18,r2
8008c558:	011f2834 	movhi	r4,31904
8008c55c:	189ffc2c 	andhi	r2,r3,32752
8008c560:	da401317 	ldw	r9,76(sp)
8008c564:	20819836 	bltu	r4,r2,8008cbc8 <_strtod_r+0xd98>
8008c568:	011f2434 	movhi	r4,31888
8008c56c:	2083382e 	bgeu	r4,r2,8008d250 <_strtod_r+0x1420>
8008c570:	045ffc34 	movhi	r17,32752
8008c574:	8c7fffc4 	addi	r17,r17,-1
8008c578:	04bfffc4 	movi	r18,-1
8008c57c:	d8000915 	stw	zero,36(sp)
8008c580:	d9400817 	ldw	r5,32(sp)
8008c584:	df000015 	stw	fp,0(sp)
8008c588:	480f883a 	mov	r7,r9
8008c58c:	b00d883a 	mov	r6,r22
8008c590:	8009883a 	mov	r4,r16
8008c594:	008a3b80 	call	8008a3b8 <__s2b>
8008c598:	d8800815 	stw	r2,32(sp)
8008c59c:	10018a26 	beq	r2,zero,8008cbc8 <_strtod_r+0xd98>
8008c5a0:	a807d7fa 	srai	r3,r21,31
8008c5a4:	0545c83a 	sub	r2,zero,r21
8008c5a8:	dd400a15 	stw	r21,40(sp)
8008c5ac:	1886703a 	and	r3,r3,r2
8008c5b0:	d8c00c15 	stw	r3,48(sp)
8008c5b4:	a8013516 	blt	r21,zero,8008ca8c <_strtod_r+0xc5c>
8008c5b8:	d9400817 	ldw	r5,32(sp)
8008c5bc:	0011883a 	mov	r8,zero
8008c5c0:	0027883a 	mov	r19,zero
8008c5c4:	29400304 	addi	r5,r5,12
8008c5c8:	d9400f15 	stw	r5,60(sp)
8008c5cc:	402b883a 	mov	r21,r8
8008c5d0:	dd001215 	stw	r20,72(sp)
8008c5d4:	d8800817 	ldw	r2,32(sp)
8008c5d8:	8009883a 	mov	r4,r16
8008c5dc:	11400117 	ldw	r5,4(r2)
8008c5e0:	008a1c80 	call	8008a1c8 <_Balloc>
8008c5e4:	1029883a 	mov	r20,r2
8008c5e8:	10012d26 	beq	r2,zero,8008caa0 <_strtod_r+0xc70>
8008c5ec:	d8c00817 	ldw	r3,32(sp)
8008c5f0:	d9400f17 	ldw	r5,60(sp)
8008c5f4:	11000304 	addi	r4,r2,12
8008c5f8:	19800417 	ldw	r6,16(r3)
8008c5fc:	31800084 	addi	r6,r6,2
8008c600:	318d883a 	add	r6,r6,r6
8008c604:	318d883a 	add	r6,r6,r6
8008c608:	0082cec0 	call	80082cec <memcpy>
8008c60c:	d9000204 	addi	r4,sp,8
8008c610:	d9000015 	stw	r4,0(sp)
8008c614:	d9c00404 	addi	r7,sp,16
8008c618:	900b883a 	mov	r5,r18
8008c61c:	880d883a 	mov	r6,r17
8008c620:	8009883a 	mov	r4,r16
8008c624:	008ae5c0 	call	8008ae5c <__d2b>
8008c628:	d8800515 	stw	r2,20(sp)
8008c62c:	dc801115 	stw	r18,68(sp)
8008c630:	dc401015 	stw	r17,64(sp)
8008c634:	10027c26 	beq	r2,zero,8008d028 <_strtod_r+0x11f8>
8008c638:	01400044 	movi	r5,1
8008c63c:	8009883a 	mov	r4,r16
8008c640:	008a5d40 	call	8008a5d4 <__i2b>
8008c644:	1027883a 	mov	r19,r2
8008c648:	10011526 	beq	r2,zero,8008caa0 <_strtod_r+0xc70>
8008c64c:	d8800417 	ldw	r2,16(sp)
8008c650:	1000c816 	blt	r2,zero,8008c974 <_strtod_r+0xb44>
8008c654:	d9400c17 	ldw	r5,48(sp)
8008c658:	d9000a17 	ldw	r4,40(sp)
8008c65c:	28ad883a 	add	r22,r5,r2
8008c660:	d9400917 	ldw	r5,36(sp)
8008c664:	df000217 	ldw	fp,8(sp)
8008c668:	05ff0084 	movi	r23,-1022
8008c66c:	1147c83a 	sub	r3,r2,r5
8008c670:	1f07883a 	add	r3,r3,fp
8008c674:	00800d84 	movi	r2,54
8008c678:	18ffffc4 	addi	r3,r3,-1
8008c67c:	1739c83a 	sub	fp,r2,fp
8008c680:	1dc0a50e 	bge	r3,r23,8008c918 <_strtod_r+0xae8>
8008c684:	b8efc83a 	sub	r23,r23,r3
8008c688:	008007c4 	movi	r2,31
8008c68c:	e5f9c83a 	sub	fp,fp,r23
8008c690:	15c0bc16 	blt	r2,r23,8008c984 <_strtod_r+0xb54>
8008c694:	00800044 	movi	r2,1
8008c698:	15c4983a 	sll	r2,r2,r23
8008c69c:	d8000b15 	stw	zero,44(sp)
8008c6a0:	d8800d15 	stw	r2,52(sp)
8008c6a4:	2707883a 	add	r3,r4,fp
8008c6a8:	d9000917 	ldw	r4,36(sp)
8008c6ac:	b739883a 	add	fp,r22,fp
8008c6b0:	20ef883a 	add	r23,r4,r3
8008c6b4:	b009883a 	mov	r4,r22
8008c6b8:	e580010e 	bge	fp,r22,8008c6c0 <_strtod_r+0x890>
8008c6bc:	e009883a 	mov	r4,fp
8008c6c0:	b805883a 	mov	r2,r23
8008c6c4:	25c0010e 	bge	r4,r23,8008c6cc <_strtod_r+0x89c>
8008c6c8:	2005883a 	mov	r2,r4
8008c6cc:	0080030e 	bge	zero,r2,8008c6dc <_strtod_r+0x8ac>
8008c6d0:	e0b9c83a 	sub	fp,fp,r2
8008c6d4:	b8afc83a 	sub	r23,r23,r2
8008c6d8:	b0adc83a 	sub	r22,r22,r2
8008c6dc:	d9400c17 	ldw	r5,48(sp)
8008c6e0:	28001126 	beq	r5,zero,8008c728 <_strtod_r+0x8f8>
8008c6e4:	280d883a 	mov	r6,r5
8008c6e8:	8009883a 	mov	r4,r16
8008c6ec:	980b883a 	mov	r5,r19
8008c6f0:	008a8080 	call	8008a808 <__pow5mult>
8008c6f4:	1027883a 	mov	r19,r2
8008c6f8:	1000e926 	beq	r2,zero,8008caa0 <_strtod_r+0xc70>
8008c6fc:	d9800517 	ldw	r6,20(sp)
8008c700:	100b883a 	mov	r5,r2
8008c704:	8009883a 	mov	r4,r16
8008c708:	008a6100 	call	8008a610 <__multiply>
8008c70c:	1000e426 	beq	r2,zero,8008caa0 <_strtod_r+0xc70>
8008c710:	d9400517 	ldw	r5,20(sp)
8008c714:	8009883a 	mov	r4,r16
8008c718:	d8801315 	stw	r2,76(sp)
8008c71c:	008a2700 	call	8008a270 <_Bfree>
8008c720:	d8801317 	ldw	r2,76(sp)
8008c724:	d8800515 	stw	r2,20(sp)
8008c728:	0700060e 	bge	zero,fp,8008c744 <_strtod_r+0x914>
8008c72c:	d9400517 	ldw	r5,20(sp)
8008c730:	e00d883a 	mov	r6,fp
8008c734:	8009883a 	mov	r4,r16
8008c738:	008a9480 	call	8008a948 <__lshift>
8008c73c:	d8800515 	stw	r2,20(sp)
8008c740:	10023926 	beq	r2,zero,8008d028 <_strtod_r+0x11f8>
8008c744:	d8800a17 	ldw	r2,40(sp)
8008c748:	10000626 	beq	r2,zero,8008c764 <_strtod_r+0x934>
8008c74c:	d9800a17 	ldw	r6,40(sp)
8008c750:	a00b883a 	mov	r5,r20
8008c754:	8009883a 	mov	r4,r16
8008c758:	008a8080 	call	8008a808 <__pow5mult>
8008c75c:	1029883a 	mov	r20,r2
8008c760:	1000cf26 	beq	r2,zero,8008caa0 <_strtod_r+0xc70>
8008c764:	05c0060e 	bge	zero,r23,8008c780 <_strtod_r+0x950>
8008c768:	a00b883a 	mov	r5,r20
8008c76c:	b80d883a 	mov	r6,r23
8008c770:	8009883a 	mov	r4,r16
8008c774:	008a9480 	call	8008a948 <__lshift>
8008c778:	1029883a 	mov	r20,r2
8008c77c:	1000c826 	beq	r2,zero,8008caa0 <_strtod_r+0xc70>
8008c780:	0580060e 	bge	zero,r22,8008c79c <_strtod_r+0x96c>
8008c784:	980b883a 	mov	r5,r19
8008c788:	b00d883a 	mov	r6,r22
8008c78c:	8009883a 	mov	r4,r16
8008c790:	008a9480 	call	8008a948 <__lshift>
8008c794:	1027883a 	mov	r19,r2
8008c798:	1000c126 	beq	r2,zero,8008caa0 <_strtod_r+0xc70>
8008c79c:	d9400517 	ldw	r5,20(sp)
8008c7a0:	a00d883a 	mov	r6,r20
8008c7a4:	8009883a 	mov	r4,r16
8008c7a8:	008aaf00 	call	8008aaf0 <__mdiff>
8008c7ac:	102b883a 	mov	r21,r2
8008c7b0:	1000bb26 	beq	r2,zero,8008caa0 <_strtod_r+0xc70>
8008c7b4:	10c00317 	ldw	r3,12(r2)
8008c7b8:	980b883a 	mov	r5,r19
8008c7bc:	10000315 	stw	zero,12(r2)
8008c7c0:	1009883a 	mov	r4,r2
8008c7c4:	d8c00e15 	stw	r3,56(sp)
8008c7c8:	008aa900 	call	8008aa90 <__mcmp>
8008c7cc:	10027616 	blt	r2,zero,8008d1a8 <_strtod_r+0x1378>
8008c7d0:	10024426 	beq	r2,zero,8008d0e4 <_strtod_r+0x12b4>
8008c7d4:	980b883a 	mov	r5,r19
8008c7d8:	a809883a 	mov	r4,r21
8008c7dc:	008afa80 	call	8008afa8 <__ratio>
8008c7e0:	000d883a 	mov	r6,zero
8008c7e4:	01d00034 	movhi	r7,16384
8008c7e8:	1009883a 	mov	r4,r2
8008c7ec:	180b883a 	mov	r5,r3
8008c7f0:	102f883a 	mov	r23,r2
8008c7f4:	182d883a 	mov	r22,r3
8008c7f8:	00975f40 	call	800975f4 <__ledf2>
8008c7fc:	00804a16 	blt	zero,r2,8008c928 <_strtod_r+0xaf8>
8008c800:	d9400e17 	ldw	r5,56(sp)
8008c804:	28006b26 	beq	r5,zero,8008c9b4 <_strtod_r+0xb84>
8008c808:	058ffc34 	movhi	r22,16368
8008c80c:	d8000b15 	stw	zero,44(sp)
8008c810:	d8000d15 	stw	zero,52(sp)
8008c814:	b02f883a 	mov	r23,r22
8008c818:	8f1ffc2c 	andhi	fp,r17,32752
8008c81c:	009ff834 	movhi	r2,32736
8008c820:	e080cd26 	beq	fp,r2,8008cb58 <_strtod_r+0xd28>
8008c824:	d9400917 	ldw	r5,36(sp)
8008c828:	28001a26 	beq	r5,zero,8008c894 <_strtod_r+0xa64>
8008c82c:	0081a834 	movhi	r2,1696
8008c830:	17001836 	bltu	r2,fp,8008c894 <_strtod_r+0xa64>
8008c834:	d9000d17 	ldw	r4,52(sp)
8008c838:	01d07834 	movhi	r7,16864
8008c83c:	39ffffc4 	addi	r7,r7,-1
8008c840:	01bff034 	movhi	r6,65472
8008c844:	b80b883a 	mov	r5,r23
8008c848:	00975f40 	call	800975f4 <__ledf2>
8008c84c:	00800e16 	blt	zero,r2,8008c888 <_strtod_r+0xa58>
8008c850:	d9000d17 	ldw	r4,52(sp)
8008c854:	b80b883a 	mov	r5,r23
8008c858:	00955dc0 	call	800955dc <__fixunsdfsi>
8008c85c:	10018126 	beq	r2,zero,8008ce64 <_strtod_r+0x1034>
8008c860:	1009883a 	mov	r4,r2
8008c864:	00988580 	call	80098858 <__floatunsidf>
8008c868:	d8800d15 	stw	r2,52(sp)
8008c86c:	182f883a 	mov	r23,r3
8008c870:	d8800e17 	ldw	r2,56(sp)
8008c874:	1001791e 	bne	r2,zero,8008ce5c <_strtod_r+0x102c>
8008c878:	ba20003c 	xorhi	r8,r23,32768
8008c87c:	d8c00d17 	ldw	r3,52(sp)
8008c880:	402d883a 	mov	r22,r8
8008c884:	d8c00b15 	stw	r3,44(sp)
8008c888:	0081ac34 	movhi	r2,1712
8008c88c:	b091883a 	add	r8,r22,r2
8008c890:	472dc83a 	sub	r22,r8,fp
8008c894:	9009883a 	mov	r4,r18
8008c898:	880b883a 	mov	r5,r17
8008c89c:	008acec0 	call	8008acec <__ulp>
8008c8a0:	d9000b17 	ldw	r4,44(sp)
8008c8a4:	b00b883a 	mov	r5,r22
8008c8a8:	100d883a 	mov	r6,r2
8008c8ac:	180f883a 	mov	r7,r3
8008c8b0:	00976e80 	call	800976e8 <__muldf3>
8008c8b4:	900d883a 	mov	r6,r18
8008c8b8:	880f883a 	mov	r7,r17
8008c8bc:	1009883a 	mov	r4,r2
8008c8c0:	180b883a 	mov	r5,r3
8008c8c4:	00962fc0 	call	800962fc <__adddf3>
8008c8c8:	1025883a 	mov	r18,r2
8008c8cc:	1823883a 	mov	r17,r3
8008c8d0:	182d883a 	mov	r22,r3
8008c8d4:	d9000917 	ldw	r4,36(sp)
8008c8d8:	2000021e 	bne	r4,zero,8008c8e4 <_strtod_r+0xab4>
8008c8dc:	b09ffc2c 	andhi	r2,r22,32752
8008c8e0:	e080be26 	beq	fp,r2,8008cbdc <_strtod_r+0xdac>
8008c8e4:	d9400517 	ldw	r5,20(sp)
8008c8e8:	8009883a 	mov	r4,r16
8008c8ec:	008a2700 	call	8008a270 <_Bfree>
8008c8f0:	a00b883a 	mov	r5,r20
8008c8f4:	8009883a 	mov	r4,r16
8008c8f8:	008a2700 	call	8008a270 <_Bfree>
8008c8fc:	980b883a 	mov	r5,r19
8008c900:	8009883a 	mov	r4,r16
8008c904:	008a2700 	call	8008a270 <_Bfree>
8008c908:	a80b883a 	mov	r5,r21
8008c90c:	8009883a 	mov	r4,r16
8008c910:	008a2700 	call	8008a270 <_Bfree>
8008c914:	003f2f06 	br	8008c5d4 <_strtod_r+0x7a4>
8008c918:	00c00044 	movi	r3,1
8008c91c:	d8000b15 	stw	zero,44(sp)
8008c920:	d8c00d15 	stw	r3,52(sp)
8008c924:	003f5f06 	br	8008c6a4 <_strtod_r+0x874>
8008c928:	b809883a 	mov	r4,r23
8008c92c:	000d883a 	mov	r6,zero
8008c930:	01cff834 	movhi	r7,16352
8008c934:	b00b883a 	mov	r5,r22
8008c938:	00976e80 	call	800976e8 <__muldf3>
8008c93c:	d9000e17 	ldw	r4,56(sp)
8008c940:	d8800d15 	stw	r2,52(sp)
8008c944:	182f883a 	mov	r23,r3
8008c948:	2000181e 	bne	r4,zero,8008c9ac <_strtod_r+0xb7c>
8008c94c:	1a20003c 	xorhi	r8,r3,32768
8008c950:	d8800b15 	stw	r2,44(sp)
8008c954:	402d883a 	mov	r22,r8
8008c958:	003faf06 	br	8008c818 <_strtod_r+0x9e8>
8008c95c:	0015883a 	mov	r10,zero
8008c960:	02c00044 	movi	r11,1
8008c964:	2800011e 	bne	r5,zero,8008c96c <_strtod_r+0xb3c>
8008c968:	903d7e26 	beq	r18,zero,8008bf64 <_strtod_r+0x134>
8008c96c:	0013883a 	mov	r9,zero
8008c970:	003e4706 	br	8008c290 <_strtod_r+0x460>
8008c974:	d8c00a17 	ldw	r3,40(sp)
8008c978:	dd800c17 	ldw	r22,48(sp)
8008c97c:	1889c83a 	sub	r4,r3,r2
8008c980:	003f3706 	br	8008c660 <_strtod_r+0x830>
8008c984:	00bef884 	movi	r2,-1054
8008c988:	05c00044 	movi	r23,1
8008c98c:	10c5c83a 	sub	r2,r2,r3
8008c990:	b884983a 	sll	r2,r23,r2
8008c994:	ddc00d15 	stw	r23,52(sp)
8008c998:	d8800b15 	stw	r2,44(sp)
8008c99c:	003f4106 	br	8008c6a4 <_strtod_r+0x874>
8008c9a0:	ddc00615 	stw	r23,24(sp)
8008c9a4:	002b883a 	mov	r21,zero
8008c9a8:	003dc306 	br	8008c0b8 <_strtod_r+0x288>
8008c9ac:	1811883a 	mov	r8,r3
8008c9b0:	003fe706 	br	8008c950 <_strtod_r+0xb20>
8008c9b4:	90002e1e 	bne	r18,zero,8008ca70 <_strtod_r+0xc40>
8008c9b8:	00c00434 	movhi	r3,16
8008c9bc:	18ffffc4 	addi	r3,r3,-1
8008c9c0:	88c4703a 	and	r2,r17,r3
8008c9c4:	10002c1e 	bne	r2,zero,8008ca78 <_strtod_r+0xc48>
8008c9c8:	000d883a 	mov	r6,zero
8008c9cc:	01cffc34 	movhi	r7,16368
8008c9d0:	b809883a 	mov	r4,r23
8008c9d4:	b00b883a 	mov	r5,r22
8008c9d8:	00975f40 	call	800975f4 <__ledf2>
8008c9dc:	10021716 	blt	r2,zero,8008d23c <_strtod_r+0x140c>
8008c9e0:	b809883a 	mov	r4,r23
8008c9e4:	b00b883a 	mov	r5,r22
8008c9e8:	000d883a 	mov	r6,zero
8008c9ec:	01cff834 	movhi	r7,16352
8008c9f0:	00976e80 	call	800976e8 <__muldf3>
8008c9f4:	d8800d15 	stw	r2,52(sp)
8008c9f8:	182f883a 	mov	r23,r3
8008c9fc:	102d883a 	mov	r22,r2
8008ca00:	1a20003c 	xorhi	r8,r3,32768
8008ca04:	dd800b15 	stw	r22,44(sp)
8008ca08:	402d883a 	mov	r22,r8
8008ca0c:	003f8206 	br	8008c818 <_strtod_r+0x9e8>
8008ca10:	b013883a 	mov	r9,r22
8008ca14:	000b883a 	mov	r5,zero
8008ca18:	0015883a 	mov	r10,zero
8008ca1c:	893ff404 	addi	r4,r17,-48
8008ca20:	00800244 	movi	r2,9
8008ca24:	11001036 	bltu	r2,r4,8008ca68 <_strtod_r+0xc38>
8008ca28:	28c00044 	addi	r3,r5,1
8008ca2c:	2023883a 	mov	r17,r4
8008ca30:	20014d1e 	bne	r4,zero,8008cf68 <_strtod_r+0x1138>
8008ca34:	d9800617 	ldw	r6,24(sp)
8008ca38:	180b883a 	mov	r5,r3
8008ca3c:	30800044 	addi	r2,r6,1
8008ca40:	d8800615 	stw	r2,24(sp)
8008ca44:	34400047 	ldb	r17,1(r6)
8008ca48:	003ff406 	br	8008ca1c <_strtod_r+0xbec>
8008ca4c:	0019883a 	mov	r12,zero
8008ca50:	b8800084 	addi	r2,r23,2
8008ca54:	d8800615 	stw	r2,24(sp)
8008ca58:	bc400087 	ldb	r17,2(r23)
8008ca5c:	003e1606 	br	8008c2b8 <_strtod_r+0x488>
8008ca60:	03000044 	movi	r12,1
8008ca64:	003ffa06 	br	8008ca50 <_strtod_r+0xc20>
8008ca68:	02c00044 	movi	r11,1
8008ca6c:	003d8d06 	br	8008c0a4 <_strtod_r+0x274>
8008ca70:	00800044 	movi	r2,1
8008ca74:	9080fe26 	beq	r18,r2,8008ce70 <_strtod_r+0x1040>
8008ca78:	d8000b15 	stw	zero,44(sp)
8008ca7c:	05affc34 	movhi	r22,49136
8008ca80:	d8000d15 	stw	zero,52(sp)
8008ca84:	05cffc34 	movhi	r23,16368
8008ca88:	003f6306 	br	8008c818 <_strtod_r+0x9e8>
8008ca8c:	d8000a15 	stw	zero,40(sp)
8008ca90:	003ec906 	br	8008c5b8 <_strtod_r+0x788>
8008ca94:	d9001117 	ldw	r4,68(sp)
8008ca98:	00bfffc4 	movi	r2,-1
8008ca9c:	2080461e 	bne	r4,r2,8008cbb8 <_strtod_r+0xd88>
8008caa0:	dd000a15 	stw	r20,40(sp)
8008caa4:	dd001217 	ldw	r20,72(sp)
8008caa8:	a811883a 	mov	r8,r21
8008caac:	d8800517 	ldw	r2,20(sp)
8008cab0:	00c00884 	movi	r3,34
8008cab4:	80c00015 	stw	r3,0(r16)
8008cab8:	002b883a 	mov	r21,zero
8008cabc:	059ffc34 	movhi	r22,32752
8008cac0:	100b883a 	mov	r5,r2
8008cac4:	8009883a 	mov	r4,r16
8008cac8:	da001315 	stw	r8,76(sp)
8008cacc:	008a2700 	call	8008a270 <_Bfree>
8008cad0:	d9400a17 	ldw	r5,40(sp)
8008cad4:	8009883a 	mov	r4,r16
8008cad8:	008a2700 	call	8008a270 <_Bfree>
8008cadc:	980b883a 	mov	r5,r19
8008cae0:	8009883a 	mov	r4,r16
8008cae4:	008a2700 	call	8008a270 <_Bfree>
8008cae8:	d9400817 	ldw	r5,32(sp)
8008caec:	8009883a 	mov	r4,r16
8008caf0:	008a2700 	call	8008a270 <_Bfree>
8008caf4:	da001317 	ldw	r8,76(sp)
8008caf8:	8009883a 	mov	r4,r16
8008cafc:	400b883a 	mov	r5,r8
8008cb00:	008a2700 	call	8008a270 <_Bfree>
8008cb04:	003d9206 	br	8008c150 <_strtod_r+0x320>
8008cb08:	d8c00717 	ldw	r3,28(sp)
8008cb0c:	d8800504 	addi	r2,sp,20
8008cb10:	01a002b4 	movhi	r6,32778
8008cb14:	31b1cd04 	addi	r6,r6,-14540
8008cb18:	d8c00115 	stw	r3,4(sp)
8008cb1c:	d8800015 	stw	r2,0(sp)
8008cb20:	d9c00404 	addi	r7,sp,16
8008cb24:	d9400604 	addi	r5,sp,24
8008cb28:	8009883a 	mov	r4,r16
8008cb2c:	00934380 	call	80093438 <__gethex>
8008cb30:	154001cc 	andi	r21,r2,7
8008cb34:	a83d9b26 	beq	r21,zero,8008c1a4 <_strtod_r+0x374>
8008cb38:	00c00184 	movi	r3,6
8008cb3c:	a8c0d61e 	bne	r21,r3,8008ce98 <_strtod_r+0x1068>
8008cb40:	9cc00044 	addi	r19,r19,1
8008cb44:	dcc00615 	stw	r19,24(sp)
8008cb48:	002b883a 	mov	r21,zero
8008cb4c:	002d883a 	mov	r22,zero
8008cb50:	d8000715 	stw	zero,28(sp)
8008cb54:	003d7e06 	br	8008c150 <_strtod_r+0x320>
8008cb58:	00bf2c34 	movhi	r2,64688
8008cb5c:	88a3883a 	add	r17,r17,r2
8008cb60:	9009883a 	mov	r4,r18
8008cb64:	880b883a 	mov	r5,r17
8008cb68:	008acec0 	call	8008acec <__ulp>
8008cb6c:	d9000b17 	ldw	r4,44(sp)
8008cb70:	100d883a 	mov	r6,r2
8008cb74:	180f883a 	mov	r7,r3
8008cb78:	b00b883a 	mov	r5,r22
8008cb7c:	00976e80 	call	800976e8 <__muldf3>
8008cb80:	900d883a 	mov	r6,r18
8008cb84:	180b883a 	mov	r5,r3
8008cb88:	880f883a 	mov	r7,r17
8008cb8c:	1009883a 	mov	r4,r2
8008cb90:	00962fc0 	call	800962fc <__adddf3>
8008cb94:	015f2834 	movhi	r5,31904
8008cb98:	1025883a 	mov	r18,r2
8008cb9c:	297fffc4 	addi	r5,r5,-1
8008cba0:	189ffc2c 	andhi	r2,r3,32752
8008cba4:	2880892e 	bgeu	r5,r2,8008cdcc <_strtod_r+0xf9c>
8008cba8:	d8801017 	ldw	r2,64(sp)
8008cbac:	00dffc34 	movhi	r3,32752
8008cbb0:	18ffffc4 	addi	r3,r3,-1
8008cbb4:	10ffb726 	beq	r2,r3,8008ca94 <_strtod_r+0xc64>
8008cbb8:	045ffc34 	movhi	r17,32752
8008cbbc:	8c7fffc4 	addi	r17,r17,-1
8008cbc0:	04bfffc4 	movi	r18,-1
8008cbc4:	003f4706 	br	8008c8e4 <_strtod_r+0xab4>
8008cbc8:	00800884 	movi	r2,34
8008cbcc:	80800015 	stw	r2,0(r16)
8008cbd0:	002b883a 	mov	r21,zero
8008cbd4:	059ffc34 	movhi	r22,32752
8008cbd8:	003d5d06 	br	8008c150 <_strtod_r+0x320>
8008cbdc:	d9000d17 	ldw	r4,52(sp)
8008cbe0:	b80b883a 	mov	r5,r23
8008cbe4:	00986fc0 	call	800986fc <__fixdfsi>
8008cbe8:	1009883a 	mov	r4,r2
8008cbec:	009877c0 	call	8009877c <__floatsidf>
8008cbf0:	d9000d17 	ldw	r4,52(sp)
8008cbf4:	b80b883a 	mov	r5,r23
8008cbf8:	100d883a 	mov	r6,r2
8008cbfc:	180f883a 	mov	r7,r3
8008cc00:	0097e000 	call	80097e00 <__subdf3>
8008cc04:	d9400e17 	ldw	r5,56(sp)
8008cc08:	1039883a 	mov	fp,r2
8008cc0c:	182f883a 	mov	r23,r3
8008cc10:	2800141e 	bne	r5,zero,8008cc64 <_strtod_r+0xe34>
8008cc14:	9000131e 	bne	r18,zero,8008cc64 <_strtod_r+0xe34>
8008cc18:	00800434 	movhi	r2,16
8008cc1c:	10bfffc4 	addi	r2,r2,-1
8008cc20:	b0ac703a 	and	r22,r22,r2
8008cc24:	b0000f1e 	bne	r22,zero,8008cc64 <_strtod_r+0xe34>
8008cc28:	01a52834 	movhi	r6,38048
8008cc2c:	01cff434 	movhi	r7,16336
8008cc30:	318d6544 	addi	r6,r6,13717
8008cc34:	39ffffc4 	addi	r7,r7,-1
8008cc38:	e009883a 	mov	r4,fp
8008cc3c:	180b883a 	mov	r5,r3
8008cc40:	00975f40 	call	800975f4 <__ledf2>
8008cc44:	103f270e 	bge	r2,zero,8008c8e4 <_strtod_r+0xab4>
8008cc48:	dd000a15 	stw	r20,40(sp)
8008cc4c:	a811883a 	mov	r8,r21
8008cc50:	dd001217 	ldw	r20,72(sp)
8008cc54:	d8800517 	ldw	r2,20(sp)
8008cc58:	002b883a 	mov	r21,zero
8008cc5c:	882d883a 	mov	r22,r17
8008cc60:	003f9706 	br	8008cac0 <_strtod_r+0xc90>
8008cc64:	01a52834 	movhi	r6,38048
8008cc68:	01cff834 	movhi	r7,16352
8008cc6c:	318d6544 	addi	r6,r6,13717
8008cc70:	39ffffc4 	addi	r7,r7,-1
8008cc74:	e009883a 	mov	r4,fp
8008cc78:	b80b883a 	mov	r5,r23
8008cc7c:	00975f40 	call	800975f4 <__ledf2>
8008cc80:	10000716 	blt	r2,zero,8008cca0 <_strtod_r+0xe70>
8008cc84:	018d6c34 	movhi	r6,13744
8008cc88:	31b94d44 	addi	r6,r6,-6859
8008cc8c:	01cff834 	movhi	r7,16352
8008cc90:	e009883a 	mov	r4,fp
8008cc94:	b80b883a 	mov	r5,r23
8008cc98:	00975180 	call	80097518 <__gedf2>
8008cc9c:	00bf110e 	bge	zero,r2,8008c8e4 <_strtod_r+0xab4>
8008cca0:	dd000a15 	stw	r20,40(sp)
8008cca4:	a811883a 	mov	r8,r21
8008cca8:	dd001217 	ldw	r20,72(sp)
8008ccac:	d8800517 	ldw	r2,20(sp)
8008ccb0:	902b883a 	mov	r21,r18
8008ccb4:	882d883a 	mov	r22,r17
8008ccb8:	003f8106 	br	8008cac0 <_strtod_r+0xc90>
8008ccbc:	b83e2f26 	beq	r23,zero,8008c57c <_strtod_r+0x74c>
8008ccc0:	05efc83a 	sub	r23,zero,r23
8008ccc4:	b88003cc 	andi	r2,r23,15
8008ccc8:	10000d26 	beq	r2,zero,8008cd00 <_strtod_r+0xed0>
8008cccc:	100490fa 	slli	r2,r2,3
8008ccd0:	00e002b4 	movhi	r3,32778
8008ccd4:	18f19204 	addi	r3,r3,-14776
8008ccd8:	1885883a 	add	r2,r3,r2
8008ccdc:	11800017 	ldw	r6,0(r2)
8008cce0:	11c00117 	ldw	r7,4(r2)
8008cce4:	9009883a 	mov	r4,r18
8008cce8:	880b883a 	mov	r5,r17
8008ccec:	da401315 	stw	r9,76(sp)
8008ccf0:	0096ba80 	call	80096ba8 <__divdf3>
8008ccf4:	da401317 	ldw	r9,76(sp)
8008ccf8:	1025883a 	mov	r18,r2
8008ccfc:	1823883a 	mov	r17,r3
8008cd00:	b82fd13a 	srai	r23,r23,4
8008cd04:	b83e1d26 	beq	r23,zero,8008c57c <_strtod_r+0x74c>
8008cd08:	008007c4 	movi	r2,31
8008cd0c:	15c02816 	blt	r2,r23,8008cdb0 <_strtod_r+0xf80>
8008cd10:	b880040c 	andi	r2,r23,16
8008cd14:	10019726 	beq	r2,zero,8008d374 <_strtod_r+0x1544>
8008cd18:	05c1880e 	bge	zero,r23,8008d33c <_strtod_r+0x150c>
8008cd1c:	00c01a84 	movi	r3,106
8008cd20:	d8c00915 	stw	r3,36(sp)
8008cd24:	04e002b4 	movhi	r19,32778
8008cd28:	9cf1d204 	addi	r19,r19,-14520
8008cd2c:	8807883a 	mov	r3,r17
8008cd30:	9005883a 	mov	r2,r18
8008cd34:	8023883a 	mov	r17,r16
8008cd38:	0009883a 	mov	r4,zero
8008cd3c:	9821883a 	mov	r16,r19
8008cd40:	da400a15 	stw	r9,40(sp)
8008cd44:	1827883a 	mov	r19,r3
8008cd48:	b980004c 	andi	r6,r23,1
8008cd4c:	30000626 	beq	r6,zero,8008cd68 <_strtod_r+0xf38>
8008cd50:	81800017 	ldw	r6,0(r16)
8008cd54:	81c00117 	ldw	r7,4(r16)
8008cd58:	1009883a 	mov	r4,r2
8008cd5c:	180b883a 	mov	r5,r3
8008cd60:	00976e80 	call	800976e8 <__muldf3>
8008cd64:	01000044 	movi	r4,1
8008cd68:	b82fd07a 	srai	r23,r23,1
8008cd6c:	84000204 	addi	r16,r16,8
8008cd70:	b83ff51e 	bne	r23,zero,8008cd48 <_strtod_r+0xf18>
8008cd74:	21003fcc 	andi	r4,r4,255
8008cd78:	8821883a 	mov	r16,r17
8008cd7c:	da400a17 	ldw	r9,40(sp)
8008cd80:	9823883a 	mov	r17,r19
8008cd84:	2001a51e 	bne	r4,zero,8008d41c <_strtod_r+0x15ec>
8008cd88:	d9000917 	ldw	r4,36(sp)
8008cd8c:	20016d1e 	bne	r4,zero,8008d344 <_strtod_r+0x1514>
8008cd90:	000d883a 	mov	r6,zero
8008cd94:	000f883a 	mov	r7,zero
8008cd98:	9009883a 	mov	r4,r18
8008cd9c:	880b883a 	mov	r5,r17
8008cda0:	da401315 	stw	r9,76(sp)
8008cda4:	00974900 	call	80097490 <__eqdf2>
8008cda8:	da401317 	ldw	r9,76(sp)
8008cdac:	103df41e 	bne	r2,zero,8008c580 <_strtod_r+0x750>
8008cdb0:	00800884 	movi	r2,34
8008cdb4:	80800015 	stw	r2,0(r16)
8008cdb8:	002b883a 	mov	r21,zero
8008cdbc:	002d883a 	mov	r22,zero
8008cdc0:	003ce306 	br	8008c150 <_strtod_r+0x320>
8008cdc4:	055387c4 	movi	r21,19999
8008cdc8:	003d6b06 	br	8008c378 <_strtod_r+0x548>
8008cdcc:	0440d434 	movhi	r17,848
8008cdd0:	1c63883a 	add	r17,r3,r17
8008cdd4:	882d883a 	mov	r22,r17
8008cdd8:	003ebe06 	br	8008c8d4 <_strtod_r+0xaa4>
8008cddc:	14403fcc 	andi	r17,r2,255
8008cde0:	8c40201c 	xori	r17,r17,128
8008cde4:	8c7fe004 	addi	r17,r17,-128
8008cde8:	dd400817 	ldw	r21,32(sp)
8008cdec:	0027883a 	mov	r19,zero
8008cdf0:	0039883a 	mov	fp,zero
8008cdf4:	002d883a 	mov	r22,zero
8008cdf8:	003c9906 	br	8008c060 <_strtod_r+0x230>
8008cdfc:	00c00944 	movi	r3,37
8008ce00:	1a47c83a 	sub	r3,r3,r9
8008ce04:	1d7d8c16 	blt	r3,r21,8008c438 <_strtod_r+0x608>
8008ce08:	1261c83a 	sub	r16,r2,r9
8008ce0c:	800490fa 	slli	r2,r16,3
8008ce10:	04e002b4 	movhi	r19,32778
8008ce14:	9cf19204 	addi	r19,r19,-14776
8008ce18:	9885883a 	add	r2,r19,r2
8008ce1c:	11000017 	ldw	r4,0(r2)
8008ce20:	11400117 	ldw	r5,4(r2)
8008ce24:	900d883a 	mov	r6,r18
8008ce28:	880f883a 	mov	r7,r17
8008ce2c:	00976e80 	call	800976e8 <__muldf3>
8008ce30:	ac0dc83a 	sub	r6,r21,r16
8008ce34:	300c90fa 	slli	r6,r6,3
8008ce38:	1009883a 	mov	r4,r2
8008ce3c:	180b883a 	mov	r5,r3
8008ce40:	9985883a 	add	r2,r19,r6
8008ce44:	11800017 	ldw	r6,0(r2)
8008ce48:	11c00117 	ldw	r7,4(r2)
8008ce4c:	00976e80 	call	800976e8 <__muldf3>
8008ce50:	102b883a 	mov	r21,r2
8008ce54:	182d883a 	mov	r22,r3
8008ce58:	003cbd06 	br	8008c150 <_strtod_r+0x320>
8008ce5c:	b811883a 	mov	r8,r23
8008ce60:	003e8606 	br	8008c87c <_strtod_r+0xa4c>
8008ce64:	d8000d15 	stw	zero,52(sp)
8008ce68:	05cffc34 	movhi	r23,16368
8008ce6c:	003e8006 	br	8008c870 <_strtod_r+0xa40>
8008ce70:	883f011e 	bne	r17,zero,8008ca78 <_strtod_r+0xc48>
8008ce74:	dd000a15 	stw	r20,40(sp)
8008ce78:	dd001217 	ldw	r20,72(sp)
8008ce7c:	a811883a 	mov	r8,r21
8008ce80:	00800884 	movi	r2,34
8008ce84:	80800015 	stw	r2,0(r16)
8008ce88:	002b883a 	mov	r21,zero
8008ce8c:	d8800517 	ldw	r2,20(sp)
8008ce90:	002d883a 	mov	r22,zero
8008ce94:	003f0a06 	br	8008cac0 <_strtod_r+0xc90>
8008ce98:	d9800517 	ldw	r6,20(sp)
8008ce9c:	30000826 	beq	r6,zero,8008cec0 <_strtod_r+0x1090>
8008cea0:	01400d44 	movi	r5,53
8008cea4:	d9000204 	addi	r4,sp,8
8008cea8:	d8801315 	stw	r2,76(sp)
8008ceac:	008b0c00 	call	8008b0c0 <__copybits>
8008ceb0:	d9400517 	ldw	r5,20(sp)
8008ceb4:	8009883a 	mov	r4,r16
8008ceb8:	008a2700 	call	8008a270 <_Bfree>
8008cebc:	d8801317 	ldw	r2,76(sp)
8008cec0:	00c00184 	movi	r3,6
8008cec4:	1d400f36 	bltu	r3,r21,8008cf04 <_strtod_r+0x10d4>
8008cec8:	a82a90ba 	slli	r21,r21,2
8008cecc:	00e00274 	movhi	r3,32777
8008ced0:	18f3b804 	addi	r3,r3,-12576
8008ced4:	a8eb883a 	add	r21,r21,r3
8008ced8:	a8c00017 	ldw	r3,0(r21)
8008cedc:	1800683a 	jmp	r3
8008cee0:	8008cf5c 	xori	zero,r16,9021
8008cee4:	8008cf34 	orhi	zero,r16,9020
8008cee8:	8008cf18 	cmpnei	zero,r16,9020
8008ceec:	8008cefc 	xorhi	zero,r16,9019
8008cef0:	8008cf24 	muli	zero,r16,9020
8008cef4:	8008cf34 	orhi	zero,r16,9020
8008cef8:	8008cf5c 	xori	zero,r16,9021
8008cefc:	045ffc34 	movhi	r17,32752
8008cf00:	0025883a 	mov	r18,zero
8008cf04:	1080020c 	andi	r2,r2,8
8008cf08:	902b883a 	mov	r21,r18
8008cf0c:	103c8f26 	beq	r2,zero,8008c14c <_strtod_r+0x31c>
8008cf10:	8da00034 	orhi	r22,r17,32768
8008cf14:	003c8e06 	br	8008c150 <_strtod_r+0x320>
8008cf18:	dc800217 	ldw	r18,8(sp)
8008cf1c:	dc400317 	ldw	r17,12(sp)
8008cf20:	003ff806 	br	8008cf04 <_strtod_r+0x10d4>
8008cf24:	04600034 	movhi	r17,32768
8008cf28:	8c7fffc4 	addi	r17,r17,-1
8008cf2c:	04bfffc4 	movi	r18,-1
8008cf30:	003ff406 	br	8008cf04 <_strtod_r+0x10d4>
8008cf34:	d8c00417 	ldw	r3,16(sp)
8008cf38:	dc400317 	ldw	r17,12(sp)
8008cf3c:	013ffc34 	movhi	r4,65520
8008cf40:	18c10cc4 	addi	r3,r3,1075
8008cf44:	1806953a 	slli	r3,r3,20
8008cf48:	213fffc4 	addi	r4,r4,-1
8008cf4c:	8922703a 	and	r17,r17,r4
8008cf50:	dc800217 	ldw	r18,8(sp)
8008cf54:	88e2b03a 	or	r17,r17,r3
8008cf58:	003fea06 	br	8008cf04 <_strtod_r+0x10d4>
8008cf5c:	0023883a 	mov	r17,zero
8008cf60:	0025883a 	mov	r18,zero
8008cf64:	003fe706 	br	8008cf04 <_strtod_r+0x10d4>
8008cf68:	01800044 	movi	r6,1
8008cf6c:	50d5883a 	add	r10,r10,r3
8008cf70:	2a4b883a 	add	r5,r5,r9
8008cf74:	19811a26 	beq	r3,r6,8008d3e0 <_strtod_r+0x15b0>
8008cf78:	01800204 	movi	r6,8
8008cf7c:	01c00404 	movi	r7,16
8008cf80:	4a400044 	addi	r9,r9,1
8008cf84:	48bfffc4 	addi	r2,r9,-1
8008cf88:	30801616 	blt	r6,r2,8008cfe4 <_strtod_r+0x11b4>
8008cf8c:	e70002a4 	muli	fp,fp,10
8008cf90:	497ffb1e 	bne	r9,r5,8008cf80 <_strtod_r+0x1150>
8008cf94:	d9800617 	ldw	r6,24(sp)
8008cf98:	4a400044 	addi	r9,r9,1
8008cf9c:	00c00204 	movi	r3,8
8008cfa0:	19400c0e 	bge	r3,r5,8008cfd4 <_strtod_r+0x11a4>
8008cfa4:	00800404 	movi	r2,16
8008cfa8:	000b883a 	mov	r5,zero
8008cfac:	127ea316 	blt	r2,r9,8008ca3c <_strtod_r+0xc0c>
8008cfb0:	988002a4 	muli	r2,r19,10
8008cfb4:	20a7883a 	add	r19,r4,r2
8008cfb8:	003ea006 	br	8008ca3c <_strtod_r+0xc0c>
8008cfbc:	d8800617 	ldw	r2,24(sp)
8008cfc0:	8c7ff404 	addi	r17,r17,-48
8008cfc4:	2a800044 	addi	r10,r5,1
8008cfc8:	d8800815 	stw	r2,32(sp)
8008cfcc:	100d883a 	mov	r6,r2
8008cfd0:	02400044 	movi	r9,1
8008cfd4:	e08002a4 	muli	r2,fp,10
8008cfd8:	000b883a 	mov	r5,zero
8008cfdc:	88b9883a 	add	fp,r17,r2
8008cfe0:	003e9606 	br	8008ca3c <_strtod_r+0xc0c>
8008cfe4:	3a7fea16 	blt	r7,r9,8008cf90 <_strtod_r+0x1160>
8008cfe8:	9cc002a4 	muli	r19,r19,10
8008cfec:	003fe806 	br	8008cf90 <_strtod_r+0x1160>
8008cff0:	00bffa84 	movi	r2,-22
8008cff4:	a8bd1016 	blt	r21,r2,8008c438 <_strtod_r+0x608>
8008cff8:	a82a90fa 	slli	r21,r21,3
8008cffc:	00a002b4 	movhi	r2,32778
8008d000:	10b19204 	addi	r2,r2,-14776
8008d004:	1545c83a 	sub	r2,r2,r21
8008d008:	11800017 	ldw	r6,0(r2)
8008d00c:	11c00117 	ldw	r7,4(r2)
8008d010:	9009883a 	mov	r4,r18
8008d014:	880b883a 	mov	r5,r17
8008d018:	0096ba80 	call	80096ba8 <__divdf3>
8008d01c:	102b883a 	mov	r21,r2
8008d020:	182d883a 	mov	r22,r3
8008d024:	003c4a06 	br	8008c150 <_strtod_r+0x320>
8008d028:	dd000a15 	stw	r20,40(sp)
8008d02c:	a811883a 	mov	r8,r21
8008d030:	dd001217 	ldw	r20,72(sp)
8008d034:	003e9e06 	br	8008cab0 <_strtod_r+0xc80>
8008d038:	016002b4 	movhi	r5,32778
8008d03c:	d9000617 	ldw	r4,24(sp)
8008d040:	2971c404 	addi	r5,r5,-14576
8008d044:	01c00644 	movi	r7,25
8008d048:	00000b06 	br	8008d078 <_strtod_r+0x1248>
8008d04c:	21000044 	addi	r4,r4,1
8008d050:	20800003 	ldbu	r2,0(r4)
8008d054:	10ffefc4 	addi	r3,r2,-65
8008d058:	10803fcc 	andi	r2,r2,255
8008d05c:	1080201c 	xori	r2,r2,128
8008d060:	18c03fcc 	andi	r3,r3,255
8008d064:	10bfe004 	addi	r2,r2,-128
8008d068:	38c00136 	bltu	r7,r3,8008d070 <_strtod_r+0x1240>
8008d06c:	10800804 	addi	r2,r2,32
8008d070:	29400044 	addi	r5,r5,1
8008d074:	11bbbb1e 	bne	r2,r6,8008bf64 <_strtod_r+0x134>
8008d078:	29800007 	ldb	r6,0(r5)
8008d07c:	303ff31e 	bne	r6,zero,8008d04c <_strtod_r+0x121c>
8008d080:	01a002b4 	movhi	r6,32778
8008d084:	d9000615 	stw	r4,24(sp)
8008d088:	31b1c504 	addi	r6,r6,-14572
8008d08c:	200b883a 	mov	r5,r4
8008d090:	02000644 	movi	r8,25
8008d094:	00000a06 	br	8008d0c0 <_strtod_r+0x1290>
8008d098:	28800003 	ldbu	r2,0(r5)
8008d09c:	10ffefc4 	addi	r3,r2,-65
8008d0a0:	10803fcc 	andi	r2,r2,255
8008d0a4:	1080201c 	xori	r2,r2,128
8008d0a8:	18c03fcc 	andi	r3,r3,255
8008d0ac:	10bfe004 	addi	r2,r2,-128
8008d0b0:	40c00136 	bltu	r8,r3,8008d0b8 <_strtod_r+0x1288>
8008d0b4:	10800804 	addi	r2,r2,32
8008d0b8:	31800044 	addi	r6,r6,1
8008d0bc:	11c0711e 	bne	r2,r7,8008d284 <_strtod_r+0x1454>
8008d0c0:	31c00007 	ldb	r7,0(r6)
8008d0c4:	29400044 	addi	r5,r5,1
8008d0c8:	383ff31e 	bne	r7,zero,8008d098 <_strtod_r+0x1268>
8008d0cc:	d9400615 	stw	r5,24(sp)
8008d0d0:	045ffc34 	movhi	r17,32752
8008d0d4:	0025883a 	mov	r18,zero
8008d0d8:	003c1b06 	br	8008c148 <_strtod_r+0x318>
8008d0dc:	000b883a 	mov	r5,zero
8008d0e0:	003ccc06 	br	8008c414 <_strtod_r+0x5e4>
8008d0e4:	d9400e17 	ldw	r5,56(sp)
8008d0e8:	dd000a15 	stw	r20,40(sp)
8008d0ec:	00800434 	movhi	r2,16
8008d0f0:	a811883a 	mov	r8,r21
8008d0f4:	dd001217 	ldw	r20,72(sp)
8008d0f8:	dd401117 	ldw	r21,68(sp)
8008d0fc:	dd801017 	ldw	r22,64(sp)
8008d100:	10bfffc4 	addi	r2,r2,-1
8008d104:	28005626 	beq	r5,zero,8008d260 <_strtod_r+0x1430>
8008d108:	8886703a 	and	r3,r17,r2
8008d10c:	18807826 	beq	r3,r2,8008d2f0 <_strtod_r+0x14c0>
8008d110:	d8c00b17 	ldw	r3,44(sp)
8008d114:	18005726 	beq	r3,zero,8008d274 <_strtod_r+0x1444>
8008d118:	1c44703a 	and	r2,r3,r17
8008d11c:	10000f26 	beq	r2,zero,8008d15c <_strtod_r+0x132c>
8008d120:	d9000e17 	ldw	r4,56(sp)
8008d124:	d9800917 	ldw	r6,36(sp)
8008d128:	20005e26 	beq	r4,zero,8008d2a4 <_strtod_r+0x1474>
8008d12c:	9009883a 	mov	r4,r18
8008d130:	880b883a 	mov	r5,r17
8008d134:	da001315 	stw	r8,76(sp)
8008d138:	008bdcc0 	call	8008bdcc <sulp>
8008d13c:	100d883a 	mov	r6,r2
8008d140:	180f883a 	mov	r7,r3
8008d144:	9009883a 	mov	r4,r18
8008d148:	880b883a 	mov	r5,r17
8008d14c:	00962fc0 	call	800962fc <__adddf3>
8008d150:	da001317 	ldw	r8,76(sp)
8008d154:	102b883a 	mov	r21,r2
8008d158:	182d883a 	mov	r22,r3
8008d15c:	d8c00917 	ldw	r3,36(sp)
8008d160:	18000f26 	beq	r3,zero,8008d1a0 <_strtod_r+0x1370>
8008d164:	a809883a 	mov	r4,r21
8008d168:	b00b883a 	mov	r5,r22
8008d16c:	000d883a 	mov	r6,zero
8008d170:	01ce5434 	movhi	r7,14672
8008d174:	da001315 	stw	r8,76(sp)
8008d178:	00976e80 	call	800976e8 <__muldf3>
8008d17c:	102b883a 	mov	r21,r2
8008d180:	182d883a 	mov	r22,r3
8008d184:	da001317 	ldw	r8,76(sp)
8008d188:	1800051e 	bne	r3,zero,8008d1a0 <_strtod_r+0x1370>
8008d18c:	d8800517 	ldw	r2,20(sp)
8008d190:	a83e4b1e 	bne	r21,zero,8008cac0 <_strtod_r+0xc90>
8008d194:	00c00884 	movi	r3,34
8008d198:	80c00015 	stw	r3,0(r16)
8008d19c:	003e4806 	br	8008cac0 <_strtod_r+0xc90>
8008d1a0:	d8800517 	ldw	r2,20(sp)
8008d1a4:	003e4606 	br	8008cac0 <_strtod_r+0xc90>
8008d1a8:	d9000e17 	ldw	r4,56(sp)
8008d1ac:	dd000a15 	stw	r20,40(sp)
8008d1b0:	a811883a 	mov	r8,r21
8008d1b4:	dd001217 	ldw	r20,72(sp)
8008d1b8:	dd401117 	ldw	r21,68(sp)
8008d1bc:	dd801017 	ldw	r22,64(sp)
8008d1c0:	203fe61e 	bne	r4,zero,8008d15c <_strtod_r+0x132c>
8008d1c4:	903fe51e 	bne	r18,zero,8008d15c <_strtod_r+0x132c>
8008d1c8:	00800434 	movhi	r2,16
8008d1cc:	10bfffc4 	addi	r2,r2,-1
8008d1d0:	8884703a 	and	r2,r17,r2
8008d1d4:	103fe11e 	bne	r2,zero,8008d15c <_strtod_r+0x132c>
8008d1d8:	8ddffc2c 	andhi	r23,r17,32752
8008d1dc:	0081ac34 	movhi	r2,1712
8008d1e0:	15ffde2e 	bgeu	r2,r23,8008d15c <_strtod_r+0x132c>
8008d1e4:	40800517 	ldw	r2,20(r8)
8008d1e8:	1000031e 	bne	r2,zero,8008d1f8 <_strtod_r+0x13c8>
8008d1ec:	40800417 	ldw	r2,16(r8)
8008d1f0:	00c00044 	movi	r3,1
8008d1f4:	18bfd90e 	bge	r3,r2,8008d15c <_strtod_r+0x132c>
8008d1f8:	400b883a 	mov	r5,r8
8008d1fc:	01800044 	movi	r6,1
8008d200:	8009883a 	mov	r4,r16
8008d204:	008a9480 	call	8008a948 <__lshift>
8008d208:	980b883a 	mov	r5,r19
8008d20c:	1009883a 	mov	r4,r2
8008d210:	d8801315 	stw	r2,76(sp)
8008d214:	008aa900 	call	8008aa90 <__mcmp>
8008d218:	da001317 	ldw	r8,76(sp)
8008d21c:	00bfcf0e 	bge	zero,r2,8008d15c <_strtod_r+0x132c>
8008d220:	d8c00917 	ldw	r3,36(sp)
8008d224:	18005c26 	beq	r3,zero,8008d398 <_strtod_r+0x1568>
8008d228:	0081ac34 	movhi	r2,1712
8008d22c:	15c05a16 	blt	r2,r23,8008d398 <_strtod_r+0x1568>
8008d230:	0080dc34 	movhi	r2,880
8008d234:	15ffcb16 	blt	r2,r23,8008d164 <_strtod_r+0x1334>
8008d238:	003f1106 	br	8008ce80 <_strtod_r+0x1050>
8008d23c:	002d883a 	mov	r22,zero
8008d240:	022ff834 	movhi	r8,49120
8008d244:	d8000d15 	stw	zero,52(sp)
8008d248:	05cff834 	movhi	r23,16352
8008d24c:	003ded06 	br	8008ca04 <_strtod_r+0xbd4>
8008d250:	0440d434 	movhi	r17,848
8008d254:	1c63883a 	add	r17,r3,r17
8008d258:	d8000915 	stw	zero,36(sp)
8008d25c:	003cc806 	br	8008c580 <_strtod_r+0x750>
8008d260:	8884703a 	and	r2,r17,r2
8008d264:	103faa1e 	bne	r2,zero,8008d110 <_strtod_r+0x12e0>
8008d268:	903fa91e 	bne	r18,zero,8008d110 <_strtod_r+0x12e0>
8008d26c:	8ddffc2c 	andhi	r23,r17,32752
8008d270:	003feb06 	br	8008d220 <_strtod_r+0x13f0>
8008d274:	d8c00d17 	ldw	r3,52(sp)
8008d278:	1cae703a 	and	r23,r3,r18
8008d27c:	b83fb726 	beq	r23,zero,8008d15c <_strtod_r+0x132c>
8008d280:	003fa706 	br	8008d120 <_strtod_r+0x12f0>
8008d284:	21000044 	addi	r4,r4,1
8008d288:	d9000615 	stw	r4,24(sp)
8008d28c:	003f9006 	br	8008d0d0 <_strtod_r+0x12a0>
8008d290:	016002b4 	movhi	r5,32778
8008d294:	29718804 	addi	r5,r5,-14816
8008d298:	d9400915 	stw	r5,36(sp)
8008d29c:	0027883a 	mov	r19,zero
8008d2a0:	003ca206 	br	8008c52c <_strtod_r+0x6fc>
8008d2a4:	9009883a 	mov	r4,r18
8008d2a8:	880b883a 	mov	r5,r17
8008d2ac:	da001315 	stw	r8,76(sp)
8008d2b0:	008bdcc0 	call	8008bdcc <sulp>
8008d2b4:	100d883a 	mov	r6,r2
8008d2b8:	180f883a 	mov	r7,r3
8008d2bc:	9009883a 	mov	r4,r18
8008d2c0:	880b883a 	mov	r5,r17
8008d2c4:	0097e000 	call	80097e00 <__subdf3>
8008d2c8:	000d883a 	mov	r6,zero
8008d2cc:	000f883a 	mov	r7,zero
8008d2d0:	1009883a 	mov	r4,r2
8008d2d4:	180b883a 	mov	r5,r3
8008d2d8:	102b883a 	mov	r21,r2
8008d2dc:	182d883a 	mov	r22,r3
8008d2e0:	00974900 	call	80097490 <__eqdf2>
8008d2e4:	da001317 	ldw	r8,76(sp)
8008d2e8:	103ee526 	beq	r2,zero,8008ce80 <_strtod_r+0x1050>
8008d2ec:	003f9b06 	br	8008d15c <_strtod_r+0x132c>
8008d2f0:	d8800917 	ldw	r2,36(sp)
8008d2f4:	10002226 	beq	r2,zero,8008d380 <_strtod_r+0x1550>
8008d2f8:	889ffc2c 	andhi	r2,r17,32752
8008d2fc:	00c1a834 	movhi	r3,1696
8008d300:	18801f36 	bltu	r3,r2,8008d380 <_strtod_r+0x1550>
8008d304:	1004d53a 	srli	r2,r2,20
8008d308:	00c01ac4 	movi	r3,107
8008d30c:	1887c83a 	sub	r3,r3,r2
8008d310:	00bfffc4 	movi	r2,-1
8008d314:	10c4983a 	sll	r2,r2,r3
8008d318:	14bf7d1e 	bne	r2,r18,8008d110 <_strtod_r+0x12e0>
8008d31c:	00dffc34 	movhi	r3,32752
8008d320:	18ffffc4 	addi	r3,r3,-1
8008d324:	88c03526 	beq	r17,r3,8008d3fc <_strtod_r+0x15cc>
8008d328:	8c5ffc2c 	andhi	r17,r17,32752
8008d32c:	00800434 	movhi	r2,16
8008d330:	002b883a 	mov	r21,zero
8008d334:	88ad883a 	add	r22,r17,r2
8008d338:	003f8806 	br	8008d15c <_strtod_r+0x132c>
8008d33c:	01401a84 	movi	r5,106
8008d340:	d9400915 	stw	r5,36(sp)
8008d344:	8ddffc2c 	andhi	r23,r17,32752
8008d348:	b82ed53a 	srli	r23,r23,20
8008d34c:	00801ac4 	movi	r2,107
8008d350:	15c5c83a 	sub	r2,r2,r23
8008d354:	00be8e0e 	bge	zero,r2,8008cd90 <_strtod_r+0xf60>
8008d358:	00c007c4 	movi	r3,31
8008d35c:	18800a0e 	bge	r3,r2,8008d388 <_strtod_r+0x1558>
8008d360:	00c00d04 	movi	r3,52
8008d364:	0025883a 	mov	r18,zero
8008d368:	1880270e 	bge	r3,r2,8008d408 <_strtod_r+0x15d8>
8008d36c:	0440dc34 	movhi	r17,880
8008d370:	003e8706 	br	8008cd90 <_strtod_r+0xf60>
8008d374:	d8000915 	stw	zero,36(sp)
8008d378:	05fe6a16 	blt	zero,r23,8008cd24 <_strtod_r+0xef4>
8008d37c:	003e8406 	br	8008cd90 <_strtod_r+0xf60>
8008d380:	00bfffc4 	movi	r2,-1
8008d384:	003fe406 	br	8008d318 <_strtod_r+0x14e8>
8008d388:	00ffffc4 	movi	r3,-1
8008d38c:	1884983a 	sll	r2,r3,r2
8008d390:	14a4703a 	and	r18,r2,r18
8008d394:	003e7e06 	br	8008cd90 <_strtod_r+0xf60>
8008d398:	00bffc34 	movhi	r2,65520
8008d39c:	b8af883a 	add	r23,r23,r2
8008d3a0:	057fffc4 	movi	r21,-1
8008d3a4:	00800434 	movhi	r2,16
8008d3a8:	1545883a 	add	r2,r2,r21
8008d3ac:	b8acb03a 	or	r22,r23,r2
8008d3b0:	003f6a06 	br	8008d15c <_strtod_r+0x132c>
8008d3b4:	016002b4 	movhi	r5,32778
8008d3b8:	2971c804 	addi	r5,r5,-14560
8008d3bc:	d9800204 	addi	r6,sp,8
8008d3c0:	d9000604 	addi	r4,sp,24
8008d3c4:	0093c680 	call	80093c68 <__hexnan>
8008d3c8:	00c00144 	movi	r3,5
8008d3cc:	10fb5c1e 	bne	r2,r3,8008c140 <_strtod_r+0x310>
8008d3d0:	dc400317 	ldw	r17,12(sp)
8008d3d4:	dc800217 	ldw	r18,8(sp)
8008d3d8:	8c5ffc34 	orhi	r17,r17,32752
8008d3dc:	003b5a06 	br	8008c148 <_strtod_r+0x318>
8008d3e0:	480b883a 	mov	r5,r9
8008d3e4:	d9800617 	ldw	r6,24(sp)
8008d3e8:	4a400044 	addi	r9,r9,1
8008d3ec:	003eeb06 	br	8008cf9c <_strtod_r+0x116c>
8008d3f0:	1025883a 	mov	r18,r2
8008d3f4:	1823883a 	mov	r17,r3
8008d3f8:	003c4c06 	br	8008c52c <_strtod_r+0x6fc>
8008d3fc:	00ffffc4 	movi	r3,-1
8008d400:	10ffc91e 	bne	r2,r3,8008d328 <_strtod_r+0x14f8>
8008d404:	003da906 	br	8008caac <_strtod_r+0xc7c>
8008d408:	10bff804 	addi	r2,r2,-32
8008d40c:	00ffffc4 	movi	r3,-1
8008d410:	1884983a 	sll	r2,r3,r2
8008d414:	1462703a 	and	r17,r2,r17
8008d418:	003e5d06 	br	8008cd90 <_strtod_r+0xf60>
8008d41c:	1025883a 	mov	r18,r2
8008d420:	1823883a 	mov	r17,r3
8008d424:	003e5806 	br	8008cd88 <_strtod_r+0xf58>

8008d428 <strtod>:
8008d428:	00a002b4 	movhi	r2,32778
8008d42c:	10ba7304 	addi	r2,r2,-5684
8008d430:	280d883a 	mov	r6,r5
8008d434:	200b883a 	mov	r5,r4
8008d438:	11000017 	ldw	r4,0(r2)
8008d43c:	008be301 	jmpi	8008be30 <_strtod_r>

8008d440 <strtof>:
8008d440:	defffb04 	addi	sp,sp,-20
8008d444:	dcc00315 	stw	r19,12(sp)
8008d448:	04e002b4 	movhi	r19,32778
8008d44c:	9cfa7304 	addi	r19,r19,-5684
8008d450:	280d883a 	mov	r6,r5
8008d454:	200b883a 	mov	r5,r4
8008d458:	99000017 	ldw	r4,0(r19)
8008d45c:	dfc00415 	stw	ra,16(sp)
8008d460:	dc800215 	stw	r18,8(sp)
8008d464:	dc400115 	stw	r17,4(sp)
8008d468:	dc000015 	stw	r16,0(sp)
8008d46c:	008be300 	call	8008be30 <_strtod_r>
8008d470:	1009883a 	mov	r4,r2
8008d474:	180b883a 	mov	r5,r3
8008d478:	1025883a 	mov	r18,r2
8008d47c:	1823883a 	mov	r17,r3
8008d480:	00989000 	call	80098900 <__truncdfsf2>
8008d484:	000b883a 	mov	r5,zero
8008d488:	1009883a 	mov	r4,r2
8008d48c:	1021883a 	mov	r16,r2
8008d490:	00961000 	call	80096100 <__eqsf2>
8008d494:	1000111e 	bne	r2,zero,8008d4dc <strtof+0x9c>
8008d498:	000d883a 	mov	r6,zero
8008d49c:	000f883a 	mov	r7,zero
8008d4a0:	9009883a 	mov	r4,r18
8008d4a4:	880b883a 	mov	r5,r17
8008d4a8:	00974900 	call	80097490 <__eqdf2>
8008d4ac:	10000b26 	beq	r2,zero,8008d4dc <strtof+0x9c>
8008d4b0:	98800017 	ldw	r2,0(r19)
8008d4b4:	00c00884 	movi	r3,34
8008d4b8:	10c00015 	stw	r3,0(r2)
8008d4bc:	8005883a 	mov	r2,r16
8008d4c0:	dfc00417 	ldw	ra,16(sp)
8008d4c4:	dcc00317 	ldw	r19,12(sp)
8008d4c8:	dc800217 	ldw	r18,8(sp)
8008d4cc:	dc400117 	ldw	r17,4(sp)
8008d4d0:	dc000017 	ldw	r16,0(sp)
8008d4d4:	dec00504 	addi	sp,sp,20
8008d4d8:	f800283a 	ret
8008d4dc:	015fe034 	movhi	r5,32640
8008d4e0:	297fffc4 	addi	r5,r5,-1
8008d4e4:	8009883a 	mov	r4,r16
8008d4e8:	00961780 	call	80096178 <__gesf2>
8008d4ec:	0080070e 	bge	zero,r2,8008d50c <strtof+0xcc>
8008d4f0:	01dffc34 	movhi	r7,32752
8008d4f4:	39ffffc4 	addi	r7,r7,-1
8008d4f8:	01bfffc4 	movi	r6,-1
8008d4fc:	9009883a 	mov	r4,r18
8008d500:	880b883a 	mov	r5,r17
8008d504:	00975180 	call	80097518 <__gedf2>
8008d508:	00bfe90e 	bge	zero,r2,8008d4b0 <strtof+0x70>
8008d50c:	017fe034 	movhi	r5,65408
8008d510:	297fffc4 	addi	r5,r5,-1
8008d514:	8009883a 	mov	r4,r16
8008d518:	00962340 	call	80096234 <__lesf2>
8008d51c:	103fe70e 	bge	r2,zero,8008d4bc <strtof+0x7c>
8008d520:	01fffc34 	movhi	r7,65520
8008d524:	39ffffc4 	addi	r7,r7,-1
8008d528:	01bfffc4 	movi	r6,-1
8008d52c:	9009883a 	mov	r4,r18
8008d530:	880b883a 	mov	r5,r17
8008d534:	00975f40 	call	800975f4 <__ledf2>
8008d538:	103fdd0e 	bge	r2,zero,8008d4b0 <strtof+0x70>
8008d53c:	003fdf06 	br	8008d4bc <strtof+0x7c>

8008d540 <_strtol_r>:
8008d540:	00a002b4 	movhi	r2,32778
8008d544:	defff404 	addi	sp,sp,-48
8008d548:	10ba7604 	addi	r2,r2,-5672
8008d54c:	dd400715 	stw	r21,28(sp)
8008d550:	15400017 	ldw	r21,0(r2)
8008d554:	dd800815 	stw	r22,32(sp)
8008d558:	dd000615 	stw	r20,24(sp)
8008d55c:	dcc00515 	stw	r19,20(sp)
8008d560:	d9000015 	stw	r4,0(sp)
8008d564:	dfc00b15 	stw	ra,44(sp)
8008d568:	df000a15 	stw	fp,40(sp)
8008d56c:	ddc00915 	stw	r23,36(sp)
8008d570:	dc800415 	stw	r18,16(sp)
8008d574:	dc400315 	stw	r17,12(sp)
8008d578:	dc000215 	stw	r16,8(sp)
8008d57c:	2829883a 	mov	r20,r5
8008d580:	3027883a 	mov	r19,r6
8008d584:	382d883a 	mov	r22,r7
8008d588:	2809883a 	mov	r4,r5
8008d58c:	24000003 	ldbu	r16,0(r4)
8008d590:	24400044 	addi	r17,r4,1
8008d594:	2007883a 	mov	r3,r4
8008d598:	ac05883a 	add	r2,r21,r16
8008d59c:	10800043 	ldbu	r2,1(r2)
8008d5a0:	8809883a 	mov	r4,r17
8008d5a4:	1080020c 	andi	r2,r2,8
8008d5a8:	103ff81e 	bne	r2,zero,8008d58c <_strtol_r+0x4c>
8008d5ac:	00800b44 	movi	r2,45
8008d5b0:	80805826 	beq	r16,r2,8008d714 <_strtol_r+0x1d4>
8008d5b4:	00800ac4 	movi	r2,43
8008d5b8:	80805a26 	beq	r16,r2,8008d724 <_strtol_r+0x1e4>
8008d5bc:	0039883a 	mov	fp,zero
8008d5c0:	b0004426 	beq	r22,zero,8008d6d4 <_strtol_r+0x194>
8008d5c4:	00800404 	movi	r2,16
8008d5c8:	b0806026 	beq	r22,r2,8008d74c <_strtol_r+0x20c>
8008d5cc:	b02f883a 	mov	r23,r22
8008d5d0:	00a00034 	movhi	r2,32768
8008d5d4:	e025003a 	cmpeq	r18,fp,zero
8008d5d8:	14a5c83a 	sub	r18,r2,r18
8008d5dc:	b80b883a 	mov	r5,r23
8008d5e0:	9009883a 	mov	r4,r18
8008d5e4:	00822ec0 	call	800822ec <__umodsi3>
8008d5e8:	b80b883a 	mov	r5,r23
8008d5ec:	9009883a 	mov	r4,r18
8008d5f0:	d8800115 	stw	r2,4(sp)
8008d5f4:	00822880 	call	80082288 <__udivsi3>
8008d5f8:	ac07883a 	add	r3,r21,r16
8008d5fc:	18c00043 	ldbu	r3,1(r3)
8008d600:	880b883a 	mov	r5,r17
8008d604:	000d883a 	mov	r6,zero
8008d608:	1a00010c 	andi	r8,r3,4
8008d60c:	0009883a 	mov	r4,zero
8008d610:	02800044 	movi	r10,1
8008d614:	027fffc4 	movi	r9,-1
8008d618:	d9c00117 	ldw	r7,4(sp)
8008d61c:	40000e26 	beq	r8,zero,8008d658 <_strtol_r+0x118>
8008d620:	843ff404 	addi	r16,r16,-48
8008d624:	8580120e 	bge	r16,r22,8008d670 <_strtol_r+0x130>
8008d628:	32400526 	beq	r6,r9,8008d640 <_strtol_r+0x100>
8008d62c:	11002536 	bltu	r2,r4,8008d6c4 <_strtol_r+0x184>
8008d630:	20802326 	beq	r4,r2,8008d6c0 <_strtol_r+0x180>
8008d634:	25c9383a 	mul	r4,r4,r23
8008d638:	01800044 	movi	r6,1
8008d63c:	8109883a 	add	r4,r16,r4
8008d640:	2c000003 	ldbu	r16,0(r5)
8008d644:	29400044 	addi	r5,r5,1
8008d648:	ac07883a 	add	r3,r21,r16
8008d64c:	18c00043 	ldbu	r3,1(r3)
8008d650:	1a00010c 	andi	r8,r3,4
8008d654:	403ff21e 	bne	r8,zero,8008d620 <_strtol_r+0xe0>
8008d658:	18c000cc 	andi	r3,r3,3
8008d65c:	18000426 	beq	r3,zero,8008d670 <_strtol_r+0x130>
8008d660:	1a801a26 	beq	r3,r10,8008d6cc <_strtol_r+0x18c>
8008d664:	00c015c4 	movi	r3,87
8008d668:	80e1c83a 	sub	r16,r16,r3
8008d66c:	85bfee16 	blt	r16,r22,8008d628 <_strtol_r+0xe8>
8008d670:	00bfffc4 	movi	r2,-1
8008d674:	30801e26 	beq	r6,r2,8008d6f0 <_strtol_r+0x1b0>
8008d678:	e0001b1e 	bne	fp,zero,8008d6e8 <_strtol_r+0x1a8>
8008d67c:	2005883a 	mov	r2,r4
8008d680:	98000326 	beq	r19,zero,8008d690 <_strtol_r+0x150>
8008d684:	3000211e 	bne	r6,zero,8008d70c <_strtol_r+0x1cc>
8008d688:	a00b883a 	mov	r5,r20
8008d68c:	99400015 	stw	r5,0(r19)
8008d690:	dfc00b17 	ldw	ra,44(sp)
8008d694:	df000a17 	ldw	fp,40(sp)
8008d698:	ddc00917 	ldw	r23,36(sp)
8008d69c:	dd800817 	ldw	r22,32(sp)
8008d6a0:	dd400717 	ldw	r21,28(sp)
8008d6a4:	dd000617 	ldw	r20,24(sp)
8008d6a8:	dcc00517 	ldw	r19,20(sp)
8008d6ac:	dc800417 	ldw	r18,16(sp)
8008d6b0:	dc400317 	ldw	r17,12(sp)
8008d6b4:	dc000217 	ldw	r16,8(sp)
8008d6b8:	dec00c04 	addi	sp,sp,48
8008d6bc:	f800283a 	ret
8008d6c0:	3c3fdc0e 	bge	r7,r16,8008d634 <_strtol_r+0xf4>
8008d6c4:	01bfffc4 	movi	r6,-1
8008d6c8:	003fdd06 	br	8008d640 <_strtol_r+0x100>
8008d6cc:	00c00dc4 	movi	r3,55
8008d6d0:	003fe506 	br	8008d668 <_strtol_r+0x128>
8008d6d4:	00800c04 	movi	r2,48
8008d6d8:	80801626 	beq	r16,r2,8008d734 <_strtol_r+0x1f4>
8008d6dc:	05800284 	movi	r22,10
8008d6e0:	b02f883a 	mov	r23,r22
8008d6e4:	003fba06 	br	8008d5d0 <_strtol_r+0x90>
8008d6e8:	0109c83a 	sub	r4,zero,r4
8008d6ec:	003fe306 	br	8008d67c <_strtol_r+0x13c>
8008d6f0:	d9000017 	ldw	r4,0(sp)
8008d6f4:	00c00884 	movi	r3,34
8008d6f8:	e005003a 	cmpeq	r2,fp,zero
8008d6fc:	20c00015 	stw	r3,0(r4)
8008d700:	00e00034 	movhi	r3,32768
8008d704:	1885c83a 	sub	r2,r3,r2
8008d708:	983fe126 	beq	r19,zero,8008d690 <_strtol_r+0x150>
8008d70c:	297fffc4 	addi	r5,r5,-1
8008d710:	003fde06 	br	8008d68c <_strtol_r+0x14c>
8008d714:	1c400084 	addi	r17,r3,2
8008d718:	1c000043 	ldbu	r16,1(r3)
8008d71c:	07000044 	movi	fp,1
8008d720:	003fa706 	br	8008d5c0 <_strtol_r+0x80>
8008d724:	1c400084 	addi	r17,r3,2
8008d728:	1c000043 	ldbu	r16,1(r3)
8008d72c:	0039883a 	mov	fp,zero
8008d730:	003fa306 	br	8008d5c0 <_strtol_r+0x80>
8008d734:	88800003 	ldbu	r2,0(r17)
8008d738:	00c01604 	movi	r3,88
8008d73c:	108037cc 	andi	r2,r2,223
8008d740:	10c00826 	beq	r2,r3,8008d764 <_strtol_r+0x224>
8008d744:	05800204 	movi	r22,8
8008d748:	003fa006 	br	8008d5cc <_strtol_r+0x8c>
8008d74c:	00800c04 	movi	r2,48
8008d750:	80bf9e1e 	bne	r16,r2,8008d5cc <_strtol_r+0x8c>
8008d754:	88800003 	ldbu	r2,0(r17)
8008d758:	00c01604 	movi	r3,88
8008d75c:	108037cc 	andi	r2,r2,223
8008d760:	10ff9a1e 	bne	r2,r3,8008d5cc <_strtol_r+0x8c>
8008d764:	05c00404 	movi	r23,16
8008d768:	8c000043 	ldbu	r16,1(r17)
8008d76c:	b82d883a 	mov	r22,r23
8008d770:	8c400084 	addi	r17,r17,2
8008d774:	003f9606 	br	8008d5d0 <_strtol_r+0x90>

8008d778 <strtol>:
8008d778:	00a002b4 	movhi	r2,32778
8008d77c:	10ba7304 	addi	r2,r2,-5684
8008d780:	300f883a 	mov	r7,r6
8008d784:	280d883a 	mov	r6,r5
8008d788:	200b883a 	mov	r5,r4
8008d78c:	11000017 	ldw	r4,0(r2)
8008d790:	008d5401 	jmpi	8008d540 <_strtol_r>

8008d794 <_strtoll_r>:
8008d794:	00a002b4 	movhi	r2,32778
8008d798:	defff304 	addi	sp,sp,-52
8008d79c:	10ba7604 	addi	r2,r2,-5672
8008d7a0:	dc800515 	stw	r18,20(sp)
8008d7a4:	14800017 	ldw	r18,0(r2)
8008d7a8:	dd800915 	stw	r22,36(sp)
8008d7ac:	dd400815 	stw	r21,32(sp)
8008d7b0:	dcc00615 	stw	r19,24(sp)
8008d7b4:	d9000015 	stw	r4,0(sp)
8008d7b8:	dfc00c15 	stw	ra,48(sp)
8008d7bc:	df000b15 	stw	fp,44(sp)
8008d7c0:	ddc00a15 	stw	r23,40(sp)
8008d7c4:	dd000715 	stw	r20,28(sp)
8008d7c8:	dc400415 	stw	r17,16(sp)
8008d7cc:	dc000315 	stw	r16,12(sp)
8008d7d0:	282d883a 	mov	r22,r5
8008d7d4:	302b883a 	mov	r21,r6
8008d7d8:	3827883a 	mov	r19,r7
8008d7dc:	2809883a 	mov	r4,r5
8008d7e0:	24000003 	ldbu	r16,0(r4)
8008d7e4:	24400044 	addi	r17,r4,1
8008d7e8:	2007883a 	mov	r3,r4
8008d7ec:	9405883a 	add	r2,r18,r16
8008d7f0:	10800043 	ldbu	r2,1(r2)
8008d7f4:	8809883a 	mov	r4,r17
8008d7f8:	1080020c 	andi	r2,r2,8
8008d7fc:	103ff81e 	bne	r2,zero,8008d7e0 <_strtoll_r+0x4c>
8008d800:	00800b44 	movi	r2,45
8008d804:	80807826 	beq	r16,r2,8008d9e8 <_strtoll_r+0x254>
8008d808:	00800ac4 	movi	r2,43
8008d80c:	80807a26 	beq	r16,r2,8008d9f8 <_strtoll_r+0x264>
8008d810:	0039883a 	mov	fp,zero
8008d814:	98004e26 	beq	r19,zero,8008d950 <_strtoll_r+0x1bc>
8008d818:	00800404 	movi	r2,16
8008d81c:	98808226 	beq	r19,r2,8008da28 <_strtoll_r+0x294>
8008d820:	982fd7fa 	srai	r23,r19,31
8008d824:	9829883a 	mov	r20,r19
8008d828:	e0004f26 	beq	fp,zero,8008d968 <_strtoll_r+0x1d4>
8008d82c:	0017883a 	mov	r11,zero
8008d830:	02a00034 	movhi	r10,32768
8008d834:	5809883a 	mov	r4,r11
8008d838:	500b883a 	mov	r5,r10
8008d83c:	a00d883a 	mov	r6,r20
8008d840:	b80f883a 	mov	r7,r23
8008d844:	da800215 	stw	r10,8(sp)
8008d848:	dac00115 	stw	r11,4(sp)
8008d84c:	0095bc80 	call	80095bc8 <__umoddi3>
8008d850:	dac00117 	ldw	r11,4(sp)
8008d854:	da800217 	ldw	r10,8(sp)
8008d858:	a00d883a 	mov	r6,r20
8008d85c:	5809883a 	mov	r4,r11
8008d860:	500b883a 	mov	r5,r10
8008d864:	b80f883a 	mov	r7,r23
8008d868:	d8800115 	stw	r2,4(sp)
8008d86c:	00956500 	call	80095650 <__udivdi3>
8008d870:	9409883a 	add	r4,r18,r16
8008d874:	21000043 	ldbu	r4,1(r4)
8008d878:	1019883a 	mov	r12,r2
8008d87c:	880b883a 	mov	r5,r17
8008d880:	2240010c 	andi	r9,r4,4
8008d884:	0015883a 	mov	r10,zero
8008d888:	000d883a 	mov	r6,zero
8008d88c:	000f883a 	mov	r7,zero
8008d890:	03400044 	movi	r13,1
8008d894:	02ffffc4 	movi	r11,-1
8008d898:	da000117 	ldw	r8,4(sp)
8008d89c:	48000d26 	beq	r9,zero,8008d8d4 <_strtoll_r+0x140>
8008d8a0:	843ff404 	addi	r16,r16,-48
8008d8a4:	84c0110e 	bge	r16,r19,8008d8ec <_strtoll_r+0x158>
8008d8a8:	52c00426 	beq	r10,r11,8008d8bc <_strtoll_r+0x128>
8008d8ac:	19c00236 	bltu	r3,r7,8008d8b8 <_strtoll_r+0x124>
8008d8b0:	38c0311e 	bne	r7,r3,8008d978 <_strtoll_r+0x1e4>
8008d8b4:	6180302e 	bgeu	r12,r6,8008d978 <_strtoll_r+0x1e4>
8008d8b8:	02bfffc4 	movi	r10,-1
8008d8bc:	2c000003 	ldbu	r16,0(r5)
8008d8c0:	29400044 	addi	r5,r5,1
8008d8c4:	9409883a 	add	r4,r18,r16
8008d8c8:	21000043 	ldbu	r4,1(r4)
8008d8cc:	2240010c 	andi	r9,r4,4
8008d8d0:	483ff31e 	bne	r9,zero,8008d8a0 <_strtoll_r+0x10c>
8008d8d4:	210000cc 	andi	r4,r4,3
8008d8d8:	20000426 	beq	r4,zero,8008d8ec <_strtoll_r+0x158>
8008d8dc:	23403426 	beq	r4,r13,8008d9b0 <_strtoll_r+0x21c>
8008d8e0:	008015c4 	movi	r2,87
8008d8e4:	80a1c83a 	sub	r16,r16,r2
8008d8e8:	84ffef16 	blt	r16,r19,8008d8a8 <_strtoll_r+0x114>
8008d8ec:	00bfffc4 	movi	r2,-1
8008d8f0:	50803426 	beq	r10,r2,8008d9c4 <_strtoll_r+0x230>
8008d8f4:	e0000426 	beq	fp,zero,8008d908 <_strtoll_r+0x174>
8008d8f8:	018dc83a 	sub	r6,zero,r6
8008d8fc:	3004c03a 	cmpne	r2,r6,zero
8008d900:	01e1c83a 	sub	r16,zero,r7
8008d904:	808fc83a 	sub	r7,r16,r2
8008d908:	3005883a 	mov	r2,r6
8008d90c:	3807883a 	mov	r3,r7
8008d910:	a8000326 	beq	r21,zero,8008d920 <_strtoll_r+0x18c>
8008d914:	5000321e 	bne	r10,zero,8008d9e0 <_strtoll_r+0x24c>
8008d918:	b00b883a 	mov	r5,r22
8008d91c:	a9400015 	stw	r5,0(r21)
8008d920:	dfc00c17 	ldw	ra,48(sp)
8008d924:	df000b17 	ldw	fp,44(sp)
8008d928:	ddc00a17 	ldw	r23,40(sp)
8008d92c:	dd800917 	ldw	r22,36(sp)
8008d930:	dd400817 	ldw	r21,32(sp)
8008d934:	dd000717 	ldw	r20,28(sp)
8008d938:	dcc00617 	ldw	r19,24(sp)
8008d93c:	dc800517 	ldw	r18,20(sp)
8008d940:	dc400417 	ldw	r17,16(sp)
8008d944:	dc000317 	ldw	r16,12(sp)
8008d948:	dec00d04 	addi	sp,sp,52
8008d94c:	f800283a 	ret
8008d950:	00800c04 	movi	r2,48
8008d954:	80802c26 	beq	r16,r2,8008da08 <_strtoll_r+0x274>
8008d958:	05000284 	movi	r20,10
8008d95c:	002f883a 	mov	r23,zero
8008d960:	a027883a 	mov	r19,r20
8008d964:	e03fb11e 	bne	fp,zero,8008d82c <_strtoll_r+0x98>
8008d968:	02a00034 	movhi	r10,32768
8008d96c:	52bfffc4 	addi	r10,r10,-1
8008d970:	02ffffc4 	movi	r11,-1
8008d974:	003faf06 	br	8008d834 <_strtoll_r+0xa0>
8008d978:	33000f26 	beq	r6,r12,8008d9b8 <_strtoll_r+0x224>
8008d97c:	b985383a 	mul	r2,r23,r6
8008d980:	3d0f383a 	mul	r7,r7,r20
8008d984:	3508383a 	mulxuu	r4,r6,r20
8008d988:	350d383a 	mul	r6,r6,r20
8008d98c:	8013d7fa 	srai	r9,r16,31
8008d990:	388f883a 	add	r7,r7,r2
8008d994:	818d883a 	add	r6,r16,r6
8008d998:	390f883a 	add	r7,r7,r4
8008d99c:	3421803a 	cmpltu	r16,r6,r16
8008d9a0:	49cf883a 	add	r7,r9,r7
8008d9a4:	81cf883a 	add	r7,r16,r7
8008d9a8:	02800044 	movi	r10,1
8008d9ac:	003fc306 	br	8008d8bc <_strtoll_r+0x128>
8008d9b0:	00800dc4 	movi	r2,55
8008d9b4:	003fcb06 	br	8008d8e4 <_strtoll_r+0x150>
8008d9b8:	38fff01e 	bne	r7,r3,8008d97c <_strtoll_r+0x1e8>
8008d9bc:	443fbe16 	blt	r8,r16,8008d8b8 <_strtoll_r+0x124>
8008d9c0:	003fee06 	br	8008d97c <_strtoll_r+0x1e8>
8008d9c4:	e0002426 	beq	fp,zero,8008da58 <_strtoll_r+0x2c4>
8008d9c8:	0005883a 	mov	r2,zero
8008d9cc:	00e00034 	movhi	r3,32768
8008d9d0:	d9800017 	ldw	r6,0(sp)
8008d9d4:	01000884 	movi	r4,34
8008d9d8:	31000015 	stw	r4,0(r6)
8008d9dc:	a83fd026 	beq	r21,zero,8008d920 <_strtoll_r+0x18c>
8008d9e0:	297fffc4 	addi	r5,r5,-1
8008d9e4:	003fcd06 	br	8008d91c <_strtoll_r+0x188>
8008d9e8:	1c400084 	addi	r17,r3,2
8008d9ec:	1c000043 	ldbu	r16,1(r3)
8008d9f0:	07000044 	movi	fp,1
8008d9f4:	003f8706 	br	8008d814 <_strtoll_r+0x80>
8008d9f8:	1c400084 	addi	r17,r3,2
8008d9fc:	1c000043 	ldbu	r16,1(r3)
8008da00:	0039883a 	mov	fp,zero
8008da04:	003f8306 	br	8008d814 <_strtoll_r+0x80>
8008da08:	88800003 	ldbu	r2,0(r17)
8008da0c:	00c01604 	movi	r3,88
8008da10:	108037cc 	andi	r2,r2,223
8008da14:	10c00a26 	beq	r2,r3,8008da40 <_strtoll_r+0x2ac>
8008da18:	05000204 	movi	r20,8
8008da1c:	002f883a 	mov	r23,zero
8008da20:	a027883a 	mov	r19,r20
8008da24:	003f8006 	br	8008d828 <_strtoll_r+0x94>
8008da28:	00800c04 	movi	r2,48
8008da2c:	80800e1e 	bne	r16,r2,8008da68 <_strtoll_r+0x2d4>
8008da30:	88800003 	ldbu	r2,0(r17)
8008da34:	00c01604 	movi	r3,88
8008da38:	108037cc 	andi	r2,r2,223
8008da3c:	10c00a1e 	bne	r2,r3,8008da68 <_strtoll_r+0x2d4>
8008da40:	05000404 	movi	r20,16
8008da44:	8c000043 	ldbu	r16,1(r17)
8008da48:	002f883a 	mov	r23,zero
8008da4c:	8c400084 	addi	r17,r17,2
8008da50:	a027883a 	mov	r19,r20
8008da54:	003f7406 	br	8008d828 <_strtoll_r+0x94>
8008da58:	00e00034 	movhi	r3,32768
8008da5c:	18ffffc4 	addi	r3,r3,-1
8008da60:	5005883a 	mov	r2,r10
8008da64:	003fda06 	br	8008d9d0 <_strtoll_r+0x23c>
8008da68:	9829883a 	mov	r20,r19
8008da6c:	002f883a 	mov	r23,zero
8008da70:	003f6d06 	br	8008d828 <_strtoll_r+0x94>

8008da74 <_strtoul_r>:
8008da74:	00a002b4 	movhi	r2,32778
8008da78:	defff604 	addi	sp,sp,-40
8008da7c:	10ba7604 	addi	r2,r2,-5672
8008da80:	dc800315 	stw	r18,12(sp)
8008da84:	14800017 	ldw	r18,0(r2)
8008da88:	dd400615 	stw	r21,24(sp)
8008da8c:	dd000515 	stw	r20,20(sp)
8008da90:	dcc00415 	stw	r19,16(sp)
8008da94:	2029883a 	mov	r20,r4
8008da98:	dfc00915 	stw	ra,36(sp)
8008da9c:	ddc00815 	stw	r23,32(sp)
8008daa0:	dd800715 	stw	r22,28(sp)
8008daa4:	dc400215 	stw	r17,8(sp)
8008daa8:	dc000115 	stw	r16,4(sp)
8008daac:	2827883a 	mov	r19,r5
8008dab0:	382b883a 	mov	r21,r7
8008dab4:	2809883a 	mov	r4,r5
8008dab8:	24000003 	ldbu	r16,0(r4)
8008dabc:	24400044 	addi	r17,r4,1
8008dac0:	2007883a 	mov	r3,r4
8008dac4:	9405883a 	add	r2,r18,r16
8008dac8:	10800043 	ldbu	r2,1(r2)
8008dacc:	8809883a 	mov	r4,r17
8008dad0:	1080020c 	andi	r2,r2,8
8008dad4:	103ff81e 	bne	r2,zero,8008dab8 <_strtoul_r+0x44>
8008dad8:	00800b44 	movi	r2,45
8008dadc:	80805326 	beq	r16,r2,8008dc2c <_strtoul_r+0x1b8>
8008dae0:	00800ac4 	movi	r2,43
8008dae4:	80805526 	beq	r16,r2,8008dc3c <_strtoul_r+0x1c8>
8008dae8:	002f883a 	mov	r23,zero
8008daec:	a8000f26 	beq	r21,zero,8008db2c <_strtoul_r+0xb8>
8008daf0:	00800404 	movi	r2,16
8008daf4:	a8805f26 	beq	r21,r2,8008dc74 <_strtoul_r+0x200>
8008daf8:	013fffc4 	movi	r4,-1
8008dafc:	a80b883a 	mov	r5,r21
8008db00:	d9800015 	stw	r6,0(sp)
8008db04:	00822880 	call	80082288 <__udivsi3>
8008db08:	a80b883a 	mov	r5,r21
8008db0c:	013fffc4 	movi	r4,-1
8008db10:	102d883a 	mov	r22,r2
8008db14:	00822ec0 	call	800822ec <__umodsi3>
8008db18:	d9800017 	ldw	r6,0(sp)
8008db1c:	1019883a 	mov	r12,r2
8008db20:	a817883a 	mov	r11,r21
8008db24:	b00f883a 	mov	r7,r22
8008db28:	00000706 	br	8008db48 <_strtoul_r+0xd4>
8008db2c:	00800c04 	movi	r2,48
8008db30:	80804626 	beq	r16,r2,8008dc4c <_strtoul_r+0x1d8>
8008db34:	05400284 	movi	r21,10
8008db38:	01c666b4 	movhi	r7,6554
8008db3c:	03000144 	movi	r12,5
8008db40:	39e66644 	addi	r7,r7,-26215
8008db44:	a817883a 	mov	r11,r21
8008db48:	9407883a 	add	r3,r18,r16
8008db4c:	18c00043 	ldbu	r3,1(r3)
8008db50:	8809883a 	mov	r4,r17
8008db54:	0011883a 	mov	r8,zero
8008db58:	1940010c 	andi	r5,r3,4
8008db5c:	0005883a 	mov	r2,zero
8008db60:	02800044 	movi	r10,1
8008db64:	027fffc4 	movi	r9,-1
8008db68:	28000e26 	beq	r5,zero,8008dba4 <_strtoul_r+0x130>
8008db6c:	843ff404 	addi	r16,r16,-48
8008db70:	8540120e 	bge	r16,r21,8008dbbc <_strtoul_r+0x148>
8008db74:	42400526 	beq	r8,r9,8008db8c <_strtoul_r+0x118>
8008db78:	38802236 	bltu	r7,r2,8008dc04 <_strtoul_r+0x190>
8008db7c:	11c02026 	beq	r2,r7,8008dc00 <_strtoul_r+0x18c>
8008db80:	12c5383a 	mul	r2,r2,r11
8008db84:	02000044 	movi	r8,1
8008db88:	8085883a 	add	r2,r16,r2
8008db8c:	24000003 	ldbu	r16,0(r4)
8008db90:	21000044 	addi	r4,r4,1
8008db94:	9407883a 	add	r3,r18,r16
8008db98:	18c00043 	ldbu	r3,1(r3)
8008db9c:	1940010c 	andi	r5,r3,4
8008dba0:	283ff21e 	bne	r5,zero,8008db6c <_strtoul_r+0xf8>
8008dba4:	18c000cc 	andi	r3,r3,3
8008dba8:	18000426 	beq	r3,zero,8008dbbc <_strtoul_r+0x148>
8008dbac:	1a801726 	beq	r3,r10,8008dc0c <_strtoul_r+0x198>
8008dbb0:	00c015c4 	movi	r3,87
8008dbb4:	80e1c83a 	sub	r16,r16,r3
8008dbb8:	857fee16 	blt	r16,r21,8008db74 <_strtoul_r+0x100>
8008dbbc:	40001516 	blt	r8,zero,8008dc14 <_strtoul_r+0x1a0>
8008dbc0:	b8000126 	beq	r23,zero,8008dbc8 <_strtoul_r+0x154>
8008dbc4:	0085c83a 	sub	r2,zero,r2
8008dbc8:	30000226 	beq	r6,zero,8008dbd4 <_strtoul_r+0x160>
8008dbcc:	4000151e 	bne	r8,zero,8008dc24 <_strtoul_r+0x1b0>
8008dbd0:	34c00015 	stw	r19,0(r6)
8008dbd4:	dfc00917 	ldw	ra,36(sp)
8008dbd8:	ddc00817 	ldw	r23,32(sp)
8008dbdc:	dd800717 	ldw	r22,28(sp)
8008dbe0:	dd400617 	ldw	r21,24(sp)
8008dbe4:	dd000517 	ldw	r20,20(sp)
8008dbe8:	dcc00417 	ldw	r19,16(sp)
8008dbec:	dc800317 	ldw	r18,12(sp)
8008dbf0:	dc400217 	ldw	r17,8(sp)
8008dbf4:	dc000117 	ldw	r16,4(sp)
8008dbf8:	dec00a04 	addi	sp,sp,40
8008dbfc:	f800283a 	ret
8008dc00:	643fdf0e 	bge	r12,r16,8008db80 <_strtoul_r+0x10c>
8008dc04:	023fffc4 	movi	r8,-1
8008dc08:	003fe006 	br	8008db8c <_strtoul_r+0x118>
8008dc0c:	00c00dc4 	movi	r3,55
8008dc10:	003fe806 	br	8008dbb4 <_strtoul_r+0x140>
8008dc14:	00800884 	movi	r2,34
8008dc18:	a0800015 	stw	r2,0(r20)
8008dc1c:	00bfffc4 	movi	r2,-1
8008dc20:	303fec26 	beq	r6,zero,8008dbd4 <_strtoul_r+0x160>
8008dc24:	24ffffc4 	addi	r19,r4,-1
8008dc28:	003fe906 	br	8008dbd0 <_strtoul_r+0x15c>
8008dc2c:	1c400084 	addi	r17,r3,2
8008dc30:	1c000043 	ldbu	r16,1(r3)
8008dc34:	05c00044 	movi	r23,1
8008dc38:	003fac06 	br	8008daec <_strtoul_r+0x78>
8008dc3c:	1c400084 	addi	r17,r3,2
8008dc40:	1c000043 	ldbu	r16,1(r3)
8008dc44:	002f883a 	mov	r23,zero
8008dc48:	003fa806 	br	8008daec <_strtoul_r+0x78>
8008dc4c:	88800003 	ldbu	r2,0(r17)
8008dc50:	00c01604 	movi	r3,88
8008dc54:	108037cc 	andi	r2,r2,223
8008dc58:	10c00c26 	beq	r2,r3,8008dc8c <_strtoul_r+0x218>
8008dc5c:	05400204 	movi	r21,8
8008dc60:	01c80034 	movhi	r7,8192
8008dc64:	030001c4 	movi	r12,7
8008dc68:	39ffffc4 	addi	r7,r7,-1
8008dc6c:	a817883a 	mov	r11,r21
8008dc70:	003fb506 	br	8008db48 <_strtoul_r+0xd4>
8008dc74:	00800c04 	movi	r2,48
8008dc78:	80800c1e 	bne	r16,r2,8008dcac <_strtoul_r+0x238>
8008dc7c:	88800003 	ldbu	r2,0(r17)
8008dc80:	00c01604 	movi	r3,88
8008dc84:	108037cc 	andi	r2,r2,223
8008dc88:	10c0081e 	bne	r2,r3,8008dcac <_strtoul_r+0x238>
8008dc8c:	02c00404 	movi	r11,16
8008dc90:	05840034 	movhi	r22,4096
8008dc94:	8c000043 	ldbu	r16,1(r17)
8008dc98:	030003c4 	movi	r12,15
8008dc9c:	8c400084 	addi	r17,r17,2
8008dca0:	b5bfffc4 	addi	r22,r22,-1
8008dca4:	582b883a 	mov	r21,r11
8008dca8:	003f9e06 	br	8008db24 <_strtoul_r+0xb0>
8008dcac:	01c40034 	movhi	r7,4096
8008dcb0:	030003c4 	movi	r12,15
8008dcb4:	39ffffc4 	addi	r7,r7,-1
8008dcb8:	a817883a 	mov	r11,r21
8008dcbc:	003fa206 	br	8008db48 <_strtoul_r+0xd4>

8008dcc0 <strtoul>:
8008dcc0:	00a002b4 	movhi	r2,32778
8008dcc4:	10ba7304 	addi	r2,r2,-5684
8008dcc8:	300f883a 	mov	r7,r6
8008dccc:	280d883a 	mov	r6,r5
8008dcd0:	200b883a 	mov	r5,r4
8008dcd4:	11000017 	ldw	r4,0(r2)
8008dcd8:	008da741 	jmpi	8008da74 <_strtoul_r>

8008dcdc <_strtoull_r>:
8008dcdc:	00a002b4 	movhi	r2,32778
8008dce0:	defff404 	addi	sp,sp,-48
8008dce4:	10ba7604 	addi	r2,r2,-5672
8008dce8:	dc400315 	stw	r17,12(sp)
8008dcec:	14400017 	ldw	r17,0(r2)
8008dcf0:	dd400715 	stw	r21,28(sp)
8008dcf4:	dd000615 	stw	r20,24(sp)
8008dcf8:	dcc00515 	stw	r19,20(sp)
8008dcfc:	dc800415 	stw	r18,16(sp)
8008dd00:	dfc00b15 	stw	ra,44(sp)
8008dd04:	df000a15 	stw	fp,40(sp)
8008dd08:	ddc00915 	stw	r23,36(sp)
8008dd0c:	dd800815 	stw	r22,32(sp)
8008dd10:	dc000215 	stw	r16,8(sp)
8008dd14:	2827883a 	mov	r19,r5
8008dd18:	202b883a 	mov	r21,r4
8008dd1c:	3029883a 	mov	r20,r6
8008dd20:	3825883a 	mov	r18,r7
8008dd24:	2807883a 	mov	r3,r5
8008dd28:	1c000003 	ldbu	r16,0(r3)
8008dd2c:	1f000044 	addi	fp,r3,1
8008dd30:	1809883a 	mov	r4,r3
8008dd34:	8c05883a 	add	r2,r17,r16
8008dd38:	10800043 	ldbu	r2,1(r2)
8008dd3c:	e007883a 	mov	r3,fp
8008dd40:	1080020c 	andi	r2,r2,8
8008dd44:	103ff81e 	bne	r2,zero,8008dd28 <_strtoull_r+0x4c>
8008dd48:	00800b44 	movi	r2,45
8008dd4c:	80806e26 	beq	r16,r2,8008df08 <_strtoull_r+0x22c>
8008dd50:	00800ac4 	movi	r2,43
8008dd54:	80807026 	beq	r16,r2,8008df18 <_strtoull_r+0x23c>
8008dd58:	002f883a 	mov	r23,zero
8008dd5c:	90001426 	beq	r18,zero,8008ddb0 <_strtoull_r+0xd4>
8008dd60:	00800404 	movi	r2,16
8008dd64:	90807c26 	beq	r18,r2,8008df58 <_strtoull_r+0x27c>
8008dd68:	902dd7fa 	srai	r22,r18,31
8008dd6c:	013fffc4 	movi	r4,-1
8008dd70:	200b883a 	mov	r5,r4
8008dd74:	900d883a 	mov	r6,r18
8008dd78:	b00f883a 	mov	r7,r22
8008dd7c:	00956500 	call	80095650 <__udivdi3>
8008dd80:	013fffc4 	movi	r4,-1
8008dd84:	900d883a 	mov	r6,r18
8008dd88:	b00f883a 	mov	r7,r22
8008dd8c:	200b883a 	mov	r5,r4
8008dd90:	d8c00115 	stw	r3,4(sp)
8008dd94:	d8800015 	stw	r2,0(sp)
8008dd98:	0095bc80 	call	80095bc8 <__umoddi3>
8008dd9c:	101b883a 	mov	r13,r2
8008dda0:	9015883a 	mov	r10,r18
8008dda4:	dac00017 	ldw	r11,0(sp)
8008dda8:	da000117 	ldw	r8,4(sp)
8008ddac:	00000a06 	br	8008ddd8 <_strtoull_r+0xfc>
8008ddb0:	00800c04 	movi	r2,48
8008ddb4:	80805c26 	beq	r16,r2,8008df28 <_strtoull_r+0x24c>
8008ddb8:	02800284 	movi	r10,10
8008ddbc:	02e666b4 	movhi	r11,39322
8008ddc0:	020666b4 	movhi	r8,6554
8008ddc4:	03400144 	movi	r13,5
8008ddc8:	5ae66644 	addi	r11,r11,-26215
8008ddcc:	42266644 	addi	r8,r8,-26215
8008ddd0:	002d883a 	mov	r22,zero
8008ddd4:	5025883a 	mov	r18,r10
8008ddd8:	8c0b883a 	add	r5,r17,r16
8008dddc:	29400043 	ldbu	r5,1(r5)
8008dde0:	e009883a 	mov	r4,fp
8008dde4:	000f883a 	mov	r7,zero
8008dde8:	2980010c 	andi	r6,r5,4
8008ddec:	0005883a 	mov	r2,zero
8008ddf0:	0007883a 	mov	r3,zero
8008ddf4:	03000044 	movi	r12,1
8008ddf8:	027fffc4 	movi	r9,-1
8008ddfc:	30000d26 	beq	r6,zero,8008de34 <_strtoull_r+0x158>
8008de00:	843ff404 	addi	r16,r16,-48
8008de04:	8480110e 	bge	r16,r18,8008de4c <_strtoull_r+0x170>
8008de08:	3a400426 	beq	r7,r9,8008de1c <_strtoull_r+0x140>
8008de0c:	40c00236 	bltu	r8,r3,8008de18 <_strtoull_r+0x13c>
8008de10:	1a00231e 	bne	r3,r8,8008dea0 <_strtoull_r+0x1c4>
8008de14:	5880222e 	bgeu	r11,r2,8008dea0 <_strtoull_r+0x1c4>
8008de18:	01ffffc4 	movi	r7,-1
8008de1c:	24000003 	ldbu	r16,0(r4)
8008de20:	21000044 	addi	r4,r4,1
8008de24:	8c0b883a 	add	r5,r17,r16
8008de28:	29400043 	ldbu	r5,1(r5)
8008de2c:	2980010c 	andi	r6,r5,4
8008de30:	303ff31e 	bne	r6,zero,8008de00 <_strtoull_r+0x124>
8008de34:	294000cc 	andi	r5,r5,3
8008de38:	28000426 	beq	r5,zero,8008de4c <_strtoull_r+0x170>
8008de3c:	2b002626 	beq	r5,r12,8008ded8 <_strtoull_r+0x1fc>
8008de40:	014015c4 	movi	r5,87
8008de44:	8161c83a 	sub	r16,r16,r5
8008de48:	84bfef16 	blt	r16,r18,8008de08 <_strtoull_r+0x12c>
8008de4c:	38002716 	blt	r7,zero,8008deec <_strtoull_r+0x210>
8008de50:	b8000426 	beq	r23,zero,8008de64 <_strtoull_r+0x188>
8008de54:	0085c83a 	sub	r2,zero,r2
8008de58:	100ac03a 	cmpne	r5,r2,zero
8008de5c:	00e1c83a 	sub	r16,zero,r3
8008de60:	8147c83a 	sub	r3,r16,r5
8008de64:	a0000226 	beq	r20,zero,8008de70 <_strtoull_r+0x194>
8008de68:	3800251e 	bne	r7,zero,8008df00 <_strtoull_r+0x224>
8008de6c:	a4c00015 	stw	r19,0(r20)
8008de70:	dfc00b17 	ldw	ra,44(sp)
8008de74:	df000a17 	ldw	fp,40(sp)
8008de78:	ddc00917 	ldw	r23,36(sp)
8008de7c:	dd800817 	ldw	r22,32(sp)
8008de80:	dd400717 	ldw	r21,28(sp)
8008de84:	dd000617 	ldw	r20,24(sp)
8008de88:	dcc00517 	ldw	r19,20(sp)
8008de8c:	dc800417 	ldw	r18,16(sp)
8008de90:	dc400317 	ldw	r17,12(sp)
8008de94:	dc000217 	ldw	r16,8(sp)
8008de98:	dec00c04 	addi	sp,sp,48
8008de9c:	f800283a 	ret
8008dea0:	12c00f26 	beq	r2,r11,8008dee0 <_strtoull_r+0x204>
8008dea4:	b08d383a 	mul	r6,r22,r2
8008dea8:	1a87383a 	mul	r3,r3,r10
8008deac:	128a383a 	mulxuu	r5,r2,r10
8008deb0:	1285383a 	mul	r2,r2,r10
8008deb4:	800fd7fa 	srai	r7,r16,31
8008deb8:	1987883a 	add	r3,r3,r6
8008debc:	8085883a 	add	r2,r16,r2
8008dec0:	1947883a 	add	r3,r3,r5
8008dec4:	38c7883a 	add	r3,r7,r3
8008dec8:	1421803a 	cmpltu	r16,r2,r16
8008decc:	80c7883a 	add	r3,r16,r3
8008ded0:	01c00044 	movi	r7,1
8008ded4:	003fd106 	br	8008de1c <_strtoull_r+0x140>
8008ded8:	01400dc4 	movi	r5,55
8008dedc:	003fd906 	br	8008de44 <_strtoull_r+0x168>
8008dee0:	1a3ff01e 	bne	r3,r8,8008dea4 <_strtoull_r+0x1c8>
8008dee4:	6c3fcc16 	blt	r13,r16,8008de18 <_strtoull_r+0x13c>
8008dee8:	003fee06 	br	8008dea4 <_strtoull_r+0x1c8>
8008deec:	00800884 	movi	r2,34
8008def0:	a8800015 	stw	r2,0(r21)
8008def4:	00bfffc4 	movi	r2,-1
8008def8:	1007883a 	mov	r3,r2
8008defc:	a03fdc26 	beq	r20,zero,8008de70 <_strtoull_r+0x194>
8008df00:	24ffffc4 	addi	r19,r4,-1
8008df04:	003fd906 	br	8008de6c <_strtoull_r+0x190>
8008df08:	27000084 	addi	fp,r4,2
8008df0c:	24000043 	ldbu	r16,1(r4)
8008df10:	05c00044 	movi	r23,1
8008df14:	003f9106 	br	8008dd5c <_strtoull_r+0x80>
8008df18:	27000084 	addi	fp,r4,2
8008df1c:	24000043 	ldbu	r16,1(r4)
8008df20:	002f883a 	mov	r23,zero
8008df24:	003f8d06 	br	8008dd5c <_strtoull_r+0x80>
8008df28:	e0800003 	ldbu	r2,0(fp)
8008df2c:	00c01604 	movi	r3,88
8008df30:	108037cc 	andi	r2,r2,223
8008df34:	10c00e26 	beq	r2,r3,8008df70 <_strtoull_r+0x294>
8008df38:	02800204 	movi	r10,8
8008df3c:	02ffffc4 	movi	r11,-1
8008df40:	02080034 	movhi	r8,8192
8008df44:	034001c4 	movi	r13,7
8008df48:	42d1883a 	add	r8,r8,r11
8008df4c:	002d883a 	mov	r22,zero
8008df50:	5025883a 	mov	r18,r10
8008df54:	003fa006 	br	8008ddd8 <_strtoull_r+0xfc>
8008df58:	00800c04 	movi	r2,48
8008df5c:	80800e1e 	bne	r16,r2,8008df98 <_strtoull_r+0x2bc>
8008df60:	e0800003 	ldbu	r2,0(fp)
8008df64:	00c01604 	movi	r3,88
8008df68:	108037cc 	andi	r2,r2,223
8008df6c:	10c00a1e 	bne	r2,r3,8008df98 <_strtoull_r+0x2bc>
8008df70:	02800404 	movi	r10,16
8008df74:	02ffffc4 	movi	r11,-1
8008df78:	02040034 	movhi	r8,4096
8008df7c:	e4000043 	ldbu	r16,1(fp)
8008df80:	034003c4 	movi	r13,15
8008df84:	e7000084 	addi	fp,fp,2
8008df88:	42d1883a 	add	r8,r8,r11
8008df8c:	002d883a 	mov	r22,zero
8008df90:	5025883a 	mov	r18,r10
8008df94:	003f9006 	br	8008ddd8 <_strtoull_r+0xfc>
8008df98:	02ffffc4 	movi	r11,-1
8008df9c:	02040034 	movhi	r8,4096
8008dfa0:	034003c4 	movi	r13,15
8008dfa4:	42d1883a 	add	r8,r8,r11
8008dfa8:	9015883a 	mov	r10,r18
8008dfac:	002d883a 	mov	r22,zero
8008dfb0:	003f8906 	br	8008ddd8 <_strtoull_r+0xfc>

8008dfb4 <_sungetc_r>:
8008dfb4:	00bfffc4 	movi	r2,-1
8008dfb8:	28803726 	beq	r5,r2,8008e098 <_sungetc_r+0xe4>
8008dfbc:	3080030b 	ldhu	r2,12(r6)
8008dfc0:	30c00c17 	ldw	r3,48(r6)
8008dfc4:	defffc04 	addi	sp,sp,-16
8008dfc8:	10bff7cc 	andi	r2,r2,65503
8008dfcc:	dc800215 	stw	r18,8(sp)
8008dfd0:	dfc00315 	stw	ra,12(sp)
8008dfd4:	dc400115 	stw	r17,4(sp)
8008dfd8:	dc000015 	stw	r16,0(sp)
8008dfdc:	3080030d 	sth	r2,12(r6)
8008dfe0:	2c803fcc 	andi	r18,r5,255
8008dfe4:	18001826 	beq	r3,zero,8008e048 <_sungetc_r+0x94>
8008dfe8:	30c00117 	ldw	r3,4(r6)
8008dfec:	30800d17 	ldw	r2,52(r6)
8008dff0:	3021883a 	mov	r16,r6
8008dff4:	2823883a 	mov	r17,r5
8008dff8:	18800e0e 	bge	r3,r2,8008e034 <_sungetc_r+0x80>
8008dffc:	80c00017 	ldw	r3,0(r16)
8008e000:	9005883a 	mov	r2,r18
8008e004:	193fffc4 	addi	r4,r3,-1
8008e008:	81000015 	stw	r4,0(r16)
8008e00c:	1c7fffc5 	stb	r17,-1(r3)
8008e010:	80c00117 	ldw	r3,4(r16)
8008e014:	18c00044 	addi	r3,r3,1
8008e018:	80c00115 	stw	r3,4(r16)
8008e01c:	dfc00317 	ldw	ra,12(sp)
8008e020:	dc800217 	ldw	r18,8(sp)
8008e024:	dc400117 	ldw	r17,4(sp)
8008e028:	dc000017 	ldw	r16,0(sp)
8008e02c:	dec00404 	addi	sp,sp,16
8008e030:	f800283a 	ret
8008e034:	300b883a 	mov	r5,r6
8008e038:	00914ec0 	call	800914ec <__submore>
8008e03c:	103fef26 	beq	r2,zero,8008dffc <_sungetc_r+0x48>
8008e040:	00bfffc4 	movi	r2,-1
8008e044:	003ff506 	br	8008e01c <_sungetc_r+0x68>
8008e048:	30c00417 	ldw	r3,16(r6)
8008e04c:	30800017 	ldw	r2,0(r6)
8008e050:	18000326 	beq	r3,zero,8008e060 <_sungetc_r+0xac>
8008e054:	1880022e 	bgeu	r3,r2,8008e060 <_sungetc_r+0xac>
8008e058:	10ffffc3 	ldbu	r3,-1(r2)
8008e05c:	90c01026 	beq	r18,r3,8008e0a0 <_sungetc_r+0xec>
8008e060:	31c00117 	ldw	r7,4(r6)
8008e064:	30800e15 	stw	r2,56(r6)
8008e068:	008000c4 	movi	r2,3
8008e06c:	31001004 	addi	r4,r6,64
8008e070:	30c01084 	addi	r3,r6,66
8008e074:	30800d15 	stw	r2,52(r6)
8008e078:	00800044 	movi	r2,1
8008e07c:	30800115 	stw	r2,4(r6)
8008e080:	31c00f15 	stw	r7,60(r6)
8008e084:	31000c15 	stw	r4,48(r6)
8008e088:	31401085 	stb	r5,66(r6)
8008e08c:	30c00015 	stw	r3,0(r6)
8008e090:	9005883a 	mov	r2,r18
8008e094:	003fe106 	br	8008e01c <_sungetc_r+0x68>
8008e098:	00bfffc4 	movi	r2,-1
8008e09c:	f800283a 	ret
8008e0a0:	30c00117 	ldw	r3,4(r6)
8008e0a4:	10bfffc4 	addi	r2,r2,-1
8008e0a8:	30800015 	stw	r2,0(r6)
8008e0ac:	18800044 	addi	r2,r3,1
8008e0b0:	30800115 	stw	r2,4(r6)
8008e0b4:	9005883a 	mov	r2,r18
8008e0b8:	003fd806 	br	8008e01c <_sungetc_r+0x68>

8008e0bc <__ssrefill_r>:
8008e0bc:	defffe04 	addi	sp,sp,-8
8008e0c0:	dc000015 	stw	r16,0(sp)
8008e0c4:	2821883a 	mov	r16,r5
8008e0c8:	29400c17 	ldw	r5,48(r5)
8008e0cc:	dfc00115 	stw	ra,4(sp)
8008e0d0:	28000e26 	beq	r5,zero,8008e10c <__ssrefill_r+0x50>
8008e0d4:	80801004 	addi	r2,r16,64
8008e0d8:	28800126 	beq	r5,r2,8008e0e0 <__ssrefill_r+0x24>
8008e0dc:	0088fc00 	call	80088fc0 <_free_r>
8008e0e0:	80800f17 	ldw	r2,60(r16)
8008e0e4:	80000c15 	stw	zero,48(r16)
8008e0e8:	80800115 	stw	r2,4(r16)
8008e0ec:	10000726 	beq	r2,zero,8008e10c <__ssrefill_r+0x50>
8008e0f0:	80c00e17 	ldw	r3,56(r16)
8008e0f4:	0005883a 	mov	r2,zero
8008e0f8:	80c00015 	stw	r3,0(r16)
8008e0fc:	dfc00117 	ldw	ra,4(sp)
8008e100:	dc000017 	ldw	r16,0(sp)
8008e104:	dec00204 	addi	sp,sp,8
8008e108:	f800283a 	ret
8008e10c:	8080030b 	ldhu	r2,12(r16)
8008e110:	80c00417 	ldw	r3,16(r16)
8008e114:	80000115 	stw	zero,4(r16)
8008e118:	10800814 	ori	r2,r2,32
8008e11c:	8080030d 	sth	r2,12(r16)
8008e120:	80c00015 	stw	r3,0(r16)
8008e124:	00bfffc4 	movi	r2,-1
8008e128:	003ff406 	br	8008e0fc <__ssrefill_r+0x40>

8008e12c <_sfread_r>:
8008e12c:	defff704 	addi	sp,sp,-36
8008e130:	dd800615 	stw	r22,24(sp)
8008e134:	39ad383a 	mul	r22,r7,r6
8008e138:	dc400115 	stw	r17,4(sp)
8008e13c:	dfc00815 	stw	ra,32(sp)
8008e140:	ddc00715 	stw	r23,28(sp)
8008e144:	dd400515 	stw	r21,20(sp)
8008e148:	dd000415 	stw	r20,16(sp)
8008e14c:	dcc00315 	stw	r19,12(sp)
8008e150:	dc800215 	stw	r18,8(sp)
8008e154:	dc000015 	stw	r16,0(sp)
8008e158:	dc400917 	ldw	r17,36(sp)
8008e15c:	b0002a26 	beq	r22,zero,8008e208 <_sfread_r+0xdc>
8008e160:	302f883a 	mov	r23,r6
8008e164:	382b883a 	mov	r21,r7
8008e168:	2029883a 	mov	r20,r4
8008e16c:	2827883a 	mov	r19,r5
8008e170:	b025883a 	mov	r18,r22
8008e174:	00000b06 	br	8008e1a4 <_sfread_r+0x78>
8008e178:	0082cec0 	call	80082cec <memcpy>
8008e17c:	88800017 	ldw	r2,0(r17)
8008e180:	9c27883a 	add	r19,r19,r16
8008e184:	9425c83a 	sub	r18,r18,r16
8008e188:	1421883a 	add	r16,r2,r16
8008e18c:	88000115 	stw	zero,4(r17)
8008e190:	880b883a 	mov	r5,r17
8008e194:	8c000015 	stw	r16,0(r17)
8008e198:	a009883a 	mov	r4,r20
8008e19c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008e1a0:	10001b1e 	bne	r2,zero,8008e210 <_sfread_r+0xe4>
8008e1a4:	8c000117 	ldw	r16,4(r17)
8008e1a8:	9809883a 	mov	r4,r19
8008e1ac:	89400017 	ldw	r5,0(r17)
8008e1b0:	800d883a 	mov	r6,r16
8008e1b4:	84bff036 	bltu	r16,r18,8008e178 <_sfread_r+0x4c>
8008e1b8:	900d883a 	mov	r6,r18
8008e1bc:	0082cec0 	call	80082cec <memcpy>
8008e1c0:	88c00117 	ldw	r3,4(r17)
8008e1c4:	89000017 	ldw	r4,0(r17)
8008e1c8:	a805883a 	mov	r2,r21
8008e1cc:	1c87c83a 	sub	r3,r3,r18
8008e1d0:	24a5883a 	add	r18,r4,r18
8008e1d4:	88c00115 	stw	r3,4(r17)
8008e1d8:	8c800015 	stw	r18,0(r17)
8008e1dc:	dfc00817 	ldw	ra,32(sp)
8008e1e0:	ddc00717 	ldw	r23,28(sp)
8008e1e4:	dd800617 	ldw	r22,24(sp)
8008e1e8:	dd400517 	ldw	r21,20(sp)
8008e1ec:	dd000417 	ldw	r20,16(sp)
8008e1f0:	dcc00317 	ldw	r19,12(sp)
8008e1f4:	dc800217 	ldw	r18,8(sp)
8008e1f8:	dc400117 	ldw	r17,4(sp)
8008e1fc:	dc000017 	ldw	r16,0(sp)
8008e200:	dec00904 	addi	sp,sp,36
8008e204:	f800283a 	ret
8008e208:	0005883a 	mov	r2,zero
8008e20c:	003ff306 	br	8008e1dc <_sfread_r+0xb0>
8008e210:	b80b883a 	mov	r5,r23
8008e214:	b489c83a 	sub	r4,r22,r18
8008e218:	00822880 	call	80082288 <__udivsi3>
8008e21c:	003fef06 	br	8008e1dc <_sfread_r+0xb0>

8008e220 <__ssvfiscanf_r>:
8008e220:	2880030b 	ldhu	r2,12(r5)
8008e224:	deff9b04 	addi	sp,sp,-404
8008e228:	df006315 	stw	fp,396(sp)
8008e22c:	dc405c15 	stw	r17,368(sp)
8008e230:	dfc06415 	stw	ra,400(sp)
8008e234:	ddc06215 	stw	r23,392(sp)
8008e238:	dd806115 	stw	r22,388(sp)
8008e23c:	dd406015 	stw	r21,384(sp)
8008e240:	dd005f15 	stw	r20,380(sp)
8008e244:	dcc05e15 	stw	r19,376(sp)
8008e248:	dc805d15 	stw	r18,372(sp)
8008e24c:	dc005b15 	stw	r16,364(sp)
8008e250:	10c8000c 	andi	r3,r2,8192
8008e254:	d9c04f15 	stw	r7,316(sp)
8008e258:	2839883a 	mov	fp,r5
8008e25c:	2023883a 	mov	r17,r4
8008e260:	1800061e 	bne	r3,zero,8008e27c <__ssvfiscanf_r+0x5c>
8008e264:	29001917 	ldw	r4,100(r5)
8008e268:	00f7ffc4 	movi	r3,-8193
8008e26c:	10880014 	ori	r2,r2,8192
8008e270:	20c6703a 	and	r3,r4,r3
8008e274:	2880030d 	sth	r2,12(r5)
8008e278:	28c01915 	stw	r3,100(r5)
8008e27c:	30800003 	ldbu	r2,0(r6)
8008e280:	dac04104 	addi	r11,sp,260
8008e284:	0025883a 	mov	r18,zero
8008e288:	052002b4 	movhi	r20,32778
8008e28c:	d8005215 	stw	zero,328(sp)
8008e290:	d8005015 	stw	zero,320(sp)
8008e294:	d8005115 	stw	zero,324(sp)
8008e298:	dac04e15 	stw	r11,312(sp)
8008e29c:	d8804d15 	stw	r2,308(sp)
8008e2a0:	e027883a 	mov	r19,fp
8008e2a4:	a53a7604 	addi	r20,r20,-5672
8008e2a8:	9039883a 	mov	fp,r18
8008e2ac:	34800044 	addi	r18,r6,1
8008e2b0:	10001e26 	beq	r2,zero,8008e32c <__ssvfiscanf_r+0x10c>
8008e2b4:	a1c00017 	ldw	r7,0(r20)
8008e2b8:	3887883a 	add	r3,r7,r2
8008e2bc:	18c00043 	ldbu	r3,1(r3)
8008e2c0:	18c0020c 	andi	r3,r3,8
8008e2c4:	18001b26 	beq	r3,zero,8008e334 <__ssvfiscanf_r+0x114>
8008e2c8:	98800117 	ldw	r2,4(r19)
8008e2cc:	00800e0e 	bge	zero,r2,8008e308 <__ssvfiscanf_r+0xe8>
8008e2d0:	98c00017 	ldw	r3,0(r19)
8008e2d4:	a1000017 	ldw	r4,0(r20)
8008e2d8:	18800003 	ldbu	r2,0(r3)
8008e2dc:	2085883a 	add	r2,r4,r2
8008e2e0:	10800043 	ldbu	r2,1(r2)
8008e2e4:	1080020c 	andi	r2,r2,8
8008e2e8:	10000b26 	beq	r2,zero,8008e318 <__ssvfiscanf_r+0xf8>
8008e2ec:	98800117 	ldw	r2,4(r19)
8008e2f0:	18c00044 	addi	r3,r3,1
8008e2f4:	98c00015 	stw	r3,0(r19)
8008e2f8:	10bfffc4 	addi	r2,r2,-1
8008e2fc:	98800115 	stw	r2,4(r19)
8008e300:	e7000044 	addi	fp,fp,1
8008e304:	00bff216 	blt	zero,r2,8008e2d0 <__ssvfiscanf_r+0xb0>
8008e308:	980b883a 	mov	r5,r19
8008e30c:	8809883a 	mov	r4,r17
8008e310:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008e314:	103fee26 	beq	r2,zero,8008e2d0 <__ssvfiscanf_r+0xb0>
8008e318:	900d883a 	mov	r6,r18
8008e31c:	30800003 	ldbu	r2,0(r6)
8008e320:	34800044 	addi	r18,r6,1
8008e324:	d8804d15 	stw	r2,308(sp)
8008e328:	103fe21e 	bne	r2,zero,8008e2b4 <__ssvfiscanf_r+0x94>
8008e32c:	d8805117 	ldw	r2,324(sp)
8008e330:	00009806 	br	8008e594 <__ssvfiscanf_r+0x374>
8008e334:	00c00944 	movi	r3,37
8008e338:	10c0871e 	bne	r2,r3,8008e558 <__ssvfiscanf_r+0x338>
8008e33c:	30c00043 	ldbu	r3,1(r6)
8008e340:	0021883a 	mov	r16,zero
8008e344:	002f883a 	mov	r23,zero
8008e348:	01001e04 	movi	r4,120
8008e34c:	01401b04 	movi	r5,108
8008e350:	95400044 	addi	r21,r18,1
8008e354:	20c0e036 	bltu	r4,r3,8008e6d8 <__ssvfiscanf_r+0x4b8>
8008e358:	180490ba 	slli	r2,r3,2
8008e35c:	01a00274 	movhi	r6,32777
8008e360:	31b8dc04 	addi	r6,r6,-7312
8008e364:	1185883a 	add	r2,r2,r6
8008e368:	10800017 	ldw	r2,0(r2)
8008e36c:	1000683a 	jmp	r2
8008e370:	8008e590 	cmplti	zero,r16,9110
8008e374:	8008e6d8 	cmpnei	zero,r16,9115
8008e378:	8008e6d8 	cmpnei	zero,r16,9115
8008e37c:	8008e6d8 	cmpnei	zero,r16,9115
8008e380:	8008e6d8 	cmpnei	zero,r16,9115
8008e384:	8008e6d8 	cmpnei	zero,r16,9115
8008e388:	8008e6d8 	cmpnei	zero,r16,9115
8008e38c:	8008e6d8 	cmpnei	zero,r16,9115
8008e390:	8008e6d8 	cmpnei	zero,r16,9115
8008e394:	8008e6d8 	cmpnei	zero,r16,9115
8008e398:	8008e6d8 	cmpnei	zero,r16,9115
8008e39c:	8008e6d8 	cmpnei	zero,r16,9115
8008e3a0:	8008e6d8 	cmpnei	zero,r16,9115
8008e3a4:	8008e6d8 	cmpnei	zero,r16,9115
8008e3a8:	8008e6d8 	cmpnei	zero,r16,9115
8008e3ac:	8008e6d8 	cmpnei	zero,r16,9115
8008e3b0:	8008e6d8 	cmpnei	zero,r16,9115
8008e3b4:	8008e6d8 	cmpnei	zero,r16,9115
8008e3b8:	8008e6d8 	cmpnei	zero,r16,9115
8008e3bc:	8008e6d8 	cmpnei	zero,r16,9115
8008e3c0:	8008e6d8 	cmpnei	zero,r16,9115
8008e3c4:	8008e6d8 	cmpnei	zero,r16,9115
8008e3c8:	8008e6d8 	cmpnei	zero,r16,9115
8008e3cc:	8008e6d8 	cmpnei	zero,r16,9115
8008e3d0:	8008e6d8 	cmpnei	zero,r16,9115
8008e3d4:	8008e6d8 	cmpnei	zero,r16,9115
8008e3d8:	8008e6d8 	cmpnei	zero,r16,9115
8008e3dc:	8008e6d8 	cmpnei	zero,r16,9115
8008e3e0:	8008e6d8 	cmpnei	zero,r16,9115
8008e3e4:	8008e6d8 	cmpnei	zero,r16,9115
8008e3e8:	8008e6d8 	cmpnei	zero,r16,9115
8008e3ec:	8008e6d8 	cmpnei	zero,r16,9115
8008e3f0:	8008e6d8 	cmpnei	zero,r16,9115
8008e3f4:	8008e6d8 	cmpnei	zero,r16,9115
8008e3f8:	8008e6d8 	cmpnei	zero,r16,9115
8008e3fc:	8008e6d8 	cmpnei	zero,r16,9115
8008e400:	8008e6d8 	cmpnei	zero,r16,9115
8008e404:	8008e554 	ori	zero,r16,9109
8008e408:	8008e6d8 	cmpnei	zero,r16,9115
8008e40c:	8008e6d8 	cmpnei	zero,r16,9115
8008e410:	8008e6d8 	cmpnei	zero,r16,9115
8008e414:	8008e6d8 	cmpnei	zero,r16,9115
8008e418:	8008e8e8 	cmpgeui	zero,r16,9123
8008e41c:	8008e6d8 	cmpnei	zero,r16,9115
8008e420:	8008e6d8 	cmpnei	zero,r16,9115
8008e424:	8008e6d8 	cmpnei	zero,r16,9115
8008e428:	8008e6d8 	cmpnei	zero,r16,9115
8008e42c:	8008e6d8 	cmpnei	zero,r16,9115
8008e430:	8008e870 	cmpltui	zero,r16,9121
8008e434:	8008e870 	cmpltui	zero,r16,9121
8008e438:	8008e870 	cmpltui	zero,r16,9121
8008e43c:	8008e870 	cmpltui	zero,r16,9121
8008e440:	8008e870 	cmpltui	zero,r16,9121
8008e444:	8008e870 	cmpltui	zero,r16,9121
8008e448:	8008e870 	cmpltui	zero,r16,9121
8008e44c:	8008e870 	cmpltui	zero,r16,9121
8008e450:	8008e870 	cmpltui	zero,r16,9121
8008e454:	8008e870 	cmpltui	zero,r16,9121
8008e458:	8008e6d8 	cmpnei	zero,r16,9115
8008e45c:	8008e6d8 	cmpnei	zero,r16,9115
8008e460:	8008e6d8 	cmpnei	zero,r16,9115
8008e464:	8008e6d8 	cmpnei	zero,r16,9115
8008e468:	8008e6d8 	cmpnei	zero,r16,9115
8008e46c:	8008e6d8 	cmpnei	zero,r16,9115
8008e470:	8008e6d8 	cmpnei	zero,r16,9115
8008e474:	8008e6d8 	cmpnei	zero,r16,9115
8008e478:	8008e6d8 	cmpnei	zero,r16,9115
8008e47c:	8008e6d8 	cmpnei	zero,r16,9115
8008e480:	8008e848 	cmpgei	zero,r16,9121
8008e484:	8008e6d8 	cmpnei	zero,r16,9115
8008e488:	8008e6d8 	cmpnei	zero,r16,9115
8008e48c:	8008e6d8 	cmpnei	zero,r16,9115
8008e490:	8008e6d8 	cmpnei	zero,r16,9115
8008e494:	8008e6d8 	cmpnei	zero,r16,9115
8008e498:	8008e6d8 	cmpnei	zero,r16,9115
8008e49c:	8008e6d8 	cmpnei	zero,r16,9115
8008e4a0:	8008e8b0 	cmpltui	zero,r16,9122
8008e4a4:	8008e6d8 	cmpnei	zero,r16,9115
8008e4a8:	8008e6d8 	cmpnei	zero,r16,9115
8008e4ac:	8008e88c 	andi	zero,r16,9122
8008e4b0:	8008e6d8 	cmpnei	zero,r16,9115
8008e4b4:	8008e6d8 	cmpnei	zero,r16,9115
8008e4b8:	8008e6d8 	cmpnei	zero,r16,9115
8008e4bc:	8008e6d8 	cmpnei	zero,r16,9115
8008e4c0:	8008e6d8 	cmpnei	zero,r16,9115
8008e4c4:	8008e6d8 	cmpnei	zero,r16,9115
8008e4c8:	8008e6d8 	cmpnei	zero,r16,9115
8008e4cc:	8008e6d8 	cmpnei	zero,r16,9115
8008e4d0:	8008e8c4 	addi	zero,r16,9123
8008e4d4:	8008e6d8 	cmpnei	zero,r16,9115
8008e4d8:	8008e6d8 	cmpnei	zero,r16,9115
8008e4dc:	8008e7c0 	call	88008e7c <__alt_data_end+0x7f0be7c>
8008e4e0:	8008e6d8 	cmpnei	zero,r16,9115
8008e4e4:	8008e6d8 	cmpnei	zero,r16,9115
8008e4e8:	8008e6d8 	cmpnei	zero,r16,9115
8008e4ec:	8008e6d8 	cmpnei	zero,r16,9115
8008e4f0:	8008e6d8 	cmpnei	zero,r16,9115
8008e4f4:	8008e6d8 	cmpnei	zero,r16,9115
8008e4f8:	8008e6d8 	cmpnei	zero,r16,9115
8008e4fc:	8008e748 	cmpgei	zero,r16,9117
8008e500:	8008e724 	muli	zero,r16,9116
8008e504:	8008e6d8 	cmpnei	zero,r16,9115
8008e508:	8008e6d8 	cmpnei	zero,r16,9115
8008e50c:	8008e6d8 	cmpnei	zero,r16,9115
8008e510:	8008e710 	cmplti	zero,r16,9116
8008e514:	8008e8fc 	xorhi	zero,r16,9123
8008e518:	8008e6d8 	cmpnei	zero,r16,9115
8008e51c:	8008e6d8 	cmpnei	zero,r16,9115
8008e520:	8008e6c0 	call	88008e6c <__alt_data_end+0x7f0be6c>
8008e524:	8008e6d8 	cmpnei	zero,r16,9115
8008e528:	8008e694 	ori	zero,r16,9114
8008e52c:	8008e670 	cmpltui	zero,r16,9113
8008e530:	8008e648 	cmpgei	zero,r16,9113
8008e534:	8008e6d8 	cmpnei	zero,r16,9115
8008e538:	8008e6d8 	cmpnei	zero,r16,9115
8008e53c:	8008e638 	rdprs	zero,r16,9112
8008e540:	8008e6d8 	cmpnei	zero,r16,9115
8008e544:	8008e5c4 	addi	zero,r16,9111
8008e548:	8008e6d8 	cmpnei	zero,r16,9115
8008e54c:	8008e6d8 	cmpnei	zero,r16,9115
8008e550:	8008e8c4 	addi	zero,r16,9123
8008e554:	a825883a 	mov	r18,r21
8008e558:	98800117 	ldw	r2,4(r19)
8008e55c:	0081d20e 	bge	zero,r2,8008eca8 <__ssvfiscanf_r+0xa88>
8008e560:	98800017 	ldw	r2,0(r19)
8008e564:	90ffffc3 	ldbu	r3,-1(r18)
8008e568:	11000003 	ldbu	r4,0(r2)
8008e56c:	20ff6f1e 	bne	r4,r3,8008e32c <__ssvfiscanf_r+0x10c>
8008e570:	98c00117 	ldw	r3,4(r19)
8008e574:	10800044 	addi	r2,r2,1
8008e578:	98800015 	stw	r2,0(r19)
8008e57c:	18bfffc4 	addi	r2,r3,-1
8008e580:	98800115 	stw	r2,4(r19)
8008e584:	e7000044 	addi	fp,fp,1
8008e588:	900d883a 	mov	r6,r18
8008e58c:	003f6306 	br	8008e31c <__ssvfiscanf_r+0xfc>
8008e590:	00bfffc4 	movi	r2,-1
8008e594:	dfc06417 	ldw	ra,400(sp)
8008e598:	df006317 	ldw	fp,396(sp)
8008e59c:	ddc06217 	ldw	r23,392(sp)
8008e5a0:	dd806117 	ldw	r22,388(sp)
8008e5a4:	dd406017 	ldw	r21,384(sp)
8008e5a8:	dd005f17 	ldw	r20,380(sp)
8008e5ac:	dcc05e17 	ldw	r19,376(sp)
8008e5b0:	dc805d17 	ldw	r18,372(sp)
8008e5b4:	dc405c17 	ldw	r17,368(sp)
8008e5b8:	dc005b17 	ldw	r16,364(sp)
8008e5bc:	dec06504 	addi	sp,sp,404
8008e5c0:	f800283a 	ret
8008e5c4:	98800117 	ldw	r2,4(r19)
8008e5c8:	0081e10e 	bge	zero,r2,8008ed50 <__ssvfiscanf_r+0xb30>
8008e5cc:	00a00274 	movhi	r2,32777
8008e5d0:	10b69d04 	addi	r2,r2,-9612
8008e5d4:	02c00284 	movi	r11,10
8008e5d8:	d8805215 	stw	r2,328(sp)
8008e5dc:	dac05015 	stw	r11,320(sp)
8008e5e0:	058000c4 	movi	r22,3
8008e5e4:	98800017 	ldw	r2,0(r19)
8008e5e8:	00000206 	br	8008e5f4 <__ssvfiscanf_r+0x3d4>
8008e5ec:	10800044 	addi	r2,r2,1
8008e5f0:	98800015 	stw	r2,0(r19)
8008e5f4:	11000003 	ldbu	r4,0(r2)
8008e5f8:	20c03fcc 	andi	r3,r4,255
8008e5fc:	38c7883a 	add	r3,r7,r3
8008e600:	18c00043 	ldbu	r3,1(r3)
8008e604:	1940020c 	andi	r5,r3,8
8008e608:	2801dd26 	beq	r5,zero,8008ed80 <__ssvfiscanf_r+0xb60>
8008e60c:	98c00117 	ldw	r3,4(r19)
8008e610:	e7000044 	addi	fp,fp,1
8008e614:	18ffffc4 	addi	r3,r3,-1
8008e618:	98c00115 	stw	r3,4(r19)
8008e61c:	00fff316 	blt	zero,r3,8008e5ec <__ssvfiscanf_r+0x3cc>
8008e620:	980b883a 	mov	r5,r19
8008e624:	8809883a 	mov	r4,r17
8008e628:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008e62c:	1001591e 	bne	r2,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008e630:	a1c00017 	ldw	r7,0(r20)
8008e634:	003feb06 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008e638:	98800117 	ldw	r2,4(r19)
8008e63c:	0081b80e 	bge	zero,r2,8008ed20 <__ssvfiscanf_r+0xb00>
8008e640:	05800084 	movi	r22,2
8008e644:	003fe706 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008e648:	98800117 	ldw	r2,4(r19)
8008e64c:	84008814 	ori	r16,r16,544
8008e650:	00809f0e 	bge	zero,r2,8008e8d0 <__ssvfiscanf_r+0x6b0>
8008e654:	00a00274 	movhi	r2,32777
8008e658:	10b69d04 	addi	r2,r2,-9612
8008e65c:	02c00404 	movi	r11,16
8008e660:	d8805215 	stw	r2,328(sp)
8008e664:	dac05015 	stw	r11,320(sp)
8008e668:	058000c4 	movi	r22,3
8008e66c:	003fdd06 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008e670:	98800117 	ldw	r2,4(r19)
8008e674:	0080880e 	bge	zero,r2,8008e898 <__ssvfiscanf_r+0x678>
8008e678:	00a00274 	movhi	r2,32777
8008e67c:	10b69d04 	addi	r2,r2,-9612
8008e680:	02c00204 	movi	r11,8
8008e684:	d8805215 	stw	r2,328(sp)
8008e688:	dac05015 	stw	r11,320(sp)
8008e68c:	058000c4 	movi	r22,3
8008e690:	003fd406 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008e694:	8080040c 	andi	r2,r16,16
8008e698:	1000d61e 	bne	r2,zero,8008e9f4 <__ssvfiscanf_r+0x7d4>
8008e69c:	8080010c 	andi	r2,r16,4
8008e6a0:	10018b26 	beq	r2,zero,8008ecd0 <__ssvfiscanf_r+0xab0>
8008e6a4:	dac04f17 	ldw	r11,316(sp)
8008e6a8:	a825883a 	mov	r18,r21
8008e6ac:	58800017 	ldw	r2,0(r11)
8008e6b0:	5ac00104 	addi	r11,r11,4
8008e6b4:	dac04f15 	stw	r11,316(sp)
8008e6b8:	1700000d 	sth	fp,0(r2)
8008e6bc:	003f1606 	br	8008e318 <__ssvfiscanf_r+0xf8>
8008e6c0:	90c00043 	ldbu	r3,1(r18)
8008e6c4:	19417d26 	beq	r3,r5,8008ecbc <__ssvfiscanf_r+0xa9c>
8008e6c8:	a825883a 	mov	r18,r21
8008e6cc:	84000054 	ori	r16,r16,1
8008e6d0:	95400044 	addi	r21,r18,1
8008e6d4:	20ff202e 	bgeu	r4,r3,8008e358 <__ssvfiscanf_r+0x138>
8008e6d8:	38c7883a 	add	r3,r7,r3
8008e6dc:	18800043 	ldbu	r2,1(r3)
8008e6e0:	00c00044 	movi	r3,1
8008e6e4:	108000cc 	andi	r2,r2,3
8008e6e8:	10c16626 	beq	r2,r3,8008ec84 <__ssvfiscanf_r+0xa64>
8008e6ec:	98800117 	ldw	r2,4(r19)
8008e6f0:	0081670e 	bge	zero,r2,8008ec90 <__ssvfiscanf_r+0xa70>
8008e6f4:	00a00274 	movhi	r2,32777
8008e6f8:	10b55004 	addi	r2,r2,-10944
8008e6fc:	02c00284 	movi	r11,10
8008e700:	d8805215 	stw	r2,328(sp)
8008e704:	dac05015 	stw	r11,320(sp)
8008e708:	058000c4 	movi	r22,3
8008e70c:	003fb506 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008e710:	90800043 	ldbu	r2,1(r18)
8008e714:	84000114 	ori	r16,r16,4
8008e718:	a825883a 	mov	r18,r21
8008e71c:	10c03fcc 	andi	r3,r2,255
8008e720:	003f0b06 	br	8008e350 <__ssvfiscanf_r+0x130>
8008e724:	98800117 	ldw	r2,4(r19)
8008e728:	0081590e 	bge	zero,r2,8008ec90 <__ssvfiscanf_r+0xa70>
8008e72c:	02e00274 	movhi	r11,32777
8008e730:	5af55004 	addi	r11,r11,-10944
8008e734:	dac05215 	stw	r11,328(sp)
8008e738:	02c00284 	movi	r11,10
8008e73c:	dac05015 	stw	r11,320(sp)
8008e740:	058000c4 	movi	r22,3
8008e744:	003fa706 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008e748:	98800117 	ldw	r2,4(r19)
8008e74c:	0081220e 	bge	zero,r2,8008ebd8 <__ssvfiscanf_r+0x9b8>
8008e750:	b800011e 	bne	r23,zero,8008e758 <__ssvfiscanf_r+0x538>
8008e754:	05c00044 	movi	r23,1
8008e758:	8080004c 	andi	r2,r16,1
8008e75c:	10006f1e 	bne	r2,zero,8008e91c <__ssvfiscanf_r+0x6fc>
8008e760:	8400040c 	andi	r16,r16,16
8008e764:	80013526 	beq	r16,zero,8008ec3c <__ssvfiscanf_r+0xa1c>
8008e768:	0021883a 	mov	r16,zero
8008e76c:	00000806 	br	8008e790 <__ssvfiscanf_r+0x570>
8008e770:	1887883a 	add	r3,r3,r2
8008e774:	980b883a 	mov	r5,r19
8008e778:	8809883a 	mov	r4,r17
8008e77c:	98c00015 	stw	r3,0(r19)
8008e780:	80a1883a 	add	r16,r16,r2
8008e784:	b8afc83a 	sub	r23,r23,r2
8008e788:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008e78c:	1001291e 	bne	r2,zero,8008ec34 <__ssvfiscanf_r+0xa14>
8008e790:	98800117 	ldw	r2,4(r19)
8008e794:	98c00017 	ldw	r3,0(r19)
8008e798:	15fff516 	blt	r2,r23,8008e770 <__ssvfiscanf_r+0x550>
8008e79c:	15c5c83a 	sub	r2,r2,r23
8008e7a0:	1dd5883a 	add	r10,r3,r23
8008e7a4:	85e1883a 	add	r16,r16,r23
8008e7a8:	98800115 	stw	r2,4(r19)
8008e7ac:	9a800015 	stw	r10,0(r19)
8008e7b0:	a825883a 	mov	r18,r21
8008e7b4:	e439883a 	add	fp,fp,r16
8008e7b8:	900d883a 	mov	r6,r18
8008e7bc:	003ed706 	br	8008e31c <__ssvfiscanf_r+0xfc>
8008e7c0:	a80b883a 	mov	r5,r21
8008e7c4:	d9000104 	addi	r4,sp,4
8008e7c8:	008bb540 	call	8008bb54 <__sccl>
8008e7cc:	1025883a 	mov	r18,r2
8008e7d0:	98800117 	ldw	r2,4(r19)
8008e7d4:	0081590e 	bge	zero,r2,8008ed3c <__ssvfiscanf_r+0xb1c>
8008e7d8:	99000017 	ldw	r4,0(r19)
8008e7dc:	20800003 	ldbu	r2,0(r4)
8008e7e0:	b8008726 	beq	r23,zero,8008ea00 <__ssvfiscanf_r+0x7e0>
8008e7e4:	8400040c 	andi	r16,r16,16
8008e7e8:	80008826 	beq	r16,zero,8008ea0c <__ssvfiscanf_r+0x7ec>
8008e7ec:	b821883a 	mov	r16,r23
8008e7f0:	002b883a 	mov	r21,zero
8008e7f4:	00000106 	br	8008e7fc <__ssvfiscanf_r+0x5dc>
8008e7f8:	20800003 	ldbu	r2,0(r4)
8008e7fc:	10803fcc 	andi	r2,r2,255
8008e800:	d8c00104 	addi	r3,sp,4
8008e804:	1885883a 	add	r2,r3,r2
8008e808:	10800007 	ldb	r2,0(r2)
8008e80c:	10010726 	beq	r2,zero,8008ec2c <__ssvfiscanf_r+0xa0c>
8008e810:	98800117 	ldw	r2,4(r19)
8008e814:	21000044 	addi	r4,r4,1
8008e818:	ad400044 	addi	r21,r21,1
8008e81c:	10bfffc4 	addi	r2,r2,-1
8008e820:	98800115 	stw	r2,4(r19)
8008e824:	99000015 	stw	r4,0(r19)
8008e828:	adc0e226 	beq	r21,r23,8008ebb4 <__ssvfiscanf_r+0x994>
8008e82c:	00bff216 	blt	zero,r2,8008e7f8 <__ssvfiscanf_r+0x5d8>
8008e830:	980b883a 	mov	r5,r19
8008e834:	8809883a 	mov	r4,r17
8008e838:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008e83c:	1000dc1e 	bne	r2,zero,8008ebb0 <__ssvfiscanf_r+0x990>
8008e840:	99000017 	ldw	r4,0(r19)
8008e844:	003fec06 	br	8008e7f8 <__ssvfiscanf_r+0x5d8>
8008e848:	98800117 	ldw	r2,4(r19)
8008e84c:	84000054 	ori	r16,r16,1
8008e850:	00810f0e 	bge	zero,r2,8008ec90 <__ssvfiscanf_r+0xa70>
8008e854:	00e00274 	movhi	r3,32777
8008e858:	18f55004 	addi	r3,r3,-10944
8008e85c:	02c00284 	movi	r11,10
8008e860:	d8c05215 	stw	r3,328(sp)
8008e864:	dac05015 	stw	r11,320(sp)
8008e868:	058000c4 	movi	r22,3
8008e86c:	003f5d06 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008e870:	bdc002a4 	muli	r23,r23,10
8008e874:	90800043 	ldbu	r2,1(r18)
8008e878:	a825883a 	mov	r18,r21
8008e87c:	b8ef883a 	add	r23,r23,r3
8008e880:	bdfff404 	addi	r23,r23,-48
8008e884:	10c03fcc 	andi	r3,r2,255
8008e888:	003eb106 	br	8008e350 <__ssvfiscanf_r+0x130>
8008e88c:	98800117 	ldw	r2,4(r19)
8008e890:	84000054 	ori	r16,r16,1
8008e894:	00bf7816 	blt	zero,r2,8008e678 <__ssvfiscanf_r+0x458>
8008e898:	980b883a 	mov	r5,r19
8008e89c:	8809883a 	mov	r4,r17
8008e8a0:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008e8a4:	1000bb1e 	bne	r2,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008e8a8:	a1c00017 	ldw	r7,0(r20)
8008e8ac:	003f7206 	br	8008e678 <__ssvfiscanf_r+0x458>
8008e8b0:	90800043 	ldbu	r2,1(r18)
8008e8b4:	84000094 	ori	r16,r16,2
8008e8b8:	a825883a 	mov	r18,r21
8008e8bc:	10c03fcc 	andi	r3,r2,255
8008e8c0:	003ea306 	br	8008e350 <__ssvfiscanf_r+0x130>
8008e8c4:	98800117 	ldw	r2,4(r19)
8008e8c8:	84008014 	ori	r16,r16,512
8008e8cc:	00bf6116 	blt	zero,r2,8008e654 <__ssvfiscanf_r+0x434>
8008e8d0:	980b883a 	mov	r5,r19
8008e8d4:	8809883a 	mov	r4,r17
8008e8d8:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008e8dc:	1000ad1e 	bne	r2,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008e8e0:	a1c00017 	ldw	r7,0(r20)
8008e8e4:	003f5b06 	br	8008e654 <__ssvfiscanf_r+0x434>
8008e8e8:	90800043 	ldbu	r2,1(r18)
8008e8ec:	84000414 	ori	r16,r16,16
8008e8f0:	a825883a 	mov	r18,r21
8008e8f4:	10c03fcc 	andi	r3,r2,255
8008e8f8:	003e9506 	br	8008e350 <__ssvfiscanf_r+0x130>
8008e8fc:	98800117 	ldw	r2,4(r19)
8008e900:	0081190e 	bge	zero,r2,8008ed68 <__ssvfiscanf_r+0xb48>
8008e904:	00a00274 	movhi	r2,32777
8008e908:	10b55004 	addi	r2,r2,-10944
8008e90c:	d8805215 	stw	r2,328(sp)
8008e910:	d8005015 	stw	zero,320(sp)
8008e914:	058000c4 	movi	r22,3
8008e918:	003f3206 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008e91c:	d8c04b04 	addi	r3,sp,300
8008e920:	8400040c 	andi	r16,r16,16
8008e924:	01800204 	movi	r6,8
8008e928:	000b883a 	mov	r5,zero
8008e92c:	1809883a 	mov	r4,r3
8008e930:	dc005415 	stw	r16,336(sp)
8008e934:	d8c05315 	stw	r3,332(sp)
8008e938:	008a0a00 	call	8008a0a0 <memset>
8008e93c:	dc005417 	ldw	r16,336(sp)
8008e940:	8000a026 	beq	r16,zero,8008ebc4 <__ssvfiscanf_r+0x9a4>
8008e944:	002d883a 	mov	r22,zero
8008e948:	0021883a 	mov	r16,zero
8008e94c:	00899cc0 	call	800899cc <__locale_mb_cur_max>
8008e950:	14009026 	beq	r2,r16,8008eb94 <__ssvfiscanf_r+0x974>
8008e954:	98800017 	ldw	r2,0(r19)
8008e958:	98c00117 	ldw	r3,4(r19)
8008e95c:	dac05317 	ldw	r11,332(sp)
8008e960:	12000003 	ldbu	r8,0(r2)
8008e964:	18ffffc4 	addi	r3,r3,-1
8008e968:	10800044 	addi	r2,r2,1
8008e96c:	d9004104 	addi	r4,sp,260
8008e970:	98c00115 	stw	r3,4(r19)
8008e974:	98800015 	stw	r2,0(r19)
8008e978:	84800044 	addi	r18,r16,1
8008e97c:	dac00015 	stw	r11,0(sp)
8008e980:	2421883a 	add	r16,r4,r16
8008e984:	200d883a 	mov	r6,r4
8008e988:	900f883a 	mov	r7,r18
8008e98c:	b00b883a 	mov	r5,r22
8008e990:	8809883a 	mov	r4,r17
8008e994:	82000005 	stb	r8,0(r16)
8008e998:	0089c3c0 	call	80089c3c <_mbrtowc_r>
8008e99c:	00ffffc4 	movi	r3,-1
8008e9a0:	10c07c26 	beq	r2,r3,8008eb94 <__ssvfiscanf_r+0x974>
8008e9a4:	1000911e 	bne	r2,zero,8008ebec <__ssvfiscanf_r+0x9cc>
8008e9a8:	dac05417 	ldw	r11,336(sp)
8008e9ac:	5800951e 	bne	r11,zero,8008ec04 <__ssvfiscanf_r+0x9e4>
8008e9b0:	b0000015 	stw	zero,0(r22)
8008e9b4:	e4b9883a 	add	fp,fp,r18
8008e9b8:	b8ef883a 	add	r23,r23,r3
8008e9bc:	b5800104 	addi	r22,r22,4
8008e9c0:	98800117 	ldw	r2,4(r19)
8008e9c4:	0021883a 	mov	r16,zero
8008e9c8:	00807c16 	blt	zero,r2,8008ebbc <__ssvfiscanf_r+0x99c>
8008e9cc:	980b883a 	mov	r5,r19
8008e9d0:	8809883a 	mov	r4,r17
8008e9d4:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008e9d8:	10007826 	beq	r2,zero,8008ebbc <__ssvfiscanf_r+0x99c>
8008e9dc:	80006d1e 	bne	r16,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008e9e0:	d8c05417 	ldw	r3,336(sp)
8008e9e4:	1800031e 	bne	r3,zero,8008e9f4 <__ssvfiscanf_r+0x7d4>
8008e9e8:	dac05117 	ldw	r11,324(sp)
8008e9ec:	5ac00044 	addi	r11,r11,1
8008e9f0:	dac05115 	stw	r11,324(sp)
8008e9f4:	a825883a 	mov	r18,r21
8008e9f8:	900d883a 	mov	r6,r18
8008e9fc:	003e4706 	br	8008e31c <__ssvfiscanf_r+0xfc>
8008ea00:	8400040c 	andi	r16,r16,16
8008ea04:	05ffffc4 	movi	r23,-1
8008ea08:	803f781e 	bne	r16,zero,8008e7ec <__ssvfiscanf_r+0x5cc>
8008ea0c:	dac04f17 	ldw	r11,316(sp)
8008ea10:	babfffc4 	addi	r10,r23,-1
8008ea14:	5d400017 	ldw	r21,0(r11)
8008ea18:	5c000104 	addi	r16,r11,4
8008ea1c:	a807883a 	mov	r3,r21
8008ea20:	aaaf883a 	add	r23,r21,r10
8008ea24:	00000306 	br	8008ea34 <__ssvfiscanf_r+0x814>
8008ea28:	99000017 	ldw	r4,0(r19)
8008ea2c:	b007883a 	mov	r3,r22
8008ea30:	20800003 	ldbu	r2,0(r4)
8008ea34:	10803fcc 	andi	r2,r2,255
8008ea38:	d9400104 	addi	r5,sp,4
8008ea3c:	2885883a 	add	r2,r5,r2
8008ea40:	10800007 	ldb	r2,0(r2)
8008ea44:	10007726 	beq	r2,zero,8008ec24 <__ssvfiscanf_r+0xa04>
8008ea48:	98800117 	ldw	r2,4(r19)
8008ea4c:	21400044 	addi	r5,r4,1
8008ea50:	99400015 	stw	r5,0(r19)
8008ea54:	10bfffc4 	addi	r2,r2,-1
8008ea58:	98800115 	stw	r2,4(r19)
8008ea5c:	20800003 	ldbu	r2,0(r4)
8008ea60:	1d800044 	addi	r22,r3,1
8008ea64:	18800005 	stb	r2,0(r3)
8008ea68:	1dc00726 	beq	r3,r23,8008ea88 <__ssvfiscanf_r+0x868>
8008ea6c:	98800117 	ldw	r2,4(r19)
8008ea70:	00bfed16 	blt	zero,r2,8008ea28 <__ssvfiscanf_r+0x808>
8008ea74:	980b883a 	mov	r5,r19
8008ea78:	8809883a 	mov	r4,r17
8008ea7c:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008ea80:	103fe926 	beq	r2,zero,8008ea28 <__ssvfiscanf_r+0x808>
8008ea84:	ad804326 	beq	r21,r22,8008eb94 <__ssvfiscanf_r+0x974>
8008ea88:	b56bc83a 	sub	r21,r22,r21
8008ea8c:	a83e2726 	beq	r21,zero,8008e32c <__ssvfiscanf_r+0x10c>
8008ea90:	dac05117 	ldw	r11,324(sp)
8008ea94:	b0000005 	stb	zero,0(r22)
8008ea98:	dc004f15 	stw	r16,316(sp)
8008ea9c:	5ac00044 	addi	r11,r11,1
8008eaa0:	dac05115 	stw	r11,324(sp)
8008eaa4:	e579883a 	add	fp,fp,r21
8008eaa8:	900d883a 	mov	r6,r18
8008eaac:	003e1b06 	br	8008e31c <__ssvfiscanf_r+0xfc>
8008eab0:	d8c04b04 	addi	r3,sp,300
8008eab4:	8400040c 	andi	r16,r16,16
8008eab8:	01800204 	movi	r6,8
8008eabc:	000b883a 	mov	r5,zero
8008eac0:	1809883a 	mov	r4,r3
8008eac4:	d8c05315 	stw	r3,332(sp)
8008eac8:	008a0a00 	call	8008a0a0 <memset>
8008eacc:	8001e91e 	bne	r16,zero,8008f274 <__ssvfiscanf_r+0x1054>
8008ead0:	dac04f17 	ldw	r11,316(sp)
8008ead4:	5d800017 	ldw	r22,0(r11)
8008ead8:	5ac00104 	addi	r11,r11,4
8008eadc:	dac04f15 	stw	r11,316(sp)
8008eae0:	000d883a 	mov	r6,zero
8008eae4:	3025883a 	mov	r18,r6
8008eae8:	98800017 	ldw	r2,0(r19)
8008eaec:	a0c00017 	ldw	r3,0(r20)
8008eaf0:	10800003 	ldbu	r2,0(r2)
8008eaf4:	1885883a 	add	r2,r3,r2
8008eaf8:	10800043 	ldbu	r2,1(r2)
8008eafc:	1080020c 	andi	r2,r2,8
8008eb00:	1001cc1e 	bne	r2,zero,8008f234 <__ssvfiscanf_r+0x1014>
8008eb04:	b801cb26 	beq	r23,zero,8008f234 <__ssvfiscanf_r+0x1014>
8008eb08:	00899cc0 	call	800899cc <__locale_mb_cur_max>
8008eb0c:	90802126 	beq	r18,r2,8008eb94 <__ssvfiscanf_r+0x974>
8008eb10:	98800017 	ldw	r2,0(r19)
8008eb14:	99000117 	ldw	r4,4(r19)
8008eb18:	dac05317 	ldw	r11,332(sp)
8008eb1c:	12000003 	ldbu	r8,0(r2)
8008eb20:	213fffc4 	addi	r4,r4,-1
8008eb24:	10800044 	addi	r2,r2,1
8008eb28:	99000115 	stw	r4,4(r19)
8008eb2c:	d9404104 	addi	r5,sp,260
8008eb30:	98800015 	stw	r2,0(r19)
8008eb34:	90c00044 	addi	r3,r18,1
8008eb38:	dac00015 	stw	r11,0(sp)
8008eb3c:	2ca5883a 	add	r18,r5,r18
8008eb40:	180f883a 	mov	r7,r3
8008eb44:	280d883a 	mov	r6,r5
8008eb48:	8809883a 	mov	r4,r17
8008eb4c:	92000005 	stb	r8,0(r18)
8008eb50:	b00b883a 	mov	r5,r22
8008eb54:	d8c05a15 	stw	r3,360(sp)
8008eb58:	0089c3c0 	call	80089c3c <_mbrtowc_r>
8008eb5c:	013fffc4 	movi	r4,-1
8008eb60:	d8c05a17 	ldw	r3,360(sp)
8008eb64:	11000b26 	beq	r2,r4,8008eb94 <__ssvfiscanf_r+0x974>
8008eb68:	1001a026 	beq	r2,zero,8008f1ec <__ssvfiscanf_r+0xfcc>
8008eb6c:	017fff84 	movi	r5,-2
8008eb70:	1825883a 	mov	r18,r3
8008eb74:	1141e31e 	bne	r2,r5,8008f304 <__ssvfiscanf_r+0x10e4>
8008eb78:	98800117 	ldw	r2,4(r19)
8008eb7c:	00bfda16 	blt	zero,r2,8008eae8 <__ssvfiscanf_r+0x8c8>
8008eb80:	980b883a 	mov	r5,r19
8008eb84:	8809883a 	mov	r4,r17
8008eb88:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008eb8c:	103fd626 	beq	r2,zero,8008eae8 <__ssvfiscanf_r+0x8c8>
8008eb90:	9001a826 	beq	r18,zero,8008f234 <__ssvfiscanf_r+0x1014>
8008eb94:	dac05117 	ldw	r11,324(sp)
8008eb98:	583e7d26 	beq	r11,zero,8008e590 <__ssvfiscanf_r+0x370>
8008eb9c:	9880030b 	ldhu	r2,12(r19)
8008eba0:	1080100c 	andi	r2,r2,64
8008eba4:	103e7a1e 	bne	r2,zero,8008e590 <__ssvfiscanf_r+0x370>
8008eba8:	5805883a 	mov	r2,r11
8008ebac:	003e7906 	br	8008e594 <__ssvfiscanf_r+0x374>
8008ebb0:	a821883a 	mov	r16,r21
8008ebb4:	802b883a 	mov	r21,r16
8008ebb8:	003fba06 	br	8008eaa4 <__ssvfiscanf_r+0x884>
8008ebbc:	b83f631e 	bne	r23,zero,8008e94c <__ssvfiscanf_r+0x72c>
8008ebc0:	003f8706 	br	8008e9e0 <__ssvfiscanf_r+0x7c0>
8008ebc4:	dac04f17 	ldw	r11,316(sp)
8008ebc8:	5d800017 	ldw	r22,0(r11)
8008ebcc:	5ac00104 	addi	r11,r11,4
8008ebd0:	dac04f15 	stw	r11,316(sp)
8008ebd4:	003f5c06 	br	8008e948 <__ssvfiscanf_r+0x728>
8008ebd8:	980b883a 	mov	r5,r19
8008ebdc:	8809883a 	mov	r4,r17
8008ebe0:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008ebe4:	103eda26 	beq	r2,zero,8008e750 <__ssvfiscanf_r+0x530>
8008ebe8:	003fea06 	br	8008eb94 <__ssvfiscanf_r+0x974>
8008ebec:	00ffff84 	movi	r3,-2
8008ebf0:	10c0071e 	bne	r2,r3,8008ec10 <__ssvfiscanf_r+0x9f0>
8008ebf4:	98800117 	ldw	r2,4(r19)
8008ebf8:	9021883a 	mov	r16,r18
8008ebfc:	00bf5316 	blt	zero,r2,8008e94c <__ssvfiscanf_r+0x72c>
8008ec00:	003f7206 	br	8008e9cc <__ssvfiscanf_r+0x7ac>
8008ec04:	e4b9883a 	add	fp,fp,r18
8008ec08:	bdffffc4 	addi	r23,r23,-1
8008ec0c:	003f6c06 	br	8008e9c0 <__ssvfiscanf_r+0x7a0>
8008ec10:	dac05417 	ldw	r11,336(sp)
8008ec14:	e4b9883a 	add	fp,fp,r18
8008ec18:	bdffffc4 	addi	r23,r23,-1
8008ec1c:	583f6726 	beq	r11,zero,8008e9bc <__ssvfiscanf_r+0x79c>
8008ec20:	003f6706 	br	8008e9c0 <__ssvfiscanf_r+0x7a0>
8008ec24:	182d883a 	mov	r22,r3
8008ec28:	003f9706 	br	8008ea88 <__ssvfiscanf_r+0x868>
8008ec2c:	a83f9d1e 	bne	r21,zero,8008eaa4 <__ssvfiscanf_r+0x884>
8008ec30:	003dbe06 	br	8008e32c <__ssvfiscanf_r+0x10c>
8008ec34:	803ede1e 	bne	r16,zero,8008e7b0 <__ssvfiscanf_r+0x590>
8008ec38:	003fd606 	br	8008eb94 <__ssvfiscanf_r+0x974>
8008ec3c:	dac04f17 	ldw	r11,316(sp)
8008ec40:	dcc00015 	stw	r19,0(sp)
8008ec44:	b80f883a 	mov	r7,r23
8008ec48:	59400017 	ldw	r5,0(r11)
8008ec4c:	01800044 	movi	r6,1
8008ec50:	8809883a 	mov	r4,r17
8008ec54:	008e12c0 	call	8008e12c <_sfread_r>
8008ec58:	dac04f17 	ldw	r11,316(sp)
8008ec5c:	58c00104 	addi	r3,r11,4
8008ec60:	103fcc26 	beq	r2,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008ec64:	dac05117 	ldw	r11,324(sp)
8008ec68:	a825883a 	mov	r18,r21
8008ec6c:	e0b9883a 	add	fp,fp,r2
8008ec70:	5ac00044 	addi	r11,r11,1
8008ec74:	dac05115 	stw	r11,324(sp)
8008ec78:	d8c04f15 	stw	r3,316(sp)
8008ec7c:	900d883a 	mov	r6,r18
8008ec80:	003da606 	br	8008e31c <__ssvfiscanf_r+0xfc>
8008ec84:	98800117 	ldw	r2,4(r19)
8008ec88:	80e0b03a 	or	r16,r16,r3
8008ec8c:	00be9916 	blt	zero,r2,8008e6f4 <__ssvfiscanf_r+0x4d4>
8008ec90:	980b883a 	mov	r5,r19
8008ec94:	8809883a 	mov	r4,r17
8008ec98:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008ec9c:	103fbd1e 	bne	r2,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008eca0:	a1c00017 	ldw	r7,0(r20)
8008eca4:	003e9306 	br	8008e6f4 <__ssvfiscanf_r+0x4d4>
8008eca8:	980b883a 	mov	r5,r19
8008ecac:	8809883a 	mov	r4,r17
8008ecb0:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008ecb4:	103e2a26 	beq	r2,zero,8008e560 <__ssvfiscanf_r+0x340>
8008ecb8:	003fb606 	br	8008eb94 <__ssvfiscanf_r+0x974>
8008ecbc:	90800083 	ldbu	r2,2(r18)
8008ecc0:	84000094 	ori	r16,r16,2
8008ecc4:	94800084 	addi	r18,r18,2
8008ecc8:	10c03fcc 	andi	r3,r2,255
8008eccc:	003da006 	br	8008e350 <__ssvfiscanf_r+0x130>
8008ecd0:	8080004c 	andi	r2,r16,1
8008ecd4:	10000b1e 	bne	r2,zero,8008ed04 <__ssvfiscanf_r+0xae4>
8008ecd8:	8400008c 	andi	r16,r16,2
8008ecdc:	80000926 	beq	r16,zero,8008ed04 <__ssvfiscanf_r+0xae4>
8008ece0:	dac04f17 	ldw	r11,316(sp)
8008ece4:	e007d7fa 	srai	r3,fp,31
8008ece8:	a825883a 	mov	r18,r21
8008ecec:	58800017 	ldw	r2,0(r11)
8008ecf0:	5ac00104 	addi	r11,r11,4
8008ecf4:	dac04f15 	stw	r11,316(sp)
8008ecf8:	17000015 	stw	fp,0(r2)
8008ecfc:	10c00115 	stw	r3,4(r2)
8008ed00:	003d8506 	br	8008e318 <__ssvfiscanf_r+0xf8>
8008ed04:	dac04f17 	ldw	r11,316(sp)
8008ed08:	a825883a 	mov	r18,r21
8008ed0c:	58800017 	ldw	r2,0(r11)
8008ed10:	5ac00104 	addi	r11,r11,4
8008ed14:	dac04f15 	stw	r11,316(sp)
8008ed18:	17000015 	stw	fp,0(r2)
8008ed1c:	003d7e06 	br	8008e318 <__ssvfiscanf_r+0xf8>
8008ed20:	980b883a 	mov	r5,r19
8008ed24:	8809883a 	mov	r4,r17
8008ed28:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008ed2c:	103f991e 	bne	r2,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008ed30:	a1c00017 	ldw	r7,0(r20)
8008ed34:	05800084 	movi	r22,2
8008ed38:	003e2a06 	br	8008e5e4 <__ssvfiscanf_r+0x3c4>
8008ed3c:	980b883a 	mov	r5,r19
8008ed40:	8809883a 	mov	r4,r17
8008ed44:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008ed48:	103ea326 	beq	r2,zero,8008e7d8 <__ssvfiscanf_r+0x5b8>
8008ed4c:	003f9106 	br	8008eb94 <__ssvfiscanf_r+0x974>
8008ed50:	980b883a 	mov	r5,r19
8008ed54:	8809883a 	mov	r4,r17
8008ed58:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008ed5c:	103f8d1e 	bne	r2,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008ed60:	a1c00017 	ldw	r7,0(r20)
8008ed64:	003e1906 	br	8008e5cc <__ssvfiscanf_r+0x3ac>
8008ed68:	980b883a 	mov	r5,r19
8008ed6c:	8809883a 	mov	r4,r17
8008ed70:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008ed74:	103f871e 	bne	r2,zero,8008eb94 <__ssvfiscanf_r+0x974>
8008ed78:	a1c00017 	ldw	r7,0(r20)
8008ed7c:	003ee106 	br	8008e904 <__ssvfiscanf_r+0x6e4>
8008ed80:	014000c4 	movi	r5,3
8008ed84:	b140ac1e 	bne	r22,r5,8008f038 <__ssvfiscanf_r+0xe18>
8008ed88:	b8ffffc4 	addi	r3,r23,-1
8008ed8c:	01400984 	movi	r5,38
8008ed90:	28c0d62e 	bgeu	r5,r3,8008f0ec <__ssvfiscanf_r+0xecc>
8008ed94:	b9bff644 	addi	r6,r23,-39
8008ed98:	05c009c4 	movi	r23,39
8008ed9c:	85836014 	ori	r22,r16,3456
8008eda0:	0021883a 	mov	r16,zero
8008eda4:	a815883a 	mov	r10,r21
8008eda8:	802b883a 	mov	r21,r16
8008edac:	dc005017 	ldw	r16,320(sp)
8008edb0:	dc804104 	addi	r18,sp,260
8008edb4:	02401344 	movi	r9,77
8008edb8:	01c08004 	movi	r7,512
8008edbc:	00ff7fc4 	movi	r3,-513
8008edc0:	023fdfc4 	movi	r8,-129
8008edc4:	217ff544 	addi	r5,r4,-43
8008edc8:	29403fcc 	andi	r5,r5,255
8008edcc:	49408836 	bltu	r9,r5,8008eff0 <__ssvfiscanf_r+0xdd0>
8008edd0:	280a90ba 	slli	r5,r5,2
8008edd4:	02e00274 	movhi	r11,32777
8008edd8:	5afb7a04 	addi	r11,r11,-4632
8008eddc:	2acb883a 	add	r5,r5,r11
8008ede0:	29400017 	ldw	r5,0(r5)
8008ede4:	2800683a 	jmp	r5
8008ede8:	8008ef7c 	xorhi	zero,r16,9149
8008edec:	8008eff0 	cmpltui	zero,r16,9151
8008edf0:	8008ef7c 	xorhi	zero,r16,9149
8008edf4:	8008eff0 	cmpltui	zero,r16,9151
8008edf8:	8008eff0 	cmpltui	zero,r16,9151
8008edfc:	8008efac 	andhi	zero,r16,9150
8008ee00:	8008ef8c 	andi	zero,r16,9150
8008ee04:	8008ef8c 	andi	zero,r16,9150
8008ee08:	8008ef8c 	andi	zero,r16,9150
8008ee0c:	8008ef8c 	andi	zero,r16,9150
8008ee10:	8008ef8c 	andi	zero,r16,9150
8008ee14:	8008ef8c 	andi	zero,r16,9150
8008ee18:	8008ef8c 	andi	zero,r16,9150
8008ee1c:	8008efd4 	ori	zero,r16,9151
8008ee20:	8008efd4 	ori	zero,r16,9151
8008ee24:	8008eff0 	cmpltui	zero,r16,9151
8008ee28:	8008eff0 	cmpltui	zero,r16,9151
8008ee2c:	8008eff0 	cmpltui	zero,r16,9151
8008ee30:	8008eff0 	cmpltui	zero,r16,9151
8008ee34:	8008eff0 	cmpltui	zero,r16,9151
8008ee38:	8008eff0 	cmpltui	zero,r16,9151
8008ee3c:	8008eff0 	cmpltui	zero,r16,9151
8008ee40:	8008ef68 	cmpgeui	zero,r16,9149
8008ee44:	8008ef68 	cmpgeui	zero,r16,9149
8008ee48:	8008ef68 	cmpgeui	zero,r16,9149
8008ee4c:	8008ef68 	cmpgeui	zero,r16,9149
8008ee50:	8008ef68 	cmpgeui	zero,r16,9149
8008ee54:	8008ef68 	cmpgeui	zero,r16,9149
8008ee58:	8008eff0 	cmpltui	zero,r16,9151
8008ee5c:	8008eff0 	cmpltui	zero,r16,9151
8008ee60:	8008eff0 	cmpltui	zero,r16,9151
8008ee64:	8008eff0 	cmpltui	zero,r16,9151
8008ee68:	8008eff0 	cmpltui	zero,r16,9151
8008ee6c:	8008eff0 	cmpltui	zero,r16,9151
8008ee70:	8008eff0 	cmpltui	zero,r16,9151
8008ee74:	8008eff0 	cmpltui	zero,r16,9151
8008ee78:	8008eff0 	cmpltui	zero,r16,9151
8008ee7c:	8008eff0 	cmpltui	zero,r16,9151
8008ee80:	8008eff0 	cmpltui	zero,r16,9151
8008ee84:	8008eff0 	cmpltui	zero,r16,9151
8008ee88:	8008eff0 	cmpltui	zero,r16,9151
8008ee8c:	8008eff0 	cmpltui	zero,r16,9151
8008ee90:	8008eff0 	cmpltui	zero,r16,9151
8008ee94:	8008eff0 	cmpltui	zero,r16,9151
8008ee98:	8008eff0 	cmpltui	zero,r16,9151
8008ee9c:	8008ef20 	cmpeqi	zero,r16,9148
8008eea0:	8008eff0 	cmpltui	zero,r16,9151
8008eea4:	8008eff0 	cmpltui	zero,r16,9151
8008eea8:	8008eff0 	cmpltui	zero,r16,9151
8008eeac:	8008eff0 	cmpltui	zero,r16,9151
8008eeb0:	8008eff0 	cmpltui	zero,r16,9151
8008eeb4:	8008eff0 	cmpltui	zero,r16,9151
8008eeb8:	8008eff0 	cmpltui	zero,r16,9151
8008eebc:	8008eff0 	cmpltui	zero,r16,9151
8008eec0:	8008ef68 	cmpgeui	zero,r16,9149
8008eec4:	8008ef68 	cmpgeui	zero,r16,9149
8008eec8:	8008ef68 	cmpgeui	zero,r16,9149
8008eecc:	8008ef68 	cmpgeui	zero,r16,9149
8008eed0:	8008ef68 	cmpgeui	zero,r16,9149
8008eed4:	8008ef68 	cmpgeui	zero,r16,9149
8008eed8:	8008eff0 	cmpltui	zero,r16,9151
8008eedc:	8008eff0 	cmpltui	zero,r16,9151
8008eee0:	8008eff0 	cmpltui	zero,r16,9151
8008eee4:	8008eff0 	cmpltui	zero,r16,9151
8008eee8:	8008eff0 	cmpltui	zero,r16,9151
8008eeec:	8008eff0 	cmpltui	zero,r16,9151
8008eef0:	8008eff0 	cmpltui	zero,r16,9151
8008eef4:	8008eff0 	cmpltui	zero,r16,9151
8008eef8:	8008eff0 	cmpltui	zero,r16,9151
8008eefc:	8008eff0 	cmpltui	zero,r16,9151
8008ef00:	8008eff0 	cmpltui	zero,r16,9151
8008ef04:	8008eff0 	cmpltui	zero,r16,9151
8008ef08:	8008eff0 	cmpltui	zero,r16,9151
8008ef0c:	8008eff0 	cmpltui	zero,r16,9151
8008ef10:	8008eff0 	cmpltui	zero,r16,9151
8008ef14:	8008eff0 	cmpltui	zero,r16,9151
8008ef18:	8008eff0 	cmpltui	zero,r16,9151
8008ef1c:	8008ef20 	cmpeqi	zero,r16,9148
8008ef20:	b141800c 	andi	r5,r22,1536
8008ef24:	29c0321e 	bne	r5,r7,8008eff0 <__ssvfiscanf_r+0xdd0>
8008ef28:	b0ec703a 	and	r22,r22,r3
8008ef2c:	b5814014 	ori	r22,r22,1280
8008ef30:	04000404 	movi	r16,16
8008ef34:	91000005 	stb	r4,0(r18)
8008ef38:	94800044 	addi	r18,r18,1
8008ef3c:	99000117 	ldw	r4,4(r19)
8008ef40:	213fffc4 	addi	r4,r4,-1
8008ef44:	99000115 	stw	r4,4(r19)
8008ef48:	0100570e 	bge	zero,r4,8008f0a8 <__ssvfiscanf_r+0xe88>
8008ef4c:	10800044 	addi	r2,r2,1
8008ef50:	98800015 	stw	r2,0(r19)
8008ef54:	bdffffc4 	addi	r23,r23,-1
8008ef58:	b8002526 	beq	r23,zero,8008eff0 <__ssvfiscanf_r+0xdd0>
8008ef5c:	98800017 	ldw	r2,0(r19)
8008ef60:	11000003 	ldbu	r4,0(r2)
8008ef64:	003f9706 	br	8008edc4 <__ssvfiscanf_r+0xba4>
8008ef68:	01400284 	movi	r5,10
8008ef6c:	2c00200e 	bge	r5,r16,8008eff0 <__ssvfiscanf_r+0xdd0>
8008ef70:	017d1fc4 	movi	r5,-2945
8008ef74:	b16c703a 	and	r22,r22,r5
8008ef78:	003fee06 	br	8008ef34 <__ssvfiscanf_r+0xd14>
8008ef7c:	b140200c 	andi	r5,r22,128
8008ef80:	28001b26 	beq	r5,zero,8008eff0 <__ssvfiscanf_r+0xdd0>
8008ef84:	b22c703a 	and	r22,r22,r8
8008ef88:	003fea06 	br	8008ef34 <__ssvfiscanf_r+0xd14>
8008ef8c:	02e002b4 	movhi	r11,32778
8008ef90:	8421883a 	add	r16,r16,r16
8008ef94:	5af1dc04 	addi	r11,r11,-14480
8008ef98:	5c0b883a 	add	r5,r11,r16
8008ef9c:	2c00000f 	ldh	r16,0(r5)
8008efa0:	017d1fc4 	movi	r5,-2945
8008efa4:	b16c703a 	and	r22,r22,r5
8008efa8:	003fe206 	br	8008ef34 <__ssvfiscanf_r+0xd14>
8008efac:	b142000c 	andi	r5,r22,2048
8008efb0:	283fe026 	beq	r5,zero,8008ef34 <__ssvfiscanf_r+0xd14>
8008efb4:	8000021e 	bne	r16,zero,8008efc0 <__ssvfiscanf_r+0xda0>
8008efb8:	b5808014 	ori	r22,r22,512
8008efbc:	04000204 	movi	r16,8
8008efc0:	b141000c 	andi	r5,r22,1024
8008efc4:	28009e26 	beq	r5,zero,8008f240 <__ssvfiscanf_r+0x1020>
8008efc8:	017e9fc4 	movi	r5,-1409
8008efcc:	b16c703a 	and	r22,r22,r5
8008efd0:	003fd806 	br	8008ef34 <__ssvfiscanf_r+0xd14>
8008efd4:	02e002b4 	movhi	r11,32778
8008efd8:	8421883a 	add	r16,r16,r16
8008efdc:	5af1dc04 	addi	r11,r11,-14480
8008efe0:	5c0b883a 	add	r5,r11,r16
8008efe4:	2c00000f 	ldh	r16,0(r5)
8008efe8:	01400204 	movi	r5,8
8008efec:	2c3fe016 	blt	r5,r16,8008ef70 <__ssvfiscanf_r+0xd50>
8008eff0:	dc005015 	stw	r16,320(sp)
8008eff4:	b080400c 	andi	r2,r22,256
8008eff8:	a821883a 	mov	r16,r21
8008effc:	502b883a 	mov	r21,r10
8008f000:	10000426 	beq	r2,zero,8008f014 <__ssvfiscanf_r+0xdf4>
8008f004:	dac04e17 	ldw	r11,312(sp)
8008f008:	5c809c36 	bltu	r11,r18,8008f27c <__ssvfiscanf_r+0x105c>
8008f00c:	dac04e17 	ldw	r11,312(sp)
8008f010:	92fcc626 	beq	r18,r11,8008e32c <__ssvfiscanf_r+0x10c>
8008f014:	b080040c 	andi	r2,r22,16
8008f018:	10006026 	beq	r2,zero,8008f19c <__ssvfiscanf_r+0xf7c>
8008f01c:	dac04e17 	ldw	r11,312(sp)
8008f020:	92e5c83a 	sub	r18,r18,r11
8008f024:	9425883a 	add	r18,r18,r16
8008f028:	e4b9883a 	add	fp,fp,r18
8008f02c:	a825883a 	mov	r18,r21
8008f030:	900d883a 	mov	r6,r18
8008f034:	003cb906 	br	8008e31c <__ssvfiscanf_r+0xfc>
8008f038:	b800011e 	bne	r23,zero,8008f040 <__ssvfiscanf_r+0xe20>
8008f03c:	05ffffc4 	movi	r23,-1
8008f040:	8100004c 	andi	r4,r16,1
8008f044:	203e9a1e 	bne	r4,zero,8008eab0 <__ssvfiscanf_r+0x890>
8008f048:	8400040c 	andi	r16,r16,16
8008f04c:	80002926 	beq	r16,zero,8008f0f4 <__ssvfiscanf_r+0xed4>
8008f050:	0021883a 	mov	r16,zero
8008f054:	00000306 	br	8008f064 <__ssvfiscanf_r+0xe44>
8008f058:	10c00003 	ldbu	r3,0(r2)
8008f05c:	38c7883a 	add	r3,r7,r3
8008f060:	18c00043 	ldbu	r3,1(r3)
8008f064:	18c0020c 	andi	r3,r3,8
8008f068:	183dd11e 	bne	r3,zero,8008e7b0 <__ssvfiscanf_r+0x590>
8008f06c:	98c00117 	ldw	r3,4(r19)
8008f070:	10800044 	addi	r2,r2,1
8008f074:	84000044 	addi	r16,r16,1
8008f078:	18ffffc4 	addi	r3,r3,-1
8008f07c:	98c00115 	stw	r3,4(r19)
8008f080:	98800015 	stw	r2,0(r19)
8008f084:	85fdca26 	beq	r16,r23,8008e7b0 <__ssvfiscanf_r+0x590>
8008f088:	00fff316 	blt	zero,r3,8008f058 <__ssvfiscanf_r+0xe38>
8008f08c:	980b883a 	mov	r5,r19
8008f090:	8809883a 	mov	r4,r17
8008f094:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008f098:	103dc51e 	bne	r2,zero,8008e7b0 <__ssvfiscanf_r+0x590>
8008f09c:	a1c00017 	ldw	r7,0(r20)
8008f0a0:	98800017 	ldw	r2,0(r19)
8008f0a4:	003fec06 	br	8008f058 <__ssvfiscanf_r+0xe38>
8008f0a8:	980b883a 	mov	r5,r19
8008f0ac:	8809883a 	mov	r4,r17
8008f0b0:	d8c05a15 	stw	r3,360(sp)
8008f0b4:	d9805815 	stw	r6,352(sp)
8008f0b8:	d9c05615 	stw	r7,344(sp)
8008f0bc:	da005715 	stw	r8,348(sp)
8008f0c0:	da405515 	stw	r9,340(sp)
8008f0c4:	da805915 	stw	r10,356(sp)
8008f0c8:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008f0cc:	d8c05a17 	ldw	r3,360(sp)
8008f0d0:	d9805817 	ldw	r6,352(sp)
8008f0d4:	d9c05617 	ldw	r7,344(sp)
8008f0d8:	da005717 	ldw	r8,348(sp)
8008f0dc:	da405517 	ldw	r9,340(sp)
8008f0e0:	da805917 	ldw	r10,356(sp)
8008f0e4:	103f9b26 	beq	r2,zero,8008ef54 <__ssvfiscanf_r+0xd34>
8008f0e8:	003fc106 	br	8008eff0 <__ssvfiscanf_r+0xdd0>
8008f0ec:	000d883a 	mov	r6,zero
8008f0f0:	003f2a06 	br	8008ed9c <__ssvfiscanf_r+0xb7c>
8008f0f4:	dac04f17 	ldw	r11,316(sp)
8008f0f8:	babfffc4 	addi	r10,r23,-1
8008f0fc:	5c800017 	ldw	r18,0(r11)
8008f100:	5c000104 	addi	r16,r11,4
8008f104:	900b883a 	mov	r5,r18
8008f108:	92ad883a 	add	r22,r18,r10
8008f10c:	00000606 	br	8008f128 <__ssvfiscanf_r+0xf08>
8008f110:	98800017 	ldw	r2,0(r19)
8008f114:	a1000017 	ldw	r4,0(r20)
8008f118:	b80b883a 	mov	r5,r23
8008f11c:	10c00003 	ldbu	r3,0(r2)
8008f120:	20c7883a 	add	r3,r4,r3
8008f124:	18c00043 	ldbu	r3,1(r3)
8008f128:	18c0020c 	andi	r3,r3,8
8008f12c:	2809883a 	mov	r4,r5
8008f130:	1800101e 	bne	r3,zero,8008f174 <__ssvfiscanf_r+0xf54>
8008f134:	98c00117 	ldw	r3,4(r19)
8008f138:	11800044 	addi	r6,r2,1
8008f13c:	99800015 	stw	r6,0(r19)
8008f140:	18ffffc4 	addi	r3,r3,-1
8008f144:	98c00115 	stw	r3,4(r19)
8008f148:	10800003 	ldbu	r2,0(r2)
8008f14c:	25c00044 	addi	r23,r4,1
8008f150:	28800005 	stb	r2,0(r5)
8008f154:	25800626 	beq	r4,r22,8008f170 <__ssvfiscanf_r+0xf50>
8008f158:	98800117 	ldw	r2,4(r19)
8008f15c:	00bfec16 	blt	zero,r2,8008f110 <__ssvfiscanf_r+0xef0>
8008f160:	980b883a 	mov	r5,r19
8008f164:	8809883a 	mov	r4,r17
8008f168:	008e0bc0 	call	8008e0bc <__ssrefill_r>
8008f16c:	103fe826 	beq	r2,zero,8008f110 <__ssvfiscanf_r+0xef0>
8008f170:	b809883a 	mov	r4,r23
8008f174:	dac05117 	ldw	r11,324(sp)
8008f178:	24a5c83a 	sub	r18,r4,r18
8008f17c:	e4b9883a 	add	fp,fp,r18
8008f180:	5ac00044 	addi	r11,r11,1
8008f184:	a825883a 	mov	r18,r21
8008f188:	20000005 	stb	zero,0(r4)
8008f18c:	dac05115 	stw	r11,324(sp)
8008f190:	dc004f15 	stw	r16,316(sp)
8008f194:	900d883a 	mov	r6,r18
8008f198:	003c6006 	br	8008e31c <__ssvfiscanf_r+0xfc>
8008f19c:	d9c05017 	ldw	r7,320(sp)
8008f1a0:	dac05217 	ldw	r11,328(sp)
8008f1a4:	000d883a 	mov	r6,zero
8008f1a8:	d9404104 	addi	r5,sp,260
8008f1ac:	8809883a 	mov	r4,r17
8008f1b0:	90000005 	stb	zero,0(r18)
8008f1b4:	583ee83a 	callr	r11
8008f1b8:	b0c0080c 	andi	r3,r22,32
8008f1bc:	1800271e 	bne	r3,zero,8008f25c <__ssvfiscanf_r+0x103c>
8008f1c0:	b0c0010c 	andi	r3,r22,4
8008f1c4:	18003326 	beq	r3,zero,8008f294 <__ssvfiscanf_r+0x1074>
8008f1c8:	dac04f17 	ldw	r11,316(sp)
8008f1cc:	58c00017 	ldw	r3,0(r11)
8008f1d0:	5ac00104 	addi	r11,r11,4
8008f1d4:	dac04f15 	stw	r11,316(sp)
8008f1d8:	1880000d 	sth	r2,0(r3)
8008f1dc:	dac05117 	ldw	r11,324(sp)
8008f1e0:	5ac00044 	addi	r11,r11,1
8008f1e4:	dac05115 	stw	r11,324(sp)
8008f1e8:	003f8c06 	br	8008f01c <__ssvfiscanf_r+0xdfc>
8008f1ec:	b0000015 	stw	zero,0(r22)
8008f1f0:	0009883a 	mov	r4,zero
8008f1f4:	d8c05a15 	stw	r3,360(sp)
8008f1f8:	00899140 	call	80089914 <iswspace>
8008f1fc:	d8c05a17 	ldw	r3,360(sp)
8008f200:	10003826 	beq	r2,zero,8008f2e4 <__ssvfiscanf_r+0x10c4>
8008f204:	18000b26 	beq	r3,zero,8008f234 <__ssvfiscanf_r+0x1014>
8008f208:	1cbfffc4 	addi	r18,r3,-1
8008f20c:	d9804104 	addi	r6,sp,260
8008f210:	34af883a 	add	r23,r6,r18
8008f214:	00000106 	br	8008f21c <__ssvfiscanf_r+0xffc>
8008f218:	94bfffc4 	addi	r18,r18,-1
8008f21c:	b9400003 	ldbu	r5,0(r23)
8008f220:	980d883a 	mov	r6,r19
8008f224:	8809883a 	mov	r4,r17
8008f228:	008dfb40 	call	8008dfb4 <_sungetc_r>
8008f22c:	bdffffc4 	addi	r23,r23,-1
8008f230:	903ff91e 	bne	r18,zero,8008f218 <__ssvfiscanf_r+0xff8>
8008f234:	803def1e 	bne	r16,zero,8008e9f4 <__ssvfiscanf_r+0x7d4>
8008f238:	b0000015 	stw	zero,0(r22)
8008f23c:	003dea06 	br	8008e9e8 <__ssvfiscanf_r+0x7c8>
8008f240:	013f1fc4 	movi	r4,-897
8008f244:	b12c703a 	and	r22,r22,r4
8008f248:	30000226 	beq	r6,zero,8008f254 <__ssvfiscanf_r+0x1034>
8008f24c:	31bfffc4 	addi	r6,r6,-1
8008f250:	bdc00044 	addi	r23,r23,1
8008f254:	ad400044 	addi	r21,r21,1
8008f258:	003f3806 	br	8008ef3c <__ssvfiscanf_r+0xd1c>
8008f25c:	dac04f17 	ldw	r11,316(sp)
8008f260:	58c00017 	ldw	r3,0(r11)
8008f264:	5ac00104 	addi	r11,r11,4
8008f268:	dac04f15 	stw	r11,316(sp)
8008f26c:	18800015 	stw	r2,0(r3)
8008f270:	003fda06 	br	8008f1dc <__ssvfiscanf_r+0xfbc>
8008f274:	dd804d04 	addi	r22,sp,308
8008f278:	003e1906 	br	8008eae0 <__ssvfiscanf_r+0x8c0>
8008f27c:	917fffc7 	ldb	r5,-1(r18)
8008f280:	980d883a 	mov	r6,r19
8008f284:	8809883a 	mov	r4,r17
8008f288:	94bfffc4 	addi	r18,r18,-1
8008f28c:	008dfb40 	call	8008dfb4 <_sungetc_r>
8008f290:	003f5e06 	br	8008f00c <__ssvfiscanf_r+0xdec>
8008f294:	b0c0004c 	andi	r3,r22,1
8008f298:	183ff01e 	bne	r3,zero,8008f25c <__ssvfiscanf_r+0x103c>
8008f29c:	b580008c 	andi	r22,r22,2
8008f2a0:	b03fee26 	beq	r22,zero,8008f25c <__ssvfiscanf_r+0x103c>
8008f2a4:	dac05217 	ldw	r11,328(sp)
8008f2a8:	00a00274 	movhi	r2,32777
8008f2ac:	10b69d04 	addi	r2,r2,-9612
8008f2b0:	d9c05017 	ldw	r7,320(sp)
8008f2b4:	000d883a 	mov	r6,zero
8008f2b8:	d9404104 	addi	r5,sp,260
8008f2bc:	8809883a 	mov	r4,r17
8008f2c0:	58801226 	beq	r11,r2,8008f30c <__ssvfiscanf_r+0x10ec>
8008f2c4:	008d7940 	call	8008d794 <_strtoll_r>
8008f2c8:	dac04f17 	ldw	r11,316(sp)
8008f2cc:	59000017 	ldw	r4,0(r11)
8008f2d0:	5ac00104 	addi	r11,r11,4
8008f2d4:	dac04f15 	stw	r11,316(sp)
8008f2d8:	20800015 	stw	r2,0(r4)
8008f2dc:	20c00115 	stw	r3,4(r4)
8008f2e0:	003fbe06 	br	8008f1dc <__ssvfiscanf_r+0xfbc>
8008f2e4:	e0f9883a 	add	fp,fp,r3
8008f2e8:	bdffffc4 	addi	r23,r23,-1
8008f2ec:	8000031e 	bne	r16,zero,8008f2fc <__ssvfiscanf_r+0x10dc>
8008f2f0:	b5800104 	addi	r22,r22,4
8008f2f4:	0025883a 	mov	r18,zero
8008f2f8:	003e1f06 	br	8008eb78 <__ssvfiscanf_r+0x958>
8008f2fc:	0025883a 	mov	r18,zero
8008f300:	003e1d06 	br	8008eb78 <__ssvfiscanf_r+0x958>
8008f304:	b1000017 	ldw	r4,0(r22)
8008f308:	003fba06 	br	8008f1f4 <__ssvfiscanf_r+0xfd4>
8008f30c:	008dcdc0 	call	8008dcdc <_strtoull_r>
8008f310:	003fed06 	br	8008f2c8 <__ssvfiscanf_r+0x10a8>

8008f314 <___svfprintf_internal_r>:
8008f314:	deffb704 	addi	sp,sp,-292
8008f318:	dfc04815 	stw	ra,288(sp)
8008f31c:	ddc04615 	stw	r23,280(sp)
8008f320:	d9402c15 	stw	r5,176(sp)
8008f324:	d9003915 	stw	r4,228(sp)
8008f328:	302f883a 	mov	r23,r6
8008f32c:	d9c02d15 	stw	r7,180(sp)
8008f330:	df004715 	stw	fp,284(sp)
8008f334:	dd804515 	stw	r22,276(sp)
8008f338:	dd404415 	stw	r21,272(sp)
8008f33c:	dd004315 	stw	r20,268(sp)
8008f340:	dcc04215 	stw	r19,264(sp)
8008f344:	dc804115 	stw	r18,260(sp)
8008f348:	dc404015 	stw	r17,256(sp)
8008f34c:	dc003f15 	stw	r16,252(sp)
8008f350:	00899f00 	call	800899f0 <_localeconv_r>
8008f354:	10800017 	ldw	r2,0(r2)
8008f358:	1009883a 	mov	r4,r2
8008f35c:	d8803415 	stw	r2,208(sp)
8008f360:	00832a00 	call	800832a0 <strlen>
8008f364:	d8c02c17 	ldw	r3,176(sp)
8008f368:	d8803815 	stw	r2,224(sp)
8008f36c:	1880030b 	ldhu	r2,12(r3)
8008f370:	1080200c 	andi	r2,r2,128
8008f374:	10000226 	beq	r2,zero,8008f380 <___svfprintf_internal_r+0x6c>
8008f378:	18800417 	ldw	r2,16(r3)
8008f37c:	10067f26 	beq	r2,zero,80090d7c <___svfprintf_internal_r+0x1a68>
8008f380:	dcc03917 	ldw	r19,228(sp)
8008f384:	d8c00404 	addi	r3,sp,16
8008f388:	056002b4 	movhi	r21,32778
8008f38c:	d9001e04 	addi	r4,sp,120
8008f390:	ad71e484 	addi	r21,r21,-14446
8008f394:	d8c01e15 	stw	r3,120(sp)
8008f398:	d8002015 	stw	zero,128(sp)
8008f39c:	d8001f15 	stw	zero,124(sp)
8008f3a0:	d8003315 	stw	zero,204(sp)
8008f3a4:	d8003615 	stw	zero,216(sp)
8008f3a8:	d8003715 	stw	zero,220(sp)
8008f3ac:	1811883a 	mov	r8,r3
8008f3b0:	d8003a15 	stw	zero,232(sp)
8008f3b4:	d8003b15 	stw	zero,236(sp)
8008f3b8:	d8002f15 	stw	zero,188(sp)
8008f3bc:	d9002815 	stw	r4,160(sp)
8008f3c0:	b8800007 	ldb	r2,0(r23)
8008f3c4:	10026726 	beq	r2,zero,8008fd64 <___svfprintf_internal_r+0xa50>
8008f3c8:	00c00944 	movi	r3,37
8008f3cc:	b821883a 	mov	r16,r23
8008f3d0:	10c0021e 	bne	r2,r3,8008f3dc <___svfprintf_internal_r+0xc8>
8008f3d4:	00001406 	br	8008f428 <___svfprintf_internal_r+0x114>
8008f3d8:	10c00326 	beq	r2,r3,8008f3e8 <___svfprintf_internal_r+0xd4>
8008f3dc:	84000044 	addi	r16,r16,1
8008f3e0:	80800007 	ldb	r2,0(r16)
8008f3e4:	103ffc1e 	bne	r2,zero,8008f3d8 <___svfprintf_internal_r+0xc4>
8008f3e8:	85e3c83a 	sub	r17,r16,r23
8008f3ec:	88000e26 	beq	r17,zero,8008f428 <___svfprintf_internal_r+0x114>
8008f3f0:	d8c02017 	ldw	r3,128(sp)
8008f3f4:	d8801f17 	ldw	r2,124(sp)
8008f3f8:	45c00015 	stw	r23,0(r8)
8008f3fc:	1c47883a 	add	r3,r3,r17
8008f400:	10800044 	addi	r2,r2,1
8008f404:	d8c02015 	stw	r3,128(sp)
8008f408:	44400115 	stw	r17,4(r8)
8008f40c:	d8801f15 	stw	r2,124(sp)
8008f410:	00c001c4 	movi	r3,7
8008f414:	18809716 	blt	r3,r2,8008f674 <___svfprintf_internal_r+0x360>
8008f418:	42000204 	addi	r8,r8,8
8008f41c:	d9402f17 	ldw	r5,188(sp)
8008f420:	2c4b883a 	add	r5,r5,r17
8008f424:	d9402f15 	stw	r5,188(sp)
8008f428:	80800007 	ldb	r2,0(r16)
8008f42c:	10009826 	beq	r2,zero,8008f690 <___svfprintf_internal_r+0x37c>
8008f430:	84400047 	ldb	r17,1(r16)
8008f434:	00bfffc4 	movi	r2,-1
8008f438:	85c00044 	addi	r23,r16,1
8008f43c:	d8002785 	stb	zero,158(sp)
8008f440:	0007883a 	mov	r3,zero
8008f444:	000f883a 	mov	r7,zero
8008f448:	d8802915 	stw	r2,164(sp)
8008f44c:	d8003115 	stw	zero,196(sp)
8008f450:	0025883a 	mov	r18,zero
8008f454:	01401604 	movi	r5,88
8008f458:	01800244 	movi	r6,9
8008f45c:	02800a84 	movi	r10,42
8008f460:	02401b04 	movi	r9,108
8008f464:	bdc00044 	addi	r23,r23,1
8008f468:	88bff804 	addi	r2,r17,-32
8008f46c:	2882f036 	bltu	r5,r2,80090030 <___svfprintf_internal_r+0xd1c>
8008f470:	100490ba 	slli	r2,r2,2
8008f474:	01200274 	movhi	r4,32777
8008f478:	213d2204 	addi	r4,r4,-2936
8008f47c:	1105883a 	add	r2,r2,r4
8008f480:	10800017 	ldw	r2,0(r2)
8008f484:	1000683a 	jmp	r2
8008f488:	8008ff98 	cmpnei	zero,r16,9214
8008f48c:	80090030 	cmpltui	zero,r16,9216
8008f490:	80090030 	cmpltui	zero,r16,9216
8008f494:	8008ff8c 	andi	zero,r16,9214
8008f498:	80090030 	cmpltui	zero,r16,9216
8008f49c:	80090030 	cmpltui	zero,r16,9216
8008f4a0:	80090030 	cmpltui	zero,r16,9216
8008f4a4:	80090030 	cmpltui	zero,r16,9216
8008f4a8:	80090030 	cmpltui	zero,r16,9216
8008f4ac:	80090030 	cmpltui	zero,r16,9216
8008f4b0:	8008f6ec 	andhi	zero,r16,9179
8008f4b4:	8008fec8 	cmpgei	zero,r16,9211
8008f4b8:	80090030 	cmpltui	zero,r16,9216
8008f4bc:	8008f5fc 	xorhi	zero,r16,9175
8008f4c0:	8008f714 	ori	zero,r16,9180
8008f4c4:	80090030 	cmpltui	zero,r16,9216
8008f4c8:	8008f788 	cmpgei	zero,r16,9182
8008f4cc:	8008f754 	ori	zero,r16,9181
8008f4d0:	8008f754 	ori	zero,r16,9181
8008f4d4:	8008f754 	ori	zero,r16,9181
8008f4d8:	8008f754 	ori	zero,r16,9181
8008f4dc:	8008f754 	ori	zero,r16,9181
8008f4e0:	8008f754 	ori	zero,r16,9181
8008f4e4:	8008f754 	ori	zero,r16,9181
8008f4e8:	8008f754 	ori	zero,r16,9181
8008f4ec:	8008f754 	ori	zero,r16,9181
8008f4f0:	80090030 	cmpltui	zero,r16,9216
8008f4f4:	80090030 	cmpltui	zero,r16,9216
8008f4f8:	80090030 	cmpltui	zero,r16,9216
8008f4fc:	80090030 	cmpltui	zero,r16,9216
8008f500:	80090030 	cmpltui	zero,r16,9216
8008f504:	80090030 	cmpltui	zero,r16,9216
8008f508:	80090030 	cmpltui	zero,r16,9216
8008f50c:	80090030 	cmpltui	zero,r16,9216
8008f510:	80090030 	cmpltui	zero,r16,9216
8008f514:	80090030 	cmpltui	zero,r16,9216
8008f518:	8008f840 	call	88008f84 <__alt_data_end+0x7f0bf84>
8008f51c:	8008f794 	ori	zero,r16,9182
8008f520:	80090030 	cmpltui	zero,r16,9216
8008f524:	8008f794 	ori	zero,r16,9182
8008f528:	80090030 	cmpltui	zero,r16,9216
8008f52c:	80090030 	cmpltui	zero,r16,9216
8008f530:	80090030 	cmpltui	zero,r16,9216
8008f534:	80090030 	cmpltui	zero,r16,9216
8008f538:	8008f834 	orhi	zero,r16,9184
8008f53c:	80090030 	cmpltui	zero,r16,9216
8008f540:	80090030 	cmpltui	zero,r16,9216
8008f544:	8008f8fc 	xorhi	zero,r16,9187
8008f548:	80090030 	cmpltui	zero,r16,9216
8008f54c:	80090030 	cmpltui	zero,r16,9216
8008f550:	80090030 	cmpltui	zero,r16,9216
8008f554:	80090030 	cmpltui	zero,r16,9216
8008f558:	80090030 	cmpltui	zero,r16,9216
8008f55c:	8008fd6c 	andhi	zero,r16,9205
8008f560:	80090030 	cmpltui	zero,r16,9216
8008f564:	80090030 	cmpltui	zero,r16,9216
8008f568:	8008fdcc 	andi	zero,r16,9207
8008f56c:	80090030 	cmpltui	zero,r16,9216
8008f570:	80090030 	cmpltui	zero,r16,9216
8008f574:	80090030 	cmpltui	zero,r16,9216
8008f578:	80090030 	cmpltui	zero,r16,9216
8008f57c:	80090030 	cmpltui	zero,r16,9216
8008f580:	80090030 	cmpltui	zero,r16,9216
8008f584:	80090030 	cmpltui	zero,r16,9216
8008f588:	80090030 	cmpltui	zero,r16,9216
8008f58c:	80090030 	cmpltui	zero,r16,9216
8008f590:	80090030 	cmpltui	zero,r16,9216
8008f594:	8008fe7c 	xorhi	zero,r16,9209
8008f598:	8008ffb8 	rdprs	zero,r16,9214
8008f59c:	8008f794 	ori	zero,r16,9182
8008f5a0:	8008f794 	ori	zero,r16,9182
8008f5a4:	8008f794 	ori	zero,r16,9182
8008f5a8:	8009000c 	andi	zero,r16,9216
8008f5ac:	8008ffb8 	rdprs	zero,r16,9214
8008f5b0:	80090030 	cmpltui	zero,r16,9216
8008f5b4:	80090030 	cmpltui	zero,r16,9216
8008f5b8:	8008ffc8 	cmpgei	zero,r16,9215
8008f5bc:	80090030 	cmpltui	zero,r16,9216
8008f5c0:	8008ffd8 	cmpnei	zero,r16,9215
8008f5c4:	8008feb8 	rdprs	zero,r16,9210
8008f5c8:	8008f608 	cmpgei	zero,r16,9176
8008f5cc:	8008fed8 	cmpnei	zero,r16,9211
8008f5d0:	80090030 	cmpltui	zero,r16,9216
8008f5d4:	8008fee4 	muli	zero,r16,9211
8008f5d8:	80090030 	cmpltui	zero,r16,9216
8008f5dc:	8008ff40 	call	88008ff4 <__alt_data_end+0x7f0bff4>
8008f5e0:	80090030 	cmpltui	zero,r16,9216
8008f5e4:	80090030 	cmpltui	zero,r16,9216
8008f5e8:	8008ff50 	cmplti	zero,r16,9213
8008f5ec:	d9003117 	ldw	r4,196(sp)
8008f5f0:	d8802d15 	stw	r2,180(sp)
8008f5f4:	0109c83a 	sub	r4,zero,r4
8008f5f8:	d9003115 	stw	r4,196(sp)
8008f5fc:	94800114 	ori	r18,r18,4
8008f600:	bc400007 	ldb	r17,0(r23)
8008f604:	003f9706 	br	8008f464 <___svfprintf_internal_r+0x150>
8008f608:	00800c04 	movi	r2,48
8008f60c:	d9002d17 	ldw	r4,180(sp)
8008f610:	d9402917 	ldw	r5,164(sp)
8008f614:	d8802705 	stb	r2,156(sp)
8008f618:	00801e04 	movi	r2,120
8008f61c:	d8802745 	stb	r2,157(sp)
8008f620:	d8002785 	stb	zero,158(sp)
8008f624:	20c00104 	addi	r3,r4,4
8008f628:	25000017 	ldw	r20,0(r4)
8008f62c:	002d883a 	mov	r22,zero
8008f630:	90800094 	ori	r2,r18,2
8008f634:	28028616 	blt	r5,zero,80090050 <___svfprintf_internal_r+0xd3c>
8008f638:	00bfdfc4 	movi	r2,-129
8008f63c:	90a4703a 	and	r18,r18,r2
8008f640:	d8c02d15 	stw	r3,180(sp)
8008f644:	94800094 	ori	r18,r18,2
8008f648:	a002731e 	bne	r20,zero,80090018 <___svfprintf_internal_r+0xd04>
8008f64c:	00a002b4 	movhi	r2,32778
8008f650:	10b0c404 	addi	r2,r2,-15600
8008f654:	d8803a15 	stw	r2,232(sp)
8008f658:	04401e04 	movi	r17,120
8008f65c:	d8c02917 	ldw	r3,164(sp)
8008f660:	0039883a 	mov	fp,zero
8008f664:	1801d526 	beq	r3,zero,8008fdbc <___svfprintf_internal_r+0xaa8>
8008f668:	0029883a 	mov	r20,zero
8008f66c:	002d883a 	mov	r22,zero
8008f670:	0001f106 	br	8008fe38 <___svfprintf_internal_r+0xb24>
8008f674:	d9402c17 	ldw	r5,176(sp)
8008f678:	d9801e04 	addi	r6,sp,120
8008f67c:	9809883a 	mov	r4,r19
8008f680:	0093fe80 	call	80093fe8 <__ssprint_r>
8008f684:	1000081e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
8008f688:	da000404 	addi	r8,sp,16
8008f68c:	003f6306 	br	8008f41c <___svfprintf_internal_r+0x108>
8008f690:	d8802017 	ldw	r2,128(sp)
8008f694:	10000426 	beq	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
8008f698:	d9402c17 	ldw	r5,176(sp)
8008f69c:	d9003917 	ldw	r4,228(sp)
8008f6a0:	d9801e04 	addi	r6,sp,120
8008f6a4:	0093fe80 	call	80093fe8 <__ssprint_r>
8008f6a8:	d8802c17 	ldw	r2,176(sp)
8008f6ac:	10c0030b 	ldhu	r3,12(r2)
8008f6b0:	d8802f17 	ldw	r2,188(sp)
8008f6b4:	18c0100c 	andi	r3,r3,64
8008f6b8:	1805f51e 	bne	r3,zero,80090e90 <___svfprintf_internal_r+0x1b7c>
8008f6bc:	dfc04817 	ldw	ra,288(sp)
8008f6c0:	df004717 	ldw	fp,284(sp)
8008f6c4:	ddc04617 	ldw	r23,280(sp)
8008f6c8:	dd804517 	ldw	r22,276(sp)
8008f6cc:	dd404417 	ldw	r21,272(sp)
8008f6d0:	dd004317 	ldw	r20,268(sp)
8008f6d4:	dcc04217 	ldw	r19,264(sp)
8008f6d8:	dc804117 	ldw	r18,260(sp)
8008f6dc:	dc404017 	ldw	r17,256(sp)
8008f6e0:	dc003f17 	ldw	r16,252(sp)
8008f6e4:	dec04904 	addi	sp,sp,292
8008f6e8:	f800283a 	ret
8008f6ec:	d8802d17 	ldw	r2,180(sp)
8008f6f0:	d9002d17 	ldw	r4,180(sp)
8008f6f4:	10800017 	ldw	r2,0(r2)
8008f6f8:	d8803115 	stw	r2,196(sp)
8008f6fc:	20800104 	addi	r2,r4,4
8008f700:	d9003117 	ldw	r4,196(sp)
8008f704:	203fb916 	blt	r4,zero,8008f5ec <___svfprintf_internal_r+0x2d8>
8008f708:	d8802d15 	stw	r2,180(sp)
8008f70c:	bc400007 	ldb	r17,0(r23)
8008f710:	003f5406 	br	8008f464 <___svfprintf_internal_r+0x150>
8008f714:	bc400007 	ldb	r17,0(r23)
8008f718:	bac00044 	addi	r11,r23,1
8008f71c:	8a873926 	beq	r17,r10,80091404 <___svfprintf_internal_r+0x20f0>
8008f720:	88bff404 	addi	r2,r17,-48
8008f724:	0009883a 	mov	r4,zero
8008f728:	30868836 	bltu	r6,r2,8009114c <___svfprintf_internal_r+0x1e38>
8008f72c:	5c400007 	ldb	r17,0(r11)
8008f730:	210002a4 	muli	r4,r4,10
8008f734:	5dc00044 	addi	r23,r11,1
8008f738:	b817883a 	mov	r11,r23
8008f73c:	2089883a 	add	r4,r4,r2
8008f740:	88bff404 	addi	r2,r17,-48
8008f744:	30bff92e 	bgeu	r6,r2,8008f72c <___svfprintf_internal_r+0x418>
8008f748:	2005d716 	blt	r4,zero,80090ea8 <___svfprintf_internal_r+0x1b94>
8008f74c:	d9002915 	stw	r4,164(sp)
8008f750:	003f4506 	br	8008f468 <___svfprintf_internal_r+0x154>
8008f754:	b809883a 	mov	r4,r23
8008f758:	d8003115 	stw	zero,196(sp)
8008f75c:	88bff404 	addi	r2,r17,-48
8008f760:	0017883a 	mov	r11,zero
8008f764:	24400007 	ldb	r17,0(r4)
8008f768:	5ac002a4 	muli	r11,r11,10
8008f76c:	bdc00044 	addi	r23,r23,1
8008f770:	b809883a 	mov	r4,r23
8008f774:	12d7883a 	add	r11,r2,r11
8008f778:	88bff404 	addi	r2,r17,-48
8008f77c:	30bff92e 	bgeu	r6,r2,8008f764 <___svfprintf_internal_r+0x450>
8008f780:	dac03115 	stw	r11,196(sp)
8008f784:	003f3806 	br	8008f468 <___svfprintf_internal_r+0x154>
8008f788:	94802014 	ori	r18,r18,128
8008f78c:	bc400007 	ldb	r17,0(r23)
8008f790:	003f3406 	br	8008f464 <___svfprintf_internal_r+0x150>
8008f794:	18c03fcc 	andi	r3,r3,255
8008f798:	1807471e 	bne	r3,zero,800914b8 <___svfprintf_internal_r+0x21a4>
8008f79c:	9080020c 	andi	r2,r18,8
8008f7a0:	10047d26 	beq	r2,zero,80090998 <___svfprintf_internal_r+0x1684>
8008f7a4:	d8c02d17 	ldw	r3,180(sp)
8008f7a8:	d9002d17 	ldw	r4,180(sp)
8008f7ac:	d9402d17 	ldw	r5,180(sp)
8008f7b0:	18c00017 	ldw	r3,0(r3)
8008f7b4:	21000117 	ldw	r4,4(r4)
8008f7b8:	29400204 	addi	r5,r5,8
8008f7bc:	d8c03615 	stw	r3,216(sp)
8008f7c0:	d9003715 	stw	r4,220(sp)
8008f7c4:	d9402d15 	stw	r5,180(sp)
8008f7c8:	d9003617 	ldw	r4,216(sp)
8008f7cc:	d9403717 	ldw	r5,220(sp)
8008f7d0:	da003e15 	stw	r8,248(sp)
8008f7d4:	04000044 	movi	r16,1
8008f7d8:	008bae00 	call	8008bae0 <__fpclassifyd>
8008f7dc:	da003e17 	ldw	r8,248(sp)
8008f7e0:	14044b1e 	bne	r2,r16,80090910 <___svfprintf_internal_r+0x15fc>
8008f7e4:	d9003617 	ldw	r4,216(sp)
8008f7e8:	d9403717 	ldw	r5,220(sp)
8008f7ec:	000d883a 	mov	r6,zero
8008f7f0:	000f883a 	mov	r7,zero
8008f7f4:	00975f40 	call	800975f4 <__ledf2>
8008f7f8:	da003e17 	ldw	r8,248(sp)
8008f7fc:	1005f316 	blt	r2,zero,80090fcc <___svfprintf_internal_r+0x1cb8>
8008f800:	df002783 	ldbu	fp,158(sp)
8008f804:	008011c4 	movi	r2,71
8008f808:	1445590e 	bge	r2,r17,80090d70 <___svfprintf_internal_r+0x1a5c>
8008f80c:	042002b4 	movhi	r16,32778
8008f810:	8430bc04 	addi	r16,r16,-15632
8008f814:	00c000c4 	movi	r3,3
8008f818:	00bfdfc4 	movi	r2,-129
8008f81c:	d8c02a15 	stw	r3,168(sp)
8008f820:	90a4703a 	and	r18,r18,r2
8008f824:	d8c02e15 	stw	r3,184(sp)
8008f828:	d8002915 	stw	zero,164(sp)
8008f82c:	d8003215 	stw	zero,200(sp)
8008f830:	00006606 	br	8008f9cc <___svfprintf_internal_r+0x6b8>
8008f834:	94800214 	ori	r18,r18,8
8008f838:	bc400007 	ldb	r17,0(r23)
8008f83c:	003f0906 	br	8008f464 <___svfprintf_internal_r+0x150>
8008f840:	18c03fcc 	andi	r3,r3,255
8008f844:	1807181e 	bne	r3,zero,800914a8 <___svfprintf_internal_r+0x2194>
8008f848:	94800414 	ori	r18,r18,16
8008f84c:	9080080c 	andi	r2,r18,32
8008f850:	10039626 	beq	r2,zero,800906ac <___svfprintf_internal_r+0x1398>
8008f854:	d9402d17 	ldw	r5,180(sp)
8008f858:	28800117 	ldw	r2,4(r5)
8008f85c:	2d000017 	ldw	r20,0(r5)
8008f860:	29400204 	addi	r5,r5,8
8008f864:	d9402d15 	stw	r5,180(sp)
8008f868:	102d883a 	mov	r22,r2
8008f86c:	10039816 	blt	r2,zero,800906d0 <___svfprintf_internal_r+0x13bc>
8008f870:	d9402917 	ldw	r5,164(sp)
8008f874:	df002783 	ldbu	fp,158(sp)
8008f878:	2803ab16 	blt	r5,zero,80090728 <___svfprintf_internal_r+0x1414>
8008f87c:	00ffdfc4 	movi	r3,-129
8008f880:	a584b03a 	or	r2,r20,r22
8008f884:	90e4703a 	and	r18,r18,r3
8008f888:	10014a26 	beq	r2,zero,8008fdb4 <___svfprintf_internal_r+0xaa0>
8008f88c:	b0034b26 	beq	r22,zero,800905bc <___svfprintf_internal_r+0x12a8>
8008f890:	dc402a15 	stw	r17,168(sp)
8008f894:	dc001e04 	addi	r16,sp,120
8008f898:	b023883a 	mov	r17,r22
8008f89c:	402d883a 	mov	r22,r8
8008f8a0:	a009883a 	mov	r4,r20
8008f8a4:	880b883a 	mov	r5,r17
8008f8a8:	01800284 	movi	r6,10
8008f8ac:	000f883a 	mov	r7,zero
8008f8b0:	0095bc80 	call	80095bc8 <__umoddi3>
8008f8b4:	10800c04 	addi	r2,r2,48
8008f8b8:	843fffc4 	addi	r16,r16,-1
8008f8bc:	a009883a 	mov	r4,r20
8008f8c0:	880b883a 	mov	r5,r17
8008f8c4:	80800005 	stb	r2,0(r16)
8008f8c8:	01800284 	movi	r6,10
8008f8cc:	000f883a 	mov	r7,zero
8008f8d0:	00956500 	call	80095650 <__udivdi3>
8008f8d4:	1029883a 	mov	r20,r2
8008f8d8:	10c4b03a 	or	r2,r2,r3
8008f8dc:	1823883a 	mov	r17,r3
8008f8e0:	103fef1e 	bne	r2,zero,8008f8a0 <___svfprintf_internal_r+0x58c>
8008f8e4:	d8c02817 	ldw	r3,160(sp)
8008f8e8:	dc402a17 	ldw	r17,168(sp)
8008f8ec:	b011883a 	mov	r8,r22
8008f8f0:	1c07c83a 	sub	r3,r3,r16
8008f8f4:	d8c02e15 	stw	r3,184(sp)
8008f8f8:	00002e06 	br	8008f9b4 <___svfprintf_internal_r+0x6a0>
8008f8fc:	18c03fcc 	andi	r3,r3,255
8008f900:	1806e71e 	bne	r3,zero,800914a0 <___svfprintf_internal_r+0x218c>
8008f904:	94800414 	ori	r18,r18,16
8008f908:	9080080c 	andi	r2,r18,32
8008f90c:	1002d426 	beq	r2,zero,80090460 <___svfprintf_internal_r+0x114c>
8008f910:	d9402d17 	ldw	r5,180(sp)
8008f914:	d8c02917 	ldw	r3,164(sp)
8008f918:	d8002785 	stb	zero,158(sp)
8008f91c:	28800204 	addi	r2,r5,8
8008f920:	2d000017 	ldw	r20,0(r5)
8008f924:	2d800117 	ldw	r22,4(r5)
8008f928:	18041516 	blt	r3,zero,80090980 <___svfprintf_internal_r+0x166c>
8008f92c:	013fdfc4 	movi	r4,-129
8008f930:	a586b03a 	or	r3,r20,r22
8008f934:	d8802d15 	stw	r2,180(sp)
8008f938:	9124703a 	and	r18,r18,r4
8008f93c:	1802d51e 	bne	r3,zero,80090494 <___svfprintf_internal_r+0x1180>
8008f940:	d9402917 	ldw	r5,164(sp)
8008f944:	0039883a 	mov	fp,zero
8008f948:	2806be26 	beq	r5,zero,80091444 <___svfprintf_internal_r+0x2130>
8008f94c:	0029883a 	mov	r20,zero
8008f950:	002d883a 	mov	r22,zero
8008f954:	dc001e04 	addi	r16,sp,120
8008f958:	a006d0fa 	srli	r3,r20,3
8008f95c:	b008977a 	slli	r4,r22,29
8008f960:	b02cd0fa 	srli	r22,r22,3
8008f964:	a50001cc 	andi	r20,r20,7
8008f968:	a0800c04 	addi	r2,r20,48
8008f96c:	843fffc4 	addi	r16,r16,-1
8008f970:	20e8b03a 	or	r20,r4,r3
8008f974:	80800005 	stb	r2,0(r16)
8008f978:	a586b03a 	or	r3,r20,r22
8008f97c:	183ff61e 	bne	r3,zero,8008f958 <___svfprintf_internal_r+0x644>
8008f980:	90c0004c 	andi	r3,r18,1
8008f984:	18013926 	beq	r3,zero,8008fe6c <___svfprintf_internal_r+0xb58>
8008f988:	10803fcc 	andi	r2,r2,255
8008f98c:	1080201c 	xori	r2,r2,128
8008f990:	10bfe004 	addi	r2,r2,-128
8008f994:	00c00c04 	movi	r3,48
8008f998:	10c13426 	beq	r2,r3,8008fe6c <___svfprintf_internal_r+0xb58>
8008f99c:	80ffffc5 	stb	r3,-1(r16)
8008f9a0:	d8c02817 	ldw	r3,160(sp)
8008f9a4:	80bfffc4 	addi	r2,r16,-1
8008f9a8:	1021883a 	mov	r16,r2
8008f9ac:	1887c83a 	sub	r3,r3,r2
8008f9b0:	d8c02e15 	stw	r3,184(sp)
8008f9b4:	d8802e17 	ldw	r2,184(sp)
8008f9b8:	d9002917 	ldw	r4,164(sp)
8008f9bc:	1100010e 	bge	r2,r4,8008f9c4 <___svfprintf_internal_r+0x6b0>
8008f9c0:	2005883a 	mov	r2,r4
8008f9c4:	d8802a15 	stw	r2,168(sp)
8008f9c8:	d8003215 	stw	zero,200(sp)
8008f9cc:	e7003fcc 	andi	fp,fp,255
8008f9d0:	e700201c 	xori	fp,fp,128
8008f9d4:	e73fe004 	addi	fp,fp,-128
8008f9d8:	e0000326 	beq	fp,zero,8008f9e8 <___svfprintf_internal_r+0x6d4>
8008f9dc:	d8c02a17 	ldw	r3,168(sp)
8008f9e0:	18c00044 	addi	r3,r3,1
8008f9e4:	d8c02a15 	stw	r3,168(sp)
8008f9e8:	90c0008c 	andi	r3,r18,2
8008f9ec:	d8c02b15 	stw	r3,172(sp)
8008f9f0:	18000326 	beq	r3,zero,8008fa00 <___svfprintf_internal_r+0x6ec>
8008f9f4:	d8c02a17 	ldw	r3,168(sp)
8008f9f8:	18c00084 	addi	r3,r3,2
8008f9fc:	d8c02a15 	stw	r3,168(sp)
8008fa00:	90c0210c 	andi	r3,r18,132
8008fa04:	d8c03015 	stw	r3,192(sp)
8008fa08:	1801a11e 	bne	r3,zero,80090090 <___svfprintf_internal_r+0xd7c>
8008fa0c:	d9003117 	ldw	r4,196(sp)
8008fa10:	d8c02a17 	ldw	r3,168(sp)
8008fa14:	20e9c83a 	sub	r20,r4,r3
8008fa18:	05019d0e 	bge	zero,r20,80090090 <___svfprintf_internal_r+0xd7c>
8008fa1c:	02400404 	movi	r9,16
8008fa20:	d8c02017 	ldw	r3,128(sp)
8008fa24:	d8801f17 	ldw	r2,124(sp)
8008fa28:	4d051b0e 	bge	r9,r20,80090e98 <___svfprintf_internal_r+0x1b84>
8008fa2c:	016002b4 	movhi	r5,32778
8008fa30:	2971e884 	addi	r5,r5,-14430
8008fa34:	dc403c15 	stw	r17,240(sp)
8008fa38:	d9403515 	stw	r5,212(sp)
8008fa3c:	a023883a 	mov	r17,r20
8008fa40:	482d883a 	mov	r22,r9
8008fa44:	9029883a 	mov	r20,r18
8008fa48:	070001c4 	movi	fp,7
8008fa4c:	8025883a 	mov	r18,r16
8008fa50:	dc002c17 	ldw	r16,176(sp)
8008fa54:	00000306 	br	8008fa64 <___svfprintf_internal_r+0x750>
8008fa58:	8c7ffc04 	addi	r17,r17,-16
8008fa5c:	42000204 	addi	r8,r8,8
8008fa60:	b440130e 	bge	r22,r17,8008fab0 <___svfprintf_internal_r+0x79c>
8008fa64:	012002b4 	movhi	r4,32778
8008fa68:	18c00404 	addi	r3,r3,16
8008fa6c:	10800044 	addi	r2,r2,1
8008fa70:	2131e884 	addi	r4,r4,-14430
8008fa74:	41000015 	stw	r4,0(r8)
8008fa78:	45800115 	stw	r22,4(r8)
8008fa7c:	d8c02015 	stw	r3,128(sp)
8008fa80:	d8801f15 	stw	r2,124(sp)
8008fa84:	e0bff40e 	bge	fp,r2,8008fa58 <___svfprintf_internal_r+0x744>
8008fa88:	d9801e04 	addi	r6,sp,120
8008fa8c:	800b883a 	mov	r5,r16
8008fa90:	9809883a 	mov	r4,r19
8008fa94:	0093fe80 	call	80093fe8 <__ssprint_r>
8008fa98:	103f031e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
8008fa9c:	8c7ffc04 	addi	r17,r17,-16
8008faa0:	d8c02017 	ldw	r3,128(sp)
8008faa4:	d8801f17 	ldw	r2,124(sp)
8008faa8:	da000404 	addi	r8,sp,16
8008faac:	b47fed16 	blt	r22,r17,8008fa64 <___svfprintf_internal_r+0x750>
8008fab0:	9021883a 	mov	r16,r18
8008fab4:	a025883a 	mov	r18,r20
8008fab8:	8829883a 	mov	r20,r17
8008fabc:	dc403c17 	ldw	r17,240(sp)
8008fac0:	d9403517 	ldw	r5,212(sp)
8008fac4:	a0c7883a 	add	r3,r20,r3
8008fac8:	10800044 	addi	r2,r2,1
8008facc:	41400015 	stw	r5,0(r8)
8008fad0:	45000115 	stw	r20,4(r8)
8008fad4:	d8c02015 	stw	r3,128(sp)
8008fad8:	d8801f15 	stw	r2,124(sp)
8008fadc:	010001c4 	movi	r4,7
8008fae0:	20829f16 	blt	r4,r2,80090560 <___svfprintf_internal_r+0x124c>
8008fae4:	df002787 	ldb	fp,158(sp)
8008fae8:	42000204 	addi	r8,r8,8
8008faec:	e0000c26 	beq	fp,zero,8008fb20 <___svfprintf_internal_r+0x80c>
8008faf0:	d8801f17 	ldw	r2,124(sp)
8008faf4:	d9002784 	addi	r4,sp,158
8008faf8:	18c00044 	addi	r3,r3,1
8008fafc:	10800044 	addi	r2,r2,1
8008fb00:	41000015 	stw	r4,0(r8)
8008fb04:	01000044 	movi	r4,1
8008fb08:	41000115 	stw	r4,4(r8)
8008fb0c:	d8c02015 	stw	r3,128(sp)
8008fb10:	d8801f15 	stw	r2,124(sp)
8008fb14:	010001c4 	movi	r4,7
8008fb18:	20823816 	blt	r4,r2,800903fc <___svfprintf_internal_r+0x10e8>
8008fb1c:	42000204 	addi	r8,r8,8
8008fb20:	d8802b17 	ldw	r2,172(sp)
8008fb24:	10000c26 	beq	r2,zero,8008fb58 <___svfprintf_internal_r+0x844>
8008fb28:	d8801f17 	ldw	r2,124(sp)
8008fb2c:	d9002704 	addi	r4,sp,156
8008fb30:	18c00084 	addi	r3,r3,2
8008fb34:	10800044 	addi	r2,r2,1
8008fb38:	41000015 	stw	r4,0(r8)
8008fb3c:	01000084 	movi	r4,2
8008fb40:	41000115 	stw	r4,4(r8)
8008fb44:	d8c02015 	stw	r3,128(sp)
8008fb48:	d8801f15 	stw	r2,124(sp)
8008fb4c:	010001c4 	movi	r4,7
8008fb50:	20823216 	blt	r4,r2,8009041c <___svfprintf_internal_r+0x1108>
8008fb54:	42000204 	addi	r8,r8,8
8008fb58:	d9003017 	ldw	r4,192(sp)
8008fb5c:	00802004 	movi	r2,128
8008fb60:	20819726 	beq	r4,r2,800901c0 <___svfprintf_internal_r+0xeac>
8008fb64:	d9402917 	ldw	r5,164(sp)
8008fb68:	d8802e17 	ldw	r2,184(sp)
8008fb6c:	28adc83a 	sub	r22,r5,r2
8008fb70:	05802f0e 	bge	zero,r22,8008fc30 <___svfprintf_internal_r+0x91c>
8008fb74:	07000404 	movi	fp,16
8008fb78:	d8801f17 	ldw	r2,124(sp)
8008fb7c:	e583c00e 	bge	fp,r22,80090a80 <___svfprintf_internal_r+0x176c>
8008fb80:	016002b4 	movhi	r5,32778
8008fb84:	2971e484 	addi	r5,r5,-14446
8008fb88:	dc402915 	stw	r17,164(sp)
8008fb8c:	d9402b15 	stw	r5,172(sp)
8008fb90:	b023883a 	mov	r17,r22
8008fb94:	050001c4 	movi	r20,7
8008fb98:	902d883a 	mov	r22,r18
8008fb9c:	8025883a 	mov	r18,r16
8008fba0:	dc002c17 	ldw	r16,176(sp)
8008fba4:	00000306 	br	8008fbb4 <___svfprintf_internal_r+0x8a0>
8008fba8:	8c7ffc04 	addi	r17,r17,-16
8008fbac:	42000204 	addi	r8,r8,8
8008fbb0:	e440110e 	bge	fp,r17,8008fbf8 <___svfprintf_internal_r+0x8e4>
8008fbb4:	18c00404 	addi	r3,r3,16
8008fbb8:	10800044 	addi	r2,r2,1
8008fbbc:	45400015 	stw	r21,0(r8)
8008fbc0:	47000115 	stw	fp,4(r8)
8008fbc4:	d8c02015 	stw	r3,128(sp)
8008fbc8:	d8801f15 	stw	r2,124(sp)
8008fbcc:	a0bff60e 	bge	r20,r2,8008fba8 <___svfprintf_internal_r+0x894>
8008fbd0:	d9801e04 	addi	r6,sp,120
8008fbd4:	800b883a 	mov	r5,r16
8008fbd8:	9809883a 	mov	r4,r19
8008fbdc:	0093fe80 	call	80093fe8 <__ssprint_r>
8008fbe0:	103eb11e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
8008fbe4:	8c7ffc04 	addi	r17,r17,-16
8008fbe8:	d8c02017 	ldw	r3,128(sp)
8008fbec:	d8801f17 	ldw	r2,124(sp)
8008fbf0:	da000404 	addi	r8,sp,16
8008fbf4:	e47fef16 	blt	fp,r17,8008fbb4 <___svfprintf_internal_r+0x8a0>
8008fbf8:	9021883a 	mov	r16,r18
8008fbfc:	b025883a 	mov	r18,r22
8008fc00:	882d883a 	mov	r22,r17
8008fc04:	dc402917 	ldw	r17,164(sp)
8008fc08:	d9002b17 	ldw	r4,172(sp)
8008fc0c:	1d87883a 	add	r3,r3,r22
8008fc10:	10800044 	addi	r2,r2,1
8008fc14:	41000015 	stw	r4,0(r8)
8008fc18:	45800115 	stw	r22,4(r8)
8008fc1c:	d8c02015 	stw	r3,128(sp)
8008fc20:	d8801f15 	stw	r2,124(sp)
8008fc24:	010001c4 	movi	r4,7
8008fc28:	2081ec16 	blt	r4,r2,800903dc <___svfprintf_internal_r+0x10c8>
8008fc2c:	42000204 	addi	r8,r8,8
8008fc30:	9080400c 	andi	r2,r18,256
8008fc34:	1001181e 	bne	r2,zero,80090098 <___svfprintf_internal_r+0xd84>
8008fc38:	d9402e17 	ldw	r5,184(sp)
8008fc3c:	d8801f17 	ldw	r2,124(sp)
8008fc40:	44000015 	stw	r16,0(r8)
8008fc44:	1947883a 	add	r3,r3,r5
8008fc48:	10800044 	addi	r2,r2,1
8008fc4c:	41400115 	stw	r5,4(r8)
8008fc50:	d8c02015 	stw	r3,128(sp)
8008fc54:	d8801f15 	stw	r2,124(sp)
8008fc58:	010001c4 	movi	r4,7
8008fc5c:	2081d116 	blt	r4,r2,800903a4 <___svfprintf_internal_r+0x1090>
8008fc60:	42000204 	addi	r8,r8,8
8008fc64:	9480010c 	andi	r18,r18,4
8008fc68:	90003226 	beq	r18,zero,8008fd34 <___svfprintf_internal_r+0xa20>
8008fc6c:	d9403117 	ldw	r5,196(sp)
8008fc70:	d8802a17 	ldw	r2,168(sp)
8008fc74:	28a1c83a 	sub	r16,r5,r2
8008fc78:	04002e0e 	bge	zero,r16,8008fd34 <___svfprintf_internal_r+0xa20>
8008fc7c:	04400404 	movi	r17,16
8008fc80:	d8801f17 	ldw	r2,124(sp)
8008fc84:	8c04b90e 	bge	r17,r16,80090f6c <___svfprintf_internal_r+0x1c58>
8008fc88:	016002b4 	movhi	r5,32778
8008fc8c:	2971e884 	addi	r5,r5,-14430
8008fc90:	d9403515 	stw	r5,212(sp)
8008fc94:	048001c4 	movi	r18,7
8008fc98:	dd002c17 	ldw	r20,176(sp)
8008fc9c:	00000306 	br	8008fcac <___svfprintf_internal_r+0x998>
8008fca0:	843ffc04 	addi	r16,r16,-16
8008fca4:	42000204 	addi	r8,r8,8
8008fca8:	8c00130e 	bge	r17,r16,8008fcf8 <___svfprintf_internal_r+0x9e4>
8008fcac:	012002b4 	movhi	r4,32778
8008fcb0:	18c00404 	addi	r3,r3,16
8008fcb4:	10800044 	addi	r2,r2,1
8008fcb8:	2131e884 	addi	r4,r4,-14430
8008fcbc:	41000015 	stw	r4,0(r8)
8008fcc0:	44400115 	stw	r17,4(r8)
8008fcc4:	d8c02015 	stw	r3,128(sp)
8008fcc8:	d8801f15 	stw	r2,124(sp)
8008fccc:	90bff40e 	bge	r18,r2,8008fca0 <___svfprintf_internal_r+0x98c>
8008fcd0:	d9801e04 	addi	r6,sp,120
8008fcd4:	a00b883a 	mov	r5,r20
8008fcd8:	9809883a 	mov	r4,r19
8008fcdc:	0093fe80 	call	80093fe8 <__ssprint_r>
8008fce0:	103e711e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
8008fce4:	843ffc04 	addi	r16,r16,-16
8008fce8:	d8c02017 	ldw	r3,128(sp)
8008fcec:	d8801f17 	ldw	r2,124(sp)
8008fcf0:	da000404 	addi	r8,sp,16
8008fcf4:	8c3fed16 	blt	r17,r16,8008fcac <___svfprintf_internal_r+0x998>
8008fcf8:	d9403517 	ldw	r5,212(sp)
8008fcfc:	1c07883a 	add	r3,r3,r16
8008fd00:	10800044 	addi	r2,r2,1
8008fd04:	41400015 	stw	r5,0(r8)
8008fd08:	44000115 	stw	r16,4(r8)
8008fd0c:	d8c02015 	stw	r3,128(sp)
8008fd10:	d8801f15 	stw	r2,124(sp)
8008fd14:	010001c4 	movi	r4,7
8008fd18:	2080060e 	bge	r4,r2,8008fd34 <___svfprintf_internal_r+0xa20>
8008fd1c:	d9402c17 	ldw	r5,176(sp)
8008fd20:	d9801e04 	addi	r6,sp,120
8008fd24:	9809883a 	mov	r4,r19
8008fd28:	0093fe80 	call	80093fe8 <__ssprint_r>
8008fd2c:	103e5e1e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
8008fd30:	d8c02017 	ldw	r3,128(sp)
8008fd34:	d8803117 	ldw	r2,196(sp)
8008fd38:	d9002a17 	ldw	r4,168(sp)
8008fd3c:	1100010e 	bge	r2,r4,8008fd44 <___svfprintf_internal_r+0xa30>
8008fd40:	2005883a 	mov	r2,r4
8008fd44:	d9402f17 	ldw	r5,188(sp)
8008fd48:	288b883a 	add	r5,r5,r2
8008fd4c:	d9402f15 	stw	r5,188(sp)
8008fd50:	18019c1e 	bne	r3,zero,800903c4 <___svfprintf_internal_r+0x10b0>
8008fd54:	b8800007 	ldb	r2,0(r23)
8008fd58:	d8001f15 	stw	zero,124(sp)
8008fd5c:	da000404 	addi	r8,sp,16
8008fd60:	103d991e 	bne	r2,zero,8008f3c8 <___svfprintf_internal_r+0xb4>
8008fd64:	b821883a 	mov	r16,r23
8008fd68:	003daf06 	br	8008f428 <___svfprintf_internal_r+0x114>
8008fd6c:	18c03fcc 	andi	r3,r3,255
8008fd70:	1805c71e 	bne	r3,zero,80091490 <___svfprintf_internal_r+0x217c>
8008fd74:	94800414 	ori	r18,r18,16
8008fd78:	9080080c 	andi	r2,r18,32
8008fd7c:	10020126 	beq	r2,zero,80090584 <___svfprintf_internal_r+0x1270>
8008fd80:	d8802d17 	ldw	r2,180(sp)
8008fd84:	d9002917 	ldw	r4,164(sp)
8008fd88:	d8002785 	stb	zero,158(sp)
8008fd8c:	10c00204 	addi	r3,r2,8
8008fd90:	15000017 	ldw	r20,0(r2)
8008fd94:	15800117 	ldw	r22,4(r2)
8008fd98:	20038e16 	blt	r4,zero,80090bd4 <___svfprintf_internal_r+0x18c0>
8008fd9c:	013fdfc4 	movi	r4,-129
8008fda0:	a584b03a 	or	r2,r20,r22
8008fda4:	d8c02d15 	stw	r3,180(sp)
8008fda8:	9124703a 	and	r18,r18,r4
8008fdac:	0039883a 	mov	fp,zero
8008fdb0:	103eb61e 	bne	r2,zero,8008f88c <___svfprintf_internal_r+0x578>
8008fdb4:	d8802917 	ldw	r2,164(sp)
8008fdb8:	1002c81e 	bne	r2,zero,800908dc <___svfprintf_internal_r+0x15c8>
8008fdbc:	d8002915 	stw	zero,164(sp)
8008fdc0:	d8002e15 	stw	zero,184(sp)
8008fdc4:	dc001e04 	addi	r16,sp,120
8008fdc8:	003efa06 	br	8008f9b4 <___svfprintf_internal_r+0x6a0>
8008fdcc:	18c03fcc 	andi	r3,r3,255
8008fdd0:	1805ad1e 	bne	r3,zero,80091488 <___svfprintf_internal_r+0x2174>
8008fdd4:	016002b4 	movhi	r5,32778
8008fdd8:	2970bf04 	addi	r5,r5,-15620
8008fddc:	d9403a15 	stw	r5,232(sp)
8008fde0:	9080080c 	andi	r2,r18,32
8008fde4:	10006126 	beq	r2,zero,8008ff6c <___svfprintf_internal_r+0xc58>
8008fde8:	d8802d17 	ldw	r2,180(sp)
8008fdec:	15000017 	ldw	r20,0(r2)
8008fdf0:	15800117 	ldw	r22,4(r2)
8008fdf4:	10800204 	addi	r2,r2,8
8008fdf8:	d8802d15 	stw	r2,180(sp)
8008fdfc:	9080004c 	andi	r2,r18,1
8008fe00:	10018e26 	beq	r2,zero,8009043c <___svfprintf_internal_r+0x1128>
8008fe04:	a584b03a 	or	r2,r20,r22
8008fe08:	10030926 	beq	r2,zero,80090a30 <___svfprintf_internal_r+0x171c>
8008fe0c:	d8c02917 	ldw	r3,164(sp)
8008fe10:	00800c04 	movi	r2,48
8008fe14:	d8802705 	stb	r2,156(sp)
8008fe18:	dc402745 	stb	r17,157(sp)
8008fe1c:	d8002785 	stb	zero,158(sp)
8008fe20:	90800094 	ori	r2,r18,2
8008fe24:	18048716 	blt	r3,zero,80091044 <___svfprintf_internal_r+0x1d30>
8008fe28:	00bfdfc4 	movi	r2,-129
8008fe2c:	90a4703a 	and	r18,r18,r2
8008fe30:	94800094 	ori	r18,r18,2
8008fe34:	0039883a 	mov	fp,zero
8008fe38:	d9003a17 	ldw	r4,232(sp)
8008fe3c:	dc001e04 	addi	r16,sp,120
8008fe40:	a08003cc 	andi	r2,r20,15
8008fe44:	b006973a 	slli	r3,r22,28
8008fe48:	2085883a 	add	r2,r4,r2
8008fe4c:	a028d13a 	srli	r20,r20,4
8008fe50:	10800003 	ldbu	r2,0(r2)
8008fe54:	b02cd13a 	srli	r22,r22,4
8008fe58:	843fffc4 	addi	r16,r16,-1
8008fe5c:	1d28b03a 	or	r20,r3,r20
8008fe60:	80800005 	stb	r2,0(r16)
8008fe64:	a584b03a 	or	r2,r20,r22
8008fe68:	103ff51e 	bne	r2,zero,8008fe40 <___svfprintf_internal_r+0xb2c>
8008fe6c:	d8c02817 	ldw	r3,160(sp)
8008fe70:	1c07c83a 	sub	r3,r3,r16
8008fe74:	d8c02e15 	stw	r3,184(sp)
8008fe78:	003ece06 	br	8008f9b4 <___svfprintf_internal_r+0x6a0>
8008fe7c:	d8c02d17 	ldw	r3,180(sp)
8008fe80:	d9002d17 	ldw	r4,180(sp)
8008fe84:	d8002785 	stb	zero,158(sp)
8008fe88:	18800017 	ldw	r2,0(r3)
8008fe8c:	21000104 	addi	r4,r4,4
8008fe90:	00c00044 	movi	r3,1
8008fe94:	d8c02a15 	stw	r3,168(sp)
8008fe98:	d8801405 	stb	r2,80(sp)
8008fe9c:	d9002d15 	stw	r4,180(sp)
8008fea0:	d8c02e15 	stw	r3,184(sp)
8008fea4:	d8002915 	stw	zero,164(sp)
8008fea8:	d8003215 	stw	zero,200(sp)
8008feac:	dc001404 	addi	r16,sp,80
8008feb0:	0039883a 	mov	fp,zero
8008feb4:	003ecc06 	br	8008f9e8 <___svfprintf_internal_r+0x6d4>
8008feb8:	18c03fcc 	andi	r3,r3,255
8008febc:	183e9226 	beq	r3,zero,8008f908 <___svfprintf_internal_r+0x5f4>
8008fec0:	d9c02785 	stb	r7,158(sp)
8008fec4:	003e9006 	br	8008f908 <___svfprintf_internal_r+0x5f4>
8008fec8:	00c00044 	movi	r3,1
8008fecc:	01c00ac4 	movi	r7,43
8008fed0:	bc400007 	ldb	r17,0(r23)
8008fed4:	003d6306 	br	8008f464 <___svfprintf_internal_r+0x150>
8008fed8:	94800814 	ori	r18,r18,32
8008fedc:	bc400007 	ldb	r17,0(r23)
8008fee0:	003d6006 	br	8008f464 <___svfprintf_internal_r+0x150>
8008fee4:	d8c02d17 	ldw	r3,180(sp)
8008fee8:	d8002785 	stb	zero,158(sp)
8008feec:	1c000017 	ldw	r16,0(r3)
8008fef0:	1d000104 	addi	r20,r3,4
8008fef4:	80040f26 	beq	r16,zero,80090f34 <___svfprintf_internal_r+0x1c20>
8008fef8:	d9002917 	ldw	r4,164(sp)
8008fefc:	2003dc16 	blt	r4,zero,80090e70 <___svfprintf_internal_r+0x1b5c>
8008ff00:	200d883a 	mov	r6,r4
8008ff04:	000b883a 	mov	r5,zero
8008ff08:	8009883a 	mov	r4,r16
8008ff0c:	da003e15 	stw	r8,248(sp)
8008ff10:	0089e600 	call	80089e60 <memchr>
8008ff14:	da003e17 	ldw	r8,248(sp)
8008ff18:	10045826 	beq	r2,zero,8009107c <___svfprintf_internal_r+0x1d68>
8008ff1c:	1405c83a 	sub	r2,r2,r16
8008ff20:	d8802e15 	stw	r2,184(sp)
8008ff24:	1003d816 	blt	r2,zero,80090e88 <___svfprintf_internal_r+0x1b74>
8008ff28:	df002783 	ldbu	fp,158(sp)
8008ff2c:	d8802a15 	stw	r2,168(sp)
8008ff30:	dd002d15 	stw	r20,180(sp)
8008ff34:	d8002915 	stw	zero,164(sp)
8008ff38:	d8003215 	stw	zero,200(sp)
8008ff3c:	003ea306 	br	8008f9cc <___svfprintf_internal_r+0x6b8>
8008ff40:	18c03fcc 	andi	r3,r3,255
8008ff44:	183f8c26 	beq	r3,zero,8008fd78 <___svfprintf_internal_r+0xa64>
8008ff48:	d9c02785 	stb	r7,158(sp)
8008ff4c:	003f8a06 	br	8008fd78 <___svfprintf_internal_r+0xa64>
8008ff50:	18c03fcc 	andi	r3,r3,255
8008ff54:	1805631e 	bne	r3,zero,800914e4 <___svfprintf_internal_r+0x21d0>
8008ff58:	016002b4 	movhi	r5,32778
8008ff5c:	2970c404 	addi	r5,r5,-15600
8008ff60:	d9403a15 	stw	r5,232(sp)
8008ff64:	9080080c 	andi	r2,r18,32
8008ff68:	103f9f1e 	bne	r2,zero,8008fde8 <___svfprintf_internal_r+0xad4>
8008ff6c:	9080040c 	andi	r2,r18,16
8008ff70:	10029c26 	beq	r2,zero,800909e4 <___svfprintf_internal_r+0x16d0>
8008ff74:	d8c02d17 	ldw	r3,180(sp)
8008ff78:	002d883a 	mov	r22,zero
8008ff7c:	1d000017 	ldw	r20,0(r3)
8008ff80:	18c00104 	addi	r3,r3,4
8008ff84:	d8c02d15 	stw	r3,180(sp)
8008ff88:	003f9c06 	br	8008fdfc <___svfprintf_internal_r+0xae8>
8008ff8c:	94800054 	ori	r18,r18,1
8008ff90:	bc400007 	ldb	r17,0(r23)
8008ff94:	003d3306 	br	8008f464 <___svfprintf_internal_r+0x150>
8008ff98:	38803fcc 	andi	r2,r7,255
8008ff9c:	1080201c 	xori	r2,r2,128
8008ffa0:	10bfe004 	addi	r2,r2,-128
8008ffa4:	1002971e 	bne	r2,zero,80090a04 <___svfprintf_internal_r+0x16f0>
8008ffa8:	00c00044 	movi	r3,1
8008ffac:	01c00804 	movi	r7,32
8008ffb0:	bc400007 	ldb	r17,0(r23)
8008ffb4:	003d2b06 	br	8008f464 <___svfprintf_internal_r+0x150>
8008ffb8:	18c03fcc 	andi	r3,r3,255
8008ffbc:	183e2326 	beq	r3,zero,8008f84c <___svfprintf_internal_r+0x538>
8008ffc0:	d9c02785 	stb	r7,158(sp)
8008ffc4:	003e2106 	br	8008f84c <___svfprintf_internal_r+0x538>
8008ffc8:	bc400007 	ldb	r17,0(r23)
8008ffcc:	8a430426 	beq	r17,r9,80090be0 <___svfprintf_internal_r+0x18cc>
8008ffd0:	94800414 	ori	r18,r18,16
8008ffd4:	003d2306 	br	8008f464 <___svfprintf_internal_r+0x150>
8008ffd8:	18c03fcc 	andi	r3,r3,255
8008ffdc:	18053f1e 	bne	r3,zero,800914dc <___svfprintf_internal_r+0x21c8>
8008ffe0:	9080080c 	andi	r2,r18,32
8008ffe4:	10028926 	beq	r2,zero,80090a0c <___svfprintf_internal_r+0x16f8>
8008ffe8:	d9402d17 	ldw	r5,180(sp)
8008ffec:	d9002f17 	ldw	r4,188(sp)
8008fff0:	28800017 	ldw	r2,0(r5)
8008fff4:	2007d7fa 	srai	r3,r4,31
8008fff8:	29400104 	addi	r5,r5,4
8008fffc:	d9402d15 	stw	r5,180(sp)
80090000:	11000015 	stw	r4,0(r2)
80090004:	10c00115 	stw	r3,4(r2)
80090008:	003ced06 	br	8008f3c0 <___svfprintf_internal_r+0xac>
8009000c:	94801014 	ori	r18,r18,64
80090010:	bc400007 	ldb	r17,0(r23)
80090014:	003d1306 	br	8008f464 <___svfprintf_internal_r+0x150>
80090018:	012002b4 	movhi	r4,32778
8009001c:	2130c404 	addi	r4,r4,-15600
80090020:	0039883a 	mov	fp,zero
80090024:	d9003a15 	stw	r4,232(sp)
80090028:	04401e04 	movi	r17,120
8009002c:	003f8206 	br	8008fe38 <___svfprintf_internal_r+0xb24>
80090030:	18c03fcc 	andi	r3,r3,255
80090034:	1805221e 	bne	r3,zero,800914c0 <___svfprintf_internal_r+0x21ac>
80090038:	883d9526 	beq	r17,zero,8008f690 <___svfprintf_internal_r+0x37c>
8009003c:	00c00044 	movi	r3,1
80090040:	d8c02a15 	stw	r3,168(sp)
80090044:	dc401405 	stb	r17,80(sp)
80090048:	d8002785 	stb	zero,158(sp)
8009004c:	003f9406 	br	8008fea0 <___svfprintf_internal_r+0xb8c>
80090050:	012002b4 	movhi	r4,32778
80090054:	2130c404 	addi	r4,r4,-15600
80090058:	d9003a15 	stw	r4,232(sp)
8009005c:	d8c02d15 	stw	r3,180(sp)
80090060:	1025883a 	mov	r18,r2
80090064:	04401e04 	movi	r17,120
80090068:	a584b03a 	or	r2,r20,r22
8009006c:	1000fa1e 	bne	r2,zero,80090458 <___svfprintf_internal_r+0x1144>
80090070:	0039883a 	mov	fp,zero
80090074:	00800084 	movi	r2,2
80090078:	10803fcc 	andi	r2,r2,255
8009007c:	00c00044 	movi	r3,1
80090080:	10c21626 	beq	r2,r3,800908dc <___svfprintf_internal_r+0x15c8>
80090084:	00c00084 	movi	r3,2
80090088:	10fe301e 	bne	r2,r3,8008f94c <___svfprintf_internal_r+0x638>
8009008c:	003d7606 	br	8008f668 <___svfprintf_internal_r+0x354>
80090090:	d8c02017 	ldw	r3,128(sp)
80090094:	003e9506 	br	8008faec <___svfprintf_internal_r+0x7d8>
80090098:	00801944 	movi	r2,101
8009009c:	14407c0e 	bge	r2,r17,80090290 <___svfprintf_internal_r+0xf7c>
800900a0:	d9003617 	ldw	r4,216(sp)
800900a4:	d9403717 	ldw	r5,220(sp)
800900a8:	000d883a 	mov	r6,zero
800900ac:	000f883a 	mov	r7,zero
800900b0:	d8c03d15 	stw	r3,244(sp)
800900b4:	da003e15 	stw	r8,248(sp)
800900b8:	00974900 	call	80097490 <__eqdf2>
800900bc:	d8c03d17 	ldw	r3,244(sp)
800900c0:	da003e17 	ldw	r8,248(sp)
800900c4:	1000f51e 	bne	r2,zero,8009049c <___svfprintf_internal_r+0x1188>
800900c8:	d8801f17 	ldw	r2,124(sp)
800900cc:	012002b4 	movhi	r4,32778
800900d0:	2130cb04 	addi	r4,r4,-15572
800900d4:	18c00044 	addi	r3,r3,1
800900d8:	10800044 	addi	r2,r2,1
800900dc:	41000015 	stw	r4,0(r8)
800900e0:	01000044 	movi	r4,1
800900e4:	41000115 	stw	r4,4(r8)
800900e8:	d8c02015 	stw	r3,128(sp)
800900ec:	d8801f15 	stw	r2,124(sp)
800900f0:	010001c4 	movi	r4,7
800900f4:	20826616 	blt	r4,r2,80090a90 <___svfprintf_internal_r+0x177c>
800900f8:	42000204 	addi	r8,r8,8
800900fc:	d8802617 	ldw	r2,152(sp)
80090100:	d9403317 	ldw	r5,204(sp)
80090104:	11400216 	blt	r2,r5,80090110 <___svfprintf_internal_r+0xdfc>
80090108:	9080004c 	andi	r2,r18,1
8009010c:	103ed526 	beq	r2,zero,8008fc64 <___svfprintf_internal_r+0x950>
80090110:	d8803817 	ldw	r2,224(sp)
80090114:	d9003417 	ldw	r4,208(sp)
80090118:	d9403817 	ldw	r5,224(sp)
8009011c:	1887883a 	add	r3,r3,r2
80090120:	d8801f17 	ldw	r2,124(sp)
80090124:	41000015 	stw	r4,0(r8)
80090128:	41400115 	stw	r5,4(r8)
8009012c:	10800044 	addi	r2,r2,1
80090130:	d8c02015 	stw	r3,128(sp)
80090134:	d8801f15 	stw	r2,124(sp)
80090138:	010001c4 	movi	r4,7
8009013c:	2082af16 	blt	r4,r2,80090bfc <___svfprintf_internal_r+0x18e8>
80090140:	42000204 	addi	r8,r8,8
80090144:	d8803317 	ldw	r2,204(sp)
80090148:	143fffc4 	addi	r16,r2,-1
8009014c:	043ec50e 	bge	zero,r16,8008fc64 <___svfprintf_internal_r+0x950>
80090150:	04400404 	movi	r17,16
80090154:	d8801f17 	ldw	r2,124(sp)
80090158:	8c00860e 	bge	r17,r16,80090374 <___svfprintf_internal_r+0x1060>
8009015c:	016002b4 	movhi	r5,32778
80090160:	2971e484 	addi	r5,r5,-14446
80090164:	d9402b15 	stw	r5,172(sp)
80090168:	058001c4 	movi	r22,7
8009016c:	dd002c17 	ldw	r20,176(sp)
80090170:	00000306 	br	80090180 <___svfprintf_internal_r+0xe6c>
80090174:	42000204 	addi	r8,r8,8
80090178:	843ffc04 	addi	r16,r16,-16
8009017c:	8c00800e 	bge	r17,r16,80090380 <___svfprintf_internal_r+0x106c>
80090180:	18c00404 	addi	r3,r3,16
80090184:	10800044 	addi	r2,r2,1
80090188:	45400015 	stw	r21,0(r8)
8009018c:	44400115 	stw	r17,4(r8)
80090190:	d8c02015 	stw	r3,128(sp)
80090194:	d8801f15 	stw	r2,124(sp)
80090198:	b0bff60e 	bge	r22,r2,80090174 <___svfprintf_internal_r+0xe60>
8009019c:	d9801e04 	addi	r6,sp,120
800901a0:	a00b883a 	mov	r5,r20
800901a4:	9809883a 	mov	r4,r19
800901a8:	0093fe80 	call	80093fe8 <__ssprint_r>
800901ac:	103d3e1e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
800901b0:	d8c02017 	ldw	r3,128(sp)
800901b4:	d8801f17 	ldw	r2,124(sp)
800901b8:	da000404 	addi	r8,sp,16
800901bc:	003fee06 	br	80090178 <___svfprintf_internal_r+0xe64>
800901c0:	d9403117 	ldw	r5,196(sp)
800901c4:	d8802a17 	ldw	r2,168(sp)
800901c8:	28adc83a 	sub	r22,r5,r2
800901cc:	05be650e 	bge	zero,r22,8008fb64 <___svfprintf_internal_r+0x850>
800901d0:	07000404 	movi	fp,16
800901d4:	d8801f17 	ldw	r2,124(sp)
800901d8:	e583a20e 	bge	fp,r22,80091064 <___svfprintf_internal_r+0x1d50>
800901dc:	016002b4 	movhi	r5,32778
800901e0:	2971e484 	addi	r5,r5,-14446
800901e4:	dc403015 	stw	r17,192(sp)
800901e8:	d9402b15 	stw	r5,172(sp)
800901ec:	b023883a 	mov	r17,r22
800901f0:	050001c4 	movi	r20,7
800901f4:	902d883a 	mov	r22,r18
800901f8:	8025883a 	mov	r18,r16
800901fc:	dc002c17 	ldw	r16,176(sp)
80090200:	00000306 	br	80090210 <___svfprintf_internal_r+0xefc>
80090204:	8c7ffc04 	addi	r17,r17,-16
80090208:	42000204 	addi	r8,r8,8
8009020c:	e440110e 	bge	fp,r17,80090254 <___svfprintf_internal_r+0xf40>
80090210:	18c00404 	addi	r3,r3,16
80090214:	10800044 	addi	r2,r2,1
80090218:	45400015 	stw	r21,0(r8)
8009021c:	47000115 	stw	fp,4(r8)
80090220:	d8c02015 	stw	r3,128(sp)
80090224:	d8801f15 	stw	r2,124(sp)
80090228:	a0bff60e 	bge	r20,r2,80090204 <___svfprintf_internal_r+0xef0>
8009022c:	d9801e04 	addi	r6,sp,120
80090230:	800b883a 	mov	r5,r16
80090234:	9809883a 	mov	r4,r19
80090238:	0093fe80 	call	80093fe8 <__ssprint_r>
8009023c:	103d1a1e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090240:	8c7ffc04 	addi	r17,r17,-16
80090244:	d8c02017 	ldw	r3,128(sp)
80090248:	d8801f17 	ldw	r2,124(sp)
8009024c:	da000404 	addi	r8,sp,16
80090250:	e47fef16 	blt	fp,r17,80090210 <___svfprintf_internal_r+0xefc>
80090254:	9021883a 	mov	r16,r18
80090258:	b025883a 	mov	r18,r22
8009025c:	882d883a 	mov	r22,r17
80090260:	dc403017 	ldw	r17,192(sp)
80090264:	d9002b17 	ldw	r4,172(sp)
80090268:	1d87883a 	add	r3,r3,r22
8009026c:	10800044 	addi	r2,r2,1
80090270:	41000015 	stw	r4,0(r8)
80090274:	45800115 	stw	r22,4(r8)
80090278:	d8c02015 	stw	r3,128(sp)
8009027c:	d8801f15 	stw	r2,124(sp)
80090280:	010001c4 	movi	r4,7
80090284:	20819a16 	blt	r4,r2,800908f0 <___svfprintf_internal_r+0x15dc>
80090288:	42000204 	addi	r8,r8,8
8009028c:	003e3506 	br	8008fb64 <___svfprintf_internal_r+0x850>
80090290:	d9403317 	ldw	r5,204(sp)
80090294:	00800044 	movi	r2,1
80090298:	18c00044 	addi	r3,r3,1
8009029c:	1141710e 	bge	r2,r5,80090864 <___svfprintf_internal_r+0x1550>
800902a0:	dc401f17 	ldw	r17,124(sp)
800902a4:	00800044 	movi	r2,1
800902a8:	40800115 	stw	r2,4(r8)
800902ac:	8c400044 	addi	r17,r17,1
800902b0:	44000015 	stw	r16,0(r8)
800902b4:	d8c02015 	stw	r3,128(sp)
800902b8:	dc401f15 	stw	r17,124(sp)
800902bc:	008001c4 	movi	r2,7
800902c0:	14417416 	blt	r2,r17,80090894 <___svfprintf_internal_r+0x1580>
800902c4:	42000204 	addi	r8,r8,8
800902c8:	d8803817 	ldw	r2,224(sp)
800902cc:	d9003417 	ldw	r4,208(sp)
800902d0:	8c400044 	addi	r17,r17,1
800902d4:	10c7883a 	add	r3,r2,r3
800902d8:	40800115 	stw	r2,4(r8)
800902dc:	41000015 	stw	r4,0(r8)
800902e0:	d8c02015 	stw	r3,128(sp)
800902e4:	dc401f15 	stw	r17,124(sp)
800902e8:	008001c4 	movi	r2,7
800902ec:	14417216 	blt	r2,r17,800908b8 <___svfprintf_internal_r+0x15a4>
800902f0:	45800204 	addi	r22,r8,8
800902f4:	d9003617 	ldw	r4,216(sp)
800902f8:	d9403717 	ldw	r5,220(sp)
800902fc:	000d883a 	mov	r6,zero
80090300:	000f883a 	mov	r7,zero
80090304:	d8c03d15 	stw	r3,244(sp)
80090308:	00974900 	call	80097490 <__eqdf2>
8009030c:	d8c03d17 	ldw	r3,244(sp)
80090310:	1000b326 	beq	r2,zero,800905e0 <___svfprintf_internal_r+0x12cc>
80090314:	d9403317 	ldw	r5,204(sp)
80090318:	84000044 	addi	r16,r16,1
8009031c:	8c400044 	addi	r17,r17,1
80090320:	28bfffc4 	addi	r2,r5,-1
80090324:	1887883a 	add	r3,r3,r2
80090328:	b0800115 	stw	r2,4(r22)
8009032c:	b4000015 	stw	r16,0(r22)
80090330:	d8c02015 	stw	r3,128(sp)
80090334:	dc401f15 	stw	r17,124(sp)
80090338:	008001c4 	movi	r2,7
8009033c:	1440d216 	blt	r2,r17,80090688 <___svfprintf_internal_r+0x1374>
80090340:	b5800204 	addi	r22,r22,8
80090344:	d9003b17 	ldw	r4,236(sp)
80090348:	df0022c4 	addi	fp,sp,139
8009034c:	8c400044 	addi	r17,r17,1
80090350:	20c7883a 	add	r3,r4,r3
80090354:	b7000015 	stw	fp,0(r22)
80090358:	b1000115 	stw	r4,4(r22)
8009035c:	d8c02015 	stw	r3,128(sp)
80090360:	dc401f15 	stw	r17,124(sp)
80090364:	008001c4 	movi	r2,7
80090368:	14400e16 	blt	r2,r17,800903a4 <___svfprintf_internal_r+0x1090>
8009036c:	b2000204 	addi	r8,r22,8
80090370:	003e3c06 	br	8008fc64 <___svfprintf_internal_r+0x950>
80090374:	012002b4 	movhi	r4,32778
80090378:	2131e484 	addi	r4,r4,-14446
8009037c:	d9002b15 	stw	r4,172(sp)
80090380:	d9002b17 	ldw	r4,172(sp)
80090384:	1c07883a 	add	r3,r3,r16
80090388:	44000115 	stw	r16,4(r8)
8009038c:	41000015 	stw	r4,0(r8)
80090390:	10800044 	addi	r2,r2,1
80090394:	d8c02015 	stw	r3,128(sp)
80090398:	d8801f15 	stw	r2,124(sp)
8009039c:	010001c4 	movi	r4,7
800903a0:	20be2f0e 	bge	r4,r2,8008fc60 <___svfprintf_internal_r+0x94c>
800903a4:	d9402c17 	ldw	r5,176(sp)
800903a8:	d9801e04 	addi	r6,sp,120
800903ac:	9809883a 	mov	r4,r19
800903b0:	0093fe80 	call	80093fe8 <__ssprint_r>
800903b4:	103cbc1e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
800903b8:	d8c02017 	ldw	r3,128(sp)
800903bc:	da000404 	addi	r8,sp,16
800903c0:	003e2806 	br	8008fc64 <___svfprintf_internal_r+0x950>
800903c4:	d9402c17 	ldw	r5,176(sp)
800903c8:	d9801e04 	addi	r6,sp,120
800903cc:	9809883a 	mov	r4,r19
800903d0:	0093fe80 	call	80093fe8 <__ssprint_r>
800903d4:	103e5f26 	beq	r2,zero,8008fd54 <___svfprintf_internal_r+0xa40>
800903d8:	003cb306 	br	8008f6a8 <___svfprintf_internal_r+0x394>
800903dc:	d9402c17 	ldw	r5,176(sp)
800903e0:	d9801e04 	addi	r6,sp,120
800903e4:	9809883a 	mov	r4,r19
800903e8:	0093fe80 	call	80093fe8 <__ssprint_r>
800903ec:	103cae1e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
800903f0:	d8c02017 	ldw	r3,128(sp)
800903f4:	da000404 	addi	r8,sp,16
800903f8:	003e0d06 	br	8008fc30 <___svfprintf_internal_r+0x91c>
800903fc:	d9402c17 	ldw	r5,176(sp)
80090400:	d9801e04 	addi	r6,sp,120
80090404:	9809883a 	mov	r4,r19
80090408:	0093fe80 	call	80093fe8 <__ssprint_r>
8009040c:	103ca61e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090410:	d8c02017 	ldw	r3,128(sp)
80090414:	da000404 	addi	r8,sp,16
80090418:	003dc106 	br	8008fb20 <___svfprintf_internal_r+0x80c>
8009041c:	d9402c17 	ldw	r5,176(sp)
80090420:	d9801e04 	addi	r6,sp,120
80090424:	9809883a 	mov	r4,r19
80090428:	0093fe80 	call	80093fe8 <__ssprint_r>
8009042c:	103c9e1e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090430:	d8c02017 	ldw	r3,128(sp)
80090434:	da000404 	addi	r8,sp,16
80090438:	003dc706 	br	8008fb58 <___svfprintf_internal_r+0x844>
8009043c:	d8802917 	ldw	r2,164(sp)
80090440:	d8002785 	stb	zero,158(sp)
80090444:	103f0816 	blt	r2,zero,80090068 <___svfprintf_internal_r+0xd54>
80090448:	00ffdfc4 	movi	r3,-129
8009044c:	a584b03a 	or	r2,r20,r22
80090450:	90e4703a 	and	r18,r18,r3
80090454:	103c8126 	beq	r2,zero,8008f65c <___svfprintf_internal_r+0x348>
80090458:	0039883a 	mov	fp,zero
8009045c:	003e7606 	br	8008fe38 <___svfprintf_internal_r+0xb24>
80090460:	9080040c 	andi	r2,r18,16
80090464:	10013d26 	beq	r2,zero,8009095c <___svfprintf_internal_r+0x1648>
80090468:	d9002d17 	ldw	r4,180(sp)
8009046c:	d9402917 	ldw	r5,164(sp)
80090470:	d8002785 	stb	zero,158(sp)
80090474:	20800104 	addi	r2,r4,4
80090478:	25000017 	ldw	r20,0(r4)
8009047c:	002d883a 	mov	r22,zero
80090480:	28013f16 	blt	r5,zero,80090980 <___svfprintf_internal_r+0x166c>
80090484:	00ffdfc4 	movi	r3,-129
80090488:	d8802d15 	stw	r2,180(sp)
8009048c:	90e4703a 	and	r18,r18,r3
80090490:	a03d2b26 	beq	r20,zero,8008f940 <___svfprintf_internal_r+0x62c>
80090494:	0039883a 	mov	fp,zero
80090498:	003d2e06 	br	8008f954 <___svfprintf_internal_r+0x640>
8009049c:	dc402617 	ldw	r17,152(sp)
800904a0:	0441830e 	bge	zero,r17,80090ab0 <___svfprintf_internal_r+0x179c>
800904a4:	dc403217 	ldw	r17,200(sp)
800904a8:	d8803317 	ldw	r2,204(sp)
800904ac:	1440010e 	bge	r2,r17,800904b4 <___svfprintf_internal_r+0x11a0>
800904b0:	1023883a 	mov	r17,r2
800904b4:	04400a0e 	bge	zero,r17,800904e0 <___svfprintf_internal_r+0x11cc>
800904b8:	d8801f17 	ldw	r2,124(sp)
800904bc:	1c47883a 	add	r3,r3,r17
800904c0:	44000015 	stw	r16,0(r8)
800904c4:	10800044 	addi	r2,r2,1
800904c8:	44400115 	stw	r17,4(r8)
800904cc:	d8c02015 	stw	r3,128(sp)
800904d0:	d8801f15 	stw	r2,124(sp)
800904d4:	010001c4 	movi	r4,7
800904d8:	20827516 	blt	r4,r2,80090eb0 <___svfprintf_internal_r+0x1b9c>
800904dc:	42000204 	addi	r8,r8,8
800904e0:	88027b16 	blt	r17,zero,80090ed0 <___svfprintf_internal_r+0x1bbc>
800904e4:	d9003217 	ldw	r4,200(sp)
800904e8:	2463c83a 	sub	r17,r4,r17
800904ec:	0440990e 	bge	zero,r17,80090754 <___svfprintf_internal_r+0x1440>
800904f0:	05800404 	movi	r22,16
800904f4:	d8801f17 	ldw	r2,124(sp)
800904f8:	b441530e 	bge	r22,r17,80090a48 <___svfprintf_internal_r+0x1734>
800904fc:	012002b4 	movhi	r4,32778
80090500:	2131e484 	addi	r4,r4,-14446
80090504:	d9002b15 	stw	r4,172(sp)
80090508:	070001c4 	movi	fp,7
8009050c:	dd002c17 	ldw	r20,176(sp)
80090510:	00000306 	br	80090520 <___svfprintf_internal_r+0x120c>
80090514:	42000204 	addi	r8,r8,8
80090518:	8c7ffc04 	addi	r17,r17,-16
8009051c:	b4414d0e 	bge	r22,r17,80090a54 <___svfprintf_internal_r+0x1740>
80090520:	18c00404 	addi	r3,r3,16
80090524:	10800044 	addi	r2,r2,1
80090528:	45400015 	stw	r21,0(r8)
8009052c:	45800115 	stw	r22,4(r8)
80090530:	d8c02015 	stw	r3,128(sp)
80090534:	d8801f15 	stw	r2,124(sp)
80090538:	e0bff60e 	bge	fp,r2,80090514 <___svfprintf_internal_r+0x1200>
8009053c:	d9801e04 	addi	r6,sp,120
80090540:	a00b883a 	mov	r5,r20
80090544:	9809883a 	mov	r4,r19
80090548:	0093fe80 	call	80093fe8 <__ssprint_r>
8009054c:	103c561e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090550:	d8c02017 	ldw	r3,128(sp)
80090554:	d8801f17 	ldw	r2,124(sp)
80090558:	da000404 	addi	r8,sp,16
8009055c:	003fee06 	br	80090518 <___svfprintf_internal_r+0x1204>
80090560:	d9402c17 	ldw	r5,176(sp)
80090564:	d9801e04 	addi	r6,sp,120
80090568:	9809883a 	mov	r4,r19
8009056c:	0093fe80 	call	80093fe8 <__ssprint_r>
80090570:	103c4d1e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090574:	d8c02017 	ldw	r3,128(sp)
80090578:	df002787 	ldb	fp,158(sp)
8009057c:	da000404 	addi	r8,sp,16
80090580:	003d5a06 	br	8008faec <___svfprintf_internal_r+0x7d8>
80090584:	9080040c 	andi	r2,r18,16
80090588:	10005c26 	beq	r2,zero,800906fc <___svfprintf_internal_r+0x13e8>
8009058c:	d9402d17 	ldw	r5,180(sp)
80090590:	d8c02917 	ldw	r3,164(sp)
80090594:	d8002785 	stb	zero,158(sp)
80090598:	28800104 	addi	r2,r5,4
8009059c:	2d000017 	ldw	r20,0(r5)
800905a0:	002d883a 	mov	r22,zero
800905a4:	18005e16 	blt	r3,zero,80090720 <___svfprintf_internal_r+0x140c>
800905a8:	00ffdfc4 	movi	r3,-129
800905ac:	d8802d15 	stw	r2,180(sp)
800905b0:	90e4703a 	and	r18,r18,r3
800905b4:	0039883a 	mov	fp,zero
800905b8:	a03dfe26 	beq	r20,zero,8008fdb4 <___svfprintf_internal_r+0xaa0>
800905bc:	00800244 	movi	r2,9
800905c0:	153cb336 	bltu	r2,r20,8008f890 <___svfprintf_internal_r+0x57c>
800905c4:	a5000c04 	addi	r20,r20,48
800905c8:	dc001dc4 	addi	r16,sp,119
800905cc:	dd001dc5 	stb	r20,119(sp)
800905d0:	d8c02817 	ldw	r3,160(sp)
800905d4:	1c07c83a 	sub	r3,r3,r16
800905d8:	d8c02e15 	stw	r3,184(sp)
800905dc:	003cf506 	br	8008f9b4 <___svfprintf_internal_r+0x6a0>
800905e0:	d8803317 	ldw	r2,204(sp)
800905e4:	143fffc4 	addi	r16,r2,-1
800905e8:	043f560e 	bge	zero,r16,80090344 <___svfprintf_internal_r+0x1030>
800905ec:	07000404 	movi	fp,16
800905f0:	e403530e 	bge	fp,r16,80091340 <___svfprintf_internal_r+0x202c>
800905f4:	016002b4 	movhi	r5,32778
800905f8:	2971e484 	addi	r5,r5,-14446
800905fc:	d9402b15 	stw	r5,172(sp)
80090600:	01c001c4 	movi	r7,7
80090604:	dd002c17 	ldw	r20,176(sp)
80090608:	00000306 	br	80090618 <___svfprintf_internal_r+0x1304>
8009060c:	843ffc04 	addi	r16,r16,-16
80090610:	b5800204 	addi	r22,r22,8
80090614:	e400130e 	bge	fp,r16,80090664 <___svfprintf_internal_r+0x1350>
80090618:	18c00404 	addi	r3,r3,16
8009061c:	8c400044 	addi	r17,r17,1
80090620:	b5400015 	stw	r21,0(r22)
80090624:	b7000115 	stw	fp,4(r22)
80090628:	d8c02015 	stw	r3,128(sp)
8009062c:	dc401f15 	stw	r17,124(sp)
80090630:	3c7ff60e 	bge	r7,r17,8009060c <___svfprintf_internal_r+0x12f8>
80090634:	d9801e04 	addi	r6,sp,120
80090638:	a00b883a 	mov	r5,r20
8009063c:	9809883a 	mov	r4,r19
80090640:	d9c03d15 	stw	r7,244(sp)
80090644:	0093fe80 	call	80093fe8 <__ssprint_r>
80090648:	d9c03d17 	ldw	r7,244(sp)
8009064c:	103c161e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090650:	843ffc04 	addi	r16,r16,-16
80090654:	d8c02017 	ldw	r3,128(sp)
80090658:	dc401f17 	ldw	r17,124(sp)
8009065c:	dd800404 	addi	r22,sp,16
80090660:	e43fed16 	blt	fp,r16,80090618 <___svfprintf_internal_r+0x1304>
80090664:	d8802b17 	ldw	r2,172(sp)
80090668:	1c07883a 	add	r3,r3,r16
8009066c:	8c400044 	addi	r17,r17,1
80090670:	b0800015 	stw	r2,0(r22)
80090674:	b4000115 	stw	r16,4(r22)
80090678:	d8c02015 	stw	r3,128(sp)
8009067c:	dc401f15 	stw	r17,124(sp)
80090680:	008001c4 	movi	r2,7
80090684:	147f2e0e 	bge	r2,r17,80090340 <___svfprintf_internal_r+0x102c>
80090688:	d9402c17 	ldw	r5,176(sp)
8009068c:	d9801e04 	addi	r6,sp,120
80090690:	9809883a 	mov	r4,r19
80090694:	0093fe80 	call	80093fe8 <__ssprint_r>
80090698:	103c031e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
8009069c:	d8c02017 	ldw	r3,128(sp)
800906a0:	dc401f17 	ldw	r17,124(sp)
800906a4:	dd800404 	addi	r22,sp,16
800906a8:	003f2606 	br	80090344 <___svfprintf_internal_r+0x1030>
800906ac:	9080040c 	andi	r2,r18,16
800906b0:	1000c326 	beq	r2,zero,800909c0 <___svfprintf_internal_r+0x16ac>
800906b4:	d8802d17 	ldw	r2,180(sp)
800906b8:	15000017 	ldw	r20,0(r2)
800906bc:	10800104 	addi	r2,r2,4
800906c0:	d8802d15 	stw	r2,180(sp)
800906c4:	a02dd7fa 	srai	r22,r20,31
800906c8:	b005883a 	mov	r2,r22
800906cc:	103c680e 	bge	r2,zero,8008f870 <___svfprintf_internal_r+0x55c>
800906d0:	0529c83a 	sub	r20,zero,r20
800906d4:	a004c03a 	cmpne	r2,r20,zero
800906d8:	05adc83a 	sub	r22,zero,r22
800906dc:	b0adc83a 	sub	r22,r22,r2
800906e0:	d8802917 	ldw	r2,164(sp)
800906e4:	07000b44 	movi	fp,45
800906e8:	df002785 	stb	fp,158(sp)
800906ec:	10022e16 	blt	r2,zero,80090fa8 <___svfprintf_internal_r+0x1c94>
800906f0:	00bfdfc4 	movi	r2,-129
800906f4:	90a4703a 	and	r18,r18,r2
800906f8:	003c6406 	br	8008f88c <___svfprintf_internal_r+0x578>
800906fc:	9080100c 	andi	r2,r18,64
80090700:	d8002785 	stb	zero,158(sp)
80090704:	10012526 	beq	r2,zero,80090b9c <___svfprintf_internal_r+0x1888>
80090708:	d9002d17 	ldw	r4,180(sp)
8009070c:	d9402917 	ldw	r5,164(sp)
80090710:	002d883a 	mov	r22,zero
80090714:	20800104 	addi	r2,r4,4
80090718:	2500000b 	ldhu	r20,0(r4)
8009071c:	283fa20e 	bge	r5,zero,800905a8 <___svfprintf_internal_r+0x1294>
80090720:	d8802d15 	stw	r2,180(sp)
80090724:	0039883a 	mov	fp,zero
80090728:	a584b03a 	or	r2,r20,r22
8009072c:	103c571e 	bne	r2,zero,8008f88c <___svfprintf_internal_r+0x578>
80090730:	00800044 	movi	r2,1
80090734:	003e5006 	br	80090078 <___svfprintf_internal_r+0xd64>
80090738:	d9402c17 	ldw	r5,176(sp)
8009073c:	d9801e04 	addi	r6,sp,120
80090740:	9809883a 	mov	r4,r19
80090744:	0093fe80 	call	80093fe8 <__ssprint_r>
80090748:	103bd71e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
8009074c:	d8c02017 	ldw	r3,128(sp)
80090750:	da000404 	addi	r8,sp,16
80090754:	d9003217 	ldw	r4,200(sp)
80090758:	d8802617 	ldw	r2,152(sp)
8009075c:	d9403317 	ldw	r5,204(sp)
80090760:	8123883a 	add	r17,r16,r4
80090764:	11400216 	blt	r2,r5,80090770 <___svfprintf_internal_r+0x145c>
80090768:	9100004c 	andi	r4,r18,1
8009076c:	20000d26 	beq	r4,zero,800907a4 <___svfprintf_internal_r+0x1490>
80090770:	d9003817 	ldw	r4,224(sp)
80090774:	d9403417 	ldw	r5,208(sp)
80090778:	1907883a 	add	r3,r3,r4
8009077c:	d9001f17 	ldw	r4,124(sp)
80090780:	41400015 	stw	r5,0(r8)
80090784:	d9403817 	ldw	r5,224(sp)
80090788:	21000044 	addi	r4,r4,1
8009078c:	d8c02015 	stw	r3,128(sp)
80090790:	41400115 	stw	r5,4(r8)
80090794:	d9001f15 	stw	r4,124(sp)
80090798:	014001c4 	movi	r5,7
8009079c:	2901dc16 	blt	r5,r4,80090f10 <___svfprintf_internal_r+0x1bfc>
800907a0:	42000204 	addi	r8,r8,8
800907a4:	d9003317 	ldw	r4,204(sp)
800907a8:	8121883a 	add	r16,r16,r4
800907ac:	2085c83a 	sub	r2,r4,r2
800907b0:	8461c83a 	sub	r16,r16,r17
800907b4:	1400010e 	bge	r2,r16,800907bc <___svfprintf_internal_r+0x14a8>
800907b8:	1021883a 	mov	r16,r2
800907bc:	04000a0e 	bge	zero,r16,800907e8 <___svfprintf_internal_r+0x14d4>
800907c0:	d9001f17 	ldw	r4,124(sp)
800907c4:	1c07883a 	add	r3,r3,r16
800907c8:	44400015 	stw	r17,0(r8)
800907cc:	21000044 	addi	r4,r4,1
800907d0:	44000115 	stw	r16,4(r8)
800907d4:	d8c02015 	stw	r3,128(sp)
800907d8:	d9001f15 	stw	r4,124(sp)
800907dc:	014001c4 	movi	r5,7
800907e0:	2901e616 	blt	r5,r4,80090f7c <___svfprintf_internal_r+0x1c68>
800907e4:	42000204 	addi	r8,r8,8
800907e8:	8001f616 	blt	r16,zero,80090fc4 <___svfprintf_internal_r+0x1cb0>
800907ec:	1421c83a 	sub	r16,r2,r16
800907f0:	043d1c0e 	bge	zero,r16,8008fc64 <___svfprintf_internal_r+0x950>
800907f4:	04400404 	movi	r17,16
800907f8:	d8801f17 	ldw	r2,124(sp)
800907fc:	8c3edd0e 	bge	r17,r16,80090374 <___svfprintf_internal_r+0x1060>
80090800:	016002b4 	movhi	r5,32778
80090804:	2971e484 	addi	r5,r5,-14446
80090808:	d9402b15 	stw	r5,172(sp)
8009080c:	058001c4 	movi	r22,7
80090810:	dd002c17 	ldw	r20,176(sp)
80090814:	00000306 	br	80090824 <___svfprintf_internal_r+0x1510>
80090818:	42000204 	addi	r8,r8,8
8009081c:	843ffc04 	addi	r16,r16,-16
80090820:	8c3ed70e 	bge	r17,r16,80090380 <___svfprintf_internal_r+0x106c>
80090824:	18c00404 	addi	r3,r3,16
80090828:	10800044 	addi	r2,r2,1
8009082c:	45400015 	stw	r21,0(r8)
80090830:	44400115 	stw	r17,4(r8)
80090834:	d8c02015 	stw	r3,128(sp)
80090838:	d8801f15 	stw	r2,124(sp)
8009083c:	b0bff60e 	bge	r22,r2,80090818 <___svfprintf_internal_r+0x1504>
80090840:	d9801e04 	addi	r6,sp,120
80090844:	a00b883a 	mov	r5,r20
80090848:	9809883a 	mov	r4,r19
8009084c:	0093fe80 	call	80093fe8 <__ssprint_r>
80090850:	103b951e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090854:	d8c02017 	ldw	r3,128(sp)
80090858:	d8801f17 	ldw	r2,124(sp)
8009085c:	da000404 	addi	r8,sp,16
80090860:	003fee06 	br	8009081c <___svfprintf_internal_r+0x1508>
80090864:	9088703a 	and	r4,r18,r2
80090868:	203e8d1e 	bne	r4,zero,800902a0 <___svfprintf_internal_r+0xf8c>
8009086c:	dc401f17 	ldw	r17,124(sp)
80090870:	40800115 	stw	r2,4(r8)
80090874:	44000015 	stw	r16,0(r8)
80090878:	8c400044 	addi	r17,r17,1
8009087c:	d8c02015 	stw	r3,128(sp)
80090880:	dc401f15 	stw	r17,124(sp)
80090884:	008001c4 	movi	r2,7
80090888:	147f7f16 	blt	r2,r17,80090688 <___svfprintf_internal_r+0x1374>
8009088c:	45800204 	addi	r22,r8,8
80090890:	003eac06 	br	80090344 <___svfprintf_internal_r+0x1030>
80090894:	d9402c17 	ldw	r5,176(sp)
80090898:	d9801e04 	addi	r6,sp,120
8009089c:	9809883a 	mov	r4,r19
800908a0:	0093fe80 	call	80093fe8 <__ssprint_r>
800908a4:	103b801e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
800908a8:	d8c02017 	ldw	r3,128(sp)
800908ac:	dc401f17 	ldw	r17,124(sp)
800908b0:	da000404 	addi	r8,sp,16
800908b4:	003e8406 	br	800902c8 <___svfprintf_internal_r+0xfb4>
800908b8:	d9402c17 	ldw	r5,176(sp)
800908bc:	d9801e04 	addi	r6,sp,120
800908c0:	9809883a 	mov	r4,r19
800908c4:	0093fe80 	call	80093fe8 <__ssprint_r>
800908c8:	103b771e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
800908cc:	d8c02017 	ldw	r3,128(sp)
800908d0:	dc401f17 	ldw	r17,124(sp)
800908d4:	dd800404 	addi	r22,sp,16
800908d8:	003e8606 	br	800902f4 <___svfprintf_internal_r+0xfe0>
800908dc:	0029883a 	mov	r20,zero
800908e0:	a5000c04 	addi	r20,r20,48
800908e4:	dc001dc4 	addi	r16,sp,119
800908e8:	dd001dc5 	stb	r20,119(sp)
800908ec:	003f3806 	br	800905d0 <___svfprintf_internal_r+0x12bc>
800908f0:	d9402c17 	ldw	r5,176(sp)
800908f4:	d9801e04 	addi	r6,sp,120
800908f8:	9809883a 	mov	r4,r19
800908fc:	0093fe80 	call	80093fe8 <__ssprint_r>
80090900:	103b691e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090904:	d8c02017 	ldw	r3,128(sp)
80090908:	da000404 	addi	r8,sp,16
8009090c:	003c9506 	br	8008fb64 <___svfprintf_internal_r+0x850>
80090910:	d9003617 	ldw	r4,216(sp)
80090914:	d9403717 	ldw	r5,220(sp)
80090918:	da003e15 	stw	r8,248(sp)
8009091c:	008bae00 	call	8008bae0 <__fpclassifyd>
80090920:	da003e17 	ldw	r8,248(sp)
80090924:	1000bd1e 	bne	r2,zero,80090c1c <___svfprintf_internal_r+0x1908>
80090928:	008011c4 	movi	r2,71
8009092c:	14411e0e 	bge	r2,r17,80090da8 <___svfprintf_internal_r+0x1a94>
80090930:	042002b4 	movhi	r16,32778
80090934:	8430be04 	addi	r16,r16,-15624
80090938:	00c000c4 	movi	r3,3
8009093c:	00bfdfc4 	movi	r2,-129
80090940:	d8c02a15 	stw	r3,168(sp)
80090944:	90a4703a 	and	r18,r18,r2
80090948:	df002783 	ldbu	fp,158(sp)
8009094c:	d8c02e15 	stw	r3,184(sp)
80090950:	d8002915 	stw	zero,164(sp)
80090954:	d8003215 	stw	zero,200(sp)
80090958:	003c1c06 	br	8008f9cc <___svfprintf_internal_r+0x6b8>
8009095c:	9080100c 	andi	r2,r18,64
80090960:	d8002785 	stb	zero,158(sp)
80090964:	10009426 	beq	r2,zero,80090bb8 <___svfprintf_internal_r+0x18a4>
80090968:	d8c02d17 	ldw	r3,180(sp)
8009096c:	d9002917 	ldw	r4,164(sp)
80090970:	002d883a 	mov	r22,zero
80090974:	18800104 	addi	r2,r3,4
80090978:	1d00000b 	ldhu	r20,0(r3)
8009097c:	203ec10e 	bge	r4,zero,80090484 <___svfprintf_internal_r+0x1170>
80090980:	a586b03a 	or	r3,r20,r22
80090984:	d8802d15 	stw	r2,180(sp)
80090988:	183ec21e 	bne	r3,zero,80090494 <___svfprintf_internal_r+0x1180>
8009098c:	0039883a 	mov	fp,zero
80090990:	0005883a 	mov	r2,zero
80090994:	003db806 	br	80090078 <___svfprintf_internal_r+0xd64>
80090998:	d8802d17 	ldw	r2,180(sp)
8009099c:	d8c02d17 	ldw	r3,180(sp)
800909a0:	d9002d17 	ldw	r4,180(sp)
800909a4:	10800017 	ldw	r2,0(r2)
800909a8:	18c00117 	ldw	r3,4(r3)
800909ac:	21000204 	addi	r4,r4,8
800909b0:	d8803615 	stw	r2,216(sp)
800909b4:	d8c03715 	stw	r3,220(sp)
800909b8:	d9002d15 	stw	r4,180(sp)
800909bc:	003b8206 	br	8008f7c8 <___svfprintf_internal_r+0x4b4>
800909c0:	9080100c 	andi	r2,r18,64
800909c4:	10010726 	beq	r2,zero,80090de4 <___svfprintf_internal_r+0x1ad0>
800909c8:	d8c02d17 	ldw	r3,180(sp)
800909cc:	1d00000f 	ldh	r20,0(r3)
800909d0:	18c00104 	addi	r3,r3,4
800909d4:	d8c02d15 	stw	r3,180(sp)
800909d8:	a02dd7fa 	srai	r22,r20,31
800909dc:	b005883a 	mov	r2,r22
800909e0:	003ba206 	br	8008f86c <___svfprintf_internal_r+0x558>
800909e4:	9080100c 	andi	r2,r18,64
800909e8:	10010526 	beq	r2,zero,80090e00 <___svfprintf_internal_r+0x1aec>
800909ec:	d9002d17 	ldw	r4,180(sp)
800909f0:	002d883a 	mov	r22,zero
800909f4:	2500000b 	ldhu	r20,0(r4)
800909f8:	21000104 	addi	r4,r4,4
800909fc:	d9002d15 	stw	r4,180(sp)
80090a00:	003cfe06 	br	8008fdfc <___svfprintf_internal_r+0xae8>
80090a04:	bc400007 	ldb	r17,0(r23)
80090a08:	003a9606 	br	8008f464 <___svfprintf_internal_r+0x150>
80090a0c:	9080040c 	andi	r2,r18,16
80090a10:	10010126 	beq	r2,zero,80090e18 <___svfprintf_internal_r+0x1b04>
80090a14:	d9402d17 	ldw	r5,180(sp)
80090a18:	d8c02f17 	ldw	r3,188(sp)
80090a1c:	28800017 	ldw	r2,0(r5)
80090a20:	29400104 	addi	r5,r5,4
80090a24:	d9402d15 	stw	r5,180(sp)
80090a28:	10c00015 	stw	r3,0(r2)
80090a2c:	003a6406 	br	8008f3c0 <___svfprintf_internal_r+0xac>
80090a30:	d9002917 	ldw	r4,164(sp)
80090a34:	d8002785 	stb	zero,158(sp)
80090a38:	203d8d16 	blt	r4,zero,80090070 <___svfprintf_internal_r+0xd5c>
80090a3c:	00bfdfc4 	movi	r2,-129
80090a40:	90a4703a 	and	r18,r18,r2
80090a44:	003b0506 	br	8008f65c <___svfprintf_internal_r+0x348>
80090a48:	016002b4 	movhi	r5,32778
80090a4c:	2971e484 	addi	r5,r5,-14446
80090a50:	d9402b15 	stw	r5,172(sp)
80090a54:	d9402b17 	ldw	r5,172(sp)
80090a58:	1c47883a 	add	r3,r3,r17
80090a5c:	10800044 	addi	r2,r2,1
80090a60:	41400015 	stw	r5,0(r8)
80090a64:	44400115 	stw	r17,4(r8)
80090a68:	d8c02015 	stw	r3,128(sp)
80090a6c:	d8801f15 	stw	r2,124(sp)
80090a70:	010001c4 	movi	r4,7
80090a74:	20bf3016 	blt	r4,r2,80090738 <___svfprintf_internal_r+0x1424>
80090a78:	42000204 	addi	r8,r8,8
80090a7c:	003f3506 	br	80090754 <___svfprintf_internal_r+0x1440>
80090a80:	012002b4 	movhi	r4,32778
80090a84:	2131e484 	addi	r4,r4,-14446
80090a88:	d9002b15 	stw	r4,172(sp)
80090a8c:	003c5e06 	br	8008fc08 <___svfprintf_internal_r+0x8f4>
80090a90:	d9402c17 	ldw	r5,176(sp)
80090a94:	d9801e04 	addi	r6,sp,120
80090a98:	9809883a 	mov	r4,r19
80090a9c:	0093fe80 	call	80093fe8 <__ssprint_r>
80090aa0:	103b011e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090aa4:	d8c02017 	ldw	r3,128(sp)
80090aa8:	da000404 	addi	r8,sp,16
80090aac:	003d9306 	br	800900fc <___svfprintf_internal_r+0xde8>
80090ab0:	d8801f17 	ldw	r2,124(sp)
80090ab4:	016002b4 	movhi	r5,32778
80090ab8:	01000044 	movi	r4,1
80090abc:	18c00044 	addi	r3,r3,1
80090ac0:	10800044 	addi	r2,r2,1
80090ac4:	2970cb04 	addi	r5,r5,-15572
80090ac8:	41000115 	stw	r4,4(r8)
80090acc:	41400015 	stw	r5,0(r8)
80090ad0:	d8c02015 	stw	r3,128(sp)
80090ad4:	d8801f15 	stw	r2,124(sp)
80090ad8:	010001c4 	movi	r4,7
80090adc:	2080b516 	blt	r4,r2,80090db4 <___svfprintf_internal_r+0x1aa0>
80090ae0:	42000204 	addi	r8,r8,8
80090ae4:	8800041e 	bne	r17,zero,80090af8 <___svfprintf_internal_r+0x17e4>
80090ae8:	d8803317 	ldw	r2,204(sp)
80090aec:	1000021e 	bne	r2,zero,80090af8 <___svfprintf_internal_r+0x17e4>
80090af0:	9080004c 	andi	r2,r18,1
80090af4:	103c5b26 	beq	r2,zero,8008fc64 <___svfprintf_internal_r+0x950>
80090af8:	d9003817 	ldw	r4,224(sp)
80090afc:	d8801f17 	ldw	r2,124(sp)
80090b00:	d9403417 	ldw	r5,208(sp)
80090b04:	20c7883a 	add	r3,r4,r3
80090b08:	10800044 	addi	r2,r2,1
80090b0c:	41000115 	stw	r4,4(r8)
80090b10:	41400015 	stw	r5,0(r8)
80090b14:	d8c02015 	stw	r3,128(sp)
80090b18:	d8801f15 	stw	r2,124(sp)
80090b1c:	010001c4 	movi	r4,7
80090b20:	20818016 	blt	r4,r2,80091124 <___svfprintf_internal_r+0x1e10>
80090b24:	42000204 	addi	r8,r8,8
80090b28:	0463c83a 	sub	r17,zero,r17
80090b2c:	0440cb0e 	bge	zero,r17,80090e5c <___svfprintf_internal_r+0x1b48>
80090b30:	05800404 	movi	r22,16
80090b34:	b440e80e 	bge	r22,r17,80090ed8 <___svfprintf_internal_r+0x1bc4>
80090b38:	016002b4 	movhi	r5,32778
80090b3c:	2971e484 	addi	r5,r5,-14446
80090b40:	d9402b15 	stw	r5,172(sp)
80090b44:	070001c4 	movi	fp,7
80090b48:	dd002c17 	ldw	r20,176(sp)
80090b4c:	00000306 	br	80090b5c <___svfprintf_internal_r+0x1848>
80090b50:	42000204 	addi	r8,r8,8
80090b54:	8c7ffc04 	addi	r17,r17,-16
80090b58:	b440e20e 	bge	r22,r17,80090ee4 <___svfprintf_internal_r+0x1bd0>
80090b5c:	18c00404 	addi	r3,r3,16
80090b60:	10800044 	addi	r2,r2,1
80090b64:	45400015 	stw	r21,0(r8)
80090b68:	45800115 	stw	r22,4(r8)
80090b6c:	d8c02015 	stw	r3,128(sp)
80090b70:	d8801f15 	stw	r2,124(sp)
80090b74:	e0bff60e 	bge	fp,r2,80090b50 <___svfprintf_internal_r+0x183c>
80090b78:	d9801e04 	addi	r6,sp,120
80090b7c:	a00b883a 	mov	r5,r20
80090b80:	9809883a 	mov	r4,r19
80090b84:	0093fe80 	call	80093fe8 <__ssprint_r>
80090b88:	103ac71e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090b8c:	d8c02017 	ldw	r3,128(sp)
80090b90:	d8801f17 	ldw	r2,124(sp)
80090b94:	da000404 	addi	r8,sp,16
80090b98:	003fee06 	br	80090b54 <___svfprintf_internal_r+0x1840>
80090b9c:	d8c02d17 	ldw	r3,180(sp)
80090ba0:	d9002917 	ldw	r4,164(sp)
80090ba4:	002d883a 	mov	r22,zero
80090ba8:	18800104 	addi	r2,r3,4
80090bac:	1d000017 	ldw	r20,0(r3)
80090bb0:	203e7d0e 	bge	r4,zero,800905a8 <___svfprintf_internal_r+0x1294>
80090bb4:	003eda06 	br	80090720 <___svfprintf_internal_r+0x140c>
80090bb8:	d9402d17 	ldw	r5,180(sp)
80090bbc:	d8c02917 	ldw	r3,164(sp)
80090bc0:	002d883a 	mov	r22,zero
80090bc4:	28800104 	addi	r2,r5,4
80090bc8:	2d000017 	ldw	r20,0(r5)
80090bcc:	183e2d0e 	bge	r3,zero,80090484 <___svfprintf_internal_r+0x1170>
80090bd0:	003f6b06 	br	80090980 <___svfprintf_internal_r+0x166c>
80090bd4:	d8c02d15 	stw	r3,180(sp)
80090bd8:	0039883a 	mov	fp,zero
80090bdc:	003ed206 	br	80090728 <___svfprintf_internal_r+0x1414>
80090be0:	bc400043 	ldbu	r17,1(r23)
80090be4:	94800814 	ori	r18,r18,32
80090be8:	bdc00044 	addi	r23,r23,1
80090bec:	8c403fcc 	andi	r17,r17,255
80090bf0:	8c40201c 	xori	r17,r17,128
80090bf4:	8c7fe004 	addi	r17,r17,-128
80090bf8:	003a1a06 	br	8008f464 <___svfprintf_internal_r+0x150>
80090bfc:	d9402c17 	ldw	r5,176(sp)
80090c00:	d9801e04 	addi	r6,sp,120
80090c04:	9809883a 	mov	r4,r19
80090c08:	0093fe80 	call	80093fe8 <__ssprint_r>
80090c0c:	103aa61e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090c10:	d8c02017 	ldw	r3,128(sp)
80090c14:	da000404 	addi	r8,sp,16
80090c18:	003d4a06 	br	80090144 <___svfprintf_internal_r+0xe30>
80090c1c:	d9002917 	ldw	r4,164(sp)
80090c20:	05bff7c4 	movi	r22,-33
80090c24:	00bfffc4 	movi	r2,-1
80090c28:	8dac703a 	and	r22,r17,r22
80090c2c:	20806a26 	beq	r4,r2,80090dd8 <___svfprintf_internal_r+0x1ac4>
80090c30:	008011c4 	movi	r2,71
80090c34:	b0813726 	beq	r22,r2,80091114 <___svfprintf_internal_r+0x1e00>
80090c38:	d9003717 	ldw	r4,220(sp)
80090c3c:	90c04014 	ori	r3,r18,256
80090c40:	d8c02b15 	stw	r3,172(sp)
80090c44:	20015d16 	blt	r4,zero,800911bc <___svfprintf_internal_r+0x1ea8>
80090c48:	dd003717 	ldw	r20,220(sp)
80090c4c:	d8002a05 	stb	zero,168(sp)
80090c50:	00801984 	movi	r2,102
80090c54:	88814026 	beq	r17,r2,80091158 <___svfprintf_internal_r+0x1e44>
80090c58:	00801184 	movi	r2,70
80090c5c:	88817126 	beq	r17,r2,80091224 <___svfprintf_internal_r+0x1f10>
80090c60:	00801144 	movi	r2,69
80090c64:	b0816226 	beq	r22,r2,800911f0 <___svfprintf_internal_r+0x1edc>
80090c68:	d8c02917 	ldw	r3,164(sp)
80090c6c:	d8802104 	addi	r2,sp,132
80090c70:	d8800315 	stw	r2,12(sp)
80090c74:	d9403617 	ldw	r5,216(sp)
80090c78:	d8802504 	addi	r2,sp,148
80090c7c:	d8800215 	stw	r2,8(sp)
80090c80:	d8802604 	addi	r2,sp,152
80090c84:	d8c00015 	stw	r3,0(sp)
80090c88:	d8800115 	stw	r2,4(sp)
80090c8c:	01c00084 	movi	r7,2
80090c90:	a00d883a 	mov	r6,r20
80090c94:	9809883a 	mov	r4,r19
80090c98:	d8c03d15 	stw	r3,244(sp)
80090c9c:	da003e15 	stw	r8,248(sp)
80090ca0:	00871cc0 	call	800871cc <_dtoa_r>
80090ca4:	1021883a 	mov	r16,r2
80090ca8:	008019c4 	movi	r2,103
80090cac:	d8c03d17 	ldw	r3,244(sp)
80090cb0:	da003e17 	ldw	r8,248(sp)
80090cb4:	8880e726 	beq	r17,r2,80091054 <___svfprintf_internal_r+0x1d40>
80090cb8:	008011c4 	movi	r2,71
80090cbc:	8880d426 	beq	r17,r2,80091010 <___svfprintf_internal_r+0x1cfc>
80090cc0:	80f9883a 	add	fp,r16,r3
80090cc4:	d9003617 	ldw	r4,216(sp)
80090cc8:	000d883a 	mov	r6,zero
80090ccc:	000f883a 	mov	r7,zero
80090cd0:	a00b883a 	mov	r5,r20
80090cd4:	da003e15 	stw	r8,248(sp)
80090cd8:	00974900 	call	80097490 <__eqdf2>
80090cdc:	da003e17 	ldw	r8,248(sp)
80090ce0:	1000e426 	beq	r2,zero,80091074 <___svfprintf_internal_r+0x1d60>
80090ce4:	d8802117 	ldw	r2,132(sp)
80090ce8:	1700062e 	bgeu	r2,fp,80090d04 <___svfprintf_internal_r+0x19f0>
80090cec:	01000c04 	movi	r4,48
80090cf0:	10c00044 	addi	r3,r2,1
80090cf4:	d8c02115 	stw	r3,132(sp)
80090cf8:	11000005 	stb	r4,0(r2)
80090cfc:	d8802117 	ldw	r2,132(sp)
80090d00:	173ffb36 	bltu	r2,fp,80090cf0 <___svfprintf_internal_r+0x19dc>
80090d04:	1405c83a 	sub	r2,r2,r16
80090d08:	d8803315 	stw	r2,204(sp)
80090d0c:	008011c4 	movi	r2,71
80090d10:	b080c526 	beq	r22,r2,80091028 <___svfprintf_internal_r+0x1d14>
80090d14:	00801944 	movi	r2,101
80090d18:	1441d90e 	bge	r2,r17,80091480 <___svfprintf_internal_r+0x216c>
80090d1c:	d8c02617 	ldw	r3,152(sp)
80090d20:	00801984 	movi	r2,102
80090d24:	d8c03215 	stw	r3,200(sp)
80090d28:	88813426 	beq	r17,r2,800911fc <___svfprintf_internal_r+0x1ee8>
80090d2c:	d8c03217 	ldw	r3,200(sp)
80090d30:	d9003317 	ldw	r4,204(sp)
80090d34:	19012516 	blt	r3,r4,800911cc <___svfprintf_internal_r+0x1eb8>
80090d38:	9480004c 	andi	r18,r18,1
80090d3c:	9001841e 	bne	r18,zero,80091350 <___svfprintf_internal_r+0x203c>
80090d40:	1805883a 	mov	r2,r3
80090d44:	1801cc16 	blt	r3,zero,80091478 <___svfprintf_internal_r+0x2164>
80090d48:	d8c03217 	ldw	r3,200(sp)
80090d4c:	044019c4 	movi	r17,103
80090d50:	d8c02e15 	stw	r3,184(sp)
80090d54:	df002a07 	ldb	fp,168(sp)
80090d58:	e000a61e 	bne	fp,zero,80090ff4 <___svfprintf_internal_r+0x1ce0>
80090d5c:	df002783 	ldbu	fp,158(sp)
80090d60:	d8802a15 	stw	r2,168(sp)
80090d64:	dc802b17 	ldw	r18,172(sp)
80090d68:	d8002915 	stw	zero,164(sp)
80090d6c:	003b1706 	br	8008f9cc <___svfprintf_internal_r+0x6b8>
80090d70:	042002b4 	movhi	r16,32778
80090d74:	8430bb04 	addi	r16,r16,-15636
80090d78:	003aa606 	br	8008f814 <___svfprintf_internal_r+0x500>
80090d7c:	d9003917 	ldw	r4,228(sp)
80090d80:	04001004 	movi	r16,64
80090d84:	800b883a 	mov	r5,r16
80090d88:	00824640 	call	80082464 <_malloc_r>
80090d8c:	d9002c17 	ldw	r4,176(sp)
80090d90:	20800015 	stw	r2,0(r4)
80090d94:	20800415 	stw	r2,16(r4)
80090d98:	1001cb26 	beq	r2,zero,800914c8 <___svfprintf_internal_r+0x21b4>
80090d9c:	d8802c17 	ldw	r2,176(sp)
80090da0:	14000515 	stw	r16,20(r2)
80090da4:	00397606 	br	8008f380 <___svfprintf_internal_r+0x6c>
80090da8:	042002b4 	movhi	r16,32778
80090dac:	8430bd04 	addi	r16,r16,-15628
80090db0:	003ee106 	br	80090938 <___svfprintf_internal_r+0x1624>
80090db4:	d9402c17 	ldw	r5,176(sp)
80090db8:	d9801e04 	addi	r6,sp,120
80090dbc:	9809883a 	mov	r4,r19
80090dc0:	0093fe80 	call	80093fe8 <__ssprint_r>
80090dc4:	103a381e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090dc8:	dc402617 	ldw	r17,152(sp)
80090dcc:	d8c02017 	ldw	r3,128(sp)
80090dd0:	da000404 	addi	r8,sp,16
80090dd4:	003f4306 	br	80090ae4 <___svfprintf_internal_r+0x17d0>
80090dd8:	01400184 	movi	r5,6
80090ddc:	d9402915 	stw	r5,164(sp)
80090de0:	003f9506 	br	80090c38 <___svfprintf_internal_r+0x1924>
80090de4:	d9002d17 	ldw	r4,180(sp)
80090de8:	25000017 	ldw	r20,0(r4)
80090dec:	21000104 	addi	r4,r4,4
80090df0:	d9002d15 	stw	r4,180(sp)
80090df4:	a02dd7fa 	srai	r22,r20,31
80090df8:	b005883a 	mov	r2,r22
80090dfc:	003a9b06 	br	8008f86c <___svfprintf_internal_r+0x558>
80090e00:	d9402d17 	ldw	r5,180(sp)
80090e04:	002d883a 	mov	r22,zero
80090e08:	2d000017 	ldw	r20,0(r5)
80090e0c:	29400104 	addi	r5,r5,4
80090e10:	d9402d15 	stw	r5,180(sp)
80090e14:	003bf906 	br	8008fdfc <___svfprintf_internal_r+0xae8>
80090e18:	9480100c 	andi	r18,r18,64
80090e1c:	90006e26 	beq	r18,zero,80090fd8 <___svfprintf_internal_r+0x1cc4>
80090e20:	d9002d17 	ldw	r4,180(sp)
80090e24:	d9402f17 	ldw	r5,188(sp)
80090e28:	20800017 	ldw	r2,0(r4)
80090e2c:	21000104 	addi	r4,r4,4
80090e30:	d9002d15 	stw	r4,180(sp)
80090e34:	1140000d 	sth	r5,0(r2)
80090e38:	00396106 	br	8008f3c0 <___svfprintf_internal_r+0xac>
80090e3c:	d9402c17 	ldw	r5,176(sp)
80090e40:	d9801e04 	addi	r6,sp,120
80090e44:	9809883a 	mov	r4,r19
80090e48:	0093fe80 	call	80093fe8 <__ssprint_r>
80090e4c:	103a161e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090e50:	d8c02017 	ldw	r3,128(sp)
80090e54:	d8801f17 	ldw	r2,124(sp)
80090e58:	da000404 	addi	r8,sp,16
80090e5c:	d9403317 	ldw	r5,204(sp)
80090e60:	10800044 	addi	r2,r2,1
80090e64:	44000015 	stw	r16,0(r8)
80090e68:	28c7883a 	add	r3,r5,r3
80090e6c:	003b7706 	br	8008fc4c <___svfprintf_internal_r+0x938>
80090e70:	8009883a 	mov	r4,r16
80090e74:	da003e15 	stw	r8,248(sp)
80090e78:	00832a00 	call	800832a0 <strlen>
80090e7c:	d8802e15 	stw	r2,184(sp)
80090e80:	da003e17 	ldw	r8,248(sp)
80090e84:	103c280e 	bge	r2,zero,8008ff28 <___svfprintf_internal_r+0xc14>
80090e88:	0005883a 	mov	r2,zero
80090e8c:	003c2606 	br	8008ff28 <___svfprintf_internal_r+0xc14>
80090e90:	00bfffc4 	movi	r2,-1
80090e94:	003a0906 	br	8008f6bc <___svfprintf_internal_r+0x3a8>
80090e98:	012002b4 	movhi	r4,32778
80090e9c:	2131e884 	addi	r4,r4,-14430
80090ea0:	d9003515 	stw	r4,212(sp)
80090ea4:	003b0606 	br	8008fac0 <___svfprintf_internal_r+0x7ac>
80090ea8:	013fffc4 	movi	r4,-1
80090eac:	003a2706 	br	8008f74c <___svfprintf_internal_r+0x438>
80090eb0:	d9402c17 	ldw	r5,176(sp)
80090eb4:	d9801e04 	addi	r6,sp,120
80090eb8:	9809883a 	mov	r4,r19
80090ebc:	0093fe80 	call	80093fe8 <__ssprint_r>
80090ec0:	1039f91e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090ec4:	d8c02017 	ldw	r3,128(sp)
80090ec8:	da000404 	addi	r8,sp,16
80090ecc:	003d8406 	br	800904e0 <___svfprintf_internal_r+0x11cc>
80090ed0:	0023883a 	mov	r17,zero
80090ed4:	003d8306 	br	800904e4 <___svfprintf_internal_r+0x11d0>
80090ed8:	012002b4 	movhi	r4,32778
80090edc:	2131e484 	addi	r4,r4,-14446
80090ee0:	d9002b15 	stw	r4,172(sp)
80090ee4:	d9002b17 	ldw	r4,172(sp)
80090ee8:	1c47883a 	add	r3,r3,r17
80090eec:	10800044 	addi	r2,r2,1
80090ef0:	41000015 	stw	r4,0(r8)
80090ef4:	44400115 	stw	r17,4(r8)
80090ef8:	d8c02015 	stw	r3,128(sp)
80090efc:	d8801f15 	stw	r2,124(sp)
80090f00:	010001c4 	movi	r4,7
80090f04:	20bfcd16 	blt	r4,r2,80090e3c <___svfprintf_internal_r+0x1b28>
80090f08:	42000204 	addi	r8,r8,8
80090f0c:	003fd306 	br	80090e5c <___svfprintf_internal_r+0x1b48>
80090f10:	d9402c17 	ldw	r5,176(sp)
80090f14:	d9801e04 	addi	r6,sp,120
80090f18:	9809883a 	mov	r4,r19
80090f1c:	0093fe80 	call	80093fe8 <__ssprint_r>
80090f20:	1039e11e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090f24:	d8802617 	ldw	r2,152(sp)
80090f28:	d8c02017 	ldw	r3,128(sp)
80090f2c:	da000404 	addi	r8,sp,16
80090f30:	003e1c06 	br	800907a4 <___svfprintf_internal_r+0x1490>
80090f34:	d8802917 	ldw	r2,164(sp)
80090f38:	00c00184 	movi	r3,6
80090f3c:	1880012e 	bgeu	r3,r2,80090f44 <___svfprintf_internal_r+0x1c30>
80090f40:	1805883a 	mov	r2,r3
80090f44:	d8802e15 	stw	r2,184(sp)
80090f48:	1000f316 	blt	r2,zero,80091318 <___svfprintf_internal_r+0x2004>
80090f4c:	042002b4 	movhi	r16,32778
80090f50:	d8802a15 	stw	r2,168(sp)
80090f54:	dd002d15 	stw	r20,180(sp)
80090f58:	d8002915 	stw	zero,164(sp)
80090f5c:	d8003215 	stw	zero,200(sp)
80090f60:	8430c904 	addi	r16,r16,-15580
80090f64:	0039883a 	mov	fp,zero
80090f68:	003a9f06 	br	8008f9e8 <___svfprintf_internal_r+0x6d4>
80090f6c:	012002b4 	movhi	r4,32778
80090f70:	2131e884 	addi	r4,r4,-14430
80090f74:	d9003515 	stw	r4,212(sp)
80090f78:	003b5f06 	br	8008fcf8 <___svfprintf_internal_r+0x9e4>
80090f7c:	d9402c17 	ldw	r5,176(sp)
80090f80:	d9801e04 	addi	r6,sp,120
80090f84:	9809883a 	mov	r4,r19
80090f88:	0093fe80 	call	80093fe8 <__ssprint_r>
80090f8c:	1039c61e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80090f90:	d8802617 	ldw	r2,152(sp)
80090f94:	d9403317 	ldw	r5,204(sp)
80090f98:	d8c02017 	ldw	r3,128(sp)
80090f9c:	da000404 	addi	r8,sp,16
80090fa0:	2885c83a 	sub	r2,r5,r2
80090fa4:	003e1006 	br	800907e8 <___svfprintf_internal_r+0x14d4>
80090fa8:	00800044 	movi	r2,1
80090fac:	10803fcc 	andi	r2,r2,255
80090fb0:	00c00044 	movi	r3,1
80090fb4:	10fa3526 	beq	r2,r3,8008f88c <___svfprintf_internal_r+0x578>
80090fb8:	00c00084 	movi	r3,2
80090fbc:	10fb9e26 	beq	r2,r3,8008fe38 <___svfprintf_internal_r+0xb24>
80090fc0:	003a6406 	br	8008f954 <___svfprintf_internal_r+0x640>
80090fc4:	0021883a 	mov	r16,zero
80090fc8:	003e0806 	br	800907ec <___svfprintf_internal_r+0x14d8>
80090fcc:	07000b44 	movi	fp,45
80090fd0:	df002785 	stb	fp,158(sp)
80090fd4:	003a0b06 	br	8008f804 <___svfprintf_internal_r+0x4f0>
80090fd8:	d8c02d17 	ldw	r3,180(sp)
80090fdc:	d9002f17 	ldw	r4,188(sp)
80090fe0:	18800017 	ldw	r2,0(r3)
80090fe4:	18c00104 	addi	r3,r3,4
80090fe8:	d8c02d15 	stw	r3,180(sp)
80090fec:	11000015 	stw	r4,0(r2)
80090ff0:	0038f306 	br	8008f3c0 <___svfprintf_internal_r+0xac>
80090ff4:	00c00b44 	movi	r3,45
80090ff8:	d8c02785 	stb	r3,158(sp)
80090ffc:	d8802a15 	stw	r2,168(sp)
80091000:	dc802b17 	ldw	r18,172(sp)
80091004:	d8002915 	stw	zero,164(sp)
80091008:	07000b44 	movi	fp,45
8009100c:	003a7306 	br	8008f9dc <___svfprintf_internal_r+0x6c8>
80091010:	9080004c 	andi	r2,r18,1
80091014:	1000941e 	bne	r2,zero,80091268 <___svfprintf_internal_r+0x1f54>
80091018:	d8802117 	ldw	r2,132(sp)
8009101c:	1405c83a 	sub	r2,r2,r16
80091020:	d8803315 	stw	r2,204(sp)
80091024:	b441161e 	bne	r22,r17,80091480 <___svfprintf_internal_r+0x216c>
80091028:	dd802617 	ldw	r22,152(sp)
8009102c:	00bfff44 	movi	r2,-3
80091030:	b0801a16 	blt	r22,r2,8009109c <___svfprintf_internal_r+0x1d88>
80091034:	d9402917 	ldw	r5,164(sp)
80091038:	2d801816 	blt	r5,r22,8009109c <___svfprintf_internal_r+0x1d88>
8009103c:	dd803215 	stw	r22,200(sp)
80091040:	003f3a06 	br	80090d2c <___svfprintf_internal_r+0x1a18>
80091044:	1025883a 	mov	r18,r2
80091048:	0039883a 	mov	fp,zero
8009104c:	00800084 	movi	r2,2
80091050:	003fd606 	br	80090fac <___svfprintf_internal_r+0x1c98>
80091054:	9080004c 	andi	r2,r18,1
80091058:	103f191e 	bne	r2,zero,80090cc0 <___svfprintf_internal_r+0x19ac>
8009105c:	d8802117 	ldw	r2,132(sp)
80091060:	003f2806 	br	80090d04 <___svfprintf_internal_r+0x19f0>
80091064:	012002b4 	movhi	r4,32778
80091068:	2131e484 	addi	r4,r4,-14446
8009106c:	d9002b15 	stw	r4,172(sp)
80091070:	003c7c06 	br	80090264 <___svfprintf_internal_r+0xf50>
80091074:	e005883a 	mov	r2,fp
80091078:	003f2206 	br	80090d04 <___svfprintf_internal_r+0x19f0>
8009107c:	d9402917 	ldw	r5,164(sp)
80091080:	df002783 	ldbu	fp,158(sp)
80091084:	dd002d15 	stw	r20,180(sp)
80091088:	d9402a15 	stw	r5,168(sp)
8009108c:	d9402e15 	stw	r5,184(sp)
80091090:	d8002915 	stw	zero,164(sp)
80091094:	d8003215 	stw	zero,200(sp)
80091098:	003a4c06 	br	8008f9cc <___svfprintf_internal_r+0x6b8>
8009109c:	8c7fff84 	addi	r17,r17,-2
800910a0:	b5bfffc4 	addi	r22,r22,-1
800910a4:	dd802615 	stw	r22,152(sp)
800910a8:	dc4022c5 	stb	r17,139(sp)
800910ac:	b000c316 	blt	r22,zero,800913bc <___svfprintf_internal_r+0x20a8>
800910b0:	00800ac4 	movi	r2,43
800910b4:	d8802305 	stb	r2,140(sp)
800910b8:	00800244 	movi	r2,9
800910bc:	15806e16 	blt	r2,r22,80091278 <___svfprintf_internal_r+0x1f64>
800910c0:	00800c04 	movi	r2,48
800910c4:	b5800c04 	addi	r22,r22,48
800910c8:	d8802345 	stb	r2,141(sp)
800910cc:	dd802385 	stb	r22,142(sp)
800910d0:	d88023c4 	addi	r2,sp,143
800910d4:	df0022c4 	addi	fp,sp,139
800910d8:	d8c03317 	ldw	r3,204(sp)
800910dc:	1739c83a 	sub	fp,r2,fp
800910e0:	d9003317 	ldw	r4,204(sp)
800910e4:	e0c7883a 	add	r3,fp,r3
800910e8:	df003b15 	stw	fp,236(sp)
800910ec:	d8c02e15 	stw	r3,184(sp)
800910f0:	00800044 	movi	r2,1
800910f4:	1100b70e 	bge	r2,r4,800913d4 <___svfprintf_internal_r+0x20c0>
800910f8:	d8c02e17 	ldw	r3,184(sp)
800910fc:	18c00044 	addi	r3,r3,1
80091100:	d8c02e15 	stw	r3,184(sp)
80091104:	1805883a 	mov	r2,r3
80091108:	1800b016 	blt	r3,zero,800913cc <___svfprintf_internal_r+0x20b8>
8009110c:	d8003215 	stw	zero,200(sp)
80091110:	003f1006 	br	80090d54 <___svfprintf_internal_r+0x1a40>
80091114:	d8802917 	ldw	r2,164(sp)
80091118:	103ec71e 	bne	r2,zero,80090c38 <___svfprintf_internal_r+0x1924>
8009111c:	dc002915 	stw	r16,164(sp)
80091120:	003ec506 	br	80090c38 <___svfprintf_internal_r+0x1924>
80091124:	d9402c17 	ldw	r5,176(sp)
80091128:	d9801e04 	addi	r6,sp,120
8009112c:	9809883a 	mov	r4,r19
80091130:	0093fe80 	call	80093fe8 <__ssprint_r>
80091134:	10395c1e 	bne	r2,zero,8008f6a8 <___svfprintf_internal_r+0x394>
80091138:	dc402617 	ldw	r17,152(sp)
8009113c:	d8c02017 	ldw	r3,128(sp)
80091140:	d8801f17 	ldw	r2,124(sp)
80091144:	da000404 	addi	r8,sp,16
80091148:	003e7706 	br	80090b28 <___svfprintf_internal_r+0x1814>
8009114c:	582f883a 	mov	r23,r11
80091150:	d8002915 	stw	zero,164(sp)
80091154:	0038c406 	br	8008f468 <___svfprintf_internal_r+0x154>
80091158:	d8c02917 	ldw	r3,164(sp)
8009115c:	d8802104 	addi	r2,sp,132
80091160:	d8800315 	stw	r2,12(sp)
80091164:	d9403617 	ldw	r5,216(sp)
80091168:	d8802504 	addi	r2,sp,148
8009116c:	d8800215 	stw	r2,8(sp)
80091170:	d8802604 	addi	r2,sp,152
80091174:	d8c00015 	stw	r3,0(sp)
80091178:	9809883a 	mov	r4,r19
8009117c:	d8800115 	stw	r2,4(sp)
80091180:	01c000c4 	movi	r7,3
80091184:	a00d883a 	mov	r6,r20
80091188:	da003e15 	stw	r8,248(sp)
8009118c:	00871cc0 	call	800871cc <_dtoa_r>
80091190:	d9002917 	ldw	r4,164(sp)
80091194:	da003e17 	ldw	r8,248(sp)
80091198:	1021883a 	mov	r16,r2
8009119c:	1139883a 	add	fp,r2,r4
800911a0:	2007883a 	mov	r3,r4
800911a4:	81000007 	ldb	r4,0(r16)
800911a8:	00800c04 	movi	r2,48
800911ac:	20806f26 	beq	r4,r2,8009136c <___svfprintf_internal_r+0x2058>
800911b0:	d8c02617 	ldw	r3,152(sp)
800911b4:	e0f9883a 	add	fp,fp,r3
800911b8:	003ec206 	br	80090cc4 <___svfprintf_internal_r+0x19b0>
800911bc:	00c00b44 	movi	r3,45
800911c0:	2520003c 	xorhi	r20,r4,32768
800911c4:	d8c02a05 	stb	r3,168(sp)
800911c8:	003ea106 	br	80090c50 <___svfprintf_internal_r+0x193c>
800911cc:	d8c03217 	ldw	r3,200(sp)
800911d0:	00c0890e 	bge	zero,r3,800913f8 <___svfprintf_internal_r+0x20e4>
800911d4:	00800044 	movi	r2,1
800911d8:	d9003317 	ldw	r4,204(sp)
800911dc:	1105883a 	add	r2,r2,r4
800911e0:	d8802e15 	stw	r2,184(sp)
800911e4:	10005f16 	blt	r2,zero,80091364 <___svfprintf_internal_r+0x2050>
800911e8:	044019c4 	movi	r17,103
800911ec:	003ed906 	br	80090d54 <___svfprintf_internal_r+0x1a40>
800911f0:	d9002917 	ldw	r4,164(sp)
800911f4:	20c00044 	addi	r3,r4,1
800911f8:	003e9c06 	br	80090c6c <___svfprintf_internal_r+0x1958>
800911fc:	d9002917 	ldw	r4,164(sp)
80091200:	00c0680e 	bge	zero,r3,800913a4 <___svfprintf_internal_r+0x2090>
80091204:	2000461e 	bne	r4,zero,80091320 <___svfprintf_internal_r+0x200c>
80091208:	9480004c 	andi	r18,r18,1
8009120c:	9000441e 	bne	r18,zero,80091320 <___svfprintf_internal_r+0x200c>
80091210:	1805883a 	mov	r2,r3
80091214:	1800a016 	blt	r3,zero,80091498 <___svfprintf_internal_r+0x2184>
80091218:	d8c03217 	ldw	r3,200(sp)
8009121c:	d8c02e15 	stw	r3,184(sp)
80091220:	003ecc06 	br	80090d54 <___svfprintf_internal_r+0x1a40>
80091224:	d9402917 	ldw	r5,164(sp)
80091228:	d8802104 	addi	r2,sp,132
8009122c:	d8800315 	stw	r2,12(sp)
80091230:	d9400015 	stw	r5,0(sp)
80091234:	d8802504 	addi	r2,sp,148
80091238:	d9403617 	ldw	r5,216(sp)
8009123c:	d8800215 	stw	r2,8(sp)
80091240:	d8802604 	addi	r2,sp,152
80091244:	d8800115 	stw	r2,4(sp)
80091248:	01c000c4 	movi	r7,3
8009124c:	a00d883a 	mov	r6,r20
80091250:	9809883a 	mov	r4,r19
80091254:	da003e15 	stw	r8,248(sp)
80091258:	00871cc0 	call	800871cc <_dtoa_r>
8009125c:	d8c02917 	ldw	r3,164(sp)
80091260:	da003e17 	ldw	r8,248(sp)
80091264:	1021883a 	mov	r16,r2
80091268:	00801184 	movi	r2,70
8009126c:	80f9883a 	add	fp,r16,r3
80091270:	88bfcc26 	beq	r17,r2,800911a4 <___svfprintf_internal_r+0x1e90>
80091274:	003e9306 	br	80090cc4 <___svfprintf_internal_r+0x19b0>
80091278:	df0022c4 	addi	fp,sp,139
8009127c:	dc002915 	stw	r16,164(sp)
80091280:	9829883a 	mov	r20,r19
80091284:	e021883a 	mov	r16,fp
80091288:	4027883a 	mov	r19,r8
8009128c:	b009883a 	mov	r4,r22
80091290:	01400284 	movi	r5,10
80091294:	00822140 	call	80082214 <__modsi3>
80091298:	10800c04 	addi	r2,r2,48
8009129c:	843fffc4 	addi	r16,r16,-1
800912a0:	b009883a 	mov	r4,r22
800912a4:	01400284 	movi	r5,10
800912a8:	80800005 	stb	r2,0(r16)
800912ac:	00821900 	call	80082190 <__divsi3>
800912b0:	102d883a 	mov	r22,r2
800912b4:	00800244 	movi	r2,9
800912b8:	15bff416 	blt	r2,r22,8009128c <___svfprintf_internal_r+0x1f78>
800912bc:	9811883a 	mov	r8,r19
800912c0:	b0800c04 	addi	r2,r22,48
800912c4:	a027883a 	mov	r19,r20
800912c8:	8029883a 	mov	r20,r16
800912cc:	a17fffc4 	addi	r5,r20,-1
800912d0:	a0bfffc5 	stb	r2,-1(r20)
800912d4:	dc002917 	ldw	r16,164(sp)
800912d8:	2f00752e 	bgeu	r5,fp,800914b0 <___svfprintf_internal_r+0x219c>
800912dc:	d9c02384 	addi	r7,sp,142
800912e0:	3d0fc83a 	sub	r7,r7,r20
800912e4:	d9002344 	addi	r4,sp,141
800912e8:	e1cf883a 	add	r7,fp,r7
800912ec:	00000106 	br	800912f4 <___svfprintf_internal_r+0x1fe0>
800912f0:	28800003 	ldbu	r2,0(r5)
800912f4:	20800005 	stb	r2,0(r4)
800912f8:	21000044 	addi	r4,r4,1
800912fc:	29400044 	addi	r5,r5,1
80091300:	21fffb1e 	bne	r4,r7,800912f0 <___svfprintf_internal_r+0x1fdc>
80091304:	d8802304 	addi	r2,sp,140
80091308:	1505c83a 	sub	r2,r2,r20
8009130c:	d8c02344 	addi	r3,sp,141
80091310:	1885883a 	add	r2,r3,r2
80091314:	003f7006 	br	800910d8 <___svfprintf_internal_r+0x1dc4>
80091318:	0005883a 	mov	r2,zero
8009131c:	003f0b06 	br	80090f4c <___svfprintf_internal_r+0x1c38>
80091320:	d9002917 	ldw	r4,164(sp)
80091324:	d8c03217 	ldw	r3,200(sp)
80091328:	20800044 	addi	r2,r4,1
8009132c:	1885883a 	add	r2,r3,r2
80091330:	d8802e15 	stw	r2,184(sp)
80091334:	103e870e 	bge	r2,zero,80090d54 <___svfprintf_internal_r+0x1a40>
80091338:	0005883a 	mov	r2,zero
8009133c:	003e8506 	br	80090d54 <___svfprintf_internal_r+0x1a40>
80091340:	012002b4 	movhi	r4,32778
80091344:	2131e484 	addi	r4,r4,-14446
80091348:	d9002b15 	stw	r4,172(sp)
8009134c:	003cc506 	br	80090664 <___svfprintf_internal_r+0x1350>
80091350:	d8c03217 	ldw	r3,200(sp)
80091354:	18c00044 	addi	r3,r3,1
80091358:	d8c02e15 	stw	r3,184(sp)
8009135c:	1805883a 	mov	r2,r3
80091360:	183fa10e 	bge	r3,zero,800911e8 <___svfprintf_internal_r+0x1ed4>
80091364:	0005883a 	mov	r2,zero
80091368:	003f9f06 	br	800911e8 <___svfprintf_internal_r+0x1ed4>
8009136c:	d9003617 	ldw	r4,216(sp)
80091370:	000d883a 	mov	r6,zero
80091374:	000f883a 	mov	r7,zero
80091378:	a00b883a 	mov	r5,r20
8009137c:	d8c03d15 	stw	r3,244(sp)
80091380:	da003e15 	stw	r8,248(sp)
80091384:	00974900 	call	80097490 <__eqdf2>
80091388:	d8c03d17 	ldw	r3,244(sp)
8009138c:	da003e17 	ldw	r8,248(sp)
80091390:	103f8726 	beq	r2,zero,800911b0 <___svfprintf_internal_r+0x1e9c>
80091394:	00800044 	movi	r2,1
80091398:	10c7c83a 	sub	r3,r2,r3
8009139c:	d8c02615 	stw	r3,152(sp)
800913a0:	003f8406 	br	800911b4 <___svfprintf_internal_r+0x1ea0>
800913a4:	20000e1e 	bne	r4,zero,800913e0 <___svfprintf_internal_r+0x20cc>
800913a8:	9480004c 	andi	r18,r18,1
800913ac:	90000c1e 	bne	r18,zero,800913e0 <___svfprintf_internal_r+0x20cc>
800913b0:	00800044 	movi	r2,1
800913b4:	d8802e15 	stw	r2,184(sp)
800913b8:	003e6606 	br	80090d54 <___svfprintf_internal_r+0x1a40>
800913bc:	00800b44 	movi	r2,45
800913c0:	05adc83a 	sub	r22,zero,r22
800913c4:	d8802305 	stb	r2,140(sp)
800913c8:	003f3b06 	br	800910b8 <___svfprintf_internal_r+0x1da4>
800913cc:	0005883a 	mov	r2,zero
800913d0:	003f4e06 	br	8009110c <___svfprintf_internal_r+0x1df8>
800913d4:	90a4703a 	and	r18,r18,r2
800913d8:	903f4a26 	beq	r18,zero,80091104 <___svfprintf_internal_r+0x1df0>
800913dc:	003f4606 	br	800910f8 <___svfprintf_internal_r+0x1de4>
800913e0:	d8c02917 	ldw	r3,164(sp)
800913e4:	18c00084 	addi	r3,r3,2
800913e8:	d8c02e15 	stw	r3,184(sp)
800913ec:	1805883a 	mov	r2,r3
800913f0:	183e580e 	bge	r3,zero,80090d54 <___svfprintf_internal_r+0x1a40>
800913f4:	003fd006 	br	80091338 <___svfprintf_internal_r+0x2024>
800913f8:	00800084 	movi	r2,2
800913fc:	10c5c83a 	sub	r2,r2,r3
80091400:	003f7506 	br	800911d8 <___svfprintf_internal_r+0x1ec4>
80091404:	d8802d17 	ldw	r2,180(sp)
80091408:	d9002d17 	ldw	r4,180(sp)
8009140c:	bc400043 	ldbu	r17,1(r23)
80091410:	10800017 	ldw	r2,0(r2)
80091414:	582f883a 	mov	r23,r11
80091418:	d8802915 	stw	r2,164(sp)
8009141c:	20800104 	addi	r2,r4,4
80091420:	d9002917 	ldw	r4,164(sp)
80091424:	d8802d15 	stw	r2,180(sp)
80091428:	203df00e 	bge	r4,zero,80090bec <___svfprintf_internal_r+0x18d8>
8009142c:	8c403fcc 	andi	r17,r17,255
80091430:	00bfffc4 	movi	r2,-1
80091434:	8c40201c 	xori	r17,r17,128
80091438:	d8802915 	stw	r2,164(sp)
8009143c:	8c7fe004 	addi	r17,r17,-128
80091440:	00380806 	br	8008f464 <___svfprintf_internal_r+0x150>
80091444:	9080004c 	andi	r2,r18,1
80091448:	0039883a 	mov	fp,zero
8009144c:	10000726 	beq	r2,zero,8009146c <___svfprintf_internal_r+0x2158>
80091450:	d8c02817 	ldw	r3,160(sp)
80091454:	dc001dc4 	addi	r16,sp,119
80091458:	00800c04 	movi	r2,48
8009145c:	1c07c83a 	sub	r3,r3,r16
80091460:	d8801dc5 	stb	r2,119(sp)
80091464:	d8c02e15 	stw	r3,184(sp)
80091468:	00395206 	br	8008f9b4 <___svfprintf_internal_r+0x6a0>
8009146c:	d8002e15 	stw	zero,184(sp)
80091470:	dc001e04 	addi	r16,sp,120
80091474:	00394f06 	br	8008f9b4 <___svfprintf_internal_r+0x6a0>
80091478:	0005883a 	mov	r2,zero
8009147c:	003e3206 	br	80090d48 <___svfprintf_internal_r+0x1a34>
80091480:	dd802617 	ldw	r22,152(sp)
80091484:	003f0606 	br	800910a0 <___svfprintf_internal_r+0x1d8c>
80091488:	d9c02785 	stb	r7,158(sp)
8009148c:	003a5106 	br	8008fdd4 <___svfprintf_internal_r+0xac0>
80091490:	d9c02785 	stb	r7,158(sp)
80091494:	003a3706 	br	8008fd74 <___svfprintf_internal_r+0xa60>
80091498:	0005883a 	mov	r2,zero
8009149c:	003f5e06 	br	80091218 <___svfprintf_internal_r+0x1f04>
800914a0:	d9c02785 	stb	r7,158(sp)
800914a4:	00391706 	br	8008f904 <___svfprintf_internal_r+0x5f0>
800914a8:	d9c02785 	stb	r7,158(sp)
800914ac:	0038e606 	br	8008f848 <___svfprintf_internal_r+0x534>
800914b0:	d8802344 	addi	r2,sp,141
800914b4:	003f0806 	br	800910d8 <___svfprintf_internal_r+0x1dc4>
800914b8:	d9c02785 	stb	r7,158(sp)
800914bc:	0038b706 	br	8008f79c <___svfprintf_internal_r+0x488>
800914c0:	d9c02785 	stb	r7,158(sp)
800914c4:	003adc06 	br	80090038 <___svfprintf_internal_r+0xd24>
800914c8:	d9403917 	ldw	r5,228(sp)
800914cc:	00800304 	movi	r2,12
800914d0:	28800015 	stw	r2,0(r5)
800914d4:	00bfffc4 	movi	r2,-1
800914d8:	00387806 	br	8008f6bc <___svfprintf_internal_r+0x3a8>
800914dc:	d9c02785 	stb	r7,158(sp)
800914e0:	003abf06 	br	8008ffe0 <___svfprintf_internal_r+0xccc>
800914e4:	d9c02785 	stb	r7,158(sp)
800914e8:	003a9b06 	br	8008ff58 <___svfprintf_internal_r+0xc44>

800914ec <__submore>:
800914ec:	defffa04 	addi	sp,sp,-24
800914f0:	dc000015 	stw	r16,0(sp)
800914f4:	2821883a 	mov	r16,r5
800914f8:	29400c17 	ldw	r5,48(r5)
800914fc:	dfc00515 	stw	ra,20(sp)
80091500:	dd000415 	stw	r20,16(sp)
80091504:	dcc00315 	stw	r19,12(sp)
80091508:	dc800215 	stw	r18,8(sp)
8009150c:	dc400115 	stw	r17,4(sp)
80091510:	80801004 	addi	r2,r16,64
80091514:	28801726 	beq	r5,r2,80091574 <__submore+0x88>
80091518:	84400d17 	ldw	r17,52(r16)
8009151c:	8c67883a 	add	r19,r17,r17
80091520:	980d883a 	mov	r6,r19
80091524:	008b38c0 	call	8008b38c <_realloc_r>
80091528:	1025883a 	mov	r18,r2
8009152c:	10002226 	beq	r2,zero,800915b8 <__submore+0xcc>
80091530:	1469883a 	add	r20,r2,r17
80091534:	880d883a 	mov	r6,r17
80091538:	100b883a 	mov	r5,r2
8009153c:	a009883a 	mov	r4,r20
80091540:	0082cec0 	call	80082cec <memcpy>
80091544:	0005883a 	mov	r2,zero
80091548:	85000015 	stw	r20,0(r16)
8009154c:	84800c15 	stw	r18,48(r16)
80091550:	84c00d15 	stw	r19,52(r16)
80091554:	dfc00517 	ldw	ra,20(sp)
80091558:	dd000417 	ldw	r20,16(sp)
8009155c:	dcc00317 	ldw	r19,12(sp)
80091560:	dc800217 	ldw	r18,8(sp)
80091564:	dc400117 	ldw	r17,4(sp)
80091568:	dc000017 	ldw	r16,0(sp)
8009156c:	dec00604 	addi	sp,sp,24
80091570:	f800283a 	ret
80091574:	04410004 	movi	r17,1024
80091578:	880b883a 	mov	r5,r17
8009157c:	00824640 	call	80082464 <_malloc_r>
80091580:	1007883a 	mov	r3,r2
80091584:	10000c26 	beq	r2,zero,800915b8 <__submore+0xcc>
80091588:	80801083 	ldbu	r2,66(r16)
8009158c:	80c00c15 	stw	r3,48(r16)
80091590:	84400d15 	stw	r17,52(r16)
80091594:	1880ffc5 	stb	r2,1023(r3)
80091598:	81401043 	ldbu	r5,65(r16)
8009159c:	1900ff44 	addi	r4,r3,1021
800915a0:	0005883a 	mov	r2,zero
800915a4:	1940ff85 	stb	r5,1022(r3)
800915a8:	81401003 	ldbu	r5,64(r16)
800915ac:	1940ff45 	stb	r5,1021(r3)
800915b0:	81000015 	stw	r4,0(r16)
800915b4:	003fe706 	br	80091554 <__submore+0x68>
800915b8:	00bfffc4 	movi	r2,-1
800915bc:	003fe506 	br	80091554 <__submore+0x68>

800915c0 <_ungetc_r>:
800915c0:	00bfffc4 	movi	r2,-1
800915c4:	28806126 	beq	r5,r2,8009174c <_ungetc_r+0x18c>
800915c8:	defffb04 	addi	sp,sp,-20
800915cc:	dcc00315 	stw	r19,12(sp)
800915d0:	dc400115 	stw	r17,4(sp)
800915d4:	dc000015 	stw	r16,0(sp)
800915d8:	dfc00415 	stw	ra,16(sp)
800915dc:	dc800215 	stw	r18,8(sp)
800915e0:	2023883a 	mov	r17,r4
800915e4:	3021883a 	mov	r16,r6
800915e8:	2827883a 	mov	r19,r5
800915ec:	20000226 	beq	r4,zero,800915f8 <_ungetc_r+0x38>
800915f0:	20800e17 	ldw	r2,56(r4)
800915f4:	10002e26 	beq	r2,zero,800916b0 <_ungetc_r+0xf0>
800915f8:	80c0030b 	ldhu	r3,12(r16)
800915fc:	1888000c 	andi	r2,r3,8192
80091600:	1000051e 	bne	r2,zero,80091618 <_ungetc_r+0x58>
80091604:	81001917 	ldw	r4,100(r16)
80091608:	00b7ffc4 	movi	r2,-8193
8009160c:	18c80014 	ori	r3,r3,8192
80091610:	2084703a 	and	r2,r4,r2
80091614:	80801915 	stw	r2,100(r16)
80091618:	00bff7c4 	movi	r2,-33
8009161c:	1884703a 	and	r2,r3,r2
80091620:	8080030d 	sth	r2,12(r16)
80091624:	1900010c 	andi	r4,r3,4
80091628:	2000061e 	bne	r4,zero,80091644 <_ungetc_r+0x84>
8009162c:	1900040c 	andi	r4,r3,16
80091630:	20001d26 	beq	r4,zero,800916a8 <_ungetc_r+0xe8>
80091634:	18c0020c 	andi	r3,r3,8
80091638:	1800331e 	bne	r3,zero,80091708 <_ungetc_r+0x148>
8009163c:	10800114 	ori	r2,r2,4
80091640:	8080030d 	sth	r2,12(r16)
80091644:	80800c17 	ldw	r2,48(r16)
80091648:	9c803fcc 	andi	r18,r19,255
8009164c:	10001a26 	beq	r2,zero,800916b8 <_ungetc_r+0xf8>
80091650:	80c00117 	ldw	r3,4(r16)
80091654:	80800d17 	ldw	r2,52(r16)
80091658:	18800f0e 	bge	r3,r2,80091698 <_ungetc_r+0xd8>
8009165c:	80c00017 	ldw	r3,0(r16)
80091660:	9005883a 	mov	r2,r18
80091664:	193fffc4 	addi	r4,r3,-1
80091668:	81000015 	stw	r4,0(r16)
8009166c:	1cffffc5 	stb	r19,-1(r3)
80091670:	80c00117 	ldw	r3,4(r16)
80091674:	18c00044 	addi	r3,r3,1
80091678:	80c00115 	stw	r3,4(r16)
8009167c:	dfc00417 	ldw	ra,16(sp)
80091680:	dcc00317 	ldw	r19,12(sp)
80091684:	dc800217 	ldw	r18,8(sp)
80091688:	dc400117 	ldw	r17,4(sp)
8009168c:	dc000017 	ldw	r16,0(sp)
80091690:	dec00504 	addi	sp,sp,20
80091694:	f800283a 	ret
80091698:	800b883a 	mov	r5,r16
8009169c:	8809883a 	mov	r4,r17
800916a0:	00914ec0 	call	800914ec <__submore>
800916a4:	103fed26 	beq	r2,zero,8009165c <_ungetc_r+0x9c>
800916a8:	00bfffc4 	movi	r2,-1
800916ac:	003ff306 	br	8009167c <_ungetc_r+0xbc>
800916b0:	0088e4c0 	call	80088e4c <__sinit>
800916b4:	003fd006 	br	800915f8 <_ungetc_r+0x38>
800916b8:	80c00417 	ldw	r3,16(r16)
800916bc:	80800017 	ldw	r2,0(r16)
800916c0:	18000326 	beq	r3,zero,800916d0 <_ungetc_r+0x110>
800916c4:	1880022e 	bgeu	r3,r2,800916d0 <_ungetc_r+0x110>
800916c8:	10ffffc3 	ldbu	r3,-1(r2)
800916cc:	90c01826 	beq	r18,r3,80091730 <_ungetc_r+0x170>
800916d0:	81400117 	ldw	r5,4(r16)
800916d4:	80800e15 	stw	r2,56(r16)
800916d8:	008000c4 	movi	r2,3
800916dc:	81001004 	addi	r4,r16,64
800916e0:	80c01084 	addi	r3,r16,66
800916e4:	80800d15 	stw	r2,52(r16)
800916e8:	00800044 	movi	r2,1
800916ec:	80800115 	stw	r2,4(r16)
800916f0:	81400f15 	stw	r5,60(r16)
800916f4:	81000c15 	stw	r4,48(r16)
800916f8:	84c01085 	stb	r19,66(r16)
800916fc:	80c00015 	stw	r3,0(r16)
80091700:	9005883a 	mov	r2,r18
80091704:	003fdd06 	br	8009167c <_ungetc_r+0xbc>
80091708:	800b883a 	mov	r5,r16
8009170c:	8809883a 	mov	r4,r17
80091710:	0088a700 	call	80088a70 <_fflush_r>
80091714:	103fe41e 	bne	r2,zero,800916a8 <_ungetc_r+0xe8>
80091718:	8080030b 	ldhu	r2,12(r16)
8009171c:	00fffdc4 	movi	r3,-9
80091720:	80000215 	stw	zero,8(r16)
80091724:	1884703a 	and	r2,r3,r2
80091728:	80000615 	stw	zero,24(r16)
8009172c:	003fc306 	br	8009163c <_ungetc_r+0x7c>
80091730:	80c00117 	ldw	r3,4(r16)
80091734:	10bfffc4 	addi	r2,r2,-1
80091738:	80800015 	stw	r2,0(r16)
8009173c:	18800044 	addi	r2,r3,1
80091740:	80800115 	stw	r2,4(r16)
80091744:	9005883a 	mov	r2,r18
80091748:	003fcc06 	br	8009167c <_ungetc_r+0xbc>
8009174c:	00bfffc4 	movi	r2,-1
80091750:	f800283a 	ret

80091754 <ungetc>:
80091754:	00a002b4 	movhi	r2,32778
80091758:	10ba7304 	addi	r2,r2,-5684
8009175c:	280d883a 	mov	r6,r5
80091760:	200b883a 	mov	r5,r4
80091764:	11000017 	ldw	r4,0(r2)
80091768:	00915c01 	jmpi	800915c0 <_ungetc_r>

8009176c <__sprint_r.part.0>:
8009176c:	28801917 	ldw	r2,100(r5)
80091770:	defff604 	addi	sp,sp,-40
80091774:	dd400515 	stw	r21,20(sp)
80091778:	dfc00915 	stw	ra,36(sp)
8009177c:	df000815 	stw	fp,32(sp)
80091780:	ddc00715 	stw	r23,28(sp)
80091784:	dd800615 	stw	r22,24(sp)
80091788:	dd000415 	stw	r20,16(sp)
8009178c:	dcc00315 	stw	r19,12(sp)
80091790:	dc800215 	stw	r18,8(sp)
80091794:	dc400115 	stw	r17,4(sp)
80091798:	dc000015 	stw	r16,0(sp)
8009179c:	1088000c 	andi	r2,r2,8192
800917a0:	302b883a 	mov	r21,r6
800917a4:	10002e26 	beq	r2,zero,80091860 <__sprint_r.part.0+0xf4>
800917a8:	30800217 	ldw	r2,8(r6)
800917ac:	35800017 	ldw	r22,0(r6)
800917b0:	10002926 	beq	r2,zero,80091858 <__sprint_r.part.0+0xec>
800917b4:	2827883a 	mov	r19,r5
800917b8:	2029883a 	mov	r20,r4
800917bc:	b5c00104 	addi	r23,r22,4
800917c0:	04bfffc4 	movi	r18,-1
800917c4:	bc400017 	ldw	r17,0(r23)
800917c8:	b4000017 	ldw	r16,0(r22)
800917cc:	0039883a 	mov	fp,zero
800917d0:	8822d0ba 	srli	r17,r17,2
800917d4:	8800031e 	bne	r17,zero,800917e4 <__sprint_r.part.0+0x78>
800917d8:	00001806 	br	8009183c <__sprint_r.part.0+0xd0>
800917dc:	84000104 	addi	r16,r16,4
800917e0:	8f001526 	beq	r17,fp,80091838 <__sprint_r.part.0+0xcc>
800917e4:	81400017 	ldw	r5,0(r16)
800917e8:	980d883a 	mov	r6,r19
800917ec:	a009883a 	mov	r4,r20
800917f0:	00932380 	call	80093238 <_fputwc_r>
800917f4:	e7000044 	addi	fp,fp,1
800917f8:	14bff81e 	bne	r2,r18,800917dc <__sprint_r.part.0+0x70>
800917fc:	9005883a 	mov	r2,r18
80091800:	a8000215 	stw	zero,8(r21)
80091804:	a8000115 	stw	zero,4(r21)
80091808:	dfc00917 	ldw	ra,36(sp)
8009180c:	df000817 	ldw	fp,32(sp)
80091810:	ddc00717 	ldw	r23,28(sp)
80091814:	dd800617 	ldw	r22,24(sp)
80091818:	dd400517 	ldw	r21,20(sp)
8009181c:	dd000417 	ldw	r20,16(sp)
80091820:	dcc00317 	ldw	r19,12(sp)
80091824:	dc800217 	ldw	r18,8(sp)
80091828:	dc400117 	ldw	r17,4(sp)
8009182c:	dc000017 	ldw	r16,0(sp)
80091830:	dec00a04 	addi	sp,sp,40
80091834:	f800283a 	ret
80091838:	a8800217 	ldw	r2,8(r21)
8009183c:	8c63883a 	add	r17,r17,r17
80091840:	8c63883a 	add	r17,r17,r17
80091844:	1445c83a 	sub	r2,r2,r17
80091848:	a8800215 	stw	r2,8(r21)
8009184c:	b5800204 	addi	r22,r22,8
80091850:	bdc00204 	addi	r23,r23,8
80091854:	103fdb1e 	bne	r2,zero,800917c4 <__sprint_r.part.0+0x58>
80091858:	0005883a 	mov	r2,zero
8009185c:	003fe806 	br	80091800 <__sprint_r.part.0+0x94>
80091860:	00892d00 	call	800892d0 <__sfvwrite_r>
80091864:	003fe606 	br	80091800 <__sprint_r.part.0+0x94>

80091868 <__sprint_r>:
80091868:	30c00217 	ldw	r3,8(r6)
8009186c:	18000126 	beq	r3,zero,80091874 <__sprint_r+0xc>
80091870:	009176c1 	jmpi	8009176c <__sprint_r.part.0>
80091874:	30000115 	stw	zero,4(r6)
80091878:	0005883a 	mov	r2,zero
8009187c:	f800283a 	ret

80091880 <___vfiprintf_internal_r>:
80091880:	deffc904 	addi	sp,sp,-220
80091884:	df003515 	stw	fp,212(sp)
80091888:	dd003115 	stw	r20,196(sp)
8009188c:	dfc03615 	stw	ra,216(sp)
80091890:	ddc03415 	stw	r23,208(sp)
80091894:	dd803315 	stw	r22,204(sp)
80091898:	dd403215 	stw	r21,200(sp)
8009189c:	dcc03015 	stw	r19,192(sp)
800918a0:	dc802f15 	stw	r18,188(sp)
800918a4:	dc402e15 	stw	r17,184(sp)
800918a8:	dc002d15 	stw	r16,180(sp)
800918ac:	d9002015 	stw	r4,128(sp)
800918b0:	d9c02215 	stw	r7,136(sp)
800918b4:	2829883a 	mov	r20,r5
800918b8:	3039883a 	mov	fp,r6
800918bc:	20000226 	beq	r4,zero,800918c8 <___vfiprintf_internal_r+0x48>
800918c0:	20800e17 	ldw	r2,56(r4)
800918c4:	1000cf26 	beq	r2,zero,80091c04 <___vfiprintf_internal_r+0x384>
800918c8:	a080030b 	ldhu	r2,12(r20)
800918cc:	10c8000c 	andi	r3,r2,8192
800918d0:	1800061e 	bne	r3,zero,800918ec <___vfiprintf_internal_r+0x6c>
800918d4:	a1001917 	ldw	r4,100(r20)
800918d8:	00f7ffc4 	movi	r3,-8193
800918dc:	10880014 	ori	r2,r2,8192
800918e0:	20c6703a 	and	r3,r4,r3
800918e4:	a080030d 	sth	r2,12(r20)
800918e8:	a0c01915 	stw	r3,100(r20)
800918ec:	10c0020c 	andi	r3,r2,8
800918f0:	1800a926 	beq	r3,zero,80091b98 <___vfiprintf_internal_r+0x318>
800918f4:	a0c00417 	ldw	r3,16(r20)
800918f8:	1800a726 	beq	r3,zero,80091b98 <___vfiprintf_internal_r+0x318>
800918fc:	1080068c 	andi	r2,r2,26
80091900:	00c00284 	movi	r3,10
80091904:	10c0ac26 	beq	r2,r3,80091bb8 <___vfiprintf_internal_r+0x338>
80091908:	da801a04 	addi	r10,sp,104
8009190c:	da801e15 	stw	r10,120(sp)
80091910:	d8801e17 	ldw	r2,120(sp)
80091914:	da8019c4 	addi	r10,sp,103
80091918:	05a002b4 	movhi	r22,32778
8009191c:	05e002b4 	movhi	r23,32778
80091920:	da801f15 	stw	r10,124(sp)
80091924:	1295c83a 	sub	r10,r2,r10
80091928:	b5b1f084 	addi	r22,r22,-14398
8009192c:	bdf1ec84 	addi	r23,r23,-14414
80091930:	dec01a15 	stw	sp,104(sp)
80091934:	d8001c15 	stw	zero,112(sp)
80091938:	d8001b15 	stw	zero,108(sp)
8009193c:	d8002615 	stw	zero,152(sp)
80091940:	d8002315 	stw	zero,140(sp)
80091944:	da802715 	stw	r10,156(sp)
80091948:	d811883a 	mov	r8,sp
8009194c:	dd002115 	stw	r20,132(sp)
80091950:	e021883a 	mov	r16,fp
80091954:	80800007 	ldb	r2,0(r16)
80091958:	1003ea26 	beq	r2,zero,80092904 <___vfiprintf_internal_r+0x1084>
8009195c:	00c00944 	movi	r3,37
80091960:	8025883a 	mov	r18,r16
80091964:	10c0021e 	bne	r2,r3,80091970 <___vfiprintf_internal_r+0xf0>
80091968:	00001606 	br	800919c4 <___vfiprintf_internal_r+0x144>
8009196c:	10c00326 	beq	r2,r3,8009197c <___vfiprintf_internal_r+0xfc>
80091970:	94800044 	addi	r18,r18,1
80091974:	90800007 	ldb	r2,0(r18)
80091978:	103ffc1e 	bne	r2,zero,8009196c <___vfiprintf_internal_r+0xec>
8009197c:	9423c83a 	sub	r17,r18,r16
80091980:	88001026 	beq	r17,zero,800919c4 <___vfiprintf_internal_r+0x144>
80091984:	d8c01c17 	ldw	r3,112(sp)
80091988:	d8801b17 	ldw	r2,108(sp)
8009198c:	44000015 	stw	r16,0(r8)
80091990:	88c7883a 	add	r3,r17,r3
80091994:	10800044 	addi	r2,r2,1
80091998:	44400115 	stw	r17,4(r8)
8009199c:	d8c01c15 	stw	r3,112(sp)
800919a0:	d8801b15 	stw	r2,108(sp)
800919a4:	010001c4 	movi	r4,7
800919a8:	2080760e 	bge	r4,r2,80091b84 <___vfiprintf_internal_r+0x304>
800919ac:	1803821e 	bne	r3,zero,800927b8 <___vfiprintf_internal_r+0xf38>
800919b0:	da802317 	ldw	r10,140(sp)
800919b4:	d8001b15 	stw	zero,108(sp)
800919b8:	d811883a 	mov	r8,sp
800919bc:	5455883a 	add	r10,r10,r17
800919c0:	da802315 	stw	r10,140(sp)
800919c4:	90800007 	ldb	r2,0(r18)
800919c8:	10044626 	beq	r2,zero,80092ae4 <___vfiprintf_internal_r+0x1264>
800919cc:	90c00047 	ldb	r3,1(r18)
800919d0:	94000044 	addi	r16,r18,1
800919d4:	d8001d85 	stb	zero,118(sp)
800919d8:	0009883a 	mov	r4,zero
800919dc:	000f883a 	mov	r7,zero
800919e0:	027fffc4 	movi	r9,-1
800919e4:	0023883a 	mov	r17,zero
800919e8:	0029883a 	mov	r20,zero
800919ec:	01401604 	movi	r5,88
800919f0:	01800244 	movi	r6,9
800919f4:	03400a84 	movi	r13,42
800919f8:	03001b04 	movi	r12,108
800919fc:	84000044 	addi	r16,r16,1
80091a00:	18bff804 	addi	r2,r3,-32
80091a04:	28827336 	bltu	r5,r2,800923d4 <___vfiprintf_internal_r+0xb54>
80091a08:	100490ba 	slli	r2,r2,2
80091a0c:	02a00274 	movhi	r10,32777
80091a10:	52868804 	addi	r10,r10,6688
80091a14:	1285883a 	add	r2,r2,r10
80091a18:	10800017 	ldw	r2,0(r2)
80091a1c:	1000683a 	jmp	r2
80091a20:	80092108 	cmpgei	zero,r16,9348
80091a24:	800923d4 	ori	zero,r16,9359
80091a28:	800923d4 	ori	zero,r16,9359
80091a2c:	80092128 	cmpgeui	zero,r16,9348
80091a30:	800923d4 	ori	zero,r16,9359
80091a34:	800923d4 	ori	zero,r16,9359
80091a38:	800923d4 	ori	zero,r16,9359
80091a3c:	800923d4 	ori	zero,r16,9359
80091a40:	800923d4 	ori	zero,r16,9359
80091a44:	800923d4 	ori	zero,r16,9359
80091a48:	80092310 	cmplti	zero,r16,9356
80091a4c:	8009232c 	andhi	zero,r16,9356
80091a50:	800923d4 	ori	zero,r16,9359
80091a54:	80091c14 	ori	zero,r16,9328
80091a58:	8009233c 	xorhi	zero,r16,9356
80091a5c:	800923d4 	ori	zero,r16,9359
80091a60:	80092134 	orhi	zero,r16,9348
80091a64:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a68:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a6c:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a70:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a74:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a78:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a7c:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a80:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a84:	80092140 	call	88009214 <__alt_data_end+0x7f0c214>
80091a88:	800923d4 	ori	zero,r16,9359
80091a8c:	800923d4 	ori	zero,r16,9359
80091a90:	800923d4 	ori	zero,r16,9359
80091a94:	800923d4 	ori	zero,r16,9359
80091a98:	800923d4 	ori	zero,r16,9359
80091a9c:	800923d4 	ori	zero,r16,9359
80091aa0:	800923d4 	ori	zero,r16,9359
80091aa4:	800923d4 	ori	zero,r16,9359
80091aa8:	800923d4 	ori	zero,r16,9359
80091aac:	800923d4 	ori	zero,r16,9359
80091ab0:	8009216c 	andhi	zero,r16,9349
80091ab4:	800923d4 	ori	zero,r16,9359
80091ab8:	800923d4 	ori	zero,r16,9359
80091abc:	800923d4 	ori	zero,r16,9359
80091ac0:	800923d4 	ori	zero,r16,9359
80091ac4:	800923d4 	ori	zero,r16,9359
80091ac8:	800923d4 	ori	zero,r16,9359
80091acc:	800923d4 	ori	zero,r16,9359
80091ad0:	800923d4 	ori	zero,r16,9359
80091ad4:	800923d4 	ori	zero,r16,9359
80091ad8:	800923d4 	ori	zero,r16,9359
80091adc:	800921a4 	muli	zero,r16,9350
80091ae0:	800923d4 	ori	zero,r16,9359
80091ae4:	800923d4 	ori	zero,r16,9359
80091ae8:	800923d4 	ori	zero,r16,9359
80091aec:	800923d4 	ori	zero,r16,9359
80091af0:	800923d4 	ori	zero,r16,9359
80091af4:	800921fc 	xorhi	zero,r16,9351
80091af8:	800923d4 	ori	zero,r16,9359
80091afc:	800923d4 	ori	zero,r16,9359
80091b00:	8009226c 	andhi	zero,r16,9353
80091b04:	800923d4 	ori	zero,r16,9359
80091b08:	800923d4 	ori	zero,r16,9359
80091b0c:	800923d4 	ori	zero,r16,9359
80091b10:	800923d4 	ori	zero,r16,9359
80091b14:	800923d4 	ori	zero,r16,9359
80091b18:	800923d4 	ori	zero,r16,9359
80091b1c:	800923d4 	ori	zero,r16,9359
80091b20:	800923d4 	ori	zero,r16,9359
80091b24:	800923d4 	ori	zero,r16,9359
80091b28:	800923d4 	ori	zero,r16,9359
80091b2c:	80092018 	cmpnei	zero,r16,9344
80091b30:	80092044 	addi	zero,r16,9345
80091b34:	800923d4 	ori	zero,r16,9359
80091b38:	800923d4 	ori	zero,r16,9359
80091b3c:	800923d4 	ori	zero,r16,9359
80091b40:	8009237c 	xorhi	zero,r16,9357
80091b44:	80092044 	addi	zero,r16,9345
80091b48:	800923d4 	ori	zero,r16,9359
80091b4c:	800923d4 	ori	zero,r16,9359
80091b50:	80091ed8 	cmpnei	zero,r16,9339
80091b54:	800923d4 	ori	zero,r16,9359
80091b58:	80091ee8 	cmpgeui	zero,r16,9339
80091b5c:	80091f24 	muli	zero,r16,9340
80091b60:	80091c20 	cmpeqi	zero,r16,9328
80091b64:	80091ecc 	andi	zero,r16,9339
80091b68:	800923d4 	ori	zero,r16,9359
80091b6c:	800922a8 	cmpgeui	zero,r16,9354
80091b70:	800923d4 	ori	zero,r16,9359
80091b74:	80092300 	call	88009230 <__alt_data_end+0x7f0c230>
80091b78:	800923d4 	ori	zero,r16,9359
80091b7c:	800923d4 	ori	zero,r16,9359
80091b80:	80091fc4 	addi	zero,r16,9343
80091b84:	42000204 	addi	r8,r8,8
80091b88:	da802317 	ldw	r10,140(sp)
80091b8c:	5455883a 	add	r10,r10,r17
80091b90:	da802315 	stw	r10,140(sp)
80091b94:	003f8b06 	br	800919c4 <___vfiprintf_internal_r+0x144>
80091b98:	d9002017 	ldw	r4,128(sp)
80091b9c:	a00b883a 	mov	r5,r20
80091ba0:	0086e240 	call	80086e24 <__swsetup_r>
80091ba4:	1003b11e 	bne	r2,zero,80092a6c <___vfiprintf_internal_r+0x11ec>
80091ba8:	a080030b 	ldhu	r2,12(r20)
80091bac:	00c00284 	movi	r3,10
80091bb0:	1080068c 	andi	r2,r2,26
80091bb4:	10ff541e 	bne	r2,r3,80091908 <___vfiprintf_internal_r+0x88>
80091bb8:	a080038f 	ldh	r2,14(r20)
80091bbc:	103f5216 	blt	r2,zero,80091908 <___vfiprintf_internal_r+0x88>
80091bc0:	d9c02217 	ldw	r7,136(sp)
80091bc4:	d9002017 	ldw	r4,128(sp)
80091bc8:	e00d883a 	mov	r6,fp
80091bcc:	a00b883a 	mov	r5,r20
80091bd0:	0092cf80 	call	80092cf8 <__sbprintf>
80091bd4:	dfc03617 	ldw	ra,216(sp)
80091bd8:	df003517 	ldw	fp,212(sp)
80091bdc:	ddc03417 	ldw	r23,208(sp)
80091be0:	dd803317 	ldw	r22,204(sp)
80091be4:	dd403217 	ldw	r21,200(sp)
80091be8:	dd003117 	ldw	r20,196(sp)
80091bec:	dcc03017 	ldw	r19,192(sp)
80091bf0:	dc802f17 	ldw	r18,188(sp)
80091bf4:	dc402e17 	ldw	r17,184(sp)
80091bf8:	dc002d17 	ldw	r16,180(sp)
80091bfc:	dec03704 	addi	sp,sp,220
80091c00:	f800283a 	ret
80091c04:	0088e4c0 	call	80088e4c <__sinit>
80091c08:	003f2f06 	br	800918c8 <___vfiprintf_internal_r+0x48>
80091c0c:	0463c83a 	sub	r17,zero,r17
80091c10:	d8802215 	stw	r2,136(sp)
80091c14:	a5000114 	ori	r20,r20,4
80091c18:	80c00007 	ldb	r3,0(r16)
80091c1c:	003f7706 	br	800919fc <___vfiprintf_internal_r+0x17c>
80091c20:	00800c04 	movi	r2,48
80091c24:	da802217 	ldw	r10,136(sp)
80091c28:	d8801d05 	stb	r2,116(sp)
80091c2c:	00801e04 	movi	r2,120
80091c30:	d8801d45 	stb	r2,117(sp)
80091c34:	d8001d85 	stb	zero,118(sp)
80091c38:	50c00104 	addi	r3,r10,4
80091c3c:	54800017 	ldw	r18,0(r10)
80091c40:	0027883a 	mov	r19,zero
80091c44:	a0800094 	ori	r2,r20,2
80091c48:	48030b16 	blt	r9,zero,80092878 <___vfiprintf_internal_r+0xff8>
80091c4c:	00bfdfc4 	movi	r2,-129
80091c50:	a096703a 	and	r11,r20,r2
80091c54:	d8c02215 	stw	r3,136(sp)
80091c58:	5d000094 	ori	r20,r11,2
80091c5c:	90032b1e 	bne	r18,zero,8009290c <___vfiprintf_internal_r+0x108c>
80091c60:	00a002b4 	movhi	r2,32778
80091c64:	10b0c404 	addi	r2,r2,-15600
80091c68:	d8802615 	stw	r2,152(sp)
80091c6c:	0039883a 	mov	fp,zero
80091c70:	48017b1e 	bne	r9,zero,80092260 <___vfiprintf_internal_r+0x9e0>
80091c74:	0013883a 	mov	r9,zero
80091c78:	0027883a 	mov	r19,zero
80091c7c:	dd401a04 	addi	r21,sp,104
80091c80:	4825883a 	mov	r18,r9
80091c84:	4cc0010e 	bge	r9,r19,80091c8c <___vfiprintf_internal_r+0x40c>
80091c88:	9825883a 	mov	r18,r19
80091c8c:	e7003fcc 	andi	fp,fp,255
80091c90:	e700201c 	xori	fp,fp,128
80091c94:	e73fe004 	addi	fp,fp,-128
80091c98:	e0000126 	beq	fp,zero,80091ca0 <___vfiprintf_internal_r+0x420>
80091c9c:	94800044 	addi	r18,r18,1
80091ca0:	a380008c 	andi	r14,r20,2
80091ca4:	70000126 	beq	r14,zero,80091cac <___vfiprintf_internal_r+0x42c>
80091ca8:	94800084 	addi	r18,r18,2
80091cac:	a700210c 	andi	fp,r20,132
80091cb0:	e001df1e 	bne	fp,zero,80092430 <___vfiprintf_internal_r+0xbb0>
80091cb4:	8c87c83a 	sub	r3,r17,r18
80091cb8:	00c1dd0e 	bge	zero,r3,80092430 <___vfiprintf_internal_r+0xbb0>
80091cbc:	01c00404 	movi	r7,16
80091cc0:	d8801c17 	ldw	r2,112(sp)
80091cc4:	38c3ad0e 	bge	r7,r3,80092b7c <___vfiprintf_internal_r+0x12fc>
80091cc8:	02a002b4 	movhi	r10,32778
80091ccc:	52b1f084 	addi	r10,r10,-14398
80091cd0:	dc002915 	stw	r16,164(sp)
80091cd4:	d9801b17 	ldw	r6,108(sp)
80091cd8:	da802415 	stw	r10,144(sp)
80091cdc:	03c001c4 	movi	r15,7
80091ce0:	da402515 	stw	r9,148(sp)
80091ce4:	db802815 	stw	r14,160(sp)
80091ce8:	1821883a 	mov	r16,r3
80091cec:	00000506 	br	80091d04 <___vfiprintf_internal_r+0x484>
80091cf0:	31400084 	addi	r5,r6,2
80091cf4:	42000204 	addi	r8,r8,8
80091cf8:	200d883a 	mov	r6,r4
80091cfc:	843ffc04 	addi	r16,r16,-16
80091d00:	3c000d0e 	bge	r7,r16,80091d38 <___vfiprintf_internal_r+0x4b8>
80091d04:	10800404 	addi	r2,r2,16
80091d08:	31000044 	addi	r4,r6,1
80091d0c:	45800015 	stw	r22,0(r8)
80091d10:	41c00115 	stw	r7,4(r8)
80091d14:	d8801c15 	stw	r2,112(sp)
80091d18:	d9001b15 	stw	r4,108(sp)
80091d1c:	793ff40e 	bge	r15,r4,80091cf0 <___vfiprintf_internal_r+0x470>
80091d20:	1001b51e 	bne	r2,zero,800923f8 <___vfiprintf_internal_r+0xb78>
80091d24:	843ffc04 	addi	r16,r16,-16
80091d28:	000d883a 	mov	r6,zero
80091d2c:	01400044 	movi	r5,1
80091d30:	d811883a 	mov	r8,sp
80091d34:	3c3ff316 	blt	r7,r16,80091d04 <___vfiprintf_internal_r+0x484>
80091d38:	8007883a 	mov	r3,r16
80091d3c:	da402517 	ldw	r9,148(sp)
80091d40:	db802817 	ldw	r14,160(sp)
80091d44:	dc002917 	ldw	r16,164(sp)
80091d48:	da802417 	ldw	r10,144(sp)
80091d4c:	1885883a 	add	r2,r3,r2
80091d50:	40c00115 	stw	r3,4(r8)
80091d54:	42800015 	stw	r10,0(r8)
80091d58:	d8801c15 	stw	r2,112(sp)
80091d5c:	d9401b15 	stw	r5,108(sp)
80091d60:	00c001c4 	movi	r3,7
80091d64:	19426016 	blt	r3,r5,800926e8 <___vfiprintf_internal_r+0xe68>
80091d68:	d8c01d87 	ldb	r3,118(sp)
80091d6c:	42000204 	addi	r8,r8,8
80091d70:	29000044 	addi	r4,r5,1
80091d74:	1801b31e 	bne	r3,zero,80092444 <___vfiprintf_internal_r+0xbc4>
80091d78:	7001c026 	beq	r14,zero,8009247c <___vfiprintf_internal_r+0xbfc>
80091d7c:	d8c01d04 	addi	r3,sp,116
80091d80:	10800084 	addi	r2,r2,2
80091d84:	40c00015 	stw	r3,0(r8)
80091d88:	00c00084 	movi	r3,2
80091d8c:	40c00115 	stw	r3,4(r8)
80091d90:	d8801c15 	stw	r2,112(sp)
80091d94:	d9001b15 	stw	r4,108(sp)
80091d98:	00c001c4 	movi	r3,7
80091d9c:	1902650e 	bge	r3,r4,80092734 <___vfiprintf_internal_r+0xeb4>
80091da0:	10029a1e 	bne	r2,zero,8009280c <___vfiprintf_internal_r+0xf8c>
80091da4:	00c02004 	movi	r3,128
80091da8:	01000044 	movi	r4,1
80091dac:	000b883a 	mov	r5,zero
80091db0:	d811883a 	mov	r8,sp
80091db4:	e0c1b31e 	bne	fp,r3,80092484 <___vfiprintf_internal_r+0xc04>
80091db8:	8cb9c83a 	sub	fp,r17,r18
80091dbc:	0701b10e 	bge	zero,fp,80092484 <___vfiprintf_internal_r+0xc04>
80091dc0:	01c00404 	movi	r7,16
80091dc4:	3f03890e 	bge	r7,fp,80092bec <___vfiprintf_internal_r+0x136c>
80091dc8:	00e002b4 	movhi	r3,32778
80091dcc:	18f1ec84 	addi	r3,r3,-14414
80091dd0:	d8c02415 	stw	r3,144(sp)
80091dd4:	8007883a 	mov	r3,r16
80091dd8:	034001c4 	movi	r13,7
80091ddc:	e021883a 	mov	r16,fp
80091de0:	da402515 	stw	r9,148(sp)
80091de4:	1839883a 	mov	fp,r3
80091de8:	00000506 	br	80091e00 <___vfiprintf_internal_r+0x580>
80091dec:	29800084 	addi	r6,r5,2
80091df0:	42000204 	addi	r8,r8,8
80091df4:	180b883a 	mov	r5,r3
80091df8:	843ffc04 	addi	r16,r16,-16
80091dfc:	3c000d0e 	bge	r7,r16,80091e34 <___vfiprintf_internal_r+0x5b4>
80091e00:	10800404 	addi	r2,r2,16
80091e04:	28c00044 	addi	r3,r5,1
80091e08:	45c00015 	stw	r23,0(r8)
80091e0c:	41c00115 	stw	r7,4(r8)
80091e10:	d8801c15 	stw	r2,112(sp)
80091e14:	d8c01b15 	stw	r3,108(sp)
80091e18:	68fff40e 	bge	r13,r3,80091dec <___vfiprintf_internal_r+0x56c>
80091e1c:	1002241e 	bne	r2,zero,800926b0 <___vfiprintf_internal_r+0xe30>
80091e20:	843ffc04 	addi	r16,r16,-16
80091e24:	01800044 	movi	r6,1
80091e28:	000b883a 	mov	r5,zero
80091e2c:	d811883a 	mov	r8,sp
80091e30:	3c3ff316 	blt	r7,r16,80091e00 <___vfiprintf_internal_r+0x580>
80091e34:	da402517 	ldw	r9,148(sp)
80091e38:	e007883a 	mov	r3,fp
80091e3c:	8039883a 	mov	fp,r16
80091e40:	1821883a 	mov	r16,r3
80091e44:	d8c02417 	ldw	r3,144(sp)
80091e48:	1705883a 	add	r2,r2,fp
80091e4c:	47000115 	stw	fp,4(r8)
80091e50:	40c00015 	stw	r3,0(r8)
80091e54:	d8801c15 	stw	r2,112(sp)
80091e58:	d9801b15 	stw	r6,108(sp)
80091e5c:	00c001c4 	movi	r3,7
80091e60:	19827616 	blt	r3,r6,8009283c <___vfiprintf_internal_r+0xfbc>
80091e64:	4cf9c83a 	sub	fp,r9,r19
80091e68:	42000204 	addi	r8,r8,8
80091e6c:	31000044 	addi	r4,r6,1
80091e70:	300b883a 	mov	r5,r6
80091e74:	07018516 	blt	zero,fp,8009248c <___vfiprintf_internal_r+0xc0c>
80091e78:	9885883a 	add	r2,r19,r2
80091e7c:	45400015 	stw	r21,0(r8)
80091e80:	44c00115 	stw	r19,4(r8)
80091e84:	d8801c15 	stw	r2,112(sp)
80091e88:	d9001b15 	stw	r4,108(sp)
80091e8c:	00c001c4 	movi	r3,7
80091e90:	1901dd0e 	bge	r3,r4,80092608 <___vfiprintf_internal_r+0xd88>
80091e94:	1002401e 	bne	r2,zero,80092798 <___vfiprintf_internal_r+0xf18>
80091e98:	d8001b15 	stw	zero,108(sp)
80091e9c:	a2c0010c 	andi	r11,r20,4
80091ea0:	58000226 	beq	r11,zero,80091eac <___vfiprintf_internal_r+0x62c>
80091ea4:	8ca7c83a 	sub	r19,r17,r18
80091ea8:	04c2f216 	blt	zero,r19,80092a74 <___vfiprintf_internal_r+0x11f4>
80091eac:	8c80010e 	bge	r17,r18,80091eb4 <___vfiprintf_internal_r+0x634>
80091eb0:	9023883a 	mov	r17,r18
80091eb4:	da802317 	ldw	r10,140(sp)
80091eb8:	5455883a 	add	r10,r10,r17
80091ebc:	da802315 	stw	r10,140(sp)
80091ec0:	d8001b15 	stw	zero,108(sp)
80091ec4:	d811883a 	mov	r8,sp
80091ec8:	003ea206 	br	80091954 <___vfiprintf_internal_r+0xd4>
80091ecc:	a5000814 	ori	r20,r20,32
80091ed0:	80c00007 	ldb	r3,0(r16)
80091ed4:	003ec906 	br	800919fc <___vfiprintf_internal_r+0x17c>
80091ed8:	80c00007 	ldb	r3,0(r16)
80091edc:	1b030926 	beq	r3,r12,80092b04 <___vfiprintf_internal_r+0x1284>
80091ee0:	a5000414 	ori	r20,r20,16
80091ee4:	003ec506 	br	800919fc <___vfiprintf_internal_r+0x17c>
80091ee8:	21003fcc 	andi	r4,r4,255
80091eec:	20035e1e 	bne	r4,zero,80092c68 <___vfiprintf_internal_r+0x13e8>
80091ef0:	a080080c 	andi	r2,r20,32
80091ef4:	1002a526 	beq	r2,zero,8009298c <___vfiprintf_internal_r+0x110c>
80091ef8:	da802217 	ldw	r10,136(sp)
80091efc:	50800017 	ldw	r2,0(r10)
80091f00:	da802317 	ldw	r10,140(sp)
80091f04:	5007d7fa 	srai	r3,r10,31
80091f08:	da802217 	ldw	r10,136(sp)
80091f0c:	10c00115 	stw	r3,4(r2)
80091f10:	52800104 	addi	r10,r10,4
80091f14:	da802215 	stw	r10,136(sp)
80091f18:	da802317 	ldw	r10,140(sp)
80091f1c:	12800015 	stw	r10,0(r2)
80091f20:	003e8c06 	br	80091954 <___vfiprintf_internal_r+0xd4>
80091f24:	21003fcc 	andi	r4,r4,255
80091f28:	2003511e 	bne	r4,zero,80092c70 <___vfiprintf_internal_r+0x13f0>
80091f2c:	a080080c 	andi	r2,r20,32
80091f30:	1000a126 	beq	r2,zero,800921b8 <___vfiprintf_internal_r+0x938>
80091f34:	da802217 	ldw	r10,136(sp)
80091f38:	d8001d85 	stb	zero,118(sp)
80091f3c:	50800204 	addi	r2,r10,8
80091f40:	54800017 	ldw	r18,0(r10)
80091f44:	54c00117 	ldw	r19,4(r10)
80091f48:	4802b416 	blt	r9,zero,80092a1c <___vfiprintf_internal_r+0x119c>
80091f4c:	013fdfc4 	movi	r4,-129
80091f50:	94c6b03a 	or	r3,r18,r19
80091f54:	d8802215 	stw	r2,136(sp)
80091f58:	a128703a 	and	r20,r20,r4
80091f5c:	1800a226 	beq	r3,zero,800921e8 <___vfiprintf_internal_r+0x968>
80091f60:	0039883a 	mov	fp,zero
80091f64:	dd401a04 	addi	r21,sp,104
80091f68:	9006d0fa 	srli	r3,r18,3
80091f6c:	9808977a 	slli	r4,r19,29
80091f70:	9826d0fa 	srli	r19,r19,3
80091f74:	948001cc 	andi	r18,r18,7
80091f78:	90800c04 	addi	r2,r18,48
80091f7c:	ad7fffc4 	addi	r21,r21,-1
80091f80:	20e4b03a 	or	r18,r4,r3
80091f84:	a8800005 	stb	r2,0(r21)
80091f88:	94c6b03a 	or	r3,r18,r19
80091f8c:	183ff61e 	bne	r3,zero,80091f68 <___vfiprintf_internal_r+0x6e8>
80091f90:	a0c0004c 	andi	r3,r20,1
80091f94:	18005926 	beq	r3,zero,800920fc <___vfiprintf_internal_r+0x87c>
80091f98:	10803fcc 	andi	r2,r2,255
80091f9c:	1080201c 	xori	r2,r2,128
80091fa0:	10bfe004 	addi	r2,r2,-128
80091fa4:	00c00c04 	movi	r3,48
80091fa8:	10c05426 	beq	r2,r3,800920fc <___vfiprintf_internal_r+0x87c>
80091fac:	da801e17 	ldw	r10,120(sp)
80091fb0:	a8bfffc4 	addi	r2,r21,-1
80091fb4:	a8ffffc5 	stb	r3,-1(r21)
80091fb8:	50a7c83a 	sub	r19,r10,r2
80091fbc:	102b883a 	mov	r21,r2
80091fc0:	003f2f06 	br	80091c80 <___vfiprintf_internal_r+0x400>
80091fc4:	21003fcc 	andi	r4,r4,255
80091fc8:	2003421e 	bne	r4,zero,80092cd4 <___vfiprintf_internal_r+0x1454>
80091fcc:	00a002b4 	movhi	r2,32778
80091fd0:	10b0c404 	addi	r2,r2,-15600
80091fd4:	d8802615 	stw	r2,152(sp)
80091fd8:	a080080c 	andi	r2,r20,32
80091fdc:	1000aa26 	beq	r2,zero,80092288 <___vfiprintf_internal_r+0xa08>
80091fe0:	da802217 	ldw	r10,136(sp)
80091fe4:	54800017 	ldw	r18,0(r10)
80091fe8:	54c00117 	ldw	r19,4(r10)
80091fec:	52800204 	addi	r10,r10,8
80091ff0:	da802215 	stw	r10,136(sp)
80091ff4:	a080004c 	andi	r2,r20,1
80091ff8:	1001d226 	beq	r2,zero,80092744 <___vfiprintf_internal_r+0xec4>
80091ffc:	94c4b03a 	or	r2,r18,r19
80092000:	1002351e 	bne	r2,zero,800928d8 <___vfiprintf_internal_r+0x1058>
80092004:	d8001d85 	stb	zero,118(sp)
80092008:	48022216 	blt	r9,zero,80092894 <___vfiprintf_internal_r+0x1014>
8009200c:	00bfdfc4 	movi	r2,-129
80092010:	a0a8703a 	and	r20,r20,r2
80092014:	003f1506 	br	80091c6c <___vfiprintf_internal_r+0x3ec>
80092018:	da802217 	ldw	r10,136(sp)
8009201c:	04800044 	movi	r18,1
80092020:	d8001d85 	stb	zero,118(sp)
80092024:	50800017 	ldw	r2,0(r10)
80092028:	52800104 	addi	r10,r10,4
8009202c:	da802215 	stw	r10,136(sp)
80092030:	d8801005 	stb	r2,64(sp)
80092034:	9027883a 	mov	r19,r18
80092038:	dd401004 	addi	r21,sp,64
8009203c:	0013883a 	mov	r9,zero
80092040:	003f1706 	br	80091ca0 <___vfiprintf_internal_r+0x420>
80092044:	21003fcc 	andi	r4,r4,255
80092048:	2003201e 	bne	r4,zero,80092ccc <___vfiprintf_internal_r+0x144c>
8009204c:	a080080c 	andi	r2,r20,32
80092050:	10004b26 	beq	r2,zero,80092180 <___vfiprintf_internal_r+0x900>
80092054:	da802217 	ldw	r10,136(sp)
80092058:	50800117 	ldw	r2,4(r10)
8009205c:	54800017 	ldw	r18,0(r10)
80092060:	52800204 	addi	r10,r10,8
80092064:	da802215 	stw	r10,136(sp)
80092068:	1027883a 	mov	r19,r2
8009206c:	10022c16 	blt	r2,zero,80092920 <___vfiprintf_internal_r+0x10a0>
80092070:	df001d83 	ldbu	fp,118(sp)
80092074:	48007216 	blt	r9,zero,80092240 <___vfiprintf_internal_r+0x9c0>
80092078:	00ffdfc4 	movi	r3,-129
8009207c:	94c4b03a 	or	r2,r18,r19
80092080:	a0e8703a 	and	r20,r20,r3
80092084:	1000cc26 	beq	r2,zero,800923b8 <___vfiprintf_internal_r+0xb38>
80092088:	98021026 	beq	r19,zero,800928cc <___vfiprintf_internal_r+0x104c>
8009208c:	dc402415 	stw	r17,144(sp)
80092090:	dc002515 	stw	r16,148(sp)
80092094:	9823883a 	mov	r17,r19
80092098:	9021883a 	mov	r16,r18
8009209c:	dd401a04 	addi	r21,sp,104
800920a0:	4825883a 	mov	r18,r9
800920a4:	4027883a 	mov	r19,r8
800920a8:	8009883a 	mov	r4,r16
800920ac:	880b883a 	mov	r5,r17
800920b0:	01800284 	movi	r6,10
800920b4:	000f883a 	mov	r7,zero
800920b8:	0095bc80 	call	80095bc8 <__umoddi3>
800920bc:	10800c04 	addi	r2,r2,48
800920c0:	ad7fffc4 	addi	r21,r21,-1
800920c4:	8009883a 	mov	r4,r16
800920c8:	880b883a 	mov	r5,r17
800920cc:	a8800005 	stb	r2,0(r21)
800920d0:	01800284 	movi	r6,10
800920d4:	000f883a 	mov	r7,zero
800920d8:	00956500 	call	80095650 <__udivdi3>
800920dc:	1021883a 	mov	r16,r2
800920e0:	10c4b03a 	or	r2,r2,r3
800920e4:	1823883a 	mov	r17,r3
800920e8:	103fef1e 	bne	r2,zero,800920a8 <___vfiprintf_internal_r+0x828>
800920ec:	dc402417 	ldw	r17,144(sp)
800920f0:	dc002517 	ldw	r16,148(sp)
800920f4:	9013883a 	mov	r9,r18
800920f8:	9811883a 	mov	r8,r19
800920fc:	da801e17 	ldw	r10,120(sp)
80092100:	5567c83a 	sub	r19,r10,r21
80092104:	003ede06 	br	80091c80 <___vfiprintf_internal_r+0x400>
80092108:	38803fcc 	andi	r2,r7,255
8009210c:	1080201c 	xori	r2,r2,128
80092110:	10bfe004 	addi	r2,r2,-128
80092114:	1002371e 	bne	r2,zero,800929f4 <___vfiprintf_internal_r+0x1174>
80092118:	01000044 	movi	r4,1
8009211c:	01c00804 	movi	r7,32
80092120:	80c00007 	ldb	r3,0(r16)
80092124:	003e3506 	br	800919fc <___vfiprintf_internal_r+0x17c>
80092128:	a5000054 	ori	r20,r20,1
8009212c:	80c00007 	ldb	r3,0(r16)
80092130:	003e3206 	br	800919fc <___vfiprintf_internal_r+0x17c>
80092134:	a5002014 	ori	r20,r20,128
80092138:	80c00007 	ldb	r3,0(r16)
8009213c:	003e2f06 	br	800919fc <___vfiprintf_internal_r+0x17c>
80092140:	8015883a 	mov	r10,r16
80092144:	0023883a 	mov	r17,zero
80092148:	18bff404 	addi	r2,r3,-48
8009214c:	50c00007 	ldb	r3,0(r10)
80092150:	8c4002a4 	muli	r17,r17,10
80092154:	84000044 	addi	r16,r16,1
80092158:	8015883a 	mov	r10,r16
8009215c:	1463883a 	add	r17,r2,r17
80092160:	18bff404 	addi	r2,r3,-48
80092164:	30bff92e 	bgeu	r6,r2,8009214c <___vfiprintf_internal_r+0x8cc>
80092168:	003e2506 	br	80091a00 <___vfiprintf_internal_r+0x180>
8009216c:	21003fcc 	andi	r4,r4,255
80092170:	2002d41e 	bne	r4,zero,80092cc4 <___vfiprintf_internal_r+0x1444>
80092174:	a5000414 	ori	r20,r20,16
80092178:	a080080c 	andi	r2,r20,32
8009217c:	103fb51e 	bne	r2,zero,80092054 <___vfiprintf_internal_r+0x7d4>
80092180:	a080040c 	andi	r2,r20,16
80092184:	1001f826 	beq	r2,zero,80092968 <___vfiprintf_internal_r+0x10e8>
80092188:	da802217 	ldw	r10,136(sp)
8009218c:	54800017 	ldw	r18,0(r10)
80092190:	52800104 	addi	r10,r10,4
80092194:	da802215 	stw	r10,136(sp)
80092198:	9027d7fa 	srai	r19,r18,31
8009219c:	9805883a 	mov	r2,r19
800921a0:	003fb206 	br	8009206c <___vfiprintf_internal_r+0x7ec>
800921a4:	21003fcc 	andi	r4,r4,255
800921a8:	2002c41e 	bne	r4,zero,80092cbc <___vfiprintf_internal_r+0x143c>
800921ac:	a5000414 	ori	r20,r20,16
800921b0:	a080080c 	andi	r2,r20,32
800921b4:	103f5f1e 	bne	r2,zero,80091f34 <___vfiprintf_internal_r+0x6b4>
800921b8:	a080040c 	andi	r2,r20,16
800921bc:	10020f26 	beq	r2,zero,800929fc <___vfiprintf_internal_r+0x117c>
800921c0:	da802217 	ldw	r10,136(sp)
800921c4:	d8001d85 	stb	zero,118(sp)
800921c8:	0027883a 	mov	r19,zero
800921cc:	50800104 	addi	r2,r10,4
800921d0:	54800017 	ldw	r18,0(r10)
800921d4:	48021116 	blt	r9,zero,80092a1c <___vfiprintf_internal_r+0x119c>
800921d8:	00ffdfc4 	movi	r3,-129
800921dc:	d8802215 	stw	r2,136(sp)
800921e0:	a0e8703a 	and	r20,r20,r3
800921e4:	903f5e1e 	bne	r18,zero,80091f60 <___vfiprintf_internal_r+0x6e0>
800921e8:	0039883a 	mov	fp,zero
800921ec:	4802a626 	beq	r9,zero,80092c88 <___vfiprintf_internal_r+0x1408>
800921f0:	0025883a 	mov	r18,zero
800921f4:	0027883a 	mov	r19,zero
800921f8:	003f5a06 	br	80091f64 <___vfiprintf_internal_r+0x6e4>
800921fc:	21003fcc 	andi	r4,r4,255
80092200:	20029f1e 	bne	r4,zero,80092c80 <___vfiprintf_internal_r+0x1400>
80092204:	a5000414 	ori	r20,r20,16
80092208:	a080080c 	andi	r2,r20,32
8009220c:	10005e1e 	bne	r2,zero,80092388 <___vfiprintf_internal_r+0xb08>
80092210:	a080040c 	andi	r2,r20,16
80092214:	1001a21e 	bne	r2,zero,800928a0 <___vfiprintf_internal_r+0x1020>
80092218:	a080100c 	andi	r2,r20,64
8009221c:	d8001d85 	stb	zero,118(sp)
80092220:	da802217 	ldw	r10,136(sp)
80092224:	1002231e 	bne	r2,zero,80092ab4 <___vfiprintf_internal_r+0x1234>
80092228:	50800104 	addi	r2,r10,4
8009222c:	54800017 	ldw	r18,0(r10)
80092230:	0027883a 	mov	r19,zero
80092234:	4801a00e 	bge	r9,zero,800928b8 <___vfiprintf_internal_r+0x1038>
80092238:	d8802215 	stw	r2,136(sp)
8009223c:	0039883a 	mov	fp,zero
80092240:	94c4b03a 	or	r2,r18,r19
80092244:	103f901e 	bne	r2,zero,80092088 <___vfiprintf_internal_r+0x808>
80092248:	00800044 	movi	r2,1
8009224c:	10803fcc 	andi	r2,r2,255
80092250:	00c00044 	movi	r3,1
80092254:	10c05926 	beq	r2,r3,800923bc <___vfiprintf_internal_r+0xb3c>
80092258:	00c00084 	movi	r3,2
8009225c:	10ffe41e 	bne	r2,r3,800921f0 <___vfiprintf_internal_r+0x970>
80092260:	0025883a 	mov	r18,zero
80092264:	0027883a 	mov	r19,zero
80092268:	00013d06 	br	80092760 <___vfiprintf_internal_r+0xee0>
8009226c:	21003fcc 	andi	r4,r4,255
80092270:	2002811e 	bne	r4,zero,80092c78 <___vfiprintf_internal_r+0x13f8>
80092274:	00a002b4 	movhi	r2,32778
80092278:	10b0bf04 	addi	r2,r2,-15620
8009227c:	d8802615 	stw	r2,152(sp)
80092280:	a080080c 	andi	r2,r20,32
80092284:	103f561e 	bne	r2,zero,80091fe0 <___vfiprintf_internal_r+0x760>
80092288:	a080040c 	andi	r2,r20,16
8009228c:	1001d126 	beq	r2,zero,800929d4 <___vfiprintf_internal_r+0x1154>
80092290:	da802217 	ldw	r10,136(sp)
80092294:	0027883a 	mov	r19,zero
80092298:	54800017 	ldw	r18,0(r10)
8009229c:	52800104 	addi	r10,r10,4
800922a0:	da802215 	stw	r10,136(sp)
800922a4:	003f5306 	br	80091ff4 <___vfiprintf_internal_r+0x774>
800922a8:	da802217 	ldw	r10,136(sp)
800922ac:	d8001d85 	stb	zero,118(sp)
800922b0:	55400017 	ldw	r21,0(r10)
800922b4:	50c00104 	addi	r3,r10,4
800922b8:	a8024226 	beq	r21,zero,80092bc4 <___vfiprintf_internal_r+0x1344>
800922bc:	48021816 	blt	r9,zero,80092b20 <___vfiprintf_internal_r+0x12a0>
800922c0:	480d883a 	mov	r6,r9
800922c4:	000b883a 	mov	r5,zero
800922c8:	a809883a 	mov	r4,r21
800922cc:	d8c02a15 	stw	r3,168(sp)
800922d0:	da002b15 	stw	r8,172(sp)
800922d4:	da402c15 	stw	r9,176(sp)
800922d8:	0089e600 	call	80089e60 <memchr>
800922dc:	d8c02a17 	ldw	r3,168(sp)
800922e0:	da002b17 	ldw	r8,172(sp)
800922e4:	da402c17 	ldw	r9,176(sp)
800922e8:	10024826 	beq	r2,zero,80092c0c <___vfiprintf_internal_r+0x138c>
800922ec:	1567c83a 	sub	r19,r2,r21
800922f0:	df001d83 	ldbu	fp,118(sp)
800922f4:	d8c02215 	stw	r3,136(sp)
800922f8:	0013883a 	mov	r9,zero
800922fc:	003e6006 	br	80091c80 <___vfiprintf_internal_r+0x400>
80092300:	21003fcc 	andi	r4,r4,255
80092304:	203fc026 	beq	r4,zero,80092208 <___vfiprintf_internal_r+0x988>
80092308:	d9c01d85 	stb	r7,118(sp)
8009230c:	003fbe06 	br	80092208 <___vfiprintf_internal_r+0x988>
80092310:	da802217 	ldw	r10,136(sp)
80092314:	54400017 	ldw	r17,0(r10)
80092318:	50800104 	addi	r2,r10,4
8009231c:	883e3b16 	blt	r17,zero,80091c0c <___vfiprintf_internal_r+0x38c>
80092320:	d8802215 	stw	r2,136(sp)
80092324:	80c00007 	ldb	r3,0(r16)
80092328:	003db406 	br	800919fc <___vfiprintf_internal_r+0x17c>
8009232c:	01000044 	movi	r4,1
80092330:	01c00ac4 	movi	r7,43
80092334:	80c00007 	ldb	r3,0(r16)
80092338:	003db006 	br	800919fc <___vfiprintf_internal_r+0x17c>
8009233c:	80c00007 	ldb	r3,0(r16)
80092340:	82800044 	addi	r10,r16,1
80092344:	1b423c26 	beq	r3,r13,80092c38 <___vfiprintf_internal_r+0x13b8>
80092348:	18bff404 	addi	r2,r3,-48
8009234c:	0013883a 	mov	r9,zero
80092350:	30822b36 	bltu	r6,r2,80092c00 <___vfiprintf_internal_r+0x1380>
80092354:	50c00007 	ldb	r3,0(r10)
80092358:	4a4002a4 	muli	r9,r9,10
8009235c:	54000044 	addi	r16,r10,1
80092360:	8015883a 	mov	r10,r16
80092364:	4893883a 	add	r9,r9,r2
80092368:	18bff404 	addi	r2,r3,-48
8009236c:	30bff92e 	bgeu	r6,r2,80092354 <___vfiprintf_internal_r+0xad4>
80092370:	483da30e 	bge	r9,zero,80091a00 <___vfiprintf_internal_r+0x180>
80092374:	027fffc4 	movi	r9,-1
80092378:	003da106 	br	80091a00 <___vfiprintf_internal_r+0x180>
8009237c:	a5001014 	ori	r20,r20,64
80092380:	80c00007 	ldb	r3,0(r16)
80092384:	003d9d06 	br	800919fc <___vfiprintf_internal_r+0x17c>
80092388:	da802217 	ldw	r10,136(sp)
8009238c:	d8001d85 	stb	zero,118(sp)
80092390:	50c00204 	addi	r3,r10,8
80092394:	54800017 	ldw	r18,0(r10)
80092398:	54c00117 	ldw	r19,4(r10)
8009239c:	4801ca16 	blt	r9,zero,80092ac8 <___vfiprintf_internal_r+0x1248>
800923a0:	013fdfc4 	movi	r4,-129
800923a4:	94c4b03a 	or	r2,r18,r19
800923a8:	d8c02215 	stw	r3,136(sp)
800923ac:	a128703a 	and	r20,r20,r4
800923b0:	0039883a 	mov	fp,zero
800923b4:	103f341e 	bne	r2,zero,80092088 <___vfiprintf_internal_r+0x808>
800923b8:	483e2e26 	beq	r9,zero,80091c74 <___vfiprintf_internal_r+0x3f4>
800923bc:	0025883a 	mov	r18,zero
800923c0:	94800c04 	addi	r18,r18,48
800923c4:	dc8019c5 	stb	r18,103(sp)
800923c8:	dcc02717 	ldw	r19,156(sp)
800923cc:	dd4019c4 	addi	r21,sp,103
800923d0:	003e2b06 	br	80091c80 <___vfiprintf_internal_r+0x400>
800923d4:	21003fcc 	andi	r4,r4,255
800923d8:	2002361e 	bne	r4,zero,80092cb4 <___vfiprintf_internal_r+0x1434>
800923dc:	1801c126 	beq	r3,zero,80092ae4 <___vfiprintf_internal_r+0x1264>
800923e0:	04800044 	movi	r18,1
800923e4:	d8c01005 	stb	r3,64(sp)
800923e8:	d8001d85 	stb	zero,118(sp)
800923ec:	9027883a 	mov	r19,r18
800923f0:	dd401004 	addi	r21,sp,64
800923f4:	003f1106 	br	8009203c <___vfiprintf_internal_r+0x7bc>
800923f8:	d9402117 	ldw	r5,132(sp)
800923fc:	d9002017 	ldw	r4,128(sp)
80092400:	d9801a04 	addi	r6,sp,104
80092404:	d9c02b15 	stw	r7,172(sp)
80092408:	dbc02a15 	stw	r15,168(sp)
8009240c:	009176c0 	call	8009176c <__sprint_r.part.0>
80092410:	d9c02b17 	ldw	r7,172(sp)
80092414:	dbc02a17 	ldw	r15,168(sp)
80092418:	10006d1e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
8009241c:	d9801b17 	ldw	r6,108(sp)
80092420:	d8801c17 	ldw	r2,112(sp)
80092424:	d811883a 	mov	r8,sp
80092428:	31400044 	addi	r5,r6,1
8009242c:	003e3306 	br	80091cfc <___vfiprintf_internal_r+0x47c>
80092430:	d9401b17 	ldw	r5,108(sp)
80092434:	d8801c17 	ldw	r2,112(sp)
80092438:	29000044 	addi	r4,r5,1
8009243c:	d8c01d87 	ldb	r3,118(sp)
80092440:	183e4d26 	beq	r3,zero,80091d78 <___vfiprintf_internal_r+0x4f8>
80092444:	00c00044 	movi	r3,1
80092448:	d9401d84 	addi	r5,sp,118
8009244c:	10c5883a 	add	r2,r2,r3
80092450:	41400015 	stw	r5,0(r8)
80092454:	40c00115 	stw	r3,4(r8)
80092458:	d8801c15 	stw	r2,112(sp)
8009245c:	d9001b15 	stw	r4,108(sp)
80092460:	014001c4 	movi	r5,7
80092464:	2900a90e 	bge	r5,r4,8009270c <___vfiprintf_internal_r+0xe8c>
80092468:	1000da1e 	bne	r2,zero,800927d4 <___vfiprintf_internal_r+0xf54>
8009246c:	7000ab1e 	bne	r14,zero,8009271c <___vfiprintf_internal_r+0xe9c>
80092470:	000b883a 	mov	r5,zero
80092474:	1809883a 	mov	r4,r3
80092478:	d811883a 	mov	r8,sp
8009247c:	00c02004 	movi	r3,128
80092480:	e0fe4d26 	beq	fp,r3,80091db8 <___vfiprintf_internal_r+0x538>
80092484:	4cf9c83a 	sub	fp,r9,r19
80092488:	073e7b0e 	bge	zero,fp,80091e78 <___vfiprintf_internal_r+0x5f8>
8009248c:	01c00404 	movi	r7,16
80092490:	3f01900e 	bge	r7,fp,80092ad4 <___vfiprintf_internal_r+0x1254>
80092494:	00e002b4 	movhi	r3,32778
80092498:	18f1ec84 	addi	r3,r3,-14414
8009249c:	d8c02415 	stw	r3,144(sp)
800924a0:	034001c4 	movi	r13,7
800924a4:	00000506 	br	800924bc <___vfiprintf_internal_r+0xc3c>
800924a8:	29000084 	addi	r4,r5,2
800924ac:	42000204 	addi	r8,r8,8
800924b0:	180b883a 	mov	r5,r3
800924b4:	e73ffc04 	addi	fp,fp,-16
800924b8:	3f000d0e 	bge	r7,fp,800924f0 <___vfiprintf_internal_r+0xc70>
800924bc:	10800404 	addi	r2,r2,16
800924c0:	28c00044 	addi	r3,r5,1
800924c4:	45c00015 	stw	r23,0(r8)
800924c8:	41c00115 	stw	r7,4(r8)
800924cc:	d8801c15 	stw	r2,112(sp)
800924d0:	d8c01b15 	stw	r3,108(sp)
800924d4:	68fff40e 	bge	r13,r3,800924a8 <___vfiprintf_internal_r+0xc28>
800924d8:	1000101e 	bne	r2,zero,8009251c <___vfiprintf_internal_r+0xc9c>
800924dc:	e73ffc04 	addi	fp,fp,-16
800924e0:	01000044 	movi	r4,1
800924e4:	000b883a 	mov	r5,zero
800924e8:	d811883a 	mov	r8,sp
800924ec:	3f3ff316 	blt	r7,fp,800924bc <___vfiprintf_internal_r+0xc3c>
800924f0:	da802417 	ldw	r10,144(sp)
800924f4:	1705883a 	add	r2,r2,fp
800924f8:	47000115 	stw	fp,4(r8)
800924fc:	42800015 	stw	r10,0(r8)
80092500:	d8801c15 	stw	r2,112(sp)
80092504:	d9001b15 	stw	r4,108(sp)
80092508:	00c001c4 	movi	r3,7
8009250c:	19003616 	blt	r3,r4,800925e8 <___vfiprintf_internal_r+0xd68>
80092510:	42000204 	addi	r8,r8,8
80092514:	21000044 	addi	r4,r4,1
80092518:	003e5706 	br	80091e78 <___vfiprintf_internal_r+0x5f8>
8009251c:	d9402117 	ldw	r5,132(sp)
80092520:	d9002017 	ldw	r4,128(sp)
80092524:	d9801a04 	addi	r6,sp,104
80092528:	d9c02b15 	stw	r7,172(sp)
8009252c:	db402a15 	stw	r13,168(sp)
80092530:	009176c0 	call	8009176c <__sprint_r.part.0>
80092534:	d9c02b17 	ldw	r7,172(sp)
80092538:	db402a17 	ldw	r13,168(sp)
8009253c:	1000241e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
80092540:	d9401b17 	ldw	r5,108(sp)
80092544:	d8801c17 	ldw	r2,112(sp)
80092548:	d811883a 	mov	r8,sp
8009254c:	29000044 	addi	r4,r5,1
80092550:	003fd806 	br	800924b4 <___vfiprintf_internal_r+0xc34>
80092554:	d9401b17 	ldw	r5,108(sp)
80092558:	00e002b4 	movhi	r3,32778
8009255c:	18f1f084 	addi	r3,r3,-14398
80092560:	d8c02415 	stw	r3,144(sp)
80092564:	29400044 	addi	r5,r5,1
80092568:	d8c02417 	ldw	r3,144(sp)
8009256c:	14c5883a 	add	r2,r2,r19
80092570:	44c00115 	stw	r19,4(r8)
80092574:	40c00015 	stw	r3,0(r8)
80092578:	d8801c15 	stw	r2,112(sp)
8009257c:	d9401b15 	stw	r5,108(sp)
80092580:	00c001c4 	movi	r3,7
80092584:	1940070e 	bge	r3,r5,800925a4 <___vfiprintf_internal_r+0xd24>
80092588:	103e4826 	beq	r2,zero,80091eac <___vfiprintf_internal_r+0x62c>
8009258c:	d9402117 	ldw	r5,132(sp)
80092590:	d9002017 	ldw	r4,128(sp)
80092594:	d9801a04 	addi	r6,sp,104
80092598:	009176c0 	call	8009176c <__sprint_r.part.0>
8009259c:	10000c1e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
800925a0:	d8801c17 	ldw	r2,112(sp)
800925a4:	8c80010e 	bge	r17,r18,800925ac <___vfiprintf_internal_r+0xd2c>
800925a8:	9023883a 	mov	r17,r18
800925ac:	da802317 	ldw	r10,140(sp)
800925b0:	5455883a 	add	r10,r10,r17
800925b4:	da802315 	stw	r10,140(sp)
800925b8:	103e4126 	beq	r2,zero,80091ec0 <___vfiprintf_internal_r+0x640>
800925bc:	d9402117 	ldw	r5,132(sp)
800925c0:	d9002017 	ldw	r4,128(sp)
800925c4:	d9801a04 	addi	r6,sp,104
800925c8:	009176c0 	call	8009176c <__sprint_r.part.0>
800925cc:	103e3c26 	beq	r2,zero,80091ec0 <___vfiprintf_internal_r+0x640>
800925d0:	dd002117 	ldw	r20,132(sp)
800925d4:	a080030b 	ldhu	r2,12(r20)
800925d8:	1080100c 	andi	r2,r2,64
800925dc:	1001231e 	bne	r2,zero,80092a6c <___vfiprintf_internal_r+0x11ec>
800925e0:	d8802317 	ldw	r2,140(sp)
800925e4:	003d7b06 	br	80091bd4 <___vfiprintf_internal_r+0x354>
800925e8:	1000991e 	bne	r2,zero,80092850 <___vfiprintf_internal_r+0xfd0>
800925ec:	00c00044 	movi	r3,1
800925f0:	9805883a 	mov	r2,r19
800925f4:	dd400015 	stw	r21,0(sp)
800925f8:	dcc00115 	stw	r19,4(sp)
800925fc:	dcc01c15 	stw	r19,112(sp)
80092600:	d8c01b15 	stw	r3,108(sp)
80092604:	d811883a 	mov	r8,sp
80092608:	42000204 	addi	r8,r8,8
8009260c:	a2c0010c 	andi	r11,r20,4
80092610:	583fe426 	beq	r11,zero,800925a4 <___vfiprintf_internal_r+0xd24>
80092614:	8ca7c83a 	sub	r19,r17,r18
80092618:	04ffe20e 	bge	zero,r19,800925a4 <___vfiprintf_internal_r+0xd24>
8009261c:	01c00404 	movi	r7,16
80092620:	3cffcc0e 	bge	r7,r19,80092554 <___vfiprintf_internal_r+0xcd4>
80092624:	02a002b4 	movhi	r10,32778
80092628:	52b1f084 	addi	r10,r10,-14398
8009262c:	d9001b17 	ldw	r4,108(sp)
80092630:	da802415 	stw	r10,144(sp)
80092634:	382b883a 	mov	r21,r7
80092638:	050001c4 	movi	r20,7
8009263c:	df002017 	ldw	fp,128(sp)
80092640:	00000506 	br	80092658 <___vfiprintf_internal_r+0xdd8>
80092644:	21400084 	addi	r5,r4,2
80092648:	42000204 	addi	r8,r8,8
8009264c:	1809883a 	mov	r4,r3
80092650:	9cfffc04 	addi	r19,r19,-16
80092654:	acffc40e 	bge	r21,r19,80092568 <___vfiprintf_internal_r+0xce8>
80092658:	10800404 	addi	r2,r2,16
8009265c:	20c00044 	addi	r3,r4,1
80092660:	45800015 	stw	r22,0(r8)
80092664:	45400115 	stw	r21,4(r8)
80092668:	d8801c15 	stw	r2,112(sp)
8009266c:	d8c01b15 	stw	r3,108(sp)
80092670:	a0fff40e 	bge	r20,r3,80092644 <___vfiprintf_internal_r+0xdc4>
80092674:	1000041e 	bne	r2,zero,80092688 <___vfiprintf_internal_r+0xe08>
80092678:	01400044 	movi	r5,1
8009267c:	0009883a 	mov	r4,zero
80092680:	d811883a 	mov	r8,sp
80092684:	003ff206 	br	80092650 <___vfiprintf_internal_r+0xdd0>
80092688:	d9402117 	ldw	r5,132(sp)
8009268c:	d9801a04 	addi	r6,sp,104
80092690:	e009883a 	mov	r4,fp
80092694:	009176c0 	call	8009176c <__sprint_r.part.0>
80092698:	103fcd1e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
8009269c:	d9001b17 	ldw	r4,108(sp)
800926a0:	d8801c17 	ldw	r2,112(sp)
800926a4:	d811883a 	mov	r8,sp
800926a8:	21400044 	addi	r5,r4,1
800926ac:	003fe806 	br	80092650 <___vfiprintf_internal_r+0xdd0>
800926b0:	d9402117 	ldw	r5,132(sp)
800926b4:	d9002017 	ldw	r4,128(sp)
800926b8:	d9801a04 	addi	r6,sp,104
800926bc:	d9c02b15 	stw	r7,172(sp)
800926c0:	db402a15 	stw	r13,168(sp)
800926c4:	009176c0 	call	8009176c <__sprint_r.part.0>
800926c8:	d9c02b17 	ldw	r7,172(sp)
800926cc:	db402a17 	ldw	r13,168(sp)
800926d0:	103fbf1e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
800926d4:	d9401b17 	ldw	r5,108(sp)
800926d8:	d8801c17 	ldw	r2,112(sp)
800926dc:	d811883a 	mov	r8,sp
800926e0:	29800044 	addi	r6,r5,1
800926e4:	003dc406 	br	80091df8 <___vfiprintf_internal_r+0x578>
800926e8:	1000d21e 	bne	r2,zero,80092a34 <___vfiprintf_internal_r+0x11b4>
800926ec:	d8c01d87 	ldb	r3,118(sp)
800926f0:	18009526 	beq	r3,zero,80092948 <___vfiprintf_internal_r+0x10c8>
800926f4:	00800044 	movi	r2,1
800926f8:	d8c01d84 	addi	r3,sp,118
800926fc:	1009883a 	mov	r4,r2
80092700:	d8c00015 	stw	r3,0(sp)
80092704:	d8800115 	stw	r2,4(sp)
80092708:	d811883a 	mov	r8,sp
8009270c:	200b883a 	mov	r5,r4
80092710:	42000204 	addi	r8,r8,8
80092714:	21000044 	addi	r4,r4,1
80092718:	003d9706 	br	80091d78 <___vfiprintf_internal_r+0x4f8>
8009271c:	d9001d04 	addi	r4,sp,116
80092720:	00800084 	movi	r2,2
80092724:	d9000015 	stw	r4,0(sp)
80092728:	d8800115 	stw	r2,4(sp)
8009272c:	1809883a 	mov	r4,r3
80092730:	d811883a 	mov	r8,sp
80092734:	200b883a 	mov	r5,r4
80092738:	42000204 	addi	r8,r8,8
8009273c:	21000044 	addi	r4,r4,1
80092740:	003f4e06 	br	8009247c <___vfiprintf_internal_r+0xbfc>
80092744:	d8001d85 	stb	zero,118(sp)
80092748:	48005016 	blt	r9,zero,8009288c <___vfiprintf_internal_r+0x100c>
8009274c:	00ffdfc4 	movi	r3,-129
80092750:	94c4b03a 	or	r2,r18,r19
80092754:	a0e8703a 	and	r20,r20,r3
80092758:	103d4426 	beq	r2,zero,80091c6c <___vfiprintf_internal_r+0x3ec>
8009275c:	0039883a 	mov	fp,zero
80092760:	d9002617 	ldw	r4,152(sp)
80092764:	dd401a04 	addi	r21,sp,104
80092768:	908003cc 	andi	r2,r18,15
8009276c:	9806973a 	slli	r3,r19,28
80092770:	2085883a 	add	r2,r4,r2
80092774:	9024d13a 	srli	r18,r18,4
80092778:	10800003 	ldbu	r2,0(r2)
8009277c:	9826d13a 	srli	r19,r19,4
80092780:	ad7fffc4 	addi	r21,r21,-1
80092784:	1ca4b03a 	or	r18,r3,r18
80092788:	a8800005 	stb	r2,0(r21)
8009278c:	94c4b03a 	or	r2,r18,r19
80092790:	103ff51e 	bne	r2,zero,80092768 <___vfiprintf_internal_r+0xee8>
80092794:	003e5906 	br	800920fc <___vfiprintf_internal_r+0x87c>
80092798:	d9402117 	ldw	r5,132(sp)
8009279c:	d9002017 	ldw	r4,128(sp)
800927a0:	d9801a04 	addi	r6,sp,104
800927a4:	009176c0 	call	8009176c <__sprint_r.part.0>
800927a8:	103f891e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
800927ac:	d8801c17 	ldw	r2,112(sp)
800927b0:	d811883a 	mov	r8,sp
800927b4:	003f9506 	br	8009260c <___vfiprintf_internal_r+0xd8c>
800927b8:	d9402117 	ldw	r5,132(sp)
800927bc:	d9002017 	ldw	r4,128(sp)
800927c0:	d9801a04 	addi	r6,sp,104
800927c4:	009176c0 	call	8009176c <__sprint_r.part.0>
800927c8:	103f811e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
800927cc:	d811883a 	mov	r8,sp
800927d0:	003ced06 	br	80091b88 <___vfiprintf_internal_r+0x308>
800927d4:	d9402117 	ldw	r5,132(sp)
800927d8:	d9002017 	ldw	r4,128(sp)
800927dc:	d9801a04 	addi	r6,sp,104
800927e0:	da402c15 	stw	r9,176(sp)
800927e4:	db802a15 	stw	r14,168(sp)
800927e8:	009176c0 	call	8009176c <__sprint_r.part.0>
800927ec:	da402c17 	ldw	r9,176(sp)
800927f0:	db802a17 	ldw	r14,168(sp)
800927f4:	103f761e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
800927f8:	d9401b17 	ldw	r5,108(sp)
800927fc:	d8801c17 	ldw	r2,112(sp)
80092800:	d811883a 	mov	r8,sp
80092804:	29000044 	addi	r4,r5,1
80092808:	003d5b06 	br	80091d78 <___vfiprintf_internal_r+0x4f8>
8009280c:	d9402117 	ldw	r5,132(sp)
80092810:	d9002017 	ldw	r4,128(sp)
80092814:	d9801a04 	addi	r6,sp,104
80092818:	da402c15 	stw	r9,176(sp)
8009281c:	009176c0 	call	8009176c <__sprint_r.part.0>
80092820:	da402c17 	ldw	r9,176(sp)
80092824:	103f6a1e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
80092828:	d9401b17 	ldw	r5,108(sp)
8009282c:	d8801c17 	ldw	r2,112(sp)
80092830:	d811883a 	mov	r8,sp
80092834:	29000044 	addi	r4,r5,1
80092838:	003f1006 	br	8009247c <___vfiprintf_internal_r+0xbfc>
8009283c:	1000c31e 	bne	r2,zero,80092b4c <___vfiprintf_internal_r+0x12cc>
80092840:	01000044 	movi	r4,1
80092844:	000b883a 	mov	r5,zero
80092848:	d811883a 	mov	r8,sp
8009284c:	003f0d06 	br	80092484 <___vfiprintf_internal_r+0xc04>
80092850:	d9402117 	ldw	r5,132(sp)
80092854:	d9002017 	ldw	r4,128(sp)
80092858:	d9801a04 	addi	r6,sp,104
8009285c:	009176c0 	call	8009176c <__sprint_r.part.0>
80092860:	103f5b1e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
80092864:	d9001b17 	ldw	r4,108(sp)
80092868:	d8801c17 	ldw	r2,112(sp)
8009286c:	d811883a 	mov	r8,sp
80092870:	21000044 	addi	r4,r4,1
80092874:	003d8006 	br	80091e78 <___vfiprintf_internal_r+0x5f8>
80092878:	012002b4 	movhi	r4,32778
8009287c:	2130c404 	addi	r4,r4,-15600
80092880:	d9002615 	stw	r4,152(sp)
80092884:	d8c02215 	stw	r3,136(sp)
80092888:	1029883a 	mov	r20,r2
8009288c:	94c4b03a 	or	r2,r18,r19
80092890:	103fb21e 	bne	r2,zero,8009275c <___vfiprintf_internal_r+0xedc>
80092894:	0039883a 	mov	fp,zero
80092898:	00800084 	movi	r2,2
8009289c:	003e6b06 	br	8009224c <___vfiprintf_internal_r+0x9cc>
800928a0:	da802217 	ldw	r10,136(sp)
800928a4:	d8001d85 	stb	zero,118(sp)
800928a8:	0027883a 	mov	r19,zero
800928ac:	50800104 	addi	r2,r10,4
800928b0:	54800017 	ldw	r18,0(r10)
800928b4:	483e6016 	blt	r9,zero,80092238 <___vfiprintf_internal_r+0x9b8>
800928b8:	00ffdfc4 	movi	r3,-129
800928bc:	d8802215 	stw	r2,136(sp)
800928c0:	a0e8703a 	and	r20,r20,r3
800928c4:	0039883a 	mov	fp,zero
800928c8:	903ebb26 	beq	r18,zero,800923b8 <___vfiprintf_internal_r+0xb38>
800928cc:	00800244 	movi	r2,9
800928d0:	14bdee36 	bltu	r2,r18,8009208c <___vfiprintf_internal_r+0x80c>
800928d4:	003eba06 	br	800923c0 <___vfiprintf_internal_r+0xb40>
800928d8:	00800c04 	movi	r2,48
800928dc:	d8c01d45 	stb	r3,117(sp)
800928e0:	d8801d05 	stb	r2,116(sp)
800928e4:	d8001d85 	stb	zero,118(sp)
800928e8:	a0c00094 	ori	r3,r20,2
800928ec:	4800a916 	blt	r9,zero,80092b94 <___vfiprintf_internal_r+0x1314>
800928f0:	00bfdfc4 	movi	r2,-129
800928f4:	a096703a 	and	r11,r20,r2
800928f8:	5d000094 	ori	r20,r11,2
800928fc:	0039883a 	mov	fp,zero
80092900:	003f9706 	br	80092760 <___vfiprintf_internal_r+0xee0>
80092904:	8025883a 	mov	r18,r16
80092908:	003c2e06 	br	800919c4 <___vfiprintf_internal_r+0x144>
8009290c:	00a002b4 	movhi	r2,32778
80092910:	10b0c404 	addi	r2,r2,-15600
80092914:	0039883a 	mov	fp,zero
80092918:	d8802615 	stw	r2,152(sp)
8009291c:	003f9006 	br	80092760 <___vfiprintf_internal_r+0xee0>
80092920:	04a5c83a 	sub	r18,zero,r18
80092924:	07000b44 	movi	fp,45
80092928:	9004c03a 	cmpne	r2,r18,zero
8009292c:	04e7c83a 	sub	r19,zero,r19
80092930:	df001d85 	stb	fp,118(sp)
80092934:	98a7c83a 	sub	r19,r19,r2
80092938:	48009f16 	blt	r9,zero,80092bb8 <___vfiprintf_internal_r+0x1338>
8009293c:	00bfdfc4 	movi	r2,-129
80092940:	a0a8703a 	and	r20,r20,r2
80092944:	003dd006 	br	80092088 <___vfiprintf_internal_r+0x808>
80092948:	70004c26 	beq	r14,zero,80092a7c <___vfiprintf_internal_r+0x11fc>
8009294c:	00800084 	movi	r2,2
80092950:	d8c01d04 	addi	r3,sp,116
80092954:	d8c00015 	stw	r3,0(sp)
80092958:	d8800115 	stw	r2,4(sp)
8009295c:	01000044 	movi	r4,1
80092960:	d811883a 	mov	r8,sp
80092964:	003f7306 	br	80092734 <___vfiprintf_internal_r+0xeb4>
80092968:	a080100c 	andi	r2,r20,64
8009296c:	da802217 	ldw	r10,136(sp)
80092970:	103e0626 	beq	r2,zero,8009218c <___vfiprintf_internal_r+0x90c>
80092974:	5480000f 	ldh	r18,0(r10)
80092978:	52800104 	addi	r10,r10,4
8009297c:	da802215 	stw	r10,136(sp)
80092980:	9027d7fa 	srai	r19,r18,31
80092984:	9805883a 	mov	r2,r19
80092988:	003db806 	br	8009206c <___vfiprintf_internal_r+0x7ec>
8009298c:	a080040c 	andi	r2,r20,16
80092990:	1000091e 	bne	r2,zero,800929b8 <___vfiprintf_internal_r+0x1138>
80092994:	a2c0100c 	andi	r11,r20,64
80092998:	58000726 	beq	r11,zero,800929b8 <___vfiprintf_internal_r+0x1138>
8009299c:	da802217 	ldw	r10,136(sp)
800929a0:	50800017 	ldw	r2,0(r10)
800929a4:	52800104 	addi	r10,r10,4
800929a8:	da802215 	stw	r10,136(sp)
800929ac:	da802317 	ldw	r10,140(sp)
800929b0:	1280000d 	sth	r10,0(r2)
800929b4:	003be706 	br	80091954 <___vfiprintf_internal_r+0xd4>
800929b8:	da802217 	ldw	r10,136(sp)
800929bc:	50800017 	ldw	r2,0(r10)
800929c0:	52800104 	addi	r10,r10,4
800929c4:	da802215 	stw	r10,136(sp)
800929c8:	da802317 	ldw	r10,140(sp)
800929cc:	12800015 	stw	r10,0(r2)
800929d0:	003be006 	br	80091954 <___vfiprintf_internal_r+0xd4>
800929d4:	a080100c 	andi	r2,r20,64
800929d8:	da802217 	ldw	r10,136(sp)
800929dc:	10003026 	beq	r2,zero,80092aa0 <___vfiprintf_internal_r+0x1220>
800929e0:	5480000b 	ldhu	r18,0(r10)
800929e4:	52800104 	addi	r10,r10,4
800929e8:	0027883a 	mov	r19,zero
800929ec:	da802215 	stw	r10,136(sp)
800929f0:	003d8006 	br	80091ff4 <___vfiprintf_internal_r+0x774>
800929f4:	80c00007 	ldb	r3,0(r16)
800929f8:	003c0006 	br	800919fc <___vfiprintf_internal_r+0x17c>
800929fc:	a080100c 	andi	r2,r20,64
80092a00:	d8001d85 	stb	zero,118(sp)
80092a04:	da802217 	ldw	r10,136(sp)
80092a08:	1000201e 	bne	r2,zero,80092a8c <___vfiprintf_internal_r+0x120c>
80092a0c:	50800104 	addi	r2,r10,4
80092a10:	54800017 	ldw	r18,0(r10)
80092a14:	0027883a 	mov	r19,zero
80092a18:	483def0e 	bge	r9,zero,800921d8 <___vfiprintf_internal_r+0x958>
80092a1c:	94c6b03a 	or	r3,r18,r19
80092a20:	d8802215 	stw	r2,136(sp)
80092a24:	183d4e1e 	bne	r3,zero,80091f60 <___vfiprintf_internal_r+0x6e0>
80092a28:	0039883a 	mov	fp,zero
80092a2c:	0005883a 	mov	r2,zero
80092a30:	003e0606 	br	8009224c <___vfiprintf_internal_r+0x9cc>
80092a34:	d9402117 	ldw	r5,132(sp)
80092a38:	d9002017 	ldw	r4,128(sp)
80092a3c:	d9801a04 	addi	r6,sp,104
80092a40:	da402c15 	stw	r9,176(sp)
80092a44:	db802a15 	stw	r14,168(sp)
80092a48:	009176c0 	call	8009176c <__sprint_r.part.0>
80092a4c:	da402c17 	ldw	r9,176(sp)
80092a50:	db802a17 	ldw	r14,168(sp)
80092a54:	103ede1e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
80092a58:	d9401b17 	ldw	r5,108(sp)
80092a5c:	d8801c17 	ldw	r2,112(sp)
80092a60:	d811883a 	mov	r8,sp
80092a64:	29000044 	addi	r4,r5,1
80092a68:	003e7406 	br	8009243c <___vfiprintf_internal_r+0xbbc>
80092a6c:	00bfffc4 	movi	r2,-1
80092a70:	003c5806 	br	80091bd4 <___vfiprintf_internal_r+0x354>
80092a74:	d811883a 	mov	r8,sp
80092a78:	003ee806 	br	8009261c <___vfiprintf_internal_r+0xd9c>
80092a7c:	000b883a 	mov	r5,zero
80092a80:	01000044 	movi	r4,1
80092a84:	d811883a 	mov	r8,sp
80092a88:	003e7c06 	br	8009247c <___vfiprintf_internal_r+0xbfc>
80092a8c:	50800104 	addi	r2,r10,4
80092a90:	5480000b 	ldhu	r18,0(r10)
80092a94:	0027883a 	mov	r19,zero
80092a98:	483dcf0e 	bge	r9,zero,800921d8 <___vfiprintf_internal_r+0x958>
80092a9c:	003fdf06 	br	80092a1c <___vfiprintf_internal_r+0x119c>
80092aa0:	54800017 	ldw	r18,0(r10)
80092aa4:	52800104 	addi	r10,r10,4
80092aa8:	0027883a 	mov	r19,zero
80092aac:	da802215 	stw	r10,136(sp)
80092ab0:	003d5006 	br	80091ff4 <___vfiprintf_internal_r+0x774>
80092ab4:	50800104 	addi	r2,r10,4
80092ab8:	5480000b 	ldhu	r18,0(r10)
80092abc:	0027883a 	mov	r19,zero
80092ac0:	483f7d0e 	bge	r9,zero,800928b8 <___vfiprintf_internal_r+0x1038>
80092ac4:	003ddc06 	br	80092238 <___vfiprintf_internal_r+0x9b8>
80092ac8:	d8c02215 	stw	r3,136(sp)
80092acc:	0039883a 	mov	fp,zero
80092ad0:	003ddb06 	br	80092240 <___vfiprintf_internal_r+0x9c0>
80092ad4:	02a002b4 	movhi	r10,32778
80092ad8:	52b1ec84 	addi	r10,r10,-14414
80092adc:	da802415 	stw	r10,144(sp)
80092ae0:	003e8306 	br	800924f0 <___vfiprintf_internal_r+0xc70>
80092ae4:	d8801c17 	ldw	r2,112(sp)
80092ae8:	dd002117 	ldw	r20,132(sp)
80092aec:	103eb926 	beq	r2,zero,800925d4 <___vfiprintf_internal_r+0xd54>
80092af0:	d9002017 	ldw	r4,128(sp)
80092af4:	d9801a04 	addi	r6,sp,104
80092af8:	a00b883a 	mov	r5,r20
80092afc:	009176c0 	call	8009176c <__sprint_r.part.0>
80092b00:	003eb406 	br	800925d4 <___vfiprintf_internal_r+0xd54>
80092b04:	80c00043 	ldbu	r3,1(r16)
80092b08:	a5000814 	ori	r20,r20,32
80092b0c:	84000044 	addi	r16,r16,1
80092b10:	18c03fcc 	andi	r3,r3,255
80092b14:	18c0201c 	xori	r3,r3,128
80092b18:	18ffe004 	addi	r3,r3,-128
80092b1c:	003bb706 	br	800919fc <___vfiprintf_internal_r+0x17c>
80092b20:	a809883a 	mov	r4,r21
80092b24:	d8c02a15 	stw	r3,168(sp)
80092b28:	da002b15 	stw	r8,172(sp)
80092b2c:	00832a00 	call	800832a0 <strlen>
80092b30:	d8c02a17 	ldw	r3,168(sp)
80092b34:	1027883a 	mov	r19,r2
80092b38:	df001d83 	ldbu	fp,118(sp)
80092b3c:	d8c02215 	stw	r3,136(sp)
80092b40:	0013883a 	mov	r9,zero
80092b44:	da002b17 	ldw	r8,172(sp)
80092b48:	003c4d06 	br	80091c80 <___vfiprintf_internal_r+0x400>
80092b4c:	d9402117 	ldw	r5,132(sp)
80092b50:	d9002017 	ldw	r4,128(sp)
80092b54:	d9801a04 	addi	r6,sp,104
80092b58:	da402c15 	stw	r9,176(sp)
80092b5c:	009176c0 	call	8009176c <__sprint_r.part.0>
80092b60:	da402c17 	ldw	r9,176(sp)
80092b64:	103e9a1e 	bne	r2,zero,800925d0 <___vfiprintf_internal_r+0xd50>
80092b68:	d9401b17 	ldw	r5,108(sp)
80092b6c:	d8801c17 	ldw	r2,112(sp)
80092b70:	d811883a 	mov	r8,sp
80092b74:	29000044 	addi	r4,r5,1
80092b78:	003e4206 	br	80092484 <___vfiprintf_internal_r+0xc04>
80092b7c:	d9401b17 	ldw	r5,108(sp)
80092b80:	012002b4 	movhi	r4,32778
80092b84:	2131f084 	addi	r4,r4,-14398
80092b88:	d9002415 	stw	r4,144(sp)
80092b8c:	29400044 	addi	r5,r5,1
80092b90:	003c6d06 	br	80091d48 <___vfiprintf_internal_r+0x4c8>
80092b94:	0039883a 	mov	fp,zero
80092b98:	00800084 	movi	r2,2
80092b9c:	10803fcc 	andi	r2,r2,255
80092ba0:	01000044 	movi	r4,1
80092ba4:	11001e26 	beq	r2,r4,80092c20 <___vfiprintf_internal_r+0x13a0>
80092ba8:	01000084 	movi	r4,2
80092bac:	11001e1e 	bne	r2,r4,80092c28 <___vfiprintf_internal_r+0x13a8>
80092bb0:	1829883a 	mov	r20,r3
80092bb4:	003eea06 	br	80092760 <___vfiprintf_internal_r+0xee0>
80092bb8:	a007883a 	mov	r3,r20
80092bbc:	00800044 	movi	r2,1
80092bc0:	003ff606 	br	80092b9c <___vfiprintf_internal_r+0x131c>
80092bc4:	00800184 	movi	r2,6
80092bc8:	1240012e 	bgeu	r2,r9,80092bd0 <___vfiprintf_internal_r+0x1350>
80092bcc:	1013883a 	mov	r9,r2
80092bd0:	4827883a 	mov	r19,r9
80092bd4:	4825883a 	mov	r18,r9
80092bd8:	48001516 	blt	r9,zero,80092c30 <___vfiprintf_internal_r+0x13b0>
80092bdc:	056002b4 	movhi	r21,32778
80092be0:	d8c02215 	stw	r3,136(sp)
80092be4:	ad70c904 	addi	r21,r21,-15580
80092be8:	003d1406 	br	8009203c <___vfiprintf_internal_r+0x7bc>
80092bec:	02a002b4 	movhi	r10,32778
80092bf0:	52b1ec84 	addi	r10,r10,-14414
80092bf4:	da802415 	stw	r10,144(sp)
80092bf8:	200d883a 	mov	r6,r4
80092bfc:	003c9106 	br	80091e44 <___vfiprintf_internal_r+0x5c4>
80092c00:	5021883a 	mov	r16,r10
80092c04:	0013883a 	mov	r9,zero
80092c08:	003b7d06 	br	80091a00 <___vfiprintf_internal_r+0x180>
80092c0c:	4827883a 	mov	r19,r9
80092c10:	df001d83 	ldbu	fp,118(sp)
80092c14:	d8c02215 	stw	r3,136(sp)
80092c18:	0013883a 	mov	r9,zero
80092c1c:	003c1806 	br	80091c80 <___vfiprintf_internal_r+0x400>
80092c20:	1829883a 	mov	r20,r3
80092c24:	003d1806 	br	80092088 <___vfiprintf_internal_r+0x808>
80092c28:	1829883a 	mov	r20,r3
80092c2c:	003ccd06 	br	80091f64 <___vfiprintf_internal_r+0x6e4>
80092c30:	0025883a 	mov	r18,zero
80092c34:	003fe906 	br	80092bdc <___vfiprintf_internal_r+0x135c>
80092c38:	d8802217 	ldw	r2,136(sp)
80092c3c:	80c00043 	ldbu	r3,1(r16)
80092c40:	5021883a 	mov	r16,r10
80092c44:	12400017 	ldw	r9,0(r2)
80092c48:	10800104 	addi	r2,r2,4
80092c4c:	d8802215 	stw	r2,136(sp)
80092c50:	483faf0e 	bge	r9,zero,80092b10 <___vfiprintf_internal_r+0x1290>
80092c54:	18c03fcc 	andi	r3,r3,255
80092c58:	18c0201c 	xori	r3,r3,128
80092c5c:	027fffc4 	movi	r9,-1
80092c60:	18ffe004 	addi	r3,r3,-128
80092c64:	003b6506 	br	800919fc <___vfiprintf_internal_r+0x17c>
80092c68:	d9c01d85 	stb	r7,118(sp)
80092c6c:	003ca006 	br	80091ef0 <___vfiprintf_internal_r+0x670>
80092c70:	d9c01d85 	stb	r7,118(sp)
80092c74:	003cad06 	br	80091f2c <___vfiprintf_internal_r+0x6ac>
80092c78:	d9c01d85 	stb	r7,118(sp)
80092c7c:	003d7d06 	br	80092274 <___vfiprintf_internal_r+0x9f4>
80092c80:	d9c01d85 	stb	r7,118(sp)
80092c84:	003d5f06 	br	80092204 <___vfiprintf_internal_r+0x984>
80092c88:	a080004c 	andi	r2,r20,1
80092c8c:	0039883a 	mov	fp,zero
80092c90:	10000526 	beq	r2,zero,80092ca8 <___vfiprintf_internal_r+0x1428>
80092c94:	00800c04 	movi	r2,48
80092c98:	d88019c5 	stb	r2,103(sp)
80092c9c:	dcc02717 	ldw	r19,156(sp)
80092ca0:	dd4019c4 	addi	r21,sp,103
80092ca4:	003bf606 	br	80091c80 <___vfiprintf_internal_r+0x400>
80092ca8:	0027883a 	mov	r19,zero
80092cac:	dd401a04 	addi	r21,sp,104
80092cb0:	003bf306 	br	80091c80 <___vfiprintf_internal_r+0x400>
80092cb4:	d9c01d85 	stb	r7,118(sp)
80092cb8:	003dc806 	br	800923dc <___vfiprintf_internal_r+0xb5c>
80092cbc:	d9c01d85 	stb	r7,118(sp)
80092cc0:	003d3a06 	br	800921ac <___vfiprintf_internal_r+0x92c>
80092cc4:	d9c01d85 	stb	r7,118(sp)
80092cc8:	003d2a06 	br	80092174 <___vfiprintf_internal_r+0x8f4>
80092ccc:	d9c01d85 	stb	r7,118(sp)
80092cd0:	003cde06 	br	8009204c <___vfiprintf_internal_r+0x7cc>
80092cd4:	d9c01d85 	stb	r7,118(sp)
80092cd8:	003cbc06 	br	80091fcc <___vfiprintf_internal_r+0x74c>

80092cdc <__vfiprintf_internal>:
80092cdc:	00a002b4 	movhi	r2,32778
80092ce0:	10ba7304 	addi	r2,r2,-5684
80092ce4:	300f883a 	mov	r7,r6
80092ce8:	280d883a 	mov	r6,r5
80092cec:	200b883a 	mov	r5,r4
80092cf0:	11000017 	ldw	r4,0(r2)
80092cf4:	00918801 	jmpi	80091880 <___vfiprintf_internal_r>

80092cf8 <__sbprintf>:
80092cf8:	2880030b 	ldhu	r2,12(r5)
80092cfc:	2ac01917 	ldw	r11,100(r5)
80092d00:	2a80038b 	ldhu	r10,14(r5)
80092d04:	2a400717 	ldw	r9,28(r5)
80092d08:	2a000917 	ldw	r8,36(r5)
80092d0c:	defee204 	addi	sp,sp,-1144
80092d10:	00c10004 	movi	r3,1024
80092d14:	dc011a15 	stw	r16,1128(sp)
80092d18:	10bfff4c 	andi	r2,r2,65533
80092d1c:	2821883a 	mov	r16,r5
80092d20:	d8cb883a 	add	r5,sp,r3
80092d24:	dc811c15 	stw	r18,1136(sp)
80092d28:	dc411b15 	stw	r17,1132(sp)
80092d2c:	dfc11d15 	stw	ra,1140(sp)
80092d30:	2025883a 	mov	r18,r4
80092d34:	d881030d 	sth	r2,1036(sp)
80092d38:	dac11915 	stw	r11,1124(sp)
80092d3c:	da81038d 	sth	r10,1038(sp)
80092d40:	da410715 	stw	r9,1052(sp)
80092d44:	da010915 	stw	r8,1060(sp)
80092d48:	dec10015 	stw	sp,1024(sp)
80092d4c:	dec10415 	stw	sp,1040(sp)
80092d50:	d8c10215 	stw	r3,1032(sp)
80092d54:	d8c10515 	stw	r3,1044(sp)
80092d58:	d8010615 	stw	zero,1048(sp)
80092d5c:	00918800 	call	80091880 <___vfiprintf_internal_r>
80092d60:	1023883a 	mov	r17,r2
80092d64:	10000416 	blt	r2,zero,80092d78 <__sbprintf+0x80>
80092d68:	d9410004 	addi	r5,sp,1024
80092d6c:	9009883a 	mov	r4,r18
80092d70:	0088a700 	call	80088a70 <_fflush_r>
80092d74:	10000d1e 	bne	r2,zero,80092dac <__sbprintf+0xb4>
80092d78:	d881030b 	ldhu	r2,1036(sp)
80092d7c:	1080100c 	andi	r2,r2,64
80092d80:	10000326 	beq	r2,zero,80092d90 <__sbprintf+0x98>
80092d84:	8080030b 	ldhu	r2,12(r16)
80092d88:	10801014 	ori	r2,r2,64
80092d8c:	8080030d 	sth	r2,12(r16)
80092d90:	8805883a 	mov	r2,r17
80092d94:	dfc11d17 	ldw	ra,1140(sp)
80092d98:	dc811c17 	ldw	r18,1136(sp)
80092d9c:	dc411b17 	ldw	r17,1132(sp)
80092da0:	dc011a17 	ldw	r16,1128(sp)
80092da4:	dec11e04 	addi	sp,sp,1144
80092da8:	f800283a 	ret
80092dac:	047fffc4 	movi	r17,-1
80092db0:	003ff106 	br	80092d78 <__sbprintf+0x80>

80092db4 <__swbuf_r>:
80092db4:	defffb04 	addi	sp,sp,-20
80092db8:	dcc00315 	stw	r19,12(sp)
80092dbc:	dc800215 	stw	r18,8(sp)
80092dc0:	dc000015 	stw	r16,0(sp)
80092dc4:	dfc00415 	stw	ra,16(sp)
80092dc8:	dc400115 	stw	r17,4(sp)
80092dcc:	2025883a 	mov	r18,r4
80092dd0:	2827883a 	mov	r19,r5
80092dd4:	3021883a 	mov	r16,r6
80092dd8:	20000226 	beq	r4,zero,80092de4 <__swbuf_r+0x30>
80092ddc:	20800e17 	ldw	r2,56(r4)
80092de0:	10004226 	beq	r2,zero,80092eec <__swbuf_r+0x138>
80092de4:	80800617 	ldw	r2,24(r16)
80092de8:	8100030b 	ldhu	r4,12(r16)
80092dec:	80800215 	stw	r2,8(r16)
80092df0:	2080020c 	andi	r2,r4,8
80092df4:	10003626 	beq	r2,zero,80092ed0 <__swbuf_r+0x11c>
80092df8:	80c00417 	ldw	r3,16(r16)
80092dfc:	18003426 	beq	r3,zero,80092ed0 <__swbuf_r+0x11c>
80092e00:	2088000c 	andi	r2,r4,8192
80092e04:	9c403fcc 	andi	r17,r19,255
80092e08:	10001a26 	beq	r2,zero,80092e74 <__swbuf_r+0xc0>
80092e0c:	80800017 	ldw	r2,0(r16)
80092e10:	81000517 	ldw	r4,20(r16)
80092e14:	10c7c83a 	sub	r3,r2,r3
80092e18:	1900200e 	bge	r3,r4,80092e9c <__swbuf_r+0xe8>
80092e1c:	18c00044 	addi	r3,r3,1
80092e20:	81000217 	ldw	r4,8(r16)
80092e24:	11400044 	addi	r5,r2,1
80092e28:	81400015 	stw	r5,0(r16)
80092e2c:	213fffc4 	addi	r4,r4,-1
80092e30:	81000215 	stw	r4,8(r16)
80092e34:	14c00005 	stb	r19,0(r2)
80092e38:	80800517 	ldw	r2,20(r16)
80092e3c:	10c01e26 	beq	r2,r3,80092eb8 <__swbuf_r+0x104>
80092e40:	8080030b 	ldhu	r2,12(r16)
80092e44:	1080004c 	andi	r2,r2,1
80092e48:	10000226 	beq	r2,zero,80092e54 <__swbuf_r+0xa0>
80092e4c:	00800284 	movi	r2,10
80092e50:	88801926 	beq	r17,r2,80092eb8 <__swbuf_r+0x104>
80092e54:	8805883a 	mov	r2,r17
80092e58:	dfc00417 	ldw	ra,16(sp)
80092e5c:	dcc00317 	ldw	r19,12(sp)
80092e60:	dc800217 	ldw	r18,8(sp)
80092e64:	dc400117 	ldw	r17,4(sp)
80092e68:	dc000017 	ldw	r16,0(sp)
80092e6c:	dec00504 	addi	sp,sp,20
80092e70:	f800283a 	ret
80092e74:	81401917 	ldw	r5,100(r16)
80092e78:	00b7ffc4 	movi	r2,-8193
80092e7c:	21080014 	ori	r4,r4,8192
80092e80:	2884703a 	and	r2,r5,r2
80092e84:	80801915 	stw	r2,100(r16)
80092e88:	80800017 	ldw	r2,0(r16)
80092e8c:	8100030d 	sth	r4,12(r16)
80092e90:	81000517 	ldw	r4,20(r16)
80092e94:	10c7c83a 	sub	r3,r2,r3
80092e98:	193fe016 	blt	r3,r4,80092e1c <__swbuf_r+0x68>
80092e9c:	800b883a 	mov	r5,r16
80092ea0:	9009883a 	mov	r4,r18
80092ea4:	0088a700 	call	80088a70 <_fflush_r>
80092ea8:	1000071e 	bne	r2,zero,80092ec8 <__swbuf_r+0x114>
80092eac:	80800017 	ldw	r2,0(r16)
80092eb0:	00c00044 	movi	r3,1
80092eb4:	003fda06 	br	80092e20 <__swbuf_r+0x6c>
80092eb8:	800b883a 	mov	r5,r16
80092ebc:	9009883a 	mov	r4,r18
80092ec0:	0088a700 	call	80088a70 <_fflush_r>
80092ec4:	103fe326 	beq	r2,zero,80092e54 <__swbuf_r+0xa0>
80092ec8:	00bfffc4 	movi	r2,-1
80092ecc:	003fe206 	br	80092e58 <__swbuf_r+0xa4>
80092ed0:	800b883a 	mov	r5,r16
80092ed4:	9009883a 	mov	r4,r18
80092ed8:	0086e240 	call	80086e24 <__swsetup_r>
80092edc:	103ffa1e 	bne	r2,zero,80092ec8 <__swbuf_r+0x114>
80092ee0:	8100030b 	ldhu	r4,12(r16)
80092ee4:	80c00417 	ldw	r3,16(r16)
80092ee8:	003fc506 	br	80092e00 <__swbuf_r+0x4c>
80092eec:	0088e4c0 	call	80088e4c <__sinit>
80092ef0:	003fbc06 	br	80092de4 <__swbuf_r+0x30>

80092ef4 <__swbuf>:
80092ef4:	00a002b4 	movhi	r2,32778
80092ef8:	10ba7304 	addi	r2,r2,-5684
80092efc:	280d883a 	mov	r6,r5
80092f00:	200b883a 	mov	r5,r4
80092f04:	11000017 	ldw	r4,0(r2)
80092f08:	0092db41 	jmpi	80092db4 <__swbuf_r>

80092f0c <_calloc_r>:
80092f0c:	298b383a 	mul	r5,r5,r6
80092f10:	defffe04 	addi	sp,sp,-8
80092f14:	dfc00115 	stw	ra,4(sp)
80092f18:	dc000015 	stw	r16,0(sp)
80092f1c:	00824640 	call	80082464 <_malloc_r>
80092f20:	10002926 	beq	r2,zero,80092fc8 <_calloc_r+0xbc>
80092f24:	11bfff17 	ldw	r6,-4(r2)
80092f28:	1021883a 	mov	r16,r2
80092f2c:	00bfff04 	movi	r2,-4
80092f30:	308c703a 	and	r6,r6,r2
80092f34:	00c00904 	movi	r3,36
80092f38:	308d883a 	add	r6,r6,r2
80092f3c:	19801636 	bltu	r3,r6,80092f98 <_calloc_r+0x8c>
80092f40:	008004c4 	movi	r2,19
80092f44:	11800b2e 	bgeu	r2,r6,80092f74 <_calloc_r+0x68>
80092f48:	80000015 	stw	zero,0(r16)
80092f4c:	80000115 	stw	zero,4(r16)
80092f50:	008006c4 	movi	r2,27
80092f54:	11801a2e 	bgeu	r2,r6,80092fc0 <_calloc_r+0xb4>
80092f58:	80000215 	stw	zero,8(r16)
80092f5c:	80000315 	stw	zero,12(r16)
80092f60:	30c0151e 	bne	r6,r3,80092fb8 <_calloc_r+0xac>
80092f64:	80000415 	stw	zero,16(r16)
80092f68:	80800604 	addi	r2,r16,24
80092f6c:	80000515 	stw	zero,20(r16)
80092f70:	00000106 	br	80092f78 <_calloc_r+0x6c>
80092f74:	8005883a 	mov	r2,r16
80092f78:	10000015 	stw	zero,0(r2)
80092f7c:	10000115 	stw	zero,4(r2)
80092f80:	10000215 	stw	zero,8(r2)
80092f84:	8005883a 	mov	r2,r16
80092f88:	dfc00117 	ldw	ra,4(sp)
80092f8c:	dc000017 	ldw	r16,0(sp)
80092f90:	dec00204 	addi	sp,sp,8
80092f94:	f800283a 	ret
80092f98:	000b883a 	mov	r5,zero
80092f9c:	8009883a 	mov	r4,r16
80092fa0:	008a0a00 	call	8008a0a0 <memset>
80092fa4:	8005883a 	mov	r2,r16
80092fa8:	dfc00117 	ldw	ra,4(sp)
80092fac:	dc000017 	ldw	r16,0(sp)
80092fb0:	dec00204 	addi	sp,sp,8
80092fb4:	f800283a 	ret
80092fb8:	80800404 	addi	r2,r16,16
80092fbc:	003fee06 	br	80092f78 <_calloc_r+0x6c>
80092fc0:	80800204 	addi	r2,r16,8
80092fc4:	003fec06 	br	80092f78 <_calloc_r+0x6c>
80092fc8:	0005883a 	mov	r2,zero
80092fcc:	003fee06 	br	80092f88 <_calloc_r+0x7c>

80092fd0 <_fclose_r>:
80092fd0:	28003926 	beq	r5,zero,800930b8 <_fclose_r+0xe8>
80092fd4:	defffc04 	addi	sp,sp,-16
80092fd8:	dc400115 	stw	r17,4(sp)
80092fdc:	dc000015 	stw	r16,0(sp)
80092fe0:	dfc00315 	stw	ra,12(sp)
80092fe4:	dc800215 	stw	r18,8(sp)
80092fe8:	2023883a 	mov	r17,r4
80092fec:	2821883a 	mov	r16,r5
80092ff0:	20000226 	beq	r4,zero,80092ffc <_fclose_r+0x2c>
80092ff4:	20800e17 	ldw	r2,56(r4)
80092ff8:	10002726 	beq	r2,zero,80093098 <_fclose_r+0xc8>
80092ffc:	8080030f 	ldh	r2,12(r16)
80093000:	1000071e 	bne	r2,zero,80093020 <_fclose_r+0x50>
80093004:	0005883a 	mov	r2,zero
80093008:	dfc00317 	ldw	ra,12(sp)
8009300c:	dc800217 	ldw	r18,8(sp)
80093010:	dc400117 	ldw	r17,4(sp)
80093014:	dc000017 	ldw	r16,0(sp)
80093018:	dec00404 	addi	sp,sp,16
8009301c:	f800283a 	ret
80093020:	800b883a 	mov	r5,r16
80093024:	8809883a 	mov	r4,r17
80093028:	00888540 	call	80088854 <__sflush_r>
8009302c:	1025883a 	mov	r18,r2
80093030:	80800b17 	ldw	r2,44(r16)
80093034:	10000426 	beq	r2,zero,80093048 <_fclose_r+0x78>
80093038:	81400717 	ldw	r5,28(r16)
8009303c:	8809883a 	mov	r4,r17
80093040:	103ee83a 	callr	r2
80093044:	10001616 	blt	r2,zero,800930a0 <_fclose_r+0xd0>
80093048:	8080030b 	ldhu	r2,12(r16)
8009304c:	1080200c 	andi	r2,r2,128
80093050:	1000151e 	bne	r2,zero,800930a8 <_fclose_r+0xd8>
80093054:	81400c17 	ldw	r5,48(r16)
80093058:	28000526 	beq	r5,zero,80093070 <_fclose_r+0xa0>
8009305c:	80801004 	addi	r2,r16,64
80093060:	28800226 	beq	r5,r2,8009306c <_fclose_r+0x9c>
80093064:	8809883a 	mov	r4,r17
80093068:	0088fc00 	call	80088fc0 <_free_r>
8009306c:	80000c15 	stw	zero,48(r16)
80093070:	81401117 	ldw	r5,68(r16)
80093074:	28000326 	beq	r5,zero,80093084 <_fclose_r+0xb4>
80093078:	8809883a 	mov	r4,r17
8009307c:	0088fc00 	call	80088fc0 <_free_r>
80093080:	80001115 	stw	zero,68(r16)
80093084:	0088e5c0 	call	80088e5c <__sfp_lock_acquire>
80093088:	8000030d 	sth	zero,12(r16)
8009308c:	0088e600 	call	80088e60 <__sfp_lock_release>
80093090:	9005883a 	mov	r2,r18
80093094:	003fdc06 	br	80093008 <_fclose_r+0x38>
80093098:	0088e4c0 	call	80088e4c <__sinit>
8009309c:	003fd706 	br	80092ffc <_fclose_r+0x2c>
800930a0:	04bfffc4 	movi	r18,-1
800930a4:	003fe806 	br	80093048 <_fclose_r+0x78>
800930a8:	81400417 	ldw	r5,16(r16)
800930ac:	8809883a 	mov	r4,r17
800930b0:	0088fc00 	call	80088fc0 <_free_r>
800930b4:	003fe706 	br	80093054 <_fclose_r+0x84>
800930b8:	0005883a 	mov	r2,zero
800930bc:	f800283a 	ret

800930c0 <fclose>:
800930c0:	00a002b4 	movhi	r2,32778
800930c4:	10ba7304 	addi	r2,r2,-5684
800930c8:	200b883a 	mov	r5,r4
800930cc:	11000017 	ldw	r4,0(r2)
800930d0:	0092fd01 	jmpi	80092fd0 <_fclose_r>

800930d4 <__fputwc>:
800930d4:	defff804 	addi	sp,sp,-32
800930d8:	dcc00415 	stw	r19,16(sp)
800930dc:	dc800315 	stw	r18,12(sp)
800930e0:	dc000115 	stw	r16,4(sp)
800930e4:	dfc00715 	stw	ra,28(sp)
800930e8:	dd400615 	stw	r21,24(sp)
800930ec:	dd000515 	stw	r20,20(sp)
800930f0:	dc400215 	stw	r17,8(sp)
800930f4:	2027883a 	mov	r19,r4
800930f8:	2825883a 	mov	r18,r5
800930fc:	3021883a 	mov	r16,r6
80093100:	00899cc0 	call	800899cc <__locale_mb_cur_max>
80093104:	00c00044 	movi	r3,1
80093108:	10c03e26 	beq	r2,r3,80093204 <__fputwc+0x130>
8009310c:	81c01704 	addi	r7,r16,92
80093110:	900d883a 	mov	r6,r18
80093114:	d80b883a 	mov	r5,sp
80093118:	9809883a 	mov	r4,r19
8009311c:	00953f40 	call	800953f4 <_wcrtomb_r>
80093120:	1029883a 	mov	r20,r2
80093124:	00bfffc4 	movi	r2,-1
80093128:	a0802026 	beq	r20,r2,800931ac <__fputwc+0xd8>
8009312c:	d9400003 	ldbu	r5,0(sp)
80093130:	a0001c26 	beq	r20,zero,800931a4 <__fputwc+0xd0>
80093134:	0023883a 	mov	r17,zero
80093138:	05400284 	movi	r21,10
8009313c:	00000906 	br	80093164 <__fputwc+0x90>
80093140:	80800017 	ldw	r2,0(r16)
80093144:	11400005 	stb	r5,0(r2)
80093148:	80c00017 	ldw	r3,0(r16)
8009314c:	18c00044 	addi	r3,r3,1
80093150:	80c00015 	stw	r3,0(r16)
80093154:	8c400044 	addi	r17,r17,1
80093158:	dc45883a 	add	r2,sp,r17
8009315c:	8d00112e 	bgeu	r17,r20,800931a4 <__fputwc+0xd0>
80093160:	11400003 	ldbu	r5,0(r2)
80093164:	80c00217 	ldw	r3,8(r16)
80093168:	18ffffc4 	addi	r3,r3,-1
8009316c:	80c00215 	stw	r3,8(r16)
80093170:	183ff30e 	bge	r3,zero,80093140 <__fputwc+0x6c>
80093174:	80800617 	ldw	r2,24(r16)
80093178:	18801916 	blt	r3,r2,800931e0 <__fputwc+0x10c>
8009317c:	80800017 	ldw	r2,0(r16)
80093180:	11400005 	stb	r5,0(r2)
80093184:	80800017 	ldw	r2,0(r16)
80093188:	10c00003 	ldbu	r3,0(r2)
8009318c:	10800044 	addi	r2,r2,1
80093190:	1d402326 	beq	r3,r21,80093220 <__fputwc+0x14c>
80093194:	80800015 	stw	r2,0(r16)
80093198:	8c400044 	addi	r17,r17,1
8009319c:	dc45883a 	add	r2,sp,r17
800931a0:	8d3fef36 	bltu	r17,r20,80093160 <__fputwc+0x8c>
800931a4:	9005883a 	mov	r2,r18
800931a8:	00000406 	br	800931bc <__fputwc+0xe8>
800931ac:	80c0030b 	ldhu	r3,12(r16)
800931b0:	a005883a 	mov	r2,r20
800931b4:	18c01014 	ori	r3,r3,64
800931b8:	80c0030d 	sth	r3,12(r16)
800931bc:	dfc00717 	ldw	ra,28(sp)
800931c0:	dd400617 	ldw	r21,24(sp)
800931c4:	dd000517 	ldw	r20,20(sp)
800931c8:	dcc00417 	ldw	r19,16(sp)
800931cc:	dc800317 	ldw	r18,12(sp)
800931d0:	dc400217 	ldw	r17,8(sp)
800931d4:	dc000117 	ldw	r16,4(sp)
800931d8:	dec00804 	addi	sp,sp,32
800931dc:	f800283a 	ret
800931e0:	800d883a 	mov	r6,r16
800931e4:	29403fcc 	andi	r5,r5,255
800931e8:	9809883a 	mov	r4,r19
800931ec:	0092db40 	call	80092db4 <__swbuf_r>
800931f0:	10bfffe0 	cmpeqi	r2,r2,-1
800931f4:	10803fcc 	andi	r2,r2,255
800931f8:	103fd626 	beq	r2,zero,80093154 <__fputwc+0x80>
800931fc:	00bfffc4 	movi	r2,-1
80093200:	003fee06 	br	800931bc <__fputwc+0xe8>
80093204:	90ffffc4 	addi	r3,r18,-1
80093208:	01003f84 	movi	r4,254
8009320c:	20ffbf36 	bltu	r4,r3,8009310c <__fputwc+0x38>
80093210:	900b883a 	mov	r5,r18
80093214:	dc800005 	stb	r18,0(sp)
80093218:	1029883a 	mov	r20,r2
8009321c:	003fc506 	br	80093134 <__fputwc+0x60>
80093220:	800d883a 	mov	r6,r16
80093224:	a80b883a 	mov	r5,r21
80093228:	9809883a 	mov	r4,r19
8009322c:	0092db40 	call	80092db4 <__swbuf_r>
80093230:	10bfffe0 	cmpeqi	r2,r2,-1
80093234:	003fef06 	br	800931f4 <__fputwc+0x120>

80093238 <_fputwc_r>:
80093238:	3080030b 	ldhu	r2,12(r6)
8009323c:	10c8000c 	andi	r3,r2,8192
80093240:	1800051e 	bne	r3,zero,80093258 <_fputwc_r+0x20>
80093244:	30c01917 	ldw	r3,100(r6)
80093248:	10880014 	ori	r2,r2,8192
8009324c:	3080030d 	sth	r2,12(r6)
80093250:	18880014 	ori	r2,r3,8192
80093254:	30801915 	stw	r2,100(r6)
80093258:	00930d41 	jmpi	800930d4 <__fputwc>

8009325c <fputwc>:
8009325c:	00a002b4 	movhi	r2,32778
80093260:	defffc04 	addi	sp,sp,-16
80093264:	10ba7304 	addi	r2,r2,-5684
80093268:	dc000115 	stw	r16,4(sp)
8009326c:	14000017 	ldw	r16,0(r2)
80093270:	dc400215 	stw	r17,8(sp)
80093274:	dfc00315 	stw	ra,12(sp)
80093278:	2023883a 	mov	r17,r4
8009327c:	80000226 	beq	r16,zero,80093288 <fputwc+0x2c>
80093280:	80800e17 	ldw	r2,56(r16)
80093284:	10001026 	beq	r2,zero,800932c8 <fputwc+0x6c>
80093288:	2880030b 	ldhu	r2,12(r5)
8009328c:	10c8000c 	andi	r3,r2,8192
80093290:	1800051e 	bne	r3,zero,800932a8 <fputwc+0x4c>
80093294:	28c01917 	ldw	r3,100(r5)
80093298:	10880014 	ori	r2,r2,8192
8009329c:	2880030d 	sth	r2,12(r5)
800932a0:	18880014 	ori	r2,r3,8192
800932a4:	28801915 	stw	r2,100(r5)
800932a8:	280d883a 	mov	r6,r5
800932ac:	8009883a 	mov	r4,r16
800932b0:	880b883a 	mov	r5,r17
800932b4:	dfc00317 	ldw	ra,12(sp)
800932b8:	dc400217 	ldw	r17,8(sp)
800932bc:	dc000117 	ldw	r16,4(sp)
800932c0:	dec00404 	addi	sp,sp,16
800932c4:	00930d41 	jmpi	800930d4 <__fputwc>
800932c8:	8009883a 	mov	r4,r16
800932cc:	d9400015 	stw	r5,0(sp)
800932d0:	0088e4c0 	call	80088e4c <__sinit>
800932d4:	d9400017 	ldw	r5,0(sp)
800932d8:	003feb06 	br	80093288 <fputwc+0x2c>

800932dc <_fstat_r>:
800932dc:	defffd04 	addi	sp,sp,-12
800932e0:	2805883a 	mov	r2,r5
800932e4:	dc000015 	stw	r16,0(sp)
800932e8:	042002b4 	movhi	r16,32778
800932ec:	dc400115 	stw	r17,4(sp)
800932f0:	8401de04 	addi	r16,r16,1912
800932f4:	2023883a 	mov	r17,r4
800932f8:	300b883a 	mov	r5,r6
800932fc:	1009883a 	mov	r4,r2
80093300:	dfc00215 	stw	ra,8(sp)
80093304:	80000015 	stw	zero,0(r16)
80093308:	0098c340 	call	80098c34 <fstat>
8009330c:	00ffffc4 	movi	r3,-1
80093310:	10c00526 	beq	r2,r3,80093328 <_fstat_r+0x4c>
80093314:	dfc00217 	ldw	ra,8(sp)
80093318:	dc400117 	ldw	r17,4(sp)
8009331c:	dc000017 	ldw	r16,0(sp)
80093320:	dec00304 	addi	sp,sp,12
80093324:	f800283a 	ret
80093328:	80c00017 	ldw	r3,0(r16)
8009332c:	183ff926 	beq	r3,zero,80093314 <_fstat_r+0x38>
80093330:	88c00015 	stw	r3,0(r17)
80093334:	003ff706 	br	80093314 <_fstat_r+0x38>

80093338 <rshift>:
80093338:	2807d17a 	srai	r3,r5,5
8009333c:	20800417 	ldw	r2,16(r4)
80093340:	22000504 	addi	r8,r4,20
80093344:	1880250e 	bge	r3,r2,800933dc <rshift+0xa4>
80093348:	1085883a 	add	r2,r2,r2
8009334c:	18c7883a 	add	r3,r3,r3
80093350:	1085883a 	add	r2,r2,r2
80093354:	18c7883a 	add	r3,r3,r3
80093358:	294007cc 	andi	r5,r5,31
8009335c:	4085883a 	add	r2,r8,r2
80093360:	40c7883a 	add	r3,r8,r3
80093364:	28002026 	beq	r5,zero,800933e8 <rshift+0xb0>
80093368:	19800017 	ldw	r6,0(r3)
8009336c:	02c00804 	movi	r11,32
80093370:	19c00104 	addi	r7,r3,4
80093374:	5957c83a 	sub	r11,r11,r5
80093378:	314cd83a 	srl	r6,r6,r5
8009337c:	38802c2e 	bgeu	r7,r2,80093430 <rshift+0xf8>
80093380:	4015883a 	mov	r10,r8
80093384:	3a400017 	ldw	r9,0(r7)
80093388:	52800104 	addi	r10,r10,4
8009338c:	39c00104 	addi	r7,r7,4
80093390:	4ad2983a 	sll	r9,r9,r11
80093394:	498cb03a 	or	r6,r9,r6
80093398:	51bfff15 	stw	r6,-4(r10)
8009339c:	39bfff17 	ldw	r6,-4(r7)
800933a0:	314cd83a 	srl	r6,r6,r5
800933a4:	38bff736 	bltu	r7,r2,80093384 <rshift+0x4c>
800933a8:	10c7c83a 	sub	r3,r2,r3
800933ac:	18fffec4 	addi	r3,r3,-5
800933b0:	1806d0ba 	srli	r3,r3,2
800933b4:	18c00044 	addi	r3,r3,1
800933b8:	18c7883a 	add	r3,r3,r3
800933bc:	18c7883a 	add	r3,r3,r3
800933c0:	40c7883a 	add	r3,r8,r3
800933c4:	19800015 	stw	r6,0(r3)
800933c8:	30000126 	beq	r6,zero,800933d0 <rshift+0x98>
800933cc:	18c00104 	addi	r3,r3,4
800933d0:	1a05c83a 	sub	r2,r3,r8
800933d4:	1005d0ba 	srai	r2,r2,2
800933d8:	00001206 	br	80093424 <rshift+0xec>
800933dc:	20000415 	stw	zero,16(r4)
800933e0:	20000515 	stw	zero,20(r4)
800933e4:	f800283a 	ret
800933e8:	18bffc2e 	bgeu	r3,r2,800933dc <rshift+0xa4>
800933ec:	180d883a 	mov	r6,r3
800933f0:	400b883a 	mov	r5,r8
800933f4:	31c00017 	ldw	r7,0(r6)
800933f8:	29400104 	addi	r5,r5,4
800933fc:	31800104 	addi	r6,r6,4
80093400:	29ffff15 	stw	r7,-4(r5)
80093404:	30bffb36 	bltu	r6,r2,800933f4 <rshift+0xbc>
80093408:	00c6303a 	nor	r3,zero,r3
8009340c:	1885883a 	add	r2,r3,r2
80093410:	1004d0ba 	srli	r2,r2,2
80093414:	10800044 	addi	r2,r2,1
80093418:	1085883a 	add	r2,r2,r2
8009341c:	1085883a 	add	r2,r2,r2
80093420:	1005d0ba 	srai	r2,r2,2
80093424:	20800415 	stw	r2,16(r4)
80093428:	103fed26 	beq	r2,zero,800933e0 <rshift+0xa8>
8009342c:	f800283a 	ret
80093430:	4007883a 	mov	r3,r8
80093434:	003fe306 	br	800933c4 <rshift+0x8c>

80093438 <__gethex>:
80093438:	deffeb04 	addi	sp,sp,-84
8009343c:	dfc01415 	stw	ra,80(sp)
80093440:	dd801115 	stw	r22,68(sp)
80093444:	dcc00e15 	stw	r19,56(sp)
80093448:	dc800d15 	stw	r18,52(sp)
8009344c:	2827883a 	mov	r19,r5
80093450:	d9000115 	stw	r4,4(sp)
80093454:	d9800015 	stw	r6,0(sp)
80093458:	d9c00415 	stw	r7,16(sp)
8009345c:	df001315 	stw	fp,76(sp)
80093460:	ddc01215 	stw	r23,72(sp)
80093464:	dd401015 	stw	r21,64(sp)
80093468:	dd000f15 	stw	r20,60(sp)
8009346c:	dc400c15 	stw	r17,48(sp)
80093470:	dc000b15 	stw	r16,44(sp)
80093474:	00899f00 	call	800899f0 <_localeconv_r>
80093478:	14800017 	ldw	r18,0(r2)
8009347c:	9009883a 	mov	r4,r18
80093480:	00832a00 	call	800832a0 <strlen>
80093484:	98c00017 	ldw	r3,0(r19)
80093488:	102d883a 	mov	r22,r2
8009348c:	9085883a 	add	r2,r18,r2
80093490:	10bfffc3 	ldbu	r2,-1(r2)
80093494:	19000083 	ldbu	r4,2(r3)
80093498:	d8800305 	stb	r2,12(sp)
8009349c:	00800c04 	movi	r2,48
800934a0:	2081521e 	bne	r4,r2,800939ec <__gethex+0x5b4>
800934a4:	017fff84 	movi	r5,-2
800934a8:	188000c4 	addi	r2,r3,3
800934ac:	28cbc83a 	sub	r5,r5,r3
800934b0:	200d883a 	mov	r6,r4
800934b4:	28a3883a 	add	r17,r5,r2
800934b8:	102b883a 	mov	r21,r2
800934bc:	10800044 	addi	r2,r2,1
800934c0:	113fffc3 	ldbu	r4,-1(r2)
800934c4:	21bffb26 	beq	r4,r6,800934b4 <__gethex+0x7c>
800934c8:	052002b4 	movhi	r20,32778
800934cc:	a531f484 	addi	r20,r20,-14382
800934d0:	a109883a 	add	r4,r20,r4
800934d4:	20800003 	ldbu	r2,0(r4)
800934d8:	10008826 	beq	r2,zero,800936fc <__gethex+0x2c4>
800934dc:	a8800003 	ldbu	r2,0(r21)
800934e0:	0015883a 	mov	r10,zero
800934e4:	002f883a 	mov	r23,zero
800934e8:	a085883a 	add	r2,r20,r2
800934ec:	10800003 	ldbu	r2,0(r2)
800934f0:	a821883a 	mov	r16,r21
800934f4:	10000526 	beq	r2,zero,8009350c <__gethex+0xd4>
800934f8:	84000044 	addi	r16,r16,1
800934fc:	80800003 	ldbu	r2,0(r16)
80093500:	a085883a 	add	r2,r20,r2
80093504:	10800003 	ldbu	r2,0(r2)
80093508:	103ffb1e 	bne	r2,zero,800934f8 <__gethex+0xc0>
8009350c:	b00d883a 	mov	r6,r22
80093510:	900b883a 	mov	r5,r18
80093514:	8009883a 	mov	r4,r16
80093518:	da800a15 	stw	r10,40(sp)
8009351c:	0093f180 	call	80093f18 <strncmp>
80093520:	da800a17 	ldw	r10,40(sp)
80093524:	1000031e 	bne	r2,zero,80093534 <__gethex+0xfc>
80093528:	b8015226 	beq	r23,zero,80093a74 <__gethex+0x63c>
8009352c:	80800003 	ldbu	r2,0(r16)
80093530:	00000206 	br	8009353c <__gethex+0x104>
80093534:	80800003 	ldbu	r2,0(r16)
80093538:	b8011f26 	beq	r23,zero,800939b8 <__gethex+0x580>
8009353c:	85efc83a 	sub	r23,r16,r23
80093540:	bdef883a 	add	r23,r23,r23
80093544:	bdef883a 	add	r23,r23,r23
80093548:	05efc83a 	sub	r23,zero,r23
8009354c:	10803fcc 	andi	r2,r2,255
80093550:	01001404 	movi	r4,80
80093554:	11008626 	beq	r2,r4,80093770 <__gethex+0x338>
80093558:	01001c04 	movi	r4,112
8009355c:	11008426 	beq	r2,r4,80093770 <__gethex+0x338>
80093560:	8039883a 	mov	fp,r16
80093564:	9c000015 	stw	r16,0(r19)
80093568:	5000711e 	bne	r10,zero,80093730 <__gethex+0x2f8>
8009356c:	e545c83a 	sub	r2,fp,r21
80093570:	10bfffc4 	addi	r2,r2,-1
80093574:	010001c4 	movi	r4,7
80093578:	000b883a 	mov	r5,zero
8009357c:	2080030e 	bge	r4,r2,8009358c <__gethex+0x154>
80093580:	1005d07a 	srai	r2,r2,1
80093584:	29400044 	addi	r5,r5,1
80093588:	20bffd16 	blt	r4,r2,80093580 <__gethex+0x148>
8009358c:	d9000117 	ldw	r4,4(sp)
80093590:	008a1c80 	call	8008a1c8 <_Balloc>
80093594:	10c00504 	addi	r3,r2,20
80093598:	d8c00215 	stw	r3,8(sp)
8009359c:	1021883a 	mov	r16,r2
800935a0:	af01732e 	bgeu	r21,fp,80093b70 <__gethex+0x738>
800935a4:	dc400303 	ldbu	r17,12(sp)
800935a8:	03400044 	movi	r13,1
800935ac:	1815883a 	mov	r10,r3
800935b0:	0013883a 	mov	r9,zero
800935b4:	0027883a 	mov	r19,zero
800935b8:	6d9bc83a 	sub	r13,r13,r22
800935bc:	02c00804 	movi	r11,32
800935c0:	e0bfffc3 	ldbu	r2,-1(fp)
800935c4:	e3bfffc4 	addi	r14,fp,-1
800935c8:	88803026 	beq	r17,r2,8009368c <__gethex+0x254>
800935cc:	9ac04526 	beq	r19,r11,800936e4 <__gethex+0x2ac>
800935d0:	980b883a 	mov	r5,r19
800935d4:	9cc00104 	addi	r19,r19,4
800935d8:	e13fffc3 	ldbu	r4,-1(fp)
800935dc:	7039883a 	mov	fp,r14
800935e0:	a109883a 	add	r4,r20,r4
800935e4:	20800003 	ldbu	r2,0(r4)
800935e8:	108003cc 	andi	r2,r2,15
800935ec:	1144983a 	sll	r2,r2,r5
800935f0:	4892b03a 	or	r9,r9,r2
800935f4:	af3ff236 	bltu	r21,fp,800935c0 <__gethex+0x188>
800935f8:	d8c00217 	ldw	r3,8(sp)
800935fc:	50800104 	addi	r2,r10,4
80093600:	52400015 	stw	r9,0(r10)
80093604:	10c5c83a 	sub	r2,r2,r3
80093608:	1005d0ba 	srai	r2,r2,2
8009360c:	4809883a 	mov	r4,r9
80093610:	80800415 	stw	r2,16(r16)
80093614:	1022917a 	slli	r17,r2,5
80093618:	008a4bc0 	call	8008a4bc <__hi0bits>
8009361c:	d8c00017 	ldw	r3,0(sp)
80093620:	8885c83a 	sub	r2,r17,r2
80093624:	1c800017 	ldw	r18,0(r3)
80093628:	9080c716 	blt	r18,r2,80093948 <__gethex+0x510>
8009362c:	1480e416 	blt	r2,r18,800939c0 <__gethex+0x588>
80093630:	0027883a 	mov	r19,zero
80093634:	d8c00017 	ldw	r3,0(sp)
80093638:	18800217 	ldw	r2,8(r3)
8009363c:	15c08d16 	blt	r2,r23,80093874 <__gethex+0x43c>
80093640:	d8c00017 	ldw	r3,0(sp)
80093644:	18800117 	ldw	r2,4(r3)
80093648:	b880aa0e 	bge	r23,r2,800938f4 <__gethex+0x4bc>
8009364c:	15efc83a 	sub	r23,r2,r23
80093650:	bc80ed16 	blt	r23,r18,80093a08 <__gethex+0x5d0>
80093654:	18c00317 	ldw	r3,12(r3)
80093658:	01000084 	movi	r4,2
8009365c:	19014926 	beq	r3,r4,80093b84 <__gethex+0x74c>
80093660:	010000c4 	movi	r4,3
80093664:	19012e26 	beq	r3,r4,80093b20 <__gethex+0x6e8>
80093668:	01000044 	movi	r4,1
8009366c:	19014826 	beq	r3,r4,80093b90 <__gethex+0x758>
80093670:	d9000117 	ldw	r4,4(sp)
80093674:	800b883a 	mov	r5,r16
80093678:	008a2700 	call	8008a270 <_Bfree>
8009367c:	d8801517 	ldw	r2,84(sp)
80093680:	10000015 	stw	zero,0(r2)
80093684:	00801404 	movi	r2,80
80093688:	00002b06 	br	80093738 <__gethex+0x300>
8009368c:	735f883a 	add	r15,r14,r13
80093690:	7d7fce36 	bltu	r15,r21,800935cc <__gethex+0x194>
80093694:	7809883a 	mov	r4,r15
80093698:	b00d883a 	mov	r6,r22
8009369c:	900b883a 	mov	r5,r18
800936a0:	da400515 	stw	r9,20(sp)
800936a4:	da800a15 	stw	r10,40(sp)
800936a8:	dac00915 	stw	r11,36(sp)
800936ac:	db400815 	stw	r13,32(sp)
800936b0:	db800615 	stw	r14,24(sp)
800936b4:	dbc00715 	stw	r15,28(sp)
800936b8:	0093f180 	call	80093f18 <strncmp>
800936bc:	da400517 	ldw	r9,20(sp)
800936c0:	da800a17 	ldw	r10,40(sp)
800936c4:	dac00917 	ldw	r11,36(sp)
800936c8:	db400817 	ldw	r13,32(sp)
800936cc:	db800617 	ldw	r14,24(sp)
800936d0:	dbc00717 	ldw	r15,28(sp)
800936d4:	103fbd1e 	bne	r2,zero,800935cc <__gethex+0x194>
800936d8:	7839883a 	mov	fp,r15
800936dc:	af3fb836 	bltu	r21,fp,800935c0 <__gethex+0x188>
800936e0:	003fc506 	br	800935f8 <__gethex+0x1c0>
800936e4:	04c00104 	movi	r19,4
800936e8:	52400015 	stw	r9,0(r10)
800936ec:	000b883a 	mov	r5,zero
800936f0:	54d5883a 	add	r10,r10,r19
800936f4:	0013883a 	mov	r9,zero
800936f8:	003fb706 	br	800935d8 <__gethex+0x1a0>
800936fc:	b00d883a 	mov	r6,r22
80093700:	900b883a 	mov	r5,r18
80093704:	a809883a 	mov	r4,r21
80093708:	0093f180 	call	80093f18 <strncmp>
8009370c:	10006426 	beq	r2,zero,800938a0 <__gethex+0x468>
80093710:	a8800003 	ldbu	r2,0(r21)
80093714:	a821883a 	mov	r16,r21
80093718:	10803fcc 	andi	r2,r2,255
8009371c:	01001404 	movi	r4,80
80093720:	11001126 	beq	r2,r4,80093768 <__gethex+0x330>
80093724:	01001c04 	movi	r4,112
80093728:	11000f26 	beq	r2,r4,80093768 <__gethex+0x330>
8009372c:	9c000015 	stw	r16,0(r19)
80093730:	8800831e 	bne	r17,zero,80093940 <__gethex+0x508>
80093734:	00800184 	movi	r2,6
80093738:	dfc01417 	ldw	ra,80(sp)
8009373c:	df001317 	ldw	fp,76(sp)
80093740:	ddc01217 	ldw	r23,72(sp)
80093744:	dd801117 	ldw	r22,68(sp)
80093748:	dd401017 	ldw	r21,64(sp)
8009374c:	dd000f17 	ldw	r20,60(sp)
80093750:	dcc00e17 	ldw	r19,56(sp)
80093754:	dc800d17 	ldw	r18,52(sp)
80093758:	dc400c17 	ldw	r17,48(sp)
8009375c:	dc000b17 	ldw	r16,44(sp)
80093760:	dec01504 	addi	sp,sp,84
80093764:	f800283a 	ret
80093768:	002f883a 	mov	r23,zero
8009376c:	02800044 	movi	r10,1
80093770:	80800043 	ldbu	r2,1(r16)
80093774:	01400ac4 	movi	r5,43
80093778:	11003fcc 	andi	r4,r2,255
8009377c:	21406e26 	beq	r4,r5,80093938 <__gethex+0x500>
80093780:	01400b44 	movi	r5,45
80093784:	21404226 	beq	r4,r5,80093890 <__gethex+0x458>
80093788:	81400044 	addi	r5,r16,1
8009378c:	000d883a 	mov	r6,zero
80093790:	10803fcc 	andi	r2,r2,255
80093794:	a085883a 	add	r2,r20,r2
80093798:	11000003 	ldbu	r4,0(r2)
8009379c:	03000604 	movi	r12,24
800937a0:	20bfffc4 	addi	r2,r4,-1
800937a4:	10803fcc 	andi	r2,r2,255
800937a8:	60bf6d36 	bltu	r12,r2,80093560 <__gethex+0x128>
800937ac:	2ac00043 	ldbu	r11,1(r5)
800937b0:	20803fcc 	andi	r2,r4,255
800937b4:	012002b4 	movhi	r4,32778
800937b8:	2131f484 	addi	r4,r4,-14382
800937bc:	22c9883a 	add	r4,r4,r11
800937c0:	23400003 	ldbu	r13,0(r4)
800937c4:	10bffc04 	addi	r2,r2,-16
800937c8:	29400044 	addi	r5,r5,1
800937cc:	693fffc4 	addi	r4,r13,-1
800937d0:	21003fcc 	andi	r4,r4,255
800937d4:	6b403fcc 	andi	r13,r13,255
800937d8:	61000b36 	bltu	r12,r4,80093808 <__gethex+0x3d0>
800937dc:	29400044 	addi	r5,r5,1
800937e0:	29000003 	ldbu	r4,0(r5)
800937e4:	108002a4 	muli	r2,r2,10
800937e8:	a109883a 	add	r4,r20,r4
800937ec:	22c00003 	ldbu	r11,0(r4)
800937f0:	1345883a 	add	r2,r2,r13
800937f4:	10bffc04 	addi	r2,r2,-16
800937f8:	593fffc4 	addi	r4,r11,-1
800937fc:	21003fcc 	andi	r4,r4,255
80093800:	5b403fcc 	andi	r13,r11,255
80093804:	613ff52e 	bgeu	r12,r4,800937dc <__gethex+0x3a4>
80093808:	30000126 	beq	r6,zero,80093810 <__gethex+0x3d8>
8009380c:	0085c83a 	sub	r2,zero,r2
80093810:	8039883a 	mov	fp,r16
80093814:	b8af883a 	add	r23,r23,r2
80093818:	2821883a 	mov	r16,r5
8009381c:	003f5106 	br	80093564 <__gethex+0x12c>
80093820:	80800217 	ldw	r2,8(r16)
80093824:	e080f00e 	bge	fp,r2,80093be8 <__gethex+0x7b0>
80093828:	e007883a 	mov	r3,fp
8009382c:	18800144 	addi	r2,r3,5
80093830:	1085883a 	add	r2,r2,r2
80093834:	18c00044 	addi	r3,r3,1
80093838:	1085883a 	add	r2,r2,r2
8009383c:	8085883a 	add	r2,r16,r2
80093840:	80c00415 	stw	r3,16(r16)
80093844:	01000044 	movi	r4,1
80093848:	11000015 	stw	r4,0(r2)
8009384c:	00800084 	movi	r2,2
80093850:	8880d826 	beq	r17,r2,80093bb4 <__gethex+0x77c>
80093854:	e0c0ac0e 	bge	fp,r3,80093b08 <__gethex+0x6d0>
80093858:	01400044 	movi	r5,1
8009385c:	8009883a 	mov	r4,r16
80093860:	00933380 	call	80093338 <rshift>
80093864:	d8c00017 	ldw	r3,0(sp)
80093868:	bdc00044 	addi	r23,r23,1
8009386c:	18800217 	ldw	r2,8(r3)
80093870:	15c0a70e 	bge	r2,r23,80093b10 <__gethex+0x6d8>
80093874:	d9000117 	ldw	r4,4(sp)
80093878:	800b883a 	mov	r5,r16
8009387c:	008a2700 	call	8008a270 <_Bfree>
80093880:	d9001517 	ldw	r4,84(sp)
80093884:	008028c4 	movi	r2,163
80093888:	20000015 	stw	zero,0(r4)
8009388c:	003faa06 	br	80093738 <__gethex+0x300>
80093890:	01800044 	movi	r6,1
80093894:	80800083 	ldbu	r2,2(r16)
80093898:	81400084 	addi	r5,r16,2
8009389c:	003fbc06 	br	80093790 <__gethex+0x358>
800938a0:	ada1883a 	add	r16,r21,r22
800938a4:	81000003 	ldbu	r4,0(r16)
800938a8:	21403fcc 	andi	r5,r4,255
800938ac:	a145883a 	add	r2,r20,r5
800938b0:	10800003 	ldbu	r2,0(r2)
800938b4:	11803fcc 	andi	r6,r2,255
800938b8:	30004f26 	beq	r6,zero,800939f8 <__gethex+0x5c0>
800938bc:	00c00c04 	movi	r3,48
800938c0:	802b883a 	mov	r21,r16
800938c4:	28c0061e 	bne	r5,r3,800938e0 <__gethex+0x4a8>
800938c8:	2809883a 	mov	r4,r5
800938cc:	ad400044 	addi	r21,r21,1
800938d0:	a8800003 	ldbu	r2,0(r21)
800938d4:	113ffd26 	beq	r2,r4,800938cc <__gethex+0x494>
800938d8:	a085883a 	add	r2,r20,r2
800938dc:	10800003 	ldbu	r2,0(r2)
800938e0:	10803fcc 	andi	r2,r2,255
800938e4:	1015003a 	cmpeq	r10,r2,zero
800938e8:	802f883a 	mov	r23,r16
800938ec:	04400044 	movi	r17,1
800938f0:	003eff06 	br	800934f0 <__gethex+0xb8>
800938f4:	04400044 	movi	r17,1
800938f8:	98000926 	beq	r19,zero,80093920 <__gethex+0x4e8>
800938fc:	d8c00017 	ldw	r3,0(sp)
80093900:	18800317 	ldw	r2,12(r3)
80093904:	00c00084 	movi	r3,2
80093908:	10c06826 	beq	r2,r3,80093aac <__gethex+0x674>
8009390c:	00c000c4 	movi	r3,3
80093910:	10c06a26 	beq	r2,r3,80093abc <__gethex+0x684>
80093914:	00c00044 	movi	r3,1
80093918:	10c08d26 	beq	r2,r3,80093b50 <__gethex+0x718>
8009391c:	8c400414 	ori	r17,r17,16
80093920:	d9001517 	ldw	r4,84(sp)
80093924:	d8c00417 	ldw	r3,16(sp)
80093928:	8805883a 	mov	r2,r17
8009392c:	24000015 	stw	r16,0(r4)
80093930:	1dc00015 	stw	r23,0(r3)
80093934:	003f8006 	br	80093738 <__gethex+0x300>
80093938:	000d883a 	mov	r6,zero
8009393c:	003fd506 	br	80093894 <__gethex+0x45c>
80093940:	0005883a 	mov	r2,zero
80093944:	003f7c06 	br	80093738 <__gethex+0x300>
80093948:	14a3c83a 	sub	r17,r2,r18
8009394c:	880b883a 	mov	r5,r17
80093950:	8009883a 	mov	r4,r16
80093954:	008b1380 	call	8008b138 <__any_on>
80093958:	10002926 	beq	r2,zero,80093a00 <__gethex+0x5c8>
8009395c:	897fffc4 	addi	r5,r17,-1
80093960:	2807d17a 	srai	r3,r5,5
80093964:	d8800217 	ldw	r2,8(sp)
80093968:	290007cc 	andi	r4,r5,31
8009396c:	18c7883a 	add	r3,r3,r3
80093970:	18c7883a 	add	r3,r3,r3
80093974:	04c00044 	movi	r19,1
80093978:	10c7883a 	add	r3,r2,r3
8009397c:	9908983a 	sll	r4,r19,r4
80093980:	18c00017 	ldw	r3,0(r3)
80093984:	20c6703a 	and	r3,r4,r3
80093988:	18000626 	beq	r3,zero,800939a4 <__gethex+0x56c>
8009398c:	99407b0e 	bge	r19,r5,80093b7c <__gethex+0x744>
80093990:	897fff84 	addi	r5,r17,-2
80093994:	8009883a 	mov	r4,r16
80093998:	008b1380 	call	8008b138 <__any_on>
8009399c:	10007726 	beq	r2,zero,80093b7c <__gethex+0x744>
800939a0:	04c000c4 	movi	r19,3
800939a4:	880b883a 	mov	r5,r17
800939a8:	8009883a 	mov	r4,r16
800939ac:	00933380 	call	80093338 <rshift>
800939b0:	bc6f883a 	add	r23,r23,r17
800939b4:	003f1f06 	br	80093634 <__gethex+0x1fc>
800939b8:	002f883a 	mov	r23,zero
800939bc:	003ee306 	br	8009354c <__gethex+0x114>
800939c0:	d9000117 	ldw	r4,4(sp)
800939c4:	90a3c83a 	sub	r17,r18,r2
800939c8:	800b883a 	mov	r5,r16
800939cc:	880d883a 	mov	r6,r17
800939d0:	008a9480 	call	8008a948 <__lshift>
800939d4:	10c00504 	addi	r3,r2,20
800939d8:	1021883a 	mov	r16,r2
800939dc:	bc6fc83a 	sub	r23,r23,r17
800939e0:	d8c00215 	stw	r3,8(sp)
800939e4:	0027883a 	mov	r19,zero
800939e8:	003f1206 	br	80093634 <__gethex+0x1fc>
800939ec:	1d400084 	addi	r21,r3,2
800939f0:	0023883a 	mov	r17,zero
800939f4:	003eb406 	br	800934c8 <__gethex+0x90>
800939f8:	2005883a 	mov	r2,r4
800939fc:	003f4606 	br	80093718 <__gethex+0x2e0>
80093a00:	0027883a 	mov	r19,zero
80093a04:	003fe706 	br	800939a4 <__gethex+0x56c>
80093a08:	bc7fffc4 	addi	r17,r23,-1
80093a0c:	9800421e 	bne	r19,zero,80093b18 <__gethex+0x6e0>
80093a10:	88000426 	beq	r17,zero,80093a24 <__gethex+0x5ec>
80093a14:	880b883a 	mov	r5,r17
80093a18:	8009883a 	mov	r4,r16
80093a1c:	008b1380 	call	8008b138 <__any_on>
80093a20:	1027883a 	mov	r19,r2
80093a24:	8805d17a 	srai	r2,r17,5
80093a28:	d8c00217 	ldw	r3,8(sp)
80093a2c:	8c4007cc 	andi	r17,r17,31
80093a30:	1085883a 	add	r2,r2,r2
80093a34:	1085883a 	add	r2,r2,r2
80093a38:	1885883a 	add	r2,r3,r2
80093a3c:	00c00044 	movi	r3,1
80093a40:	1c62983a 	sll	r17,r3,r17
80093a44:	10800017 	ldw	r2,0(r2)
80093a48:	8884703a 	and	r2,r17,r2
80093a4c:	10000126 	beq	r2,zero,80093a54 <__gethex+0x61c>
80093a50:	9cc00094 	ori	r19,r19,2
80093a54:	b80b883a 	mov	r5,r23
80093a58:	8009883a 	mov	r4,r16
80093a5c:	00933380 	call	80093338 <rshift>
80093a60:	d8c00017 	ldw	r3,0(sp)
80093a64:	95e5c83a 	sub	r18,r18,r23
80093a68:	04400084 	movi	r17,2
80093a6c:	1dc00117 	ldw	r23,4(r3)
80093a70:	003fa106 	br	800938f8 <__gethex+0x4c0>
80093a74:	85af883a 	add	r23,r16,r22
80093a78:	b8800003 	ldbu	r2,0(r23)
80093a7c:	b821883a 	mov	r16,r23
80093a80:	11003fcc 	andi	r4,r2,255
80093a84:	a109883a 	add	r4,r20,r4
80093a88:	21000003 	ldbu	r4,0(r4)
80093a8c:	203eaa26 	beq	r4,zero,80093538 <__gethex+0x100>
80093a90:	84000044 	addi	r16,r16,1
80093a94:	80800003 	ldbu	r2,0(r16)
80093a98:	11003fcc 	andi	r4,r2,255
80093a9c:	a109883a 	add	r4,r20,r4
80093aa0:	21000003 	ldbu	r4,0(r4)
80093aa4:	203ffa1e 	bne	r4,zero,80093a90 <__gethex+0x658>
80093aa8:	003ea306 	br	80093538 <__gethex+0x100>
80093aac:	d9001617 	ldw	r4,88(sp)
80093ab0:	00800044 	movi	r2,1
80093ab4:	1109c83a 	sub	r4,r2,r4
80093ab8:	d9001615 	stw	r4,88(sp)
80093abc:	d8801617 	ldw	r2,88(sp)
80093ac0:	103f9626 	beq	r2,zero,8009391c <__gethex+0x4e4>
80093ac4:	87000417 	ldw	fp,16(r16)
80093ac8:	d9800217 	ldw	r6,8(sp)
80093acc:	013fffc4 	movi	r4,-1
80093ad0:	e727883a 	add	r19,fp,fp
80093ad4:	9ce7883a 	add	r19,r19,r19
80093ad8:	3005883a 	mov	r2,r6
80093adc:	34cb883a 	add	r5,r6,r19
80093ae0:	00000306 	br	80093af0 <__gethex+0x6b8>
80093ae4:	10000015 	stw	zero,0(r2)
80093ae8:	10800104 	addi	r2,r2,4
80093aec:	117f4c2e 	bgeu	r2,r5,80093820 <__gethex+0x3e8>
80093af0:	10c00017 	ldw	r3,0(r2)
80093af4:	193ffb26 	beq	r3,r4,80093ae4 <__gethex+0x6ac>
80093af8:	18c00044 	addi	r3,r3,1
80093afc:	10c00015 	stw	r3,0(r2)
80093b00:	00800084 	movi	r2,2
80093b04:	88802b26 	beq	r17,r2,80093bb4 <__gethex+0x77c>
80093b08:	948007cc 	andi	r18,r18,31
80093b0c:	90002f1e 	bne	r18,zero,80093bcc <__gethex+0x794>
80093b10:	04400844 	movi	r17,33
80093b14:	003f8206 	br	80093920 <__gethex+0x4e8>
80093b18:	04c00044 	movi	r19,1
80093b1c:	003fc106 	br	80093a24 <__gethex+0x5ec>
80093b20:	d8c01617 	ldw	r3,88(sp)
80093b24:	183ed226 	beq	r3,zero,80093670 <__gethex+0x238>
80093b28:	d8c00417 	ldw	r3,16(sp)
80093b2c:	d9001517 	ldw	r4,84(sp)
80093b30:	18800015 	stw	r2,0(r3)
80093b34:	d8c00217 	ldw	r3,8(sp)
80093b38:	00800044 	movi	r2,1
80093b3c:	80800415 	stw	r2,16(r16)
80093b40:	18800015 	stw	r2,0(r3)
80093b44:	24000015 	stw	r16,0(r4)
80093b48:	00801884 	movi	r2,98
80093b4c:	003efa06 	br	80093738 <__gethex+0x300>
80093b50:	9880008c 	andi	r2,r19,2
80093b54:	103f7126 	beq	r2,zero,8009391c <__gethex+0x4e4>
80093b58:	d8c00217 	ldw	r3,8(sp)
80093b5c:	18800017 	ldw	r2,0(r3)
80093b60:	9884b03a 	or	r2,r19,r2
80093b64:	1080004c 	andi	r2,r2,1
80093b68:	103fd61e 	bne	r2,zero,80093ac4 <__gethex+0x68c>
80093b6c:	003f6b06 	br	8009391c <__gethex+0x4e4>
80093b70:	da800217 	ldw	r10,8(sp)
80093b74:	0013883a 	mov	r9,zero
80093b78:	003e9f06 	br	800935f8 <__gethex+0x1c0>
80093b7c:	04c00084 	movi	r19,2
80093b80:	003f8806 	br	800939a4 <__gethex+0x56c>
80093b84:	d9001617 	ldw	r4,88(sp)
80093b88:	203fe726 	beq	r4,zero,80093b28 <__gethex+0x6f0>
80093b8c:	003eb806 	br	80093670 <__gethex+0x238>
80093b90:	95feb71e 	bne	r18,r23,80093670 <__gethex+0x238>
80093b94:	1cbfe40e 	bge	r3,r18,80093b28 <__gethex+0x6f0>
80093b98:	917fffc4 	addi	r5,r18,-1
80093b9c:	8009883a 	mov	r4,r16
80093ba0:	008b1380 	call	8008b138 <__any_on>
80093ba4:	103eb226 	beq	r2,zero,80093670 <__gethex+0x238>
80093ba8:	d8c00017 	ldw	r3,0(sp)
80093bac:	18800117 	ldw	r2,4(r3)
80093bb0:	003fdd06 	br	80093b28 <__gethex+0x6f0>
80093bb4:	d8c00017 	ldw	r3,0(sp)
80093bb8:	18800017 	ldw	r2,0(r3)
80093bbc:	10bfffc4 	addi	r2,r2,-1
80093bc0:	90801c26 	beq	r18,r2,80093c34 <__gethex+0x7fc>
80093bc4:	04400884 	movi	r17,34
80093bc8:	003f5506 	br	80093920 <__gethex+0x4e8>
80093bcc:	34c5883a 	add	r2,r6,r19
80093bd0:	113fff17 	ldw	r4,-4(r2)
80093bd4:	008a4bc0 	call	8008a4bc <__hi0bits>
80093bd8:	00c00804 	movi	r3,32
80093bdc:	1ca5c83a 	sub	r18,r3,r18
80093be0:	14bfcb0e 	bge	r2,r18,80093b10 <__gethex+0x6d8>
80093be4:	003f1c06 	br	80093858 <__gethex+0x420>
80093be8:	81400117 	ldw	r5,4(r16)
80093bec:	d9000117 	ldw	r4,4(sp)
80093bf0:	29400044 	addi	r5,r5,1
80093bf4:	008a1c80 	call	8008a1c8 <_Balloc>
80093bf8:	81800417 	ldw	r6,16(r16)
80093bfc:	81400304 	addi	r5,r16,12
80093c00:	11000304 	addi	r4,r2,12
80093c04:	31800084 	addi	r6,r6,2
80093c08:	318d883a 	add	r6,r6,r6
80093c0c:	318d883a 	add	r6,r6,r6
80093c10:	1029883a 	mov	r20,r2
80093c14:	0082cec0 	call	80082cec <memcpy>
80093c18:	d9000117 	ldw	r4,4(sp)
80093c1c:	800b883a 	mov	r5,r16
80093c20:	a021883a 	mov	r16,r20
80093c24:	008a2700 	call	8008a270 <_Bfree>
80093c28:	a0c00417 	ldw	r3,16(r20)
80093c2c:	a1800504 	addi	r6,r20,20
80093c30:	003efe06 	br	8009382c <__gethex+0x3f4>
80093c34:	9005d17a 	srai	r2,r18,5
80093c38:	944007cc 	andi	r17,r18,31
80093c3c:	1085883a 	add	r2,r2,r2
80093c40:	1085883a 	add	r2,r2,r2
80093c44:	3087883a 	add	r3,r6,r2
80093c48:	00800044 	movi	r2,1
80093c4c:	1462983a 	sll	r17,r2,r17
80093c50:	18800017 	ldw	r2,0(r3)
80093c54:	8884703a 	and	r2,r17,r2
80093c58:	1022c03a 	cmpne	r17,r2,zero
80093c5c:	00800884 	movi	r2,34
80093c60:	1463c83a 	sub	r17,r2,r17
80093c64:	003f2e06 	br	80093920 <__gethex+0x4e8>

80093c68 <__hexnan>:
80093c68:	defff904 	addi	sp,sp,-28
80093c6c:	dc800215 	stw	r18,8(sp)
80093c70:	2c800017 	ldw	r18,0(r5)
80093c74:	dfc00615 	stw	ra,24(sp)
80093c78:	dd400515 	stw	r21,20(sp)
80093c7c:	901fd17a 	srai	r15,r18,5
80093c80:	dd000415 	stw	r20,16(sp)
80093c84:	dcc00315 	stw	r19,12(sp)
80093c88:	7bdf883a 	add	r15,r15,r15
80093c8c:	7bdf883a 	add	r15,r15,r15
80093c90:	dc400115 	stw	r17,4(sp)
80093c94:	dc000015 	stw	r16,0(sp)
80093c98:	948007cc 	andi	r18,r18,31
80093c9c:	33df883a 	add	r15,r6,r15
80093ca0:	90000126 	beq	r18,zero,80093ca8 <__hexnan+0x40>
80093ca4:	7bc00104 	addi	r15,r15,4
80093ca8:	22000017 	ldw	r8,0(r4)
80093cac:	7affff04 	addi	r11,r15,-4
80093cb0:	03a002b4 	movhi	r14,32778
80093cb4:	783fff15 	stw	zero,-4(r15)
80093cb8:	581b883a 	mov	r13,r11
80093cbc:	580b883a 	mov	r5,r11
80093cc0:	000f883a 	mov	r7,zero
80093cc4:	003f883a 	mov	ra,zero
80093cc8:	0019883a 	mov	r12,zero
80093ccc:	73b1f484 	addi	r14,r14,-14382
80093cd0:	04400204 	movi	r17,8
80093cd4:	04000804 	movi	r16,32
80093cd8:	04c001c4 	movi	r19,7
80093cdc:	42000044 	addi	r8,r8,1
80093ce0:	40c00003 	ldbu	r3,0(r8)
80093ce4:	18001d26 	beq	r3,zero,80093d5c <__hexnan+0xf4>
80093ce8:	70c5883a 	add	r2,r14,r3
80093cec:	10800003 	ldbu	r2,0(r2)
80093cf0:	12403fcc 	andi	r9,r2,255
80093cf4:	4800301e 	bne	r9,zero,80093db8 <__hexnan+0x150>
80093cf8:	80c04236 	bltu	r16,r3,80093e04 <__hexnan+0x19c>
80093cfc:	fb3ff70e 	bge	ra,r12,80093cdc <__hexnan+0x74>
80093d00:	2b40112e 	bgeu	r5,r13,80093d48 <__hexnan+0xe0>
80093d04:	99c01016 	blt	r19,r7,80093d48 <__hexnan+0xe0>
80093d08:	89e9c83a 	sub	r20,r17,r7
80093d0c:	a529883a 	add	r20,r20,r20
80093d10:	2a800017 	ldw	r10,0(r5)
80093d14:	a529883a 	add	r20,r20,r20
80093d18:	852bc83a 	sub	r21,r16,r20
80093d1c:	28c00104 	addi	r3,r5,4
80093d20:	2805883a 	mov	r2,r5
80093d24:	19c00017 	ldw	r7,0(r3)
80093d28:	10800104 	addi	r2,r2,4
80093d2c:	18c00104 	addi	r3,r3,4
80093d30:	3d52983a 	sll	r9,r7,r21
80093d34:	4a92b03a 	or	r9,r9,r10
80093d38:	3d14d83a 	srl	r10,r7,r20
80093d3c:	127fff15 	stw	r9,-4(r2)
80093d40:	1abfff15 	stw	r10,-4(r3)
80093d44:	137ff736 	bltu	r2,r13,80093d24 <__hexnan+0xbc>
80093d48:	31402836 	bltu	r6,r5,80093dec <__hexnan+0x184>
80093d4c:	42000044 	addi	r8,r8,1
80093d50:	40c00003 	ldbu	r3,0(r8)
80093d54:	01c00204 	movi	r7,8
80093d58:	183fe31e 	bne	r3,zero,80093ce8 <__hexnan+0x80>
80093d5c:	60002b26 	beq	r12,zero,80093e0c <__hexnan+0x1a4>
80093d60:	2b40022e 	bgeu	r5,r13,80093d6c <__hexnan+0x104>
80093d64:	008001c4 	movi	r2,7
80093d68:	11c0430e 	bge	r2,r7,80093e78 <__hexnan+0x210>
80093d6c:	3140312e 	bgeu	r6,r5,80093e34 <__hexnan+0x1cc>
80093d70:	3007883a 	mov	r3,r6
80093d74:	29000017 	ldw	r4,0(r5)
80093d78:	18800104 	addi	r2,r3,4
80093d7c:	29400104 	addi	r5,r5,4
80093d80:	19000015 	stw	r4,0(r3)
80093d84:	1007883a 	mov	r3,r2
80093d88:	597ffa2e 	bgeu	r11,r5,80093d74 <__hexnan+0x10c>
80093d8c:	10000015 	stw	zero,0(r2)
80093d90:	10800104 	addi	r2,r2,4
80093d94:	58bffd2e 	bgeu	r11,r2,80093d8c <__hexnan+0x124>
80093d98:	78bfff17 	ldw	r2,-4(r15)
80093d9c:	1000041e 	bne	r2,zero,80093db0 <__hexnan+0x148>
80093da0:	32c02d26 	beq	r6,r11,80093e58 <__hexnan+0x1f0>
80093da4:	5affff04 	addi	r11,r11,-4
80093da8:	58800017 	ldw	r2,0(r11)
80093dac:	103ffc26 	beq	r2,zero,80093da0 <__hexnan+0x138>
80093db0:	00800144 	movi	r2,5
80093db4:	00001606 	br	80093e10 <__hexnan+0x1a8>
80093db8:	39c00044 	addi	r7,r7,1
80093dbc:	63000044 	addi	r12,r12,1
80093dc0:	89c0040e 	bge	r17,r7,80093dd4 <__hexnan+0x16c>
80093dc4:	317fc52e 	bgeu	r6,r5,80093cdc <__hexnan+0x74>
80093dc8:	283fff15 	stw	zero,-4(r5)
80093dcc:	01c00044 	movi	r7,1
80093dd0:	297fff04 	addi	r5,r5,-4
80093dd4:	28c00017 	ldw	r3,0(r5)
80093dd8:	108003cc 	andi	r2,r2,15
80093ddc:	1806913a 	slli	r3,r3,4
80093de0:	1884b03a 	or	r2,r3,r2
80093de4:	28800015 	stw	r2,0(r5)
80093de8:	003fbc06 	br	80093cdc <__hexnan+0x74>
80093dec:	2b7fff04 	addi	r13,r5,-4
80093df0:	283fff15 	stw	zero,-4(r5)
80093df4:	603f883a 	mov	ra,r12
80093df8:	680b883a 	mov	r5,r13
80093dfc:	000f883a 	mov	r7,zero
80093e00:	003fb606 	br	80093cdc <__hexnan+0x74>
80093e04:	00800a44 	movi	r2,41
80093e08:	18801726 	beq	r3,r2,80093e68 <__hexnan+0x200>
80093e0c:	00800104 	movi	r2,4
80093e10:	dfc00617 	ldw	ra,24(sp)
80093e14:	dd400517 	ldw	r21,20(sp)
80093e18:	dd000417 	ldw	r20,16(sp)
80093e1c:	dcc00317 	ldw	r19,12(sp)
80093e20:	dc800217 	ldw	r18,8(sp)
80093e24:	dc400117 	ldw	r17,4(sp)
80093e28:	dc000017 	ldw	r16,0(sp)
80093e2c:	dec00704 	addi	sp,sp,28
80093e30:	f800283a 	ret
80093e34:	903fd826 	beq	r18,zero,80093d98 <__hexnan+0x130>
80093e38:	00c00804 	movi	r3,32
80093e3c:	1ca5c83a 	sub	r18,r3,r18
80093e40:	00ffffc4 	movi	r3,-1
80093e44:	78bfff17 	ldw	r2,-4(r15)
80093e48:	1c86d83a 	srl	r3,r3,r18
80093e4c:	1884703a 	and	r2,r3,r2
80093e50:	78bfff15 	stw	r2,-4(r15)
80093e54:	003fd106 	br	80093d9c <__hexnan+0x134>
80093e58:	00800044 	movi	r2,1
80093e5c:	58800015 	stw	r2,0(r11)
80093e60:	00800144 	movi	r2,5
80093e64:	003fea06 	br	80093e10 <__hexnan+0x1a8>
80093e68:	42000044 	addi	r8,r8,1
80093e6c:	22000015 	stw	r8,0(r4)
80093e70:	603fbb1e 	bne	r12,zero,80093d60 <__hexnan+0xf8>
80093e74:	003fe506 	br	80093e0c <__hexnan+0x1a4>
80093e78:	02400204 	movi	r9,8
80093e7c:	49d3c83a 	sub	r9,r9,r7
80093e80:	4a53883a 	add	r9,r9,r9
80093e84:	2a000017 	ldw	r8,0(r5)
80093e88:	4a53883a 	add	r9,r9,r9
80093e8c:	02800804 	movi	r10,32
80093e90:	5255c83a 	sub	r10,r10,r9
80093e94:	28c00104 	addi	r3,r5,4
80093e98:	2805883a 	mov	r2,r5
80093e9c:	19c00017 	ldw	r7,0(r3)
80093ea0:	10800104 	addi	r2,r2,4
80093ea4:	18c00104 	addi	r3,r3,4
80093ea8:	3a88983a 	sll	r4,r7,r10
80093eac:	2208b03a 	or	r4,r4,r8
80093eb0:	3a50d83a 	srl	r8,r7,r9
80093eb4:	113fff15 	stw	r4,-4(r2)
80093eb8:	1a3fff15 	stw	r8,-4(r3)
80093ebc:	137ff736 	bltu	r2,r13,80093e9c <__hexnan+0x234>
80093ec0:	003faa06 	br	80093d6c <__hexnan+0x104>

80093ec4 <_isatty_r>:
80093ec4:	defffd04 	addi	sp,sp,-12
80093ec8:	dc000015 	stw	r16,0(sp)
80093ecc:	042002b4 	movhi	r16,32778
80093ed0:	dc400115 	stw	r17,4(sp)
80093ed4:	8401de04 	addi	r16,r16,1912
80093ed8:	2023883a 	mov	r17,r4
80093edc:	2809883a 	mov	r4,r5
80093ee0:	dfc00215 	stw	ra,8(sp)
80093ee4:	80000015 	stw	zero,0(r16)
80093ee8:	0098cac0 	call	80098cac <isatty>
80093eec:	00ffffc4 	movi	r3,-1
80093ef0:	10c00526 	beq	r2,r3,80093f08 <_isatty_r+0x44>
80093ef4:	dfc00217 	ldw	ra,8(sp)
80093ef8:	dc400117 	ldw	r17,4(sp)
80093efc:	dc000017 	ldw	r16,0(sp)
80093f00:	dec00304 	addi	sp,sp,12
80093f04:	f800283a 	ret
80093f08:	80c00017 	ldw	r3,0(r16)
80093f0c:	183ff926 	beq	r3,zero,80093ef4 <_isatty_r+0x30>
80093f10:	88c00015 	stw	r3,0(r17)
80093f14:	003ff706 	br	80093ef4 <_isatty_r+0x30>

80093f18 <strncmp>:
80093f18:	30003126 	beq	r6,zero,80093fe0 <strncmp+0xc8>
80093f1c:	2144b03a 	or	r2,r4,r5
80093f20:	108000cc 	andi	r2,r2,3
80093f24:	10001e1e 	bne	r2,zero,80093fa0 <strncmp+0x88>
80093f28:	024000c4 	movi	r9,3
80093f2c:	49801c2e 	bgeu	r9,r6,80093fa0 <strncmp+0x88>
80093f30:	20800017 	ldw	r2,0(r4)
80093f34:	28c00017 	ldw	r3,0(r5)
80093f38:	10c0191e 	bne	r2,r3,80093fa0 <strncmp+0x88>
80093f3c:	31bfff04 	addi	r6,r6,-4
80093f40:	30002726 	beq	r6,zero,80093fe0 <strncmp+0xc8>
80093f44:	02ffbff4 	movhi	r11,65279
80093f48:	5affbfc4 	addi	r11,r11,-257
80093f4c:	0086303a 	nor	r3,zero,r2
80093f50:	02a02074 	movhi	r10,32897
80093f54:	12c5883a 	add	r2,r2,r11
80093f58:	52a02004 	addi	r10,r10,-32640
80093f5c:	10c4703a 	and	r2,r2,r3
80093f60:	1284703a 	and	r2,r2,r10
80093f64:	10000b26 	beq	r2,zero,80093f94 <strncmp+0x7c>
80093f68:	00001d06 	br	80093fe0 <strncmp+0xc8>
80093f6c:	20c00017 	ldw	r3,0(r4)
80093f70:	29c00017 	ldw	r7,0(r5)
80093f74:	1ad1883a 	add	r8,r3,r11
80093f78:	00c4303a 	nor	r2,zero,r3
80093f7c:	4084703a 	and	r2,r8,r2
80093f80:	1284703a 	and	r2,r2,r10
80093f84:	19c0061e 	bne	r3,r7,80093fa0 <strncmp+0x88>
80093f88:	31bfff04 	addi	r6,r6,-4
80093f8c:	30001426 	beq	r6,zero,80093fe0 <strncmp+0xc8>
80093f90:	1000131e 	bne	r2,zero,80093fe0 <strncmp+0xc8>
80093f94:	21000104 	addi	r4,r4,4
80093f98:	29400104 	addi	r5,r5,4
80093f9c:	49bff336 	bltu	r9,r6,80093f6c <strncmp+0x54>
80093fa0:	28800007 	ldb	r2,0(r5)
80093fa4:	20c00007 	ldb	r3,0(r4)
80093fa8:	31bfffc4 	addi	r6,r6,-1
80093fac:	10c0081e 	bne	r2,r3,80093fd0 <strncmp+0xb8>
80093fb0:	30000b26 	beq	r6,zero,80093fe0 <strncmp+0xc8>
80093fb4:	10000a26 	beq	r2,zero,80093fe0 <strncmp+0xc8>
80093fb8:	21000044 	addi	r4,r4,1
80093fbc:	29400044 	addi	r5,r5,1
80093fc0:	20800007 	ldb	r2,0(r4)
80093fc4:	28c00007 	ldb	r3,0(r5)
80093fc8:	31bfffc4 	addi	r6,r6,-1
80093fcc:	10fff826 	beq	r2,r3,80093fb0 <strncmp+0x98>
80093fd0:	20800003 	ldbu	r2,0(r4)
80093fd4:	28c00003 	ldbu	r3,0(r5)
80093fd8:	10c5c83a 	sub	r2,r2,r3
80093fdc:	f800283a 	ret
80093fe0:	0005883a 	mov	r2,zero
80093fe4:	f800283a 	ret

80093fe8 <__ssprint_r>:
80093fe8:	30800217 	ldw	r2,8(r6)
80093fec:	defff604 	addi	sp,sp,-40
80093ff0:	dc800215 	stw	r18,8(sp)
80093ff4:	dfc00915 	stw	ra,36(sp)
80093ff8:	df000815 	stw	fp,32(sp)
80093ffc:	ddc00715 	stw	r23,28(sp)
80094000:	dd800615 	stw	r22,24(sp)
80094004:	dd400515 	stw	r21,20(sp)
80094008:	dd000415 	stw	r20,16(sp)
8009400c:	dcc00315 	stw	r19,12(sp)
80094010:	dc400115 	stw	r17,4(sp)
80094014:	dc000015 	stw	r16,0(sp)
80094018:	3025883a 	mov	r18,r6
8009401c:	10005826 	beq	r2,zero,80094180 <__ssprint_r+0x198>
80094020:	2027883a 	mov	r19,r4
80094024:	35c00017 	ldw	r23,0(r6)
80094028:	29000017 	ldw	r4,0(r5)
8009402c:	28800217 	ldw	r2,8(r5)
80094030:	2823883a 	mov	r17,r5
80094034:	0039883a 	mov	fp,zero
80094038:	0021883a 	mov	r16,zero
8009403c:	80003926 	beq	r16,zero,80094124 <__ssprint_r+0x13c>
80094040:	102b883a 	mov	r21,r2
80094044:	102d883a 	mov	r22,r2
80094048:	80803a36 	bltu	r16,r2,80094134 <__ssprint_r+0x14c>
8009404c:	88c0030b 	ldhu	r3,12(r17)
80094050:	1881200c 	andi	r2,r3,1152
80094054:	10002626 	beq	r2,zero,800940f0 <__ssprint_r+0x108>
80094058:	88800517 	ldw	r2,20(r17)
8009405c:	89400417 	ldw	r5,16(r17)
80094060:	81800044 	addi	r6,r16,1
80094064:	108f883a 	add	r7,r2,r2
80094068:	3885883a 	add	r2,r7,r2
8009406c:	100ed7fa 	srli	r7,r2,31
80094070:	216dc83a 	sub	r22,r4,r5
80094074:	3589883a 	add	r4,r6,r22
80094078:	3885883a 	add	r2,r7,r2
8009407c:	102bd07a 	srai	r21,r2,1
80094080:	a80d883a 	mov	r6,r21
80094084:	a900022e 	bgeu	r21,r4,80094090 <__ssprint_r+0xa8>
80094088:	202b883a 	mov	r21,r4
8009408c:	200d883a 	mov	r6,r4
80094090:	18c1000c 	andi	r3,r3,1024
80094094:	18002a26 	beq	r3,zero,80094140 <__ssprint_r+0x158>
80094098:	300b883a 	mov	r5,r6
8009409c:	9809883a 	mov	r4,r19
800940a0:	00824640 	call	80082464 <_malloc_r>
800940a4:	1029883a 	mov	r20,r2
800940a8:	10002c26 	beq	r2,zero,8009415c <__ssprint_r+0x174>
800940ac:	89400417 	ldw	r5,16(r17)
800940b0:	b00d883a 	mov	r6,r22
800940b4:	1009883a 	mov	r4,r2
800940b8:	0082cec0 	call	80082cec <memcpy>
800940bc:	8880030b 	ldhu	r2,12(r17)
800940c0:	00fedfc4 	movi	r3,-1153
800940c4:	10c4703a 	and	r2,r2,r3
800940c8:	10802014 	ori	r2,r2,128
800940cc:	8880030d 	sth	r2,12(r17)
800940d0:	a589883a 	add	r4,r20,r22
800940d4:	adadc83a 	sub	r22,r21,r22
800940d8:	8d400515 	stw	r21,20(r17)
800940dc:	8d800215 	stw	r22,8(r17)
800940e0:	8d000415 	stw	r20,16(r17)
800940e4:	89000015 	stw	r4,0(r17)
800940e8:	802b883a 	mov	r21,r16
800940ec:	802d883a 	mov	r22,r16
800940f0:	b00d883a 	mov	r6,r22
800940f4:	e00b883a 	mov	r5,fp
800940f8:	0089f440 	call	80089f44 <memmove>
800940fc:	88800217 	ldw	r2,8(r17)
80094100:	89000017 	ldw	r4,0(r17)
80094104:	90c00217 	ldw	r3,8(r18)
80094108:	1545c83a 	sub	r2,r2,r21
8009410c:	2589883a 	add	r4,r4,r22
80094110:	88800215 	stw	r2,8(r17)
80094114:	89000015 	stw	r4,0(r17)
80094118:	1c21c83a 	sub	r16,r3,r16
8009411c:	94000215 	stw	r16,8(r18)
80094120:	80001726 	beq	r16,zero,80094180 <__ssprint_r+0x198>
80094124:	bf000017 	ldw	fp,0(r23)
80094128:	bc000117 	ldw	r16,4(r23)
8009412c:	bdc00204 	addi	r23,r23,8
80094130:	003fc206 	br	8009403c <__ssprint_r+0x54>
80094134:	802b883a 	mov	r21,r16
80094138:	802d883a 	mov	r22,r16
8009413c:	003fec06 	br	800940f0 <__ssprint_r+0x108>
80094140:	9809883a 	mov	r4,r19
80094144:	008b38c0 	call	8008b38c <_realloc_r>
80094148:	1029883a 	mov	r20,r2
8009414c:	103fe01e 	bne	r2,zero,800940d0 <__ssprint_r+0xe8>
80094150:	89400417 	ldw	r5,16(r17)
80094154:	9809883a 	mov	r4,r19
80094158:	0088fc00 	call	80088fc0 <_free_r>
8009415c:	88c0030b 	ldhu	r3,12(r17)
80094160:	00800304 	movi	r2,12
80094164:	98800015 	stw	r2,0(r19)
80094168:	18c01014 	ori	r3,r3,64
8009416c:	88c0030d 	sth	r3,12(r17)
80094170:	00bfffc4 	movi	r2,-1
80094174:	90000215 	stw	zero,8(r18)
80094178:	90000115 	stw	zero,4(r18)
8009417c:	00000206 	br	80094188 <__ssprint_r+0x1a0>
80094180:	90000115 	stw	zero,4(r18)
80094184:	0005883a 	mov	r2,zero
80094188:	dfc00917 	ldw	ra,36(sp)
8009418c:	df000817 	ldw	fp,32(sp)
80094190:	ddc00717 	ldw	r23,28(sp)
80094194:	dd800617 	ldw	r22,24(sp)
80094198:	dd400517 	ldw	r21,20(sp)
8009419c:	dd000417 	ldw	r20,16(sp)
800941a0:	dcc00317 	ldw	r19,12(sp)
800941a4:	dc800217 	ldw	r18,8(sp)
800941a8:	dc400117 	ldw	r17,4(sp)
800941ac:	dc000017 	ldw	r16,0(sp)
800941b0:	dec00a04 	addi	sp,sp,40
800941b4:	f800283a 	ret

800941b8 <___svfiprintf_internal_r>:
800941b8:	2880030b 	ldhu	r2,12(r5)
800941bc:	deffc804 	addi	sp,sp,-224
800941c0:	dcc03115 	stw	r19,196(sp)
800941c4:	dfc03715 	stw	ra,220(sp)
800941c8:	df003615 	stw	fp,216(sp)
800941cc:	ddc03515 	stw	r23,212(sp)
800941d0:	dd803415 	stw	r22,208(sp)
800941d4:	dd403315 	stw	r21,204(sp)
800941d8:	dd003215 	stw	r20,200(sp)
800941dc:	dc803015 	stw	r18,192(sp)
800941e0:	dc402f15 	stw	r17,188(sp)
800941e4:	dc002e15 	stw	r16,184(sp)
800941e8:	d9402715 	stw	r5,156(sp)
800941ec:	d9002a15 	stw	r4,168(sp)
800941f0:	1080200c 	andi	r2,r2,128
800941f4:	d9c02315 	stw	r7,140(sp)
800941f8:	3027883a 	mov	r19,r6
800941fc:	10000226 	beq	r2,zero,80094208 <___svfiprintf_internal_r+0x50>
80094200:	28800417 	ldw	r2,16(r5)
80094204:	10041d26 	beq	r2,zero,8009527c <___svfiprintf_internal_r+0x10c4>
80094208:	dac01a04 	addi	r11,sp,104
8009420c:	dac01e15 	stw	r11,120(sp)
80094210:	d8801e17 	ldw	r2,120(sp)
80094214:	dac019c4 	addi	r11,sp,103
80094218:	dd402a17 	ldw	r21,168(sp)
8009421c:	ddc02717 	ldw	r23,156(sp)
80094220:	05a002b4 	movhi	r22,32778
80094224:	052002b4 	movhi	r20,32778
80094228:	dac01f15 	stw	r11,124(sp)
8009422c:	12d7c83a 	sub	r11,r2,r11
80094230:	b5b23884 	addi	r22,r22,-14110
80094234:	a5323484 	addi	r20,r20,-14126
80094238:	dec01a15 	stw	sp,104(sp)
8009423c:	d8001c15 	stw	zero,112(sp)
80094240:	d8001b15 	stw	zero,108(sp)
80094244:	d811883a 	mov	r8,sp
80094248:	d8002915 	stw	zero,164(sp)
8009424c:	d8002515 	stw	zero,148(sp)
80094250:	dac02b15 	stw	r11,172(sp)
80094254:	98800007 	ldb	r2,0(r19)
80094258:	1002dd26 	beq	r2,zero,80094dd0 <___svfiprintf_internal_r+0xc18>
8009425c:	00c00944 	movi	r3,37
80094260:	9823883a 	mov	r17,r19
80094264:	10c0021e 	bne	r2,r3,80094270 <___svfiprintf_internal_r+0xb8>
80094268:	00001406 	br	800942bc <___svfiprintf_internal_r+0x104>
8009426c:	10c00326 	beq	r2,r3,8009427c <___svfiprintf_internal_r+0xc4>
80094270:	8c400044 	addi	r17,r17,1
80094274:	88800007 	ldb	r2,0(r17)
80094278:	103ffc1e 	bne	r2,zero,8009426c <___svfiprintf_internal_r+0xb4>
8009427c:	8ce1c83a 	sub	r16,r17,r19
80094280:	80000e26 	beq	r16,zero,800942bc <___svfiprintf_internal_r+0x104>
80094284:	d8c01c17 	ldw	r3,112(sp)
80094288:	d8801b17 	ldw	r2,108(sp)
8009428c:	44c00015 	stw	r19,0(r8)
80094290:	1c07883a 	add	r3,r3,r16
80094294:	10800044 	addi	r2,r2,1
80094298:	d8c01c15 	stw	r3,112(sp)
8009429c:	44000115 	stw	r16,4(r8)
800942a0:	d8801b15 	stw	r2,108(sp)
800942a4:	00c001c4 	movi	r3,7
800942a8:	18831e16 	blt	r3,r2,80094f24 <___svfiprintf_internal_r+0xd6c>
800942ac:	42000204 	addi	r8,r8,8
800942b0:	dac02517 	ldw	r11,148(sp)
800942b4:	5c17883a 	add	r11,r11,r16
800942b8:	dac02515 	stw	r11,148(sp)
800942bc:	88800007 	ldb	r2,0(r17)
800942c0:	1002c526 	beq	r2,zero,80094dd8 <___svfiprintf_internal_r+0xc20>
800942c4:	88c00047 	ldb	r3,1(r17)
800942c8:	8cc00044 	addi	r19,r17,1
800942cc:	d8001d85 	stb	zero,118(sp)
800942d0:	0009883a 	mov	r4,zero
800942d4:	000f883a 	mov	r7,zero
800942d8:	043fffc4 	movi	r16,-1
800942dc:	d8002415 	stw	zero,144(sp)
800942e0:	0025883a 	mov	r18,zero
800942e4:	01401604 	movi	r5,88
800942e8:	01800244 	movi	r6,9
800942ec:	02800a84 	movi	r10,42
800942f0:	02401b04 	movi	r9,108
800942f4:	9cc00044 	addi	r19,r19,1
800942f8:	18bff804 	addi	r2,r3,-32
800942fc:	2881dd36 	bltu	r5,r2,80094a74 <___svfiprintf_internal_r+0x8bc>
80094300:	100490ba 	slli	r2,r2,2
80094304:	02e00274 	movhi	r11,32777
80094308:	5ad0c604 	addi	r11,r11,17176
8009430c:	12c5883a 	add	r2,r2,r11
80094310:	10800017 	ldw	r2,0(r2)
80094314:	1000683a 	jmp	r2
80094318:	80094514 	ori	zero,r16,9492
8009431c:	80094a74 	orhi	zero,r16,9513
80094320:	80094a74 	orhi	zero,r16,9513
80094324:	80094508 	cmpgei	zero,r16,9492
80094328:	80094a74 	orhi	zero,r16,9513
8009432c:	80094a74 	orhi	zero,r16,9513
80094330:	80094a74 	orhi	zero,r16,9513
80094334:	80094a74 	orhi	zero,r16,9513
80094338:	80094a74 	orhi	zero,r16,9513
8009433c:	80094a74 	orhi	zero,r16,9513
80094340:	8009447c 	xorhi	zero,r16,9489
80094344:	80094658 	cmpnei	zero,r16,9497
80094348:	80094a74 	orhi	zero,r16,9513
8009434c:	800944a8 	cmpgeui	zero,r16,9490
80094350:	80094aa8 	cmpgeui	zero,r16,9514
80094354:	80094a74 	orhi	zero,r16,9513
80094358:	80094a9c 	xori	zero,r16,9514
8009435c:	80094a3c 	xorhi	zero,r16,9512
80094360:	80094a3c 	xorhi	zero,r16,9512
80094364:	80094a3c 	xorhi	zero,r16,9512
80094368:	80094a3c 	xorhi	zero,r16,9512
8009436c:	80094a3c 	xorhi	zero,r16,9512
80094370:	80094a3c 	xorhi	zero,r16,9512
80094374:	80094a3c 	xorhi	zero,r16,9512
80094378:	80094a3c 	xorhi	zero,r16,9512
8009437c:	80094a3c 	xorhi	zero,r16,9512
80094380:	80094a74 	orhi	zero,r16,9513
80094384:	80094a74 	orhi	zero,r16,9513
80094388:	80094a74 	orhi	zero,r16,9513
8009438c:	80094a74 	orhi	zero,r16,9513
80094390:	80094a74 	orhi	zero,r16,9513
80094394:	80094a74 	orhi	zero,r16,9513
80094398:	80094a74 	orhi	zero,r16,9513
8009439c:	80094a74 	orhi	zero,r16,9513
800943a0:	80094a74 	orhi	zero,r16,9513
800943a4:	80094a74 	orhi	zero,r16,9513
800943a8:	800949d8 	cmpnei	zero,r16,9511
800943ac:	80094a74 	orhi	zero,r16,9513
800943b0:	80094a74 	orhi	zero,r16,9513
800943b4:	80094a74 	orhi	zero,r16,9513
800943b8:	80094a74 	orhi	zero,r16,9513
800943bc:	80094a74 	orhi	zero,r16,9513
800943c0:	80094a74 	orhi	zero,r16,9513
800943c4:	80094a74 	orhi	zero,r16,9513
800943c8:	80094a74 	orhi	zero,r16,9513
800943cc:	80094a74 	orhi	zero,r16,9513
800943d0:	80094a74 	orhi	zero,r16,9513
800943d4:	80094b50 	cmplti	zero,r16,9517
800943d8:	80094a74 	orhi	zero,r16,9513
800943dc:	80094a74 	orhi	zero,r16,9513
800943e0:	80094a74 	orhi	zero,r16,9513
800943e4:	80094a74 	orhi	zero,r16,9513
800943e8:	80094a74 	orhi	zero,r16,9513
800943ec:	80094ae8 	cmpgeui	zero,r16,9515
800943f0:	80094a74 	orhi	zero,r16,9513
800943f4:	80094a74 	orhi	zero,r16,9513
800943f8:	8009481c 	xori	zero,r16,9504
800943fc:	80094a74 	orhi	zero,r16,9513
80094400:	80094a74 	orhi	zero,r16,9513
80094404:	80094a74 	orhi	zero,r16,9513
80094408:	80094a74 	orhi	zero,r16,9513
8009440c:	80094a74 	orhi	zero,r16,9513
80094410:	80094a74 	orhi	zero,r16,9513
80094414:	80094a74 	orhi	zero,r16,9513
80094418:	80094a74 	orhi	zero,r16,9513
8009441c:	80094a74 	orhi	zero,r16,9513
80094420:	80094a74 	orhi	zero,r16,9513
80094424:	8009470c 	andi	zero,r16,9500
80094428:	800948b8 	rdprs	zero,r16,9506
8009442c:	80094a74 	orhi	zero,r16,9513
80094430:	80094a74 	orhi	zero,r16,9513
80094434:	80094a74 	orhi	zero,r16,9513
80094438:	800948ac 	andhi	zero,r16,9506
8009443c:	800948b8 	rdprs	zero,r16,9506
80094440:	80094a74 	orhi	zero,r16,9513
80094444:	80094a74 	orhi	zero,r16,9513
80094448:	8009489c 	xori	zero,r16,9506
8009444c:	80094a74 	orhi	zero,r16,9513
80094450:	80094860 	cmpeqi	zero,r16,9505
80094454:	80094668 	cmpgeui	zero,r16,9497
80094458:	800944b4 	orhi	zero,r16,9490
8009445c:	800949cc 	andi	zero,r16,9511
80094460:	80094a74 	orhi	zero,r16,9513
80094464:	80094980 	call	88009498 <__alt_data_end+0x7f0c498>
80094468:	80094a74 	orhi	zero,r16,9513
8009446c:	800945d8 	cmpnei	zero,r16,9495
80094470:	80094a74 	orhi	zero,r16,9513
80094474:	80094a74 	orhi	zero,r16,9513
80094478:	80094534 	orhi	zero,r16,9492
8009447c:	dac02317 	ldw	r11,140(sp)
80094480:	5ac00017 	ldw	r11,0(r11)
80094484:	dac02415 	stw	r11,144(sp)
80094488:	dac02317 	ldw	r11,140(sp)
8009448c:	58800104 	addi	r2,r11,4
80094490:	dac02417 	ldw	r11,144(sp)
80094494:	5802e90e 	bge	r11,zero,8009503c <___svfiprintf_internal_r+0xe84>
80094498:	dac02417 	ldw	r11,144(sp)
8009449c:	d8802315 	stw	r2,140(sp)
800944a0:	02d7c83a 	sub	r11,zero,r11
800944a4:	dac02415 	stw	r11,144(sp)
800944a8:	94800114 	ori	r18,r18,4
800944ac:	98c00007 	ldb	r3,0(r19)
800944b0:	003f9006 	br	800942f4 <___svfiprintf_internal_r+0x13c>
800944b4:	00800c04 	movi	r2,48
800944b8:	dac02317 	ldw	r11,140(sp)
800944bc:	d8801d05 	stb	r2,116(sp)
800944c0:	00801e04 	movi	r2,120
800944c4:	d8801d45 	stb	r2,117(sp)
800944c8:	d8001d85 	stb	zero,118(sp)
800944cc:	58c00104 	addi	r3,r11,4
800944d0:	5f000017 	ldw	fp,0(r11)
800944d4:	0013883a 	mov	r9,zero
800944d8:	90800094 	ori	r2,r18,2
800944dc:	80032b16 	blt	r16,zero,8009518c <___svfiprintf_internal_r+0xfd4>
800944e0:	00bfdfc4 	movi	r2,-129
800944e4:	90a4703a 	and	r18,r18,r2
800944e8:	d8c02315 	stw	r3,140(sp)
800944ec:	94800094 	ori	r18,r18,2
800944f0:	e002dc26 	beq	fp,zero,80095064 <___svfiprintf_internal_r+0xeac>
800944f4:	012002b4 	movhi	r4,32778
800944f8:	2130c404 	addi	r4,r4,-15600
800944fc:	0015883a 	mov	r10,zero
80094500:	d9002915 	stw	r4,164(sp)
80094504:	00002306 	br	80094594 <___svfiprintf_internal_r+0x3dc>
80094508:	94800054 	ori	r18,r18,1
8009450c:	98c00007 	ldb	r3,0(r19)
80094510:	003f7806 	br	800942f4 <___svfiprintf_internal_r+0x13c>
80094514:	38803fcc 	andi	r2,r7,255
80094518:	1080201c 	xori	r2,r2,128
8009451c:	10bfe004 	addi	r2,r2,-128
80094520:	1002f31e 	bne	r2,zero,800950f0 <___svfiprintf_internal_r+0xf38>
80094524:	01000044 	movi	r4,1
80094528:	01c00804 	movi	r7,32
8009452c:	98c00007 	ldb	r3,0(r19)
80094530:	003f7006 	br	800942f4 <___svfiprintf_internal_r+0x13c>
80094534:	21003fcc 	andi	r4,r4,255
80094538:	2003aa1e 	bne	r4,zero,800953e4 <___svfiprintf_internal_r+0x122c>
8009453c:	00a002b4 	movhi	r2,32778
80094540:	10b0c404 	addi	r2,r2,-15600
80094544:	d8802915 	stw	r2,164(sp)
80094548:	9080080c 	andi	r2,r18,32
8009454c:	1000ba26 	beq	r2,zero,80094838 <___svfiprintf_internal_r+0x680>
80094550:	dac02317 	ldw	r11,140(sp)
80094554:	5f000017 	ldw	fp,0(r11)
80094558:	5a400117 	ldw	r9,4(r11)
8009455c:	5ac00204 	addi	r11,r11,8
80094560:	dac02315 	stw	r11,140(sp)
80094564:	9080004c 	andi	r2,r18,1
80094568:	10029026 	beq	r2,zero,80094fac <___svfiprintf_internal_r+0xdf4>
8009456c:	e244b03a 	or	r2,fp,r9
80094570:	1002d41e 	bne	r2,zero,800950c4 <___svfiprintf_internal_r+0xf0c>
80094574:	d8001d85 	stb	zero,118(sp)
80094578:	80030b16 	blt	r16,zero,800951a8 <___svfiprintf_internal_r+0xff0>
8009457c:	00bfdfc4 	movi	r2,-129
80094580:	90a4703a 	and	r18,r18,r2
80094584:	0015883a 	mov	r10,zero
80094588:	80002426 	beq	r16,zero,8009461c <___svfiprintf_internal_r+0x464>
8009458c:	0039883a 	mov	fp,zero
80094590:	0013883a 	mov	r9,zero
80094594:	d9002917 	ldw	r4,164(sp)
80094598:	dc401a04 	addi	r17,sp,104
8009459c:	e08003cc 	andi	r2,fp,15
800945a0:	4806973a 	slli	r3,r9,28
800945a4:	2085883a 	add	r2,r4,r2
800945a8:	e038d13a 	srli	fp,fp,4
800945ac:	10800003 	ldbu	r2,0(r2)
800945b0:	4812d13a 	srli	r9,r9,4
800945b4:	8c7fffc4 	addi	r17,r17,-1
800945b8:	1f38b03a 	or	fp,r3,fp
800945bc:	88800005 	stb	r2,0(r17)
800945c0:	e244b03a 	or	r2,fp,r9
800945c4:	103ff51e 	bne	r2,zero,8009459c <___svfiprintf_internal_r+0x3e4>
800945c8:	dac01e17 	ldw	r11,120(sp)
800945cc:	5c57c83a 	sub	r11,r11,r17
800945d0:	dac02115 	stw	r11,132(sp)
800945d4:	00001406 	br	80094628 <___svfiprintf_internal_r+0x470>
800945d8:	21003fcc 	andi	r4,r4,255
800945dc:	2003741e 	bne	r4,zero,800953b0 <___svfiprintf_internal_r+0x11f8>
800945e0:	9080080c 	andi	r2,r18,32
800945e4:	10014526 	beq	r2,zero,80094afc <___svfiprintf_internal_r+0x944>
800945e8:	dac02317 	ldw	r11,140(sp)
800945ec:	d8001d85 	stb	zero,118(sp)
800945f0:	58c00204 	addi	r3,r11,8
800945f4:	5f000017 	ldw	fp,0(r11)
800945f8:	5a400117 	ldw	r9,4(r11)
800945fc:	8002d916 	blt	r16,zero,80095164 <___svfiprintf_internal_r+0xfac>
80094600:	013fdfc4 	movi	r4,-129
80094604:	e244b03a 	or	r2,fp,r9
80094608:	d8c02315 	stw	r3,140(sp)
8009460c:	9124703a 	and	r18,r18,r4
80094610:	0015883a 	mov	r10,zero
80094614:	1000b91e 	bne	r2,zero,800948fc <___svfiprintf_internal_r+0x744>
80094618:	8002e61e 	bne	r16,zero,800951b4 <___svfiprintf_internal_r+0xffc>
8009461c:	0021883a 	mov	r16,zero
80094620:	d8002115 	stw	zero,132(sp)
80094624:	dc401a04 	addi	r17,sp,104
80094628:	d8c02117 	ldw	r3,132(sp)
8009462c:	dc002015 	stw	r16,128(sp)
80094630:	80c0010e 	bge	r16,r3,80094638 <___svfiprintf_internal_r+0x480>
80094634:	d8c02015 	stw	r3,128(sp)
80094638:	52803fcc 	andi	r10,r10,255
8009463c:	5280201c 	xori	r10,r10,128
80094640:	52bfe004 	addi	r10,r10,-128
80094644:	50003c26 	beq	r10,zero,80094738 <___svfiprintf_internal_r+0x580>
80094648:	dac02017 	ldw	r11,128(sp)
8009464c:	5ac00044 	addi	r11,r11,1
80094650:	dac02015 	stw	r11,128(sp)
80094654:	00003806 	br	80094738 <___svfiprintf_internal_r+0x580>
80094658:	01000044 	movi	r4,1
8009465c:	01c00ac4 	movi	r7,43
80094660:	98c00007 	ldb	r3,0(r19)
80094664:	003f2306 	br	800942f4 <___svfiprintf_internal_r+0x13c>
80094668:	21003fcc 	andi	r4,r4,255
8009466c:	2003481e 	bne	r4,zero,80095390 <___svfiprintf_internal_r+0x11d8>
80094670:	9080080c 	andi	r2,r18,32
80094674:	10013b26 	beq	r2,zero,80094b64 <___svfiprintf_internal_r+0x9ac>
80094678:	dac02317 	ldw	r11,140(sp)
8009467c:	d8001d85 	stb	zero,118(sp)
80094680:	58800204 	addi	r2,r11,8
80094684:	5f000017 	ldw	fp,0(r11)
80094688:	5a400117 	ldw	r9,4(r11)
8009468c:	8002a816 	blt	r16,zero,80095130 <___svfiprintf_internal_r+0xf78>
80094690:	013fdfc4 	movi	r4,-129
80094694:	e246b03a 	or	r3,fp,r9
80094698:	d8802315 	stw	r2,140(sp)
8009469c:	9124703a 	and	r18,r18,r4
800946a0:	18013c26 	beq	r3,zero,80094b94 <___svfiprintf_internal_r+0x9dc>
800946a4:	0015883a 	mov	r10,zero
800946a8:	dc401a04 	addi	r17,sp,104
800946ac:	e006d0fa 	srli	r3,fp,3
800946b0:	4808977a 	slli	r4,r9,29
800946b4:	4812d0fa 	srli	r9,r9,3
800946b8:	e70001cc 	andi	fp,fp,7
800946bc:	e0800c04 	addi	r2,fp,48
800946c0:	8c7fffc4 	addi	r17,r17,-1
800946c4:	20f8b03a 	or	fp,r4,r3
800946c8:	88800005 	stb	r2,0(r17)
800946cc:	e246b03a 	or	r3,fp,r9
800946d0:	183ff61e 	bne	r3,zero,800946ac <___svfiprintf_internal_r+0x4f4>
800946d4:	90c0004c 	andi	r3,r18,1
800946d8:	1800a526 	beq	r3,zero,80094970 <___svfiprintf_internal_r+0x7b8>
800946dc:	10803fcc 	andi	r2,r2,255
800946e0:	1080201c 	xori	r2,r2,128
800946e4:	10bfe004 	addi	r2,r2,-128
800946e8:	00c00c04 	movi	r3,48
800946ec:	10ffb626 	beq	r2,r3,800945c8 <___svfiprintf_internal_r+0x410>
800946f0:	88ffffc5 	stb	r3,-1(r17)
800946f4:	d8c01e17 	ldw	r3,120(sp)
800946f8:	88bfffc4 	addi	r2,r17,-1
800946fc:	1023883a 	mov	r17,r2
80094700:	1887c83a 	sub	r3,r3,r2
80094704:	d8c02115 	stw	r3,132(sp)
80094708:	003fc706 	br	80094628 <___svfiprintf_internal_r+0x470>
8009470c:	dac02317 	ldw	r11,140(sp)
80094710:	00c00044 	movi	r3,1
80094714:	d8c02015 	stw	r3,128(sp)
80094718:	58800017 	ldw	r2,0(r11)
8009471c:	5ac00104 	addi	r11,r11,4
80094720:	d8001d85 	stb	zero,118(sp)
80094724:	d8801005 	stb	r2,64(sp)
80094728:	dac02315 	stw	r11,140(sp)
8009472c:	d8c02115 	stw	r3,132(sp)
80094730:	dc401004 	addi	r17,sp,64
80094734:	0021883a 	mov	r16,zero
80094738:	90c0008c 	andi	r3,r18,2
8009473c:	d8c02215 	stw	r3,136(sp)
80094740:	18000326 	beq	r3,zero,80094750 <___svfiprintf_internal_r+0x598>
80094744:	dac02017 	ldw	r11,128(sp)
80094748:	5ac00084 	addi	r11,r11,2
8009474c:	dac02015 	stw	r11,128(sp)
80094750:	90c0210c 	andi	r3,r18,132
80094754:	d8c02615 	stw	r3,152(sp)
80094758:	1801131e 	bne	r3,zero,80094ba8 <___svfiprintf_internal_r+0x9f0>
8009475c:	dac02417 	ldw	r11,144(sp)
80094760:	d8c02017 	ldw	r3,128(sp)
80094764:	58f9c83a 	sub	fp,r11,r3
80094768:	07010f0e 	bge	zero,fp,80094ba8 <___svfiprintf_internal_r+0x9f0>
8009476c:	02400404 	movi	r9,16
80094770:	d8c01c17 	ldw	r3,112(sp)
80094774:	d8801b17 	ldw	r2,108(sp)
80094778:	4f02d60e 	bge	r9,fp,800952d4 <___svfiprintf_internal_r+0x111c>
8009477c:	016002b4 	movhi	r5,32778
80094780:	29723884 	addi	r5,r5,-14110
80094784:	d9402815 	stw	r5,160(sp)
80094788:	028001c4 	movi	r10,7
8009478c:	00000306 	br	8009479c <___svfiprintf_internal_r+0x5e4>
80094790:	e73ffc04 	addi	fp,fp,-16
80094794:	42000204 	addi	r8,r8,8
80094798:	4f00150e 	bge	r9,fp,800947f0 <___svfiprintf_internal_r+0x638>
8009479c:	18c00404 	addi	r3,r3,16
800947a0:	10800044 	addi	r2,r2,1
800947a4:	45800015 	stw	r22,0(r8)
800947a8:	42400115 	stw	r9,4(r8)
800947ac:	d8c01c15 	stw	r3,112(sp)
800947b0:	d8801b15 	stw	r2,108(sp)
800947b4:	50bff60e 	bge	r10,r2,80094790 <___svfiprintf_internal_r+0x5d8>
800947b8:	d9801a04 	addi	r6,sp,104
800947bc:	b80b883a 	mov	r5,r23
800947c0:	a809883a 	mov	r4,r21
800947c4:	da402c15 	stw	r9,176(sp)
800947c8:	da802d15 	stw	r10,180(sp)
800947cc:	0093fe80 	call	80093fe8 <__ssprint_r>
800947d0:	da402c17 	ldw	r9,176(sp)
800947d4:	da802d17 	ldw	r10,180(sp)
800947d8:	1001851e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
800947dc:	e73ffc04 	addi	fp,fp,-16
800947e0:	d8c01c17 	ldw	r3,112(sp)
800947e4:	d8801b17 	ldw	r2,108(sp)
800947e8:	d811883a 	mov	r8,sp
800947ec:	4f3feb16 	blt	r9,fp,8009479c <___svfiprintf_internal_r+0x5e4>
800947f0:	dac02817 	ldw	r11,160(sp)
800947f4:	e0c7883a 	add	r3,fp,r3
800947f8:	10800044 	addi	r2,r2,1
800947fc:	42c00015 	stw	r11,0(r8)
80094800:	47000115 	stw	fp,4(r8)
80094804:	d8c01c15 	stw	r3,112(sp)
80094808:	d8801b15 	stw	r2,108(sp)
8009480c:	010001c4 	movi	r4,7
80094810:	2081ee16 	blt	r4,r2,80094fcc <___svfiprintf_internal_r+0xe14>
80094814:	42000204 	addi	r8,r8,8
80094818:	0000e506 	br	80094bb0 <___svfiprintf_internal_r+0x9f8>
8009481c:	21003fcc 	andi	r4,r4,255
80094820:	2002dd1e 	bne	r4,zero,80095398 <___svfiprintf_internal_r+0x11e0>
80094824:	00a002b4 	movhi	r2,32778
80094828:	10b0bf04 	addi	r2,r2,-15620
8009482c:	d8802915 	stw	r2,164(sp)
80094830:	9080080c 	andi	r2,r18,32
80094834:	103f461e 	bne	r2,zero,80094550 <___svfiprintf_internal_r+0x398>
80094838:	9080040c 	andi	r2,r18,16
8009483c:	10022e1e 	bne	r2,zero,800950f8 <___svfiprintf_internal_r+0xf40>
80094840:	9080100c 	andi	r2,r18,64
80094844:	dac02317 	ldw	r11,140(sp)
80094848:	10027326 	beq	r2,zero,80095218 <___svfiprintf_internal_r+0x1060>
8009484c:	5f00000b 	ldhu	fp,0(r11)
80094850:	5ac00104 	addi	r11,r11,4
80094854:	0013883a 	mov	r9,zero
80094858:	dac02315 	stw	r11,140(sp)
8009485c:	003f4106 	br	80094564 <___svfiprintf_internal_r+0x3ac>
80094860:	21003fcc 	andi	r4,r4,255
80094864:	2002e11e 	bne	r4,zero,800953ec <___svfiprintf_internal_r+0x1234>
80094868:	9080080c 	andi	r2,r18,32
8009486c:	1002011e 	bne	r2,zero,80095074 <___svfiprintf_internal_r+0xebc>
80094870:	9080040c 	andi	r2,r18,16
80094874:	10023e1e 	bne	r2,zero,80095170 <___svfiprintf_internal_r+0xfb8>
80094878:	9480100c 	andi	r18,r18,64
8009487c:	90023c26 	beq	r18,zero,80095170 <___svfiprintf_internal_r+0xfb8>
80094880:	dac02317 	ldw	r11,140(sp)
80094884:	58800017 	ldw	r2,0(r11)
80094888:	5ac00104 	addi	r11,r11,4
8009488c:	dac02315 	stw	r11,140(sp)
80094890:	dac02517 	ldw	r11,148(sp)
80094894:	12c0000d 	sth	r11,0(r2)
80094898:	003e6e06 	br	80094254 <___svfiprintf_internal_r+0x9c>
8009489c:	98c00007 	ldb	r3,0(r19)
800948a0:	1a422926 	beq	r3,r9,80095148 <___svfiprintf_internal_r+0xf90>
800948a4:	94800414 	ori	r18,r18,16
800948a8:	003e9206 	br	800942f4 <___svfiprintf_internal_r+0x13c>
800948ac:	94801014 	ori	r18,r18,64
800948b0:	98c00007 	ldb	r3,0(r19)
800948b4:	003e8f06 	br	800942f4 <___svfiprintf_internal_r+0x13c>
800948b8:	21003fcc 	andi	r4,r4,255
800948bc:	2002c71e 	bne	r4,zero,800953dc <___svfiprintf_internal_r+0x1224>
800948c0:	9080080c 	andi	r2,r18,32
800948c4:	10004926 	beq	r2,zero,800949ec <___svfiprintf_internal_r+0x834>
800948c8:	dac02317 	ldw	r11,140(sp)
800948cc:	58800117 	ldw	r2,4(r11)
800948d0:	5f000017 	ldw	fp,0(r11)
800948d4:	5ac00204 	addi	r11,r11,8
800948d8:	dac02315 	stw	r11,140(sp)
800948dc:	1013883a 	mov	r9,r2
800948e0:	10004b16 	blt	r2,zero,80094a10 <___svfiprintf_internal_r+0x858>
800948e4:	da801d83 	ldbu	r10,118(sp)
800948e8:	8001cb16 	blt	r16,zero,80095018 <___svfiprintf_internal_r+0xe60>
800948ec:	00ffdfc4 	movi	r3,-129
800948f0:	e244b03a 	or	r2,fp,r9
800948f4:	90e4703a 	and	r18,r18,r3
800948f8:	103f4726 	beq	r2,zero,80094618 <___svfiprintf_internal_r+0x460>
800948fc:	48008c26 	beq	r9,zero,80094b30 <___svfiprintf_internal_r+0x978>
80094900:	dc802015 	stw	r18,128(sp)
80094904:	dc002115 	stw	r16,132(sp)
80094908:	dc401a04 	addi	r17,sp,104
8009490c:	e021883a 	mov	r16,fp
80094910:	da002215 	stw	r8,136(sp)
80094914:	5039883a 	mov	fp,r10
80094918:	4825883a 	mov	r18,r9
8009491c:	8009883a 	mov	r4,r16
80094920:	900b883a 	mov	r5,r18
80094924:	01800284 	movi	r6,10
80094928:	000f883a 	mov	r7,zero
8009492c:	0095bc80 	call	80095bc8 <__umoddi3>
80094930:	10800c04 	addi	r2,r2,48
80094934:	8c7fffc4 	addi	r17,r17,-1
80094938:	8009883a 	mov	r4,r16
8009493c:	900b883a 	mov	r5,r18
80094940:	88800005 	stb	r2,0(r17)
80094944:	01800284 	movi	r6,10
80094948:	000f883a 	mov	r7,zero
8009494c:	00956500 	call	80095650 <__udivdi3>
80094950:	1021883a 	mov	r16,r2
80094954:	10c4b03a 	or	r2,r2,r3
80094958:	1825883a 	mov	r18,r3
8009495c:	103fef1e 	bne	r2,zero,8009491c <___svfiprintf_internal_r+0x764>
80094960:	dc802017 	ldw	r18,128(sp)
80094964:	dc002117 	ldw	r16,132(sp)
80094968:	da002217 	ldw	r8,136(sp)
8009496c:	e015883a 	mov	r10,fp
80094970:	d8c01e17 	ldw	r3,120(sp)
80094974:	1c47c83a 	sub	r3,r3,r17
80094978:	d8c02115 	stw	r3,132(sp)
8009497c:	003f2a06 	br	80094628 <___svfiprintf_internal_r+0x470>
80094980:	dac02317 	ldw	r11,140(sp)
80094984:	d8001d85 	stb	zero,118(sp)
80094988:	5c400017 	ldw	r17,0(r11)
8009498c:	5f000104 	addi	fp,r11,4
80094990:	88022f26 	beq	r17,zero,80095250 <___svfiprintf_internal_r+0x1098>
80094994:	80022516 	blt	r16,zero,8009522c <___svfiprintf_internal_r+0x1074>
80094998:	800d883a 	mov	r6,r16
8009499c:	000b883a 	mov	r5,zero
800949a0:	8809883a 	mov	r4,r17
800949a4:	da002c15 	stw	r8,176(sp)
800949a8:	0089e600 	call	80089e60 <memchr>
800949ac:	da002c17 	ldw	r8,176(sp)
800949b0:	10026426 	beq	r2,zero,80095344 <___svfiprintf_internal_r+0x118c>
800949b4:	1445c83a 	sub	r2,r2,r17
800949b8:	d8802115 	stw	r2,132(sp)
800949bc:	da801d83 	ldbu	r10,118(sp)
800949c0:	df002315 	stw	fp,140(sp)
800949c4:	0021883a 	mov	r16,zero
800949c8:	003f1706 	br	80094628 <___svfiprintf_internal_r+0x470>
800949cc:	94800814 	ori	r18,r18,32
800949d0:	98c00007 	ldb	r3,0(r19)
800949d4:	003e4706 	br	800942f4 <___svfiprintf_internal_r+0x13c>
800949d8:	21003fcc 	andi	r4,r4,255
800949dc:	2002701e 	bne	r4,zero,800953a0 <___svfiprintf_internal_r+0x11e8>
800949e0:	94800414 	ori	r18,r18,16
800949e4:	9080080c 	andi	r2,r18,32
800949e8:	103fb71e 	bne	r2,zero,800948c8 <___svfiprintf_internal_r+0x710>
800949ec:	9080040c 	andi	r2,r18,16
800949f0:	1001ab26 	beq	r2,zero,800950a0 <___svfiprintf_internal_r+0xee8>
800949f4:	dac02317 	ldw	r11,140(sp)
800949f8:	5f000017 	ldw	fp,0(r11)
800949fc:	5ac00104 	addi	r11,r11,4
80094a00:	dac02315 	stw	r11,140(sp)
80094a04:	e013d7fa 	srai	r9,fp,31
80094a08:	4805883a 	mov	r2,r9
80094a0c:	103fb50e 	bge	r2,zero,800948e4 <___svfiprintf_internal_r+0x72c>
80094a10:	0739c83a 	sub	fp,zero,fp
80094a14:	02800b44 	movi	r10,45
80094a18:	e004c03a 	cmpne	r2,fp,zero
80094a1c:	0253c83a 	sub	r9,zero,r9
80094a20:	da801d85 	stb	r10,118(sp)
80094a24:	4893c83a 	sub	r9,r9,r2
80094a28:	80023016 	blt	r16,zero,800952ec <___svfiprintf_internal_r+0x1134>
80094a2c:	00bfdfc4 	movi	r2,-129
80094a30:	90a4703a 	and	r18,r18,r2
80094a34:	483fb21e 	bne	r9,zero,80094900 <___svfiprintf_internal_r+0x748>
80094a38:	00003d06 	br	80094b30 <___svfiprintf_internal_r+0x978>
80094a3c:	9817883a 	mov	r11,r19
80094a40:	d8002415 	stw	zero,144(sp)
80094a44:	18bff404 	addi	r2,r3,-48
80094a48:	0019883a 	mov	r12,zero
80094a4c:	58c00007 	ldb	r3,0(r11)
80094a50:	630002a4 	muli	r12,r12,10
80094a54:	9cc00044 	addi	r19,r19,1
80094a58:	9817883a 	mov	r11,r19
80094a5c:	1319883a 	add	r12,r2,r12
80094a60:	18bff404 	addi	r2,r3,-48
80094a64:	30bff92e 	bgeu	r6,r2,80094a4c <___svfiprintf_internal_r+0x894>
80094a68:	db002415 	stw	r12,144(sp)
80094a6c:	18bff804 	addi	r2,r3,-32
80094a70:	28be232e 	bgeu	r5,r2,80094300 <___svfiprintf_internal_r+0x148>
80094a74:	21003fcc 	andi	r4,r4,255
80094a78:	20024b1e 	bne	r4,zero,800953a8 <___svfiprintf_internal_r+0x11f0>
80094a7c:	1800d626 	beq	r3,zero,80094dd8 <___svfiprintf_internal_r+0xc20>
80094a80:	02c00044 	movi	r11,1
80094a84:	dac02015 	stw	r11,128(sp)
80094a88:	d8c01005 	stb	r3,64(sp)
80094a8c:	d8001d85 	stb	zero,118(sp)
80094a90:	dac02115 	stw	r11,132(sp)
80094a94:	dc401004 	addi	r17,sp,64
80094a98:	003f2606 	br	80094734 <___svfiprintf_internal_r+0x57c>
80094a9c:	94802014 	ori	r18,r18,128
80094aa0:	98c00007 	ldb	r3,0(r19)
80094aa4:	003e1306 	br	800942f4 <___svfiprintf_internal_r+0x13c>
80094aa8:	98c00007 	ldb	r3,0(r19)
80094aac:	9ac00044 	addi	r11,r19,1
80094ab0:	1a822b26 	beq	r3,r10,80095360 <___svfiprintf_internal_r+0x11a8>
80094ab4:	18bff404 	addi	r2,r3,-48
80094ab8:	0021883a 	mov	r16,zero
80094abc:	30821e36 	bltu	r6,r2,80095338 <___svfiprintf_internal_r+0x1180>
80094ac0:	58c00007 	ldb	r3,0(r11)
80094ac4:	840002a4 	muli	r16,r16,10
80094ac8:	5cc00044 	addi	r19,r11,1
80094acc:	9817883a 	mov	r11,r19
80094ad0:	80a1883a 	add	r16,r16,r2
80094ad4:	18bff404 	addi	r2,r3,-48
80094ad8:	30bff92e 	bgeu	r6,r2,80094ac0 <___svfiprintf_internal_r+0x908>
80094adc:	803e060e 	bge	r16,zero,800942f8 <___svfiprintf_internal_r+0x140>
80094ae0:	043fffc4 	movi	r16,-1
80094ae4:	003e0406 	br	800942f8 <___svfiprintf_internal_r+0x140>
80094ae8:	21003fcc 	andi	r4,r4,255
80094aec:	2002371e 	bne	r4,zero,800953cc <___svfiprintf_internal_r+0x1214>
80094af0:	94800414 	ori	r18,r18,16
80094af4:	9080080c 	andi	r2,r18,32
80094af8:	103ebb1e 	bne	r2,zero,800945e8 <___svfiprintf_internal_r+0x430>
80094afc:	9080040c 	andi	r2,r18,16
80094b00:	10013b26 	beq	r2,zero,80094ff0 <___svfiprintf_internal_r+0xe38>
80094b04:	dac02317 	ldw	r11,140(sp)
80094b08:	d8001d85 	stb	zero,118(sp)
80094b0c:	0013883a 	mov	r9,zero
80094b10:	58800104 	addi	r2,r11,4
80094b14:	5f000017 	ldw	fp,0(r11)
80094b18:	80013d16 	blt	r16,zero,80095010 <___svfiprintf_internal_r+0xe58>
80094b1c:	00ffdfc4 	movi	r3,-129
80094b20:	d8802315 	stw	r2,140(sp)
80094b24:	90e4703a 	and	r18,r18,r3
80094b28:	0015883a 	mov	r10,zero
80094b2c:	e03eba26 	beq	fp,zero,80094618 <___svfiprintf_internal_r+0x460>
80094b30:	00800244 	movi	r2,9
80094b34:	173f7236 	bltu	r2,fp,80094900 <___svfiprintf_internal_r+0x748>
80094b38:	dac02b17 	ldw	r11,172(sp)
80094b3c:	e7000c04 	addi	fp,fp,48
80094b40:	df0019c5 	stb	fp,103(sp)
80094b44:	dac02115 	stw	r11,132(sp)
80094b48:	dc4019c4 	addi	r17,sp,103
80094b4c:	003eb606 	br	80094628 <___svfiprintf_internal_r+0x470>
80094b50:	21003fcc 	andi	r4,r4,255
80094b54:	20021f1e 	bne	r4,zero,800953d4 <___svfiprintf_internal_r+0x121c>
80094b58:	94800414 	ori	r18,r18,16
80094b5c:	9080080c 	andi	r2,r18,32
80094b60:	103ec51e 	bne	r2,zero,80094678 <___svfiprintf_internal_r+0x4c0>
80094b64:	9080040c 	andi	r2,r18,16
80094b68:	10016926 	beq	r2,zero,80095110 <___svfiprintf_internal_r+0xf58>
80094b6c:	dac02317 	ldw	r11,140(sp)
80094b70:	d8001d85 	stb	zero,118(sp)
80094b74:	0013883a 	mov	r9,zero
80094b78:	58800104 	addi	r2,r11,4
80094b7c:	5f000017 	ldw	fp,0(r11)
80094b80:	80016b16 	blt	r16,zero,80095130 <___svfiprintf_internal_r+0xf78>
80094b84:	00ffdfc4 	movi	r3,-129
80094b88:	d8802315 	stw	r2,140(sp)
80094b8c:	90e4703a 	and	r18,r18,r3
80094b90:	e03ec41e 	bne	fp,zero,800946a4 <___svfiprintf_internal_r+0x4ec>
80094b94:	0015883a 	mov	r10,zero
80094b98:	8001c226 	beq	r16,zero,800952a4 <___svfiprintf_internal_r+0x10ec>
80094b9c:	0039883a 	mov	fp,zero
80094ba0:	0013883a 	mov	r9,zero
80094ba4:	003ec006 	br	800946a8 <___svfiprintf_internal_r+0x4f0>
80094ba8:	d8c01c17 	ldw	r3,112(sp)
80094bac:	d8801b17 	ldw	r2,108(sp)
80094bb0:	d9001d87 	ldb	r4,118(sp)
80094bb4:	20000b26 	beq	r4,zero,80094be4 <___svfiprintf_internal_r+0xa2c>
80094bb8:	d9001d84 	addi	r4,sp,118
80094bbc:	18c00044 	addi	r3,r3,1
80094bc0:	10800044 	addi	r2,r2,1
80094bc4:	41000015 	stw	r4,0(r8)
80094bc8:	01000044 	movi	r4,1
80094bcc:	41000115 	stw	r4,4(r8)
80094bd0:	d8c01c15 	stw	r3,112(sp)
80094bd4:	d8801b15 	stw	r2,108(sp)
80094bd8:	010001c4 	movi	r4,7
80094bdc:	2080e116 	blt	r4,r2,80094f64 <___svfiprintf_internal_r+0xdac>
80094be0:	42000204 	addi	r8,r8,8
80094be4:	dac02217 	ldw	r11,136(sp)
80094be8:	58000b26 	beq	r11,zero,80094c18 <___svfiprintf_internal_r+0xa60>
80094bec:	d9001d04 	addi	r4,sp,116
80094bf0:	18c00084 	addi	r3,r3,2
80094bf4:	10800044 	addi	r2,r2,1
80094bf8:	41000015 	stw	r4,0(r8)
80094bfc:	01000084 	movi	r4,2
80094c00:	41000115 	stw	r4,4(r8)
80094c04:	d8c01c15 	stw	r3,112(sp)
80094c08:	d8801b15 	stw	r2,108(sp)
80094c0c:	010001c4 	movi	r4,7
80094c10:	2080dd16 	blt	r4,r2,80094f88 <___svfiprintf_internal_r+0xdd0>
80094c14:	42000204 	addi	r8,r8,8
80094c18:	dac02617 	ldw	r11,152(sp)
80094c1c:	01002004 	movi	r4,128
80094c20:	59008426 	beq	r11,r4,80094e34 <___svfiprintf_internal_r+0xc7c>
80094c24:	dac02117 	ldw	r11,132(sp)
80094c28:	82e1c83a 	sub	r16,r16,r11
80094c2c:	0400270e 	bge	zero,r16,80094ccc <___svfiprintf_internal_r+0xb14>
80094c30:	01c00404 	movi	r7,16
80094c34:	3c016a0e 	bge	r7,r16,800951e0 <___svfiprintf_internal_r+0x1028>
80094c38:	016002b4 	movhi	r5,32778
80094c3c:	29723484 	addi	r5,r5,-14126
80094c40:	d9402215 	stw	r5,136(sp)
80094c44:	070001c4 	movi	fp,7
80094c48:	00000306 	br	80094c58 <___svfiprintf_internal_r+0xaa0>
80094c4c:	843ffc04 	addi	r16,r16,-16
80094c50:	42000204 	addi	r8,r8,8
80094c54:	3c00130e 	bge	r7,r16,80094ca4 <___svfiprintf_internal_r+0xaec>
80094c58:	18c00404 	addi	r3,r3,16
80094c5c:	10800044 	addi	r2,r2,1
80094c60:	45000015 	stw	r20,0(r8)
80094c64:	41c00115 	stw	r7,4(r8)
80094c68:	d8c01c15 	stw	r3,112(sp)
80094c6c:	d8801b15 	stw	r2,108(sp)
80094c70:	e0bff60e 	bge	fp,r2,80094c4c <___svfiprintf_internal_r+0xa94>
80094c74:	d9801a04 	addi	r6,sp,104
80094c78:	b80b883a 	mov	r5,r23
80094c7c:	a809883a 	mov	r4,r21
80094c80:	d9c02c15 	stw	r7,176(sp)
80094c84:	0093fe80 	call	80093fe8 <__ssprint_r>
80094c88:	d9c02c17 	ldw	r7,176(sp)
80094c8c:	1000581e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094c90:	843ffc04 	addi	r16,r16,-16
80094c94:	d8c01c17 	ldw	r3,112(sp)
80094c98:	d8801b17 	ldw	r2,108(sp)
80094c9c:	d811883a 	mov	r8,sp
80094ca0:	3c3fed16 	blt	r7,r16,80094c58 <___svfiprintf_internal_r+0xaa0>
80094ca4:	dac02217 	ldw	r11,136(sp)
80094ca8:	1c07883a 	add	r3,r3,r16
80094cac:	10800044 	addi	r2,r2,1
80094cb0:	42c00015 	stw	r11,0(r8)
80094cb4:	44000115 	stw	r16,4(r8)
80094cb8:	d8c01c15 	stw	r3,112(sp)
80094cbc:	d8801b15 	stw	r2,108(sp)
80094cc0:	010001c4 	movi	r4,7
80094cc4:	20809e16 	blt	r4,r2,80094f40 <___svfiprintf_internal_r+0xd88>
80094cc8:	42000204 	addi	r8,r8,8
80094ccc:	dac02117 	ldw	r11,132(sp)
80094cd0:	10800044 	addi	r2,r2,1
80094cd4:	44400015 	stw	r17,0(r8)
80094cd8:	58c7883a 	add	r3,r11,r3
80094cdc:	42c00115 	stw	r11,4(r8)
80094ce0:	d8c01c15 	stw	r3,112(sp)
80094ce4:	d8801b15 	stw	r2,108(sp)
80094ce8:	010001c4 	movi	r4,7
80094cec:	20807f16 	blt	r4,r2,80094eec <___svfiprintf_internal_r+0xd34>
80094cf0:	42000204 	addi	r8,r8,8
80094cf4:	9480010c 	andi	r18,r18,4
80094cf8:	90002926 	beq	r18,zero,80094da0 <___svfiprintf_internal_r+0xbe8>
80094cfc:	dac02417 	ldw	r11,144(sp)
80094d00:	d8802017 	ldw	r2,128(sp)
80094d04:	58a1c83a 	sub	r16,r11,r2
80094d08:	0400250e 	bge	zero,r16,80094da0 <___svfiprintf_internal_r+0xbe8>
80094d0c:	04400404 	movi	r17,16
80094d10:	d8801b17 	ldw	r2,108(sp)
80094d14:	8c017c0e 	bge	r17,r16,80095308 <___svfiprintf_internal_r+0x1150>
80094d18:	016002b4 	movhi	r5,32778
80094d1c:	29723884 	addi	r5,r5,-14110
80094d20:	d9402815 	stw	r5,160(sp)
80094d24:	048001c4 	movi	r18,7
80094d28:	00000306 	br	80094d38 <___svfiprintf_internal_r+0xb80>
80094d2c:	843ffc04 	addi	r16,r16,-16
80094d30:	42000204 	addi	r8,r8,8
80094d34:	8c00110e 	bge	r17,r16,80094d7c <___svfiprintf_internal_r+0xbc4>
80094d38:	18c00404 	addi	r3,r3,16
80094d3c:	10800044 	addi	r2,r2,1
80094d40:	45800015 	stw	r22,0(r8)
80094d44:	44400115 	stw	r17,4(r8)
80094d48:	d8c01c15 	stw	r3,112(sp)
80094d4c:	d8801b15 	stw	r2,108(sp)
80094d50:	90bff60e 	bge	r18,r2,80094d2c <___svfiprintf_internal_r+0xb74>
80094d54:	d9801a04 	addi	r6,sp,104
80094d58:	b80b883a 	mov	r5,r23
80094d5c:	a809883a 	mov	r4,r21
80094d60:	0093fe80 	call	80093fe8 <__ssprint_r>
80094d64:	1000221e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094d68:	843ffc04 	addi	r16,r16,-16
80094d6c:	d8c01c17 	ldw	r3,112(sp)
80094d70:	d8801b17 	ldw	r2,108(sp)
80094d74:	d811883a 	mov	r8,sp
80094d78:	8c3fef16 	blt	r17,r16,80094d38 <___svfiprintf_internal_r+0xb80>
80094d7c:	dac02817 	ldw	r11,160(sp)
80094d80:	1c07883a 	add	r3,r3,r16
80094d84:	10800044 	addi	r2,r2,1
80094d88:	42c00015 	stw	r11,0(r8)
80094d8c:	44000115 	stw	r16,4(r8)
80094d90:	d8c01c15 	stw	r3,112(sp)
80094d94:	d8801b15 	stw	r2,108(sp)
80094d98:	010001c4 	movi	r4,7
80094d9c:	2080aa16 	blt	r4,r2,80095048 <___svfiprintf_internal_r+0xe90>
80094da0:	d8802417 	ldw	r2,144(sp)
80094da4:	dac02017 	ldw	r11,128(sp)
80094da8:	12c0010e 	bge	r2,r11,80094db0 <___svfiprintf_internal_r+0xbf8>
80094dac:	5805883a 	mov	r2,r11
80094db0:	dac02517 	ldw	r11,148(sp)
80094db4:	5897883a 	add	r11,r11,r2
80094db8:	dac02515 	stw	r11,148(sp)
80094dbc:	1800531e 	bne	r3,zero,80094f0c <___svfiprintf_internal_r+0xd54>
80094dc0:	98800007 	ldb	r2,0(r19)
80094dc4:	d8001b15 	stw	zero,108(sp)
80094dc8:	d811883a 	mov	r8,sp
80094dcc:	103d231e 	bne	r2,zero,8009425c <___svfiprintf_internal_r+0xa4>
80094dd0:	9823883a 	mov	r17,r19
80094dd4:	003d3906 	br	800942bc <___svfiprintf_internal_r+0x104>
80094dd8:	d8801c17 	ldw	r2,112(sp)
80094ddc:	10000426 	beq	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094de0:	d9402717 	ldw	r5,156(sp)
80094de4:	d9002a17 	ldw	r4,168(sp)
80094de8:	d9801a04 	addi	r6,sp,104
80094dec:	0093fe80 	call	80093fe8 <__ssprint_r>
80094df0:	dac02717 	ldw	r11,156(sp)
80094df4:	d8802517 	ldw	r2,148(sp)
80094df8:	58c0030b 	ldhu	r3,12(r11)
80094dfc:	18c0100c 	andi	r3,r3,64
80094e00:	1801381e 	bne	r3,zero,800952e4 <___svfiprintf_internal_r+0x112c>
80094e04:	dfc03717 	ldw	ra,220(sp)
80094e08:	df003617 	ldw	fp,216(sp)
80094e0c:	ddc03517 	ldw	r23,212(sp)
80094e10:	dd803417 	ldw	r22,208(sp)
80094e14:	dd403317 	ldw	r21,204(sp)
80094e18:	dd003217 	ldw	r20,200(sp)
80094e1c:	dcc03117 	ldw	r19,196(sp)
80094e20:	dc803017 	ldw	r18,192(sp)
80094e24:	dc402f17 	ldw	r17,188(sp)
80094e28:	dc002e17 	ldw	r16,184(sp)
80094e2c:	dec03804 	addi	sp,sp,224
80094e30:	f800283a 	ret
80094e34:	dac02417 	ldw	r11,144(sp)
80094e38:	d9002017 	ldw	r4,128(sp)
80094e3c:	5939c83a 	sub	fp,r11,r4
80094e40:	073f780e 	bge	zero,fp,80094c24 <___svfiprintf_internal_r+0xa6c>
80094e44:	02400404 	movi	r9,16
80094e48:	4f01370e 	bge	r9,fp,80095328 <___svfiprintf_internal_r+0x1170>
80094e4c:	02e002b4 	movhi	r11,32778
80094e50:	5af23484 	addi	r11,r11,-14126
80094e54:	dac02215 	stw	r11,136(sp)
80094e58:	028001c4 	movi	r10,7
80094e5c:	00000306 	br	80094e6c <___svfiprintf_internal_r+0xcb4>
80094e60:	e73ffc04 	addi	fp,fp,-16
80094e64:	42000204 	addi	r8,r8,8
80094e68:	4f00150e 	bge	r9,fp,80094ec0 <___svfiprintf_internal_r+0xd08>
80094e6c:	18c00404 	addi	r3,r3,16
80094e70:	10800044 	addi	r2,r2,1
80094e74:	45000015 	stw	r20,0(r8)
80094e78:	42400115 	stw	r9,4(r8)
80094e7c:	d8c01c15 	stw	r3,112(sp)
80094e80:	d8801b15 	stw	r2,108(sp)
80094e84:	50bff60e 	bge	r10,r2,80094e60 <___svfiprintf_internal_r+0xca8>
80094e88:	d9801a04 	addi	r6,sp,104
80094e8c:	b80b883a 	mov	r5,r23
80094e90:	a809883a 	mov	r4,r21
80094e94:	da402c15 	stw	r9,176(sp)
80094e98:	da802d15 	stw	r10,180(sp)
80094e9c:	0093fe80 	call	80093fe8 <__ssprint_r>
80094ea0:	da402c17 	ldw	r9,176(sp)
80094ea4:	da802d17 	ldw	r10,180(sp)
80094ea8:	103fd11e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094eac:	e73ffc04 	addi	fp,fp,-16
80094eb0:	d8c01c17 	ldw	r3,112(sp)
80094eb4:	d8801b17 	ldw	r2,108(sp)
80094eb8:	d811883a 	mov	r8,sp
80094ebc:	4f3feb16 	blt	r9,fp,80094e6c <___svfiprintf_internal_r+0xcb4>
80094ec0:	dac02217 	ldw	r11,136(sp)
80094ec4:	1f07883a 	add	r3,r3,fp
80094ec8:	10800044 	addi	r2,r2,1
80094ecc:	42c00015 	stw	r11,0(r8)
80094ed0:	47000115 	stw	fp,4(r8)
80094ed4:	d8c01c15 	stw	r3,112(sp)
80094ed8:	d8801b15 	stw	r2,108(sp)
80094edc:	010001c4 	movi	r4,7
80094ee0:	2080b616 	blt	r4,r2,800951bc <___svfiprintf_internal_r+0x1004>
80094ee4:	42000204 	addi	r8,r8,8
80094ee8:	003f4e06 	br	80094c24 <___svfiprintf_internal_r+0xa6c>
80094eec:	d9801a04 	addi	r6,sp,104
80094ef0:	b80b883a 	mov	r5,r23
80094ef4:	a809883a 	mov	r4,r21
80094ef8:	0093fe80 	call	80093fe8 <__ssprint_r>
80094efc:	103fbc1e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094f00:	d8c01c17 	ldw	r3,112(sp)
80094f04:	d811883a 	mov	r8,sp
80094f08:	003f7a06 	br	80094cf4 <___svfiprintf_internal_r+0xb3c>
80094f0c:	d9801a04 	addi	r6,sp,104
80094f10:	b80b883a 	mov	r5,r23
80094f14:	a809883a 	mov	r4,r21
80094f18:	0093fe80 	call	80093fe8 <__ssprint_r>
80094f1c:	103fa826 	beq	r2,zero,80094dc0 <___svfiprintf_internal_r+0xc08>
80094f20:	003fb306 	br	80094df0 <___svfiprintf_internal_r+0xc38>
80094f24:	d9801a04 	addi	r6,sp,104
80094f28:	b80b883a 	mov	r5,r23
80094f2c:	a809883a 	mov	r4,r21
80094f30:	0093fe80 	call	80093fe8 <__ssprint_r>
80094f34:	103fae1e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094f38:	d811883a 	mov	r8,sp
80094f3c:	003cdc06 	br	800942b0 <___svfiprintf_internal_r+0xf8>
80094f40:	d9801a04 	addi	r6,sp,104
80094f44:	b80b883a 	mov	r5,r23
80094f48:	a809883a 	mov	r4,r21
80094f4c:	0093fe80 	call	80093fe8 <__ssprint_r>
80094f50:	103fa71e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094f54:	d8c01c17 	ldw	r3,112(sp)
80094f58:	d8801b17 	ldw	r2,108(sp)
80094f5c:	d811883a 	mov	r8,sp
80094f60:	003f5a06 	br	80094ccc <___svfiprintf_internal_r+0xb14>
80094f64:	d9801a04 	addi	r6,sp,104
80094f68:	b80b883a 	mov	r5,r23
80094f6c:	a809883a 	mov	r4,r21
80094f70:	0093fe80 	call	80093fe8 <__ssprint_r>
80094f74:	103f9e1e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094f78:	d8c01c17 	ldw	r3,112(sp)
80094f7c:	d8801b17 	ldw	r2,108(sp)
80094f80:	d811883a 	mov	r8,sp
80094f84:	003f1706 	br	80094be4 <___svfiprintf_internal_r+0xa2c>
80094f88:	d9801a04 	addi	r6,sp,104
80094f8c:	b80b883a 	mov	r5,r23
80094f90:	a809883a 	mov	r4,r21
80094f94:	0093fe80 	call	80093fe8 <__ssprint_r>
80094f98:	103f951e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094f9c:	d8c01c17 	ldw	r3,112(sp)
80094fa0:	d8801b17 	ldw	r2,108(sp)
80094fa4:	d811883a 	mov	r8,sp
80094fa8:	003f1b06 	br	80094c18 <___svfiprintf_internal_r+0xa60>
80094fac:	d8001d85 	stb	zero,118(sp)
80094fb0:	80007b16 	blt	r16,zero,800951a0 <___svfiprintf_internal_r+0xfe8>
80094fb4:	00ffdfc4 	movi	r3,-129
80094fb8:	e244b03a 	or	r2,fp,r9
80094fbc:	90e4703a 	and	r18,r18,r3
80094fc0:	103d7026 	beq	r2,zero,80094584 <___svfiprintf_internal_r+0x3cc>
80094fc4:	0015883a 	mov	r10,zero
80094fc8:	003d7206 	br	80094594 <___svfiprintf_internal_r+0x3dc>
80094fcc:	d9801a04 	addi	r6,sp,104
80094fd0:	b80b883a 	mov	r5,r23
80094fd4:	a809883a 	mov	r4,r21
80094fd8:	0093fe80 	call	80093fe8 <__ssprint_r>
80094fdc:	103f841e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
80094fe0:	d8c01c17 	ldw	r3,112(sp)
80094fe4:	d8801b17 	ldw	r2,108(sp)
80094fe8:	d811883a 	mov	r8,sp
80094fec:	003ef006 	br	80094bb0 <___svfiprintf_internal_r+0x9f8>
80094ff0:	9080100c 	andi	r2,r18,64
80094ff4:	d8001d85 	stb	zero,118(sp)
80094ff8:	dac02317 	ldw	r11,140(sp)
80094ffc:	10008126 	beq	r2,zero,80095204 <___svfiprintf_internal_r+0x104c>
80095000:	58800104 	addi	r2,r11,4
80095004:	5f00000b 	ldhu	fp,0(r11)
80095008:	0013883a 	mov	r9,zero
8009500c:	803ec30e 	bge	r16,zero,80094b1c <___svfiprintf_internal_r+0x964>
80095010:	d8802315 	stw	r2,140(sp)
80095014:	0015883a 	mov	r10,zero
80095018:	e244b03a 	or	r2,fp,r9
8009501c:	103e371e 	bne	r2,zero,800948fc <___svfiprintf_internal_r+0x744>
80095020:	00800044 	movi	r2,1
80095024:	10803fcc 	andi	r2,r2,255
80095028:	00c00044 	movi	r3,1
8009502c:	10c06126 	beq	r2,r3,800951b4 <___svfiprintf_internal_r+0xffc>
80095030:	00c00084 	movi	r3,2
80095034:	10fd5526 	beq	r2,r3,8009458c <___svfiprintf_internal_r+0x3d4>
80095038:	003ed806 	br	80094b9c <___svfiprintf_internal_r+0x9e4>
8009503c:	d8802315 	stw	r2,140(sp)
80095040:	98c00007 	ldb	r3,0(r19)
80095044:	003cab06 	br	800942f4 <___svfiprintf_internal_r+0x13c>
80095048:	d9801a04 	addi	r6,sp,104
8009504c:	b80b883a 	mov	r5,r23
80095050:	a809883a 	mov	r4,r21
80095054:	0093fe80 	call	80093fe8 <__ssprint_r>
80095058:	103f651e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
8009505c:	d8c01c17 	ldw	r3,112(sp)
80095060:	003f4f06 	br	80094da0 <___svfiprintf_internal_r+0xbe8>
80095064:	00a002b4 	movhi	r2,32778
80095068:	10b0c404 	addi	r2,r2,-15600
8009506c:	d8802915 	stw	r2,164(sp)
80095070:	003d4406 	br	80094584 <___svfiprintf_internal_r+0x3cc>
80095074:	dac02317 	ldw	r11,140(sp)
80095078:	58800017 	ldw	r2,0(r11)
8009507c:	dac02517 	ldw	r11,148(sp)
80095080:	5807d7fa 	srai	r3,r11,31
80095084:	dac02317 	ldw	r11,140(sp)
80095088:	10c00115 	stw	r3,4(r2)
8009508c:	5ac00104 	addi	r11,r11,4
80095090:	dac02315 	stw	r11,140(sp)
80095094:	dac02517 	ldw	r11,148(sp)
80095098:	12c00015 	stw	r11,0(r2)
8009509c:	003c6d06 	br	80094254 <___svfiprintf_internal_r+0x9c>
800950a0:	9080100c 	andi	r2,r18,64
800950a4:	dac02317 	ldw	r11,140(sp)
800950a8:	103e5326 	beq	r2,zero,800949f8 <___svfiprintf_internal_r+0x840>
800950ac:	5f00000f 	ldh	fp,0(r11)
800950b0:	5ac00104 	addi	r11,r11,4
800950b4:	dac02315 	stw	r11,140(sp)
800950b8:	e013d7fa 	srai	r9,fp,31
800950bc:	4805883a 	mov	r2,r9
800950c0:	003e0706 	br	800948e0 <___svfiprintf_internal_r+0x728>
800950c4:	00800c04 	movi	r2,48
800950c8:	d8801d05 	stb	r2,116(sp)
800950cc:	d8c01d45 	stb	r3,117(sp)
800950d0:	d8001d85 	stb	zero,118(sp)
800950d4:	90800094 	ori	r2,r18,2
800950d8:	80008f16 	blt	r16,zero,80095318 <___svfiprintf_internal_r+0x1160>
800950dc:	00bfdfc4 	movi	r2,-129
800950e0:	90a4703a 	and	r18,r18,r2
800950e4:	94800094 	ori	r18,r18,2
800950e8:	0015883a 	mov	r10,zero
800950ec:	003d2906 	br	80094594 <___svfiprintf_internal_r+0x3dc>
800950f0:	98c00007 	ldb	r3,0(r19)
800950f4:	003c7f06 	br	800942f4 <___svfiprintf_internal_r+0x13c>
800950f8:	dac02317 	ldw	r11,140(sp)
800950fc:	0013883a 	mov	r9,zero
80095100:	5f000017 	ldw	fp,0(r11)
80095104:	5ac00104 	addi	r11,r11,4
80095108:	dac02315 	stw	r11,140(sp)
8009510c:	003d1506 	br	80094564 <___svfiprintf_internal_r+0x3ac>
80095110:	9080100c 	andi	r2,r18,64
80095114:	d8001d85 	stb	zero,118(sp)
80095118:	dac02317 	ldw	r11,140(sp)
8009511c:	10003426 	beq	r2,zero,800951f0 <___svfiprintf_internal_r+0x1038>
80095120:	58800104 	addi	r2,r11,4
80095124:	5f00000b 	ldhu	fp,0(r11)
80095128:	0013883a 	mov	r9,zero
8009512c:	803e950e 	bge	r16,zero,80094b84 <___svfiprintf_internal_r+0x9cc>
80095130:	e246b03a 	or	r3,fp,r9
80095134:	d8802315 	stw	r2,140(sp)
80095138:	183d5a1e 	bne	r3,zero,800946a4 <___svfiprintf_internal_r+0x4ec>
8009513c:	0015883a 	mov	r10,zero
80095140:	0005883a 	mov	r2,zero
80095144:	003fb706 	br	80095024 <___svfiprintf_internal_r+0xe6c>
80095148:	98c00043 	ldbu	r3,1(r19)
8009514c:	94800814 	ori	r18,r18,32
80095150:	9cc00044 	addi	r19,r19,1
80095154:	18c03fcc 	andi	r3,r3,255
80095158:	18c0201c 	xori	r3,r3,128
8009515c:	18ffe004 	addi	r3,r3,-128
80095160:	003c6406 	br	800942f4 <___svfiprintf_internal_r+0x13c>
80095164:	d8c02315 	stw	r3,140(sp)
80095168:	0015883a 	mov	r10,zero
8009516c:	003faa06 	br	80095018 <___svfiprintf_internal_r+0xe60>
80095170:	dac02317 	ldw	r11,140(sp)
80095174:	58800017 	ldw	r2,0(r11)
80095178:	5ac00104 	addi	r11,r11,4
8009517c:	dac02315 	stw	r11,140(sp)
80095180:	dac02517 	ldw	r11,148(sp)
80095184:	12c00015 	stw	r11,0(r2)
80095188:	003c3206 	br	80094254 <___svfiprintf_internal_r+0x9c>
8009518c:	012002b4 	movhi	r4,32778
80095190:	2130c404 	addi	r4,r4,-15600
80095194:	d9002915 	stw	r4,164(sp)
80095198:	d8c02315 	stw	r3,140(sp)
8009519c:	1025883a 	mov	r18,r2
800951a0:	e244b03a 	or	r2,fp,r9
800951a4:	103f871e 	bne	r2,zero,80094fc4 <___svfiprintf_internal_r+0xe0c>
800951a8:	0015883a 	mov	r10,zero
800951ac:	00800084 	movi	r2,2
800951b0:	003f9c06 	br	80095024 <___svfiprintf_internal_r+0xe6c>
800951b4:	0039883a 	mov	fp,zero
800951b8:	003e5f06 	br	80094b38 <___svfiprintf_internal_r+0x980>
800951bc:	d9801a04 	addi	r6,sp,104
800951c0:	b80b883a 	mov	r5,r23
800951c4:	a809883a 	mov	r4,r21
800951c8:	0093fe80 	call	80093fe8 <__ssprint_r>
800951cc:	103f081e 	bne	r2,zero,80094df0 <___svfiprintf_internal_r+0xc38>
800951d0:	d8c01c17 	ldw	r3,112(sp)
800951d4:	d8801b17 	ldw	r2,108(sp)
800951d8:	d811883a 	mov	r8,sp
800951dc:	003e9106 	br	80094c24 <___svfiprintf_internal_r+0xa6c>
800951e0:	012002b4 	movhi	r4,32778
800951e4:	21323484 	addi	r4,r4,-14126
800951e8:	d9002215 	stw	r4,136(sp)
800951ec:	003ead06 	br	80094ca4 <___svfiprintf_internal_r+0xaec>
800951f0:	58800104 	addi	r2,r11,4
800951f4:	5f000017 	ldw	fp,0(r11)
800951f8:	0013883a 	mov	r9,zero
800951fc:	803e610e 	bge	r16,zero,80094b84 <___svfiprintf_internal_r+0x9cc>
80095200:	003fcb06 	br	80095130 <___svfiprintf_internal_r+0xf78>
80095204:	58800104 	addi	r2,r11,4
80095208:	5f000017 	ldw	fp,0(r11)
8009520c:	0013883a 	mov	r9,zero
80095210:	803e420e 	bge	r16,zero,80094b1c <___svfiprintf_internal_r+0x964>
80095214:	003f7e06 	br	80095010 <___svfiprintf_internal_r+0xe58>
80095218:	5f000017 	ldw	fp,0(r11)
8009521c:	5ac00104 	addi	r11,r11,4
80095220:	0013883a 	mov	r9,zero
80095224:	dac02315 	stw	r11,140(sp)
80095228:	003cce06 	br	80094564 <___svfiprintf_internal_r+0x3ac>
8009522c:	8809883a 	mov	r4,r17
80095230:	da002c15 	stw	r8,176(sp)
80095234:	00832a00 	call	800832a0 <strlen>
80095238:	d8802115 	stw	r2,132(sp)
8009523c:	da801d83 	ldbu	r10,118(sp)
80095240:	df002315 	stw	fp,140(sp)
80095244:	0021883a 	mov	r16,zero
80095248:	da002c17 	ldw	r8,176(sp)
8009524c:	003cf606 	br	80094628 <___svfiprintf_internal_r+0x470>
80095250:	00800184 	movi	r2,6
80095254:	1400012e 	bgeu	r2,r16,8009525c <___svfiprintf_internal_r+0x10a4>
80095258:	1021883a 	mov	r16,r2
8009525c:	dc002115 	stw	r16,132(sp)
80095260:	8005883a 	mov	r2,r16
80095264:	80003c16 	blt	r16,zero,80095358 <___svfiprintf_internal_r+0x11a0>
80095268:	046002b4 	movhi	r17,32778
8009526c:	d8802015 	stw	r2,128(sp)
80095270:	df002315 	stw	fp,140(sp)
80095274:	8c70c904 	addi	r17,r17,-15580
80095278:	003d2e06 	br	80094734 <___svfiprintf_internal_r+0x57c>
8009527c:	04001004 	movi	r16,64
80095280:	800b883a 	mov	r5,r16
80095284:	00824640 	call	80082464 <_malloc_r>
80095288:	dac02717 	ldw	r11,156(sp)
8009528c:	58800015 	stw	r2,0(r11)
80095290:	58800415 	stw	r2,16(r11)
80095294:	10004826 	beq	r2,zero,800953b8 <___svfiprintf_internal_r+0x1200>
80095298:	dac02717 	ldw	r11,156(sp)
8009529c:	5c000515 	stw	r16,20(r11)
800952a0:	003bd906 	br	80094208 <___svfiprintf_internal_r+0x50>
800952a4:	9080004c 	andi	r2,r18,1
800952a8:	0015883a 	mov	r10,zero
800952ac:	10000626 	beq	r2,zero,800952c8 <___svfiprintf_internal_r+0x1110>
800952b0:	dac02b17 	ldw	r11,172(sp)
800952b4:	00800c04 	movi	r2,48
800952b8:	d88019c5 	stb	r2,103(sp)
800952bc:	dac02115 	stw	r11,132(sp)
800952c0:	dc4019c4 	addi	r17,sp,103
800952c4:	003cd806 	br	80094628 <___svfiprintf_internal_r+0x470>
800952c8:	d8002115 	stw	zero,132(sp)
800952cc:	dc401a04 	addi	r17,sp,104
800952d0:	003cd506 	br	80094628 <___svfiprintf_internal_r+0x470>
800952d4:	012002b4 	movhi	r4,32778
800952d8:	21323884 	addi	r4,r4,-14110
800952dc:	d9002815 	stw	r4,160(sp)
800952e0:	003d4306 	br	800947f0 <___svfiprintf_internal_r+0x638>
800952e4:	00bfffc4 	movi	r2,-1
800952e8:	003ec606 	br	80094e04 <___svfiprintf_internal_r+0xc4c>
800952ec:	00800044 	movi	r2,1
800952f0:	10803fcc 	andi	r2,r2,255
800952f4:	00c00044 	movi	r3,1
800952f8:	10fd8026 	beq	r2,r3,800948fc <___svfiprintf_internal_r+0x744>
800952fc:	00c00084 	movi	r3,2
80095300:	10fca426 	beq	r2,r3,80094594 <___svfiprintf_internal_r+0x3dc>
80095304:	003ce806 	br	800946a8 <___svfiprintf_internal_r+0x4f0>
80095308:	012002b4 	movhi	r4,32778
8009530c:	21323884 	addi	r4,r4,-14110
80095310:	d9002815 	stw	r4,160(sp)
80095314:	003e9906 	br	80094d7c <___svfiprintf_internal_r+0xbc4>
80095318:	1025883a 	mov	r18,r2
8009531c:	0015883a 	mov	r10,zero
80095320:	00800084 	movi	r2,2
80095324:	003ff206 	br	800952f0 <___svfiprintf_internal_r+0x1138>
80095328:	016002b4 	movhi	r5,32778
8009532c:	29723484 	addi	r5,r5,-14126
80095330:	d9402215 	stw	r5,136(sp)
80095334:	003ee206 	br	80094ec0 <___svfiprintf_internal_r+0xd08>
80095338:	5827883a 	mov	r19,r11
8009533c:	0021883a 	mov	r16,zero
80095340:	003bed06 	br	800942f8 <___svfiprintf_internal_r+0x140>
80095344:	dc002115 	stw	r16,132(sp)
80095348:	da801d83 	ldbu	r10,118(sp)
8009534c:	df002315 	stw	fp,140(sp)
80095350:	0021883a 	mov	r16,zero
80095354:	003cb406 	br	80094628 <___svfiprintf_internal_r+0x470>
80095358:	0005883a 	mov	r2,zero
8009535c:	003fc206 	br	80095268 <___svfiprintf_internal_r+0x10b0>
80095360:	d8802317 	ldw	r2,140(sp)
80095364:	98c00043 	ldbu	r3,1(r19)
80095368:	5827883a 	mov	r19,r11
8009536c:	14000017 	ldw	r16,0(r2)
80095370:	10800104 	addi	r2,r2,4
80095374:	d8802315 	stw	r2,140(sp)
80095378:	803f760e 	bge	r16,zero,80095154 <___svfiprintf_internal_r+0xf9c>
8009537c:	18c03fcc 	andi	r3,r3,255
80095380:	18c0201c 	xori	r3,r3,128
80095384:	043fffc4 	movi	r16,-1
80095388:	18ffe004 	addi	r3,r3,-128
8009538c:	003bd906 	br	800942f4 <___svfiprintf_internal_r+0x13c>
80095390:	d9c01d85 	stb	r7,118(sp)
80095394:	003cb606 	br	80094670 <___svfiprintf_internal_r+0x4b8>
80095398:	d9c01d85 	stb	r7,118(sp)
8009539c:	003d2106 	br	80094824 <___svfiprintf_internal_r+0x66c>
800953a0:	d9c01d85 	stb	r7,118(sp)
800953a4:	003d8e06 	br	800949e0 <___svfiprintf_internal_r+0x828>
800953a8:	d9c01d85 	stb	r7,118(sp)
800953ac:	003db306 	br	80094a7c <___svfiprintf_internal_r+0x8c4>
800953b0:	d9c01d85 	stb	r7,118(sp)
800953b4:	003c8a06 	br	800945e0 <___svfiprintf_internal_r+0x428>
800953b8:	dac02a17 	ldw	r11,168(sp)
800953bc:	00800304 	movi	r2,12
800953c0:	58800015 	stw	r2,0(r11)
800953c4:	00bfffc4 	movi	r2,-1
800953c8:	003e8e06 	br	80094e04 <___svfiprintf_internal_r+0xc4c>
800953cc:	d9c01d85 	stb	r7,118(sp)
800953d0:	003dc706 	br	80094af0 <___svfiprintf_internal_r+0x938>
800953d4:	d9c01d85 	stb	r7,118(sp)
800953d8:	003ddf06 	br	80094b58 <___svfiprintf_internal_r+0x9a0>
800953dc:	d9c01d85 	stb	r7,118(sp)
800953e0:	003d3706 	br	800948c0 <___svfiprintf_internal_r+0x708>
800953e4:	d9c01d85 	stb	r7,118(sp)
800953e8:	003c5406 	br	8009453c <___svfiprintf_internal_r+0x384>
800953ec:	d9c01d85 	stb	r7,118(sp)
800953f0:	003d1d06 	br	80094868 <___svfiprintf_internal_r+0x6b0>

800953f4 <_wcrtomb_r>:
800953f4:	defff604 	addi	sp,sp,-40
800953f8:	00a002b4 	movhi	r2,32778
800953fc:	dc800815 	stw	r18,32(sp)
80095400:	dc400715 	stw	r17,28(sp)
80095404:	dc000615 	stw	r16,24(sp)
80095408:	10ba7904 	addi	r2,r2,-5660
8009540c:	dfc00915 	stw	ra,36(sp)
80095410:	2021883a 	mov	r16,r4
80095414:	3823883a 	mov	r17,r7
80095418:	14800017 	ldw	r18,0(r2)
8009541c:	28001426 	beq	r5,zero,80095470 <_wcrtomb_r+0x7c>
80095420:	d9400415 	stw	r5,16(sp)
80095424:	d9800515 	stw	r6,20(sp)
80095428:	00899c00 	call	800899c0 <__locale_charset>
8009542c:	d9800517 	ldw	r6,20(sp)
80095430:	d9400417 	ldw	r5,16(sp)
80095434:	100f883a 	mov	r7,r2
80095438:	dc400015 	stw	r17,0(sp)
8009543c:	8009883a 	mov	r4,r16
80095440:	903ee83a 	callr	r18
80095444:	00ffffc4 	movi	r3,-1
80095448:	10c0031e 	bne	r2,r3,80095458 <_wcrtomb_r+0x64>
8009544c:	88000015 	stw	zero,0(r17)
80095450:	00c02284 	movi	r3,138
80095454:	80c00015 	stw	r3,0(r16)
80095458:	dfc00917 	ldw	ra,36(sp)
8009545c:	dc800817 	ldw	r18,32(sp)
80095460:	dc400717 	ldw	r17,28(sp)
80095464:	dc000617 	ldw	r16,24(sp)
80095468:	dec00a04 	addi	sp,sp,40
8009546c:	f800283a 	ret
80095470:	00899c00 	call	800899c0 <__locale_charset>
80095474:	100f883a 	mov	r7,r2
80095478:	dc400015 	stw	r17,0(sp)
8009547c:	000d883a 	mov	r6,zero
80095480:	d9400104 	addi	r5,sp,4
80095484:	8009883a 	mov	r4,r16
80095488:	903ee83a 	callr	r18
8009548c:	003fed06 	br	80095444 <_wcrtomb_r+0x50>

80095490 <wcrtomb>:
80095490:	defff604 	addi	sp,sp,-40
80095494:	00a002b4 	movhi	r2,32778
80095498:	dc800615 	stw	r18,24(sp)
8009549c:	dc400515 	stw	r17,20(sp)
800954a0:	10ba7304 	addi	r2,r2,-5684
800954a4:	dfc00915 	stw	ra,36(sp)
800954a8:	dd000815 	stw	r20,32(sp)
800954ac:	dcc00715 	stw	r19,28(sp)
800954b0:	dc000415 	stw	r16,16(sp)
800954b4:	3025883a 	mov	r18,r6
800954b8:	14400017 	ldw	r17,0(r2)
800954bc:	20001926 	beq	r4,zero,80095524 <wcrtomb+0x94>
800954c0:	00a002b4 	movhi	r2,32778
800954c4:	10ba7904 	addi	r2,r2,-5660
800954c8:	15000017 	ldw	r20,0(r2)
800954cc:	2021883a 	mov	r16,r4
800954d0:	2827883a 	mov	r19,r5
800954d4:	00899c00 	call	800899c0 <__locale_charset>
800954d8:	100f883a 	mov	r7,r2
800954dc:	dc800015 	stw	r18,0(sp)
800954e0:	980d883a 	mov	r6,r19
800954e4:	800b883a 	mov	r5,r16
800954e8:	8809883a 	mov	r4,r17
800954ec:	a03ee83a 	callr	r20
800954f0:	00ffffc4 	movi	r3,-1
800954f4:	10c0031e 	bne	r2,r3,80095504 <wcrtomb+0x74>
800954f8:	90000015 	stw	zero,0(r18)
800954fc:	00c02284 	movi	r3,138
80095500:	88c00015 	stw	r3,0(r17)
80095504:	dfc00917 	ldw	ra,36(sp)
80095508:	dd000817 	ldw	r20,32(sp)
8009550c:	dcc00717 	ldw	r19,28(sp)
80095510:	dc800617 	ldw	r18,24(sp)
80095514:	dc400517 	ldw	r17,20(sp)
80095518:	dc000417 	ldw	r16,16(sp)
8009551c:	dec00a04 	addi	sp,sp,40
80095520:	f800283a 	ret
80095524:	00a002b4 	movhi	r2,32778
80095528:	10ba7904 	addi	r2,r2,-5660
8009552c:	14000017 	ldw	r16,0(r2)
80095530:	00899c00 	call	800899c0 <__locale_charset>
80095534:	100f883a 	mov	r7,r2
80095538:	dc800015 	stw	r18,0(sp)
8009553c:	000d883a 	mov	r6,zero
80095540:	d9400104 	addi	r5,sp,4
80095544:	8809883a 	mov	r4,r17
80095548:	803ee83a 	callr	r16
8009554c:	003fe806 	br	800954f0 <wcrtomb+0x60>

80095550 <__ascii_wctomb>:
80095550:	28000526 	beq	r5,zero,80095568 <__ascii_wctomb+0x18>
80095554:	00803fc4 	movi	r2,255
80095558:	11800536 	bltu	r2,r6,80095570 <__ascii_wctomb+0x20>
8009555c:	29800005 	stb	r6,0(r5)
80095560:	00800044 	movi	r2,1
80095564:	f800283a 	ret
80095568:	0005883a 	mov	r2,zero
8009556c:	f800283a 	ret
80095570:	00802284 	movi	r2,138
80095574:	20800015 	stw	r2,0(r4)
80095578:	00bfffc4 	movi	r2,-1
8009557c:	f800283a 	ret

80095580 <_wctomb_r>:
80095580:	00a002b4 	movhi	r2,32778
80095584:	defff904 	addi	sp,sp,-28
80095588:	10ba7904 	addi	r2,r2,-5660
8009558c:	dfc00615 	stw	ra,24(sp)
80095590:	dc400515 	stw	r17,20(sp)
80095594:	dc000415 	stw	r16,16(sp)
80095598:	3823883a 	mov	r17,r7
8009559c:	14000017 	ldw	r16,0(r2)
800955a0:	d9000115 	stw	r4,4(sp)
800955a4:	d9400215 	stw	r5,8(sp)
800955a8:	d9800315 	stw	r6,12(sp)
800955ac:	00899c00 	call	800899c0 <__locale_charset>
800955b0:	d9800317 	ldw	r6,12(sp)
800955b4:	d9400217 	ldw	r5,8(sp)
800955b8:	d9000117 	ldw	r4,4(sp)
800955bc:	100f883a 	mov	r7,r2
800955c0:	dc400015 	stw	r17,0(sp)
800955c4:	803ee83a 	callr	r16
800955c8:	dfc00617 	ldw	ra,24(sp)
800955cc:	dc400517 	ldw	r17,20(sp)
800955d0:	dc000417 	ldw	r16,16(sp)
800955d4:	dec00704 	addi	sp,sp,28
800955d8:	f800283a 	ret

800955dc <__fixunsdfsi>:
800955dc:	defffd04 	addi	sp,sp,-12
800955e0:	000d883a 	mov	r6,zero
800955e4:	01d07834 	movhi	r7,16864
800955e8:	dc400115 	stw	r17,4(sp)
800955ec:	dc000015 	stw	r16,0(sp)
800955f0:	dfc00215 	stw	ra,8(sp)
800955f4:	2023883a 	mov	r17,r4
800955f8:	2821883a 	mov	r16,r5
800955fc:	00975180 	call	80097518 <__gedf2>
80095600:	1000080e 	bge	r2,zero,80095624 <__fixunsdfsi+0x48>
80095604:	8809883a 	mov	r4,r17
80095608:	800b883a 	mov	r5,r16
8009560c:	00986fc0 	call	800986fc <__fixdfsi>
80095610:	dfc00217 	ldw	ra,8(sp)
80095614:	dc400117 	ldw	r17,4(sp)
80095618:	dc000017 	ldw	r16,0(sp)
8009561c:	dec00304 	addi	sp,sp,12
80095620:	f800283a 	ret
80095624:	000d883a 	mov	r6,zero
80095628:	01d07834 	movhi	r7,16864
8009562c:	8809883a 	mov	r4,r17
80095630:	800b883a 	mov	r5,r16
80095634:	0097e000 	call	80097e00 <__subdf3>
80095638:	180b883a 	mov	r5,r3
8009563c:	1009883a 	mov	r4,r2
80095640:	00986fc0 	call	800986fc <__fixdfsi>
80095644:	00e00034 	movhi	r3,32768
80095648:	10c5883a 	add	r2,r2,r3
8009564c:	003ff006 	br	80095610 <__fixunsdfsi+0x34>

80095650 <__udivdi3>:
80095650:	defff504 	addi	sp,sp,-44
80095654:	dcc00415 	stw	r19,16(sp)
80095658:	dc000115 	stw	r16,4(sp)
8009565c:	dfc00a15 	stw	ra,40(sp)
80095660:	df000915 	stw	fp,36(sp)
80095664:	ddc00815 	stw	r23,32(sp)
80095668:	dd800715 	stw	r22,28(sp)
8009566c:	dd400615 	stw	r21,24(sp)
80095670:	dd000515 	stw	r20,20(sp)
80095674:	dc800315 	stw	r18,12(sp)
80095678:	dc400215 	stw	r17,8(sp)
8009567c:	2027883a 	mov	r19,r4
80095680:	2821883a 	mov	r16,r5
80095684:	3800411e 	bne	r7,zero,8009578c <__udivdi3+0x13c>
80095688:	3023883a 	mov	r17,r6
8009568c:	2025883a 	mov	r18,r4
80095690:	2980522e 	bgeu	r5,r6,800957dc <__udivdi3+0x18c>
80095694:	00bfffd4 	movui	r2,65535
80095698:	282d883a 	mov	r22,r5
8009569c:	1180a836 	bltu	r2,r6,80095940 <__udivdi3+0x2f0>
800956a0:	00803fc4 	movi	r2,255
800956a4:	1185803a 	cmpltu	r2,r2,r6
800956a8:	100490fa 	slli	r2,r2,3
800956ac:	3086d83a 	srl	r3,r6,r2
800956b0:	012002b4 	movhi	r4,32778
800956b4:	21323c84 	addi	r4,r4,-14094
800956b8:	20c7883a 	add	r3,r4,r3
800956bc:	18c00003 	ldbu	r3,0(r3)
800956c0:	1885883a 	add	r2,r3,r2
800956c4:	00c00804 	movi	r3,32
800956c8:	1887c83a 	sub	r3,r3,r2
800956cc:	18000526 	beq	r3,zero,800956e4 <__udivdi3+0x94>
800956d0:	80e0983a 	sll	r16,r16,r3
800956d4:	9884d83a 	srl	r2,r19,r2
800956d8:	30e2983a 	sll	r17,r6,r3
800956dc:	98e4983a 	sll	r18,r19,r3
800956e0:	142cb03a 	or	r22,r2,r16
800956e4:	882ad43a 	srli	r21,r17,16
800956e8:	b009883a 	mov	r4,r22
800956ec:	8d3fffcc 	andi	r20,r17,65535
800956f0:	a80b883a 	mov	r5,r21
800956f4:	00822ec0 	call	800822ec <__umodsi3>
800956f8:	b009883a 	mov	r4,r22
800956fc:	a80b883a 	mov	r5,r21
80095700:	1027883a 	mov	r19,r2
80095704:	00822880 	call	80082288 <__udivsi3>
80095708:	102d883a 	mov	r22,r2
8009570c:	9826943a 	slli	r19,r19,16
80095710:	9004d43a 	srli	r2,r18,16
80095714:	a5a1383a 	mul	r16,r20,r22
80095718:	14c4b03a 	or	r2,r2,r19
8009571c:	1400052e 	bgeu	r2,r16,80095734 <__udivdi3+0xe4>
80095720:	1445883a 	add	r2,r2,r17
80095724:	b0ffffc4 	addi	r3,r22,-1
80095728:	14400136 	bltu	r2,r17,80095730 <__udivdi3+0xe0>
8009572c:	14012336 	bltu	r2,r16,80095bbc <__udivdi3+0x56c>
80095730:	182d883a 	mov	r22,r3
80095734:	1421c83a 	sub	r16,r2,r16
80095738:	a80b883a 	mov	r5,r21
8009573c:	8009883a 	mov	r4,r16
80095740:	00822ec0 	call	800822ec <__umodsi3>
80095744:	1027883a 	mov	r19,r2
80095748:	a80b883a 	mov	r5,r21
8009574c:	8009883a 	mov	r4,r16
80095750:	00822880 	call	80082288 <__udivsi3>
80095754:	9826943a 	slli	r19,r19,16
80095758:	a0a9383a 	mul	r20,r20,r2
8009575c:	94bfffcc 	andi	r18,r18,65535
80095760:	94e4b03a 	or	r18,r18,r19
80095764:	9500052e 	bgeu	r18,r20,8009577c <__udivdi3+0x12c>
80095768:	8ca5883a 	add	r18,r17,r18
8009576c:	10ffffc4 	addi	r3,r2,-1
80095770:	9440f136 	bltu	r18,r17,80095b38 <__udivdi3+0x4e8>
80095774:	9500f02e 	bgeu	r18,r20,80095b38 <__udivdi3+0x4e8>
80095778:	10bfff84 	addi	r2,r2,-2
8009577c:	b00c943a 	slli	r6,r22,16
80095780:	0007883a 	mov	r3,zero
80095784:	3084b03a 	or	r2,r6,r2
80095788:	00005906 	br	800958f0 <__udivdi3+0x2a0>
8009578c:	29c05636 	bltu	r5,r7,800958e8 <__udivdi3+0x298>
80095790:	00bfffd4 	movui	r2,65535
80095794:	11c0622e 	bgeu	r2,r7,80095920 <__udivdi3+0x2d0>
80095798:	00804034 	movhi	r2,256
8009579c:	10bfffc4 	addi	r2,r2,-1
800957a0:	11c0ee36 	bltu	r2,r7,80095b5c <__udivdi3+0x50c>
800957a4:	00800404 	movi	r2,16
800957a8:	3886d83a 	srl	r3,r7,r2
800957ac:	012002b4 	movhi	r4,32778
800957b0:	21323c84 	addi	r4,r4,-14094
800957b4:	20c7883a 	add	r3,r4,r3
800957b8:	18c00003 	ldbu	r3,0(r3)
800957bc:	05400804 	movi	r21,32
800957c0:	1885883a 	add	r2,r3,r2
800957c4:	a8abc83a 	sub	r21,r21,r2
800957c8:	a800621e 	bne	r21,zero,80095954 <__udivdi3+0x304>
800957cc:	3c00e936 	bltu	r7,r16,80095b74 <__udivdi3+0x524>
800957d0:	9985403a 	cmpgeu	r2,r19,r6
800957d4:	0007883a 	mov	r3,zero
800957d8:	00004506 	br	800958f0 <__udivdi3+0x2a0>
800957dc:	3000041e 	bne	r6,zero,800957f0 <__udivdi3+0x1a0>
800957e0:	000b883a 	mov	r5,zero
800957e4:	01000044 	movi	r4,1
800957e8:	00822880 	call	80082288 <__udivsi3>
800957ec:	1023883a 	mov	r17,r2
800957f0:	00bfffd4 	movui	r2,65535
800957f4:	14404e2e 	bgeu	r2,r17,80095930 <__udivdi3+0x2e0>
800957f8:	00804034 	movhi	r2,256
800957fc:	10bfffc4 	addi	r2,r2,-1
80095800:	1440d836 	bltu	r2,r17,80095b64 <__udivdi3+0x514>
80095804:	00800404 	movi	r2,16
80095808:	8886d83a 	srl	r3,r17,r2
8009580c:	012002b4 	movhi	r4,32778
80095810:	21323c84 	addi	r4,r4,-14094
80095814:	20c7883a 	add	r3,r4,r3
80095818:	18c00003 	ldbu	r3,0(r3)
8009581c:	1885883a 	add	r2,r3,r2
80095820:	00c00804 	movi	r3,32
80095824:	1887c83a 	sub	r3,r3,r2
80095828:	18008f1e 	bne	r3,zero,80095a68 <__udivdi3+0x418>
8009582c:	882ad43a 	srli	r21,r17,16
80095830:	8461c83a 	sub	r16,r16,r17
80095834:	8d3fffcc 	andi	r20,r17,65535
80095838:	00c00044 	movi	r3,1
8009583c:	8009883a 	mov	r4,r16
80095840:	a80b883a 	mov	r5,r21
80095844:	d8c00015 	stw	r3,0(sp)
80095848:	00822ec0 	call	800822ec <__umodsi3>
8009584c:	8009883a 	mov	r4,r16
80095850:	a80b883a 	mov	r5,r21
80095854:	1027883a 	mov	r19,r2
80095858:	00822880 	call	80082288 <__udivsi3>
8009585c:	9826943a 	slli	r19,r19,16
80095860:	9008d43a 	srli	r4,r18,16
80095864:	1521383a 	mul	r16,r2,r20
80095868:	102d883a 	mov	r22,r2
8009586c:	24c8b03a 	or	r4,r4,r19
80095870:	d8c00017 	ldw	r3,0(sp)
80095874:	2400052e 	bgeu	r4,r16,8009588c <__udivdi3+0x23c>
80095878:	2449883a 	add	r4,r4,r17
8009587c:	b0bfffc4 	addi	r2,r22,-1
80095880:	24400136 	bltu	r4,r17,80095888 <__udivdi3+0x238>
80095884:	2400ca36 	bltu	r4,r16,80095bb0 <__udivdi3+0x560>
80095888:	102d883a 	mov	r22,r2
8009588c:	2421c83a 	sub	r16,r4,r16
80095890:	a80b883a 	mov	r5,r21
80095894:	8009883a 	mov	r4,r16
80095898:	d8c00015 	stw	r3,0(sp)
8009589c:	00822ec0 	call	800822ec <__umodsi3>
800958a0:	1027883a 	mov	r19,r2
800958a4:	a80b883a 	mov	r5,r21
800958a8:	8009883a 	mov	r4,r16
800958ac:	00822880 	call	80082288 <__udivsi3>
800958b0:	9826943a 	slli	r19,r19,16
800958b4:	1529383a 	mul	r20,r2,r20
800958b8:	94bfffcc 	andi	r18,r18,65535
800958bc:	94e4b03a 	or	r18,r18,r19
800958c0:	d8c00017 	ldw	r3,0(sp)
800958c4:	9500052e 	bgeu	r18,r20,800958dc <__udivdi3+0x28c>
800958c8:	8ca5883a 	add	r18,r17,r18
800958cc:	113fffc4 	addi	r4,r2,-1
800958d0:	94409736 	bltu	r18,r17,80095b30 <__udivdi3+0x4e0>
800958d4:	9500962e 	bgeu	r18,r20,80095b30 <__udivdi3+0x4e0>
800958d8:	10bfff84 	addi	r2,r2,-2
800958dc:	b00c943a 	slli	r6,r22,16
800958e0:	3084b03a 	or	r2,r6,r2
800958e4:	00000206 	br	800958f0 <__udivdi3+0x2a0>
800958e8:	0007883a 	mov	r3,zero
800958ec:	0005883a 	mov	r2,zero
800958f0:	dfc00a17 	ldw	ra,40(sp)
800958f4:	df000917 	ldw	fp,36(sp)
800958f8:	ddc00817 	ldw	r23,32(sp)
800958fc:	dd800717 	ldw	r22,28(sp)
80095900:	dd400617 	ldw	r21,24(sp)
80095904:	dd000517 	ldw	r20,20(sp)
80095908:	dcc00417 	ldw	r19,16(sp)
8009590c:	dc800317 	ldw	r18,12(sp)
80095910:	dc400217 	ldw	r17,8(sp)
80095914:	dc000117 	ldw	r16,4(sp)
80095918:	dec00b04 	addi	sp,sp,44
8009591c:	f800283a 	ret
80095920:	00803fc4 	movi	r2,255
80095924:	11c5803a 	cmpltu	r2,r2,r7
80095928:	100490fa 	slli	r2,r2,3
8009592c:	003f9e06 	br	800957a8 <__udivdi3+0x158>
80095930:	00803fc4 	movi	r2,255
80095934:	1445803a 	cmpltu	r2,r2,r17
80095938:	100490fa 	slli	r2,r2,3
8009593c:	003fb206 	br	80095808 <__udivdi3+0x1b8>
80095940:	00804034 	movhi	r2,256
80095944:	10bfffc4 	addi	r2,r2,-1
80095948:	11808836 	bltu	r2,r6,80095b6c <__udivdi3+0x51c>
8009594c:	00800404 	movi	r2,16
80095950:	003f5606 	br	800956ac <__udivdi3+0x5c>
80095954:	30aed83a 	srl	r23,r6,r2
80095958:	3d4e983a 	sll	r7,r7,r21
8009595c:	80acd83a 	srl	r22,r16,r2
80095960:	9884d83a 	srl	r2,r19,r2
80095964:	3deeb03a 	or	r23,r7,r23
80095968:	b824d43a 	srli	r18,r23,16
8009596c:	8560983a 	sll	r16,r16,r21
80095970:	b009883a 	mov	r4,r22
80095974:	900b883a 	mov	r5,r18
80095978:	3568983a 	sll	r20,r6,r21
8009597c:	1420b03a 	or	r16,r2,r16
80095980:	00822ec0 	call	800822ec <__umodsi3>
80095984:	b009883a 	mov	r4,r22
80095988:	900b883a 	mov	r5,r18
8009598c:	1023883a 	mov	r17,r2
80095990:	00822880 	call	80082288 <__udivsi3>
80095994:	8808943a 	slli	r4,r17,16
80095998:	bf3fffcc 	andi	fp,r23,65535
8009599c:	8006d43a 	srli	r3,r16,16
800959a0:	e0a3383a 	mul	r17,fp,r2
800959a4:	100d883a 	mov	r6,r2
800959a8:	1906b03a 	or	r3,r3,r4
800959ac:	1c40042e 	bgeu	r3,r17,800959c0 <__udivdi3+0x370>
800959b0:	1dc7883a 	add	r3,r3,r23
800959b4:	10bfffc4 	addi	r2,r2,-1
800959b8:	1dc0752e 	bgeu	r3,r23,80095b90 <__udivdi3+0x540>
800959bc:	100d883a 	mov	r6,r2
800959c0:	1c63c83a 	sub	r17,r3,r17
800959c4:	900b883a 	mov	r5,r18
800959c8:	8809883a 	mov	r4,r17
800959cc:	d9800015 	stw	r6,0(sp)
800959d0:	00822ec0 	call	800822ec <__umodsi3>
800959d4:	102d883a 	mov	r22,r2
800959d8:	8809883a 	mov	r4,r17
800959dc:	900b883a 	mov	r5,r18
800959e0:	00822880 	call	80082288 <__udivsi3>
800959e4:	b02c943a 	slli	r22,r22,16
800959e8:	e089383a 	mul	r4,fp,r2
800959ec:	843fffcc 	andi	r16,r16,65535
800959f0:	85a0b03a 	or	r16,r16,r22
800959f4:	d9800017 	ldw	r6,0(sp)
800959f8:	8100042e 	bgeu	r16,r4,80095a0c <__udivdi3+0x3bc>
800959fc:	85e1883a 	add	r16,r16,r23
80095a00:	10ffffc4 	addi	r3,r2,-1
80095a04:	85c05e2e 	bgeu	r16,r23,80095b80 <__udivdi3+0x530>
80095a08:	1805883a 	mov	r2,r3
80095a0c:	300c943a 	slli	r6,r6,16
80095a10:	a17fffcc 	andi	r5,r20,65535
80095a14:	a028d43a 	srli	r20,r20,16
80095a18:	3084b03a 	or	r2,r6,r2
80095a1c:	10ffffcc 	andi	r3,r2,65535
80095a20:	100cd43a 	srli	r6,r2,16
80095a24:	194f383a 	mul	r7,r3,r5
80095a28:	1d07383a 	mul	r3,r3,r20
80095a2c:	314b383a 	mul	r5,r6,r5
80095a30:	3810d43a 	srli	r8,r7,16
80095a34:	8121c83a 	sub	r16,r16,r4
80095a38:	1947883a 	add	r3,r3,r5
80095a3c:	40c7883a 	add	r3,r8,r3
80095a40:	350d383a 	mul	r6,r6,r20
80095a44:	1940022e 	bgeu	r3,r5,80095a50 <__udivdi3+0x400>
80095a48:	01000074 	movhi	r4,1
80095a4c:	310d883a 	add	r6,r6,r4
80095a50:	1828d43a 	srli	r20,r3,16
80095a54:	a18d883a 	add	r6,r20,r6
80095a58:	81803e36 	bltu	r16,r6,80095b54 <__udivdi3+0x504>
80095a5c:	81803826 	beq	r16,r6,80095b40 <__udivdi3+0x4f0>
80095a60:	0007883a 	mov	r3,zero
80095a64:	003fa206 	br	800958f0 <__udivdi3+0x2a0>
80095a68:	88e2983a 	sll	r17,r17,r3
80095a6c:	80a8d83a 	srl	r20,r16,r2
80095a70:	80e0983a 	sll	r16,r16,r3
80095a74:	882ad43a 	srli	r21,r17,16
80095a78:	9884d83a 	srl	r2,r19,r2
80095a7c:	a009883a 	mov	r4,r20
80095a80:	a80b883a 	mov	r5,r21
80095a84:	142eb03a 	or	r23,r2,r16
80095a88:	98e4983a 	sll	r18,r19,r3
80095a8c:	00822ec0 	call	800822ec <__umodsi3>
80095a90:	a009883a 	mov	r4,r20
80095a94:	a80b883a 	mov	r5,r21
80095a98:	1021883a 	mov	r16,r2
80095a9c:	00822880 	call	80082288 <__udivsi3>
80095aa0:	1039883a 	mov	fp,r2
80095aa4:	8d3fffcc 	andi	r20,r17,65535
80095aa8:	8020943a 	slli	r16,r16,16
80095aac:	b804d43a 	srli	r2,r23,16
80095ab0:	a72d383a 	mul	r22,r20,fp
80095ab4:	1404b03a 	or	r2,r2,r16
80095ab8:	1580062e 	bgeu	r2,r22,80095ad4 <__udivdi3+0x484>
80095abc:	1445883a 	add	r2,r2,r17
80095ac0:	e0ffffc4 	addi	r3,fp,-1
80095ac4:	14403836 	bltu	r2,r17,80095ba8 <__udivdi3+0x558>
80095ac8:	1580372e 	bgeu	r2,r22,80095ba8 <__udivdi3+0x558>
80095acc:	e73fff84 	addi	fp,fp,-2
80095ad0:	1445883a 	add	r2,r2,r17
80095ad4:	15adc83a 	sub	r22,r2,r22
80095ad8:	a80b883a 	mov	r5,r21
80095adc:	b009883a 	mov	r4,r22
80095ae0:	00822ec0 	call	800822ec <__umodsi3>
80095ae4:	1027883a 	mov	r19,r2
80095ae8:	b009883a 	mov	r4,r22
80095aec:	a80b883a 	mov	r5,r21
80095af0:	00822880 	call	80082288 <__udivsi3>
80095af4:	9826943a 	slli	r19,r19,16
80095af8:	a0a1383a 	mul	r16,r20,r2
80095afc:	b93fffcc 	andi	r4,r23,65535
80095b00:	24c8b03a 	or	r4,r4,r19
80095b04:	2400062e 	bgeu	r4,r16,80095b20 <__udivdi3+0x4d0>
80095b08:	2449883a 	add	r4,r4,r17
80095b0c:	10ffffc4 	addi	r3,r2,-1
80095b10:	24402336 	bltu	r4,r17,80095ba0 <__udivdi3+0x550>
80095b14:	2400222e 	bgeu	r4,r16,80095ba0 <__udivdi3+0x550>
80095b18:	10bfff84 	addi	r2,r2,-2
80095b1c:	2449883a 	add	r4,r4,r17
80095b20:	e038943a 	slli	fp,fp,16
80095b24:	2421c83a 	sub	r16,r4,r16
80095b28:	e086b03a 	or	r3,fp,r2
80095b2c:	003f4306 	br	8009583c <__udivdi3+0x1ec>
80095b30:	2005883a 	mov	r2,r4
80095b34:	003f6906 	br	800958dc <__udivdi3+0x28c>
80095b38:	1805883a 	mov	r2,r3
80095b3c:	003f0f06 	br	8009577c <__udivdi3+0x12c>
80095b40:	1806943a 	slli	r3,r3,16
80095b44:	9d66983a 	sll	r19,r19,r21
80095b48:	39ffffcc 	andi	r7,r7,65535
80095b4c:	19c7883a 	add	r3,r3,r7
80095b50:	98ffc32e 	bgeu	r19,r3,80095a60 <__udivdi3+0x410>
80095b54:	10bfffc4 	addi	r2,r2,-1
80095b58:	003fc106 	br	80095a60 <__udivdi3+0x410>
80095b5c:	00800604 	movi	r2,24
80095b60:	003f1106 	br	800957a8 <__udivdi3+0x158>
80095b64:	00800604 	movi	r2,24
80095b68:	003f2706 	br	80095808 <__udivdi3+0x1b8>
80095b6c:	00800604 	movi	r2,24
80095b70:	003ece06 	br	800956ac <__udivdi3+0x5c>
80095b74:	0007883a 	mov	r3,zero
80095b78:	00800044 	movi	r2,1
80095b7c:	003f5c06 	br	800958f0 <__udivdi3+0x2a0>
80095b80:	813fa12e 	bgeu	r16,r4,80095a08 <__udivdi3+0x3b8>
80095b84:	10bfff84 	addi	r2,r2,-2
80095b88:	85e1883a 	add	r16,r16,r23
80095b8c:	003f9f06 	br	80095a0c <__udivdi3+0x3bc>
80095b90:	1c7f8a2e 	bgeu	r3,r17,800959bc <__udivdi3+0x36c>
80095b94:	31bfff84 	addi	r6,r6,-2
80095b98:	1dc7883a 	add	r3,r3,r23
80095b9c:	003f8806 	br	800959c0 <__udivdi3+0x370>
80095ba0:	1805883a 	mov	r2,r3
80095ba4:	003fde06 	br	80095b20 <__udivdi3+0x4d0>
80095ba8:	1839883a 	mov	fp,r3
80095bac:	003fc906 	br	80095ad4 <__udivdi3+0x484>
80095bb0:	b5bfff84 	addi	r22,r22,-2
80095bb4:	2449883a 	add	r4,r4,r17
80095bb8:	003f3406 	br	8009588c <__udivdi3+0x23c>
80095bbc:	b5bfff84 	addi	r22,r22,-2
80095bc0:	1445883a 	add	r2,r2,r17
80095bc4:	003edb06 	br	80095734 <__udivdi3+0xe4>

80095bc8 <__umoddi3>:
80095bc8:	defff404 	addi	sp,sp,-48
80095bcc:	df000a15 	stw	fp,40(sp)
80095bd0:	dc400315 	stw	r17,12(sp)
80095bd4:	dc000215 	stw	r16,8(sp)
80095bd8:	dfc00b15 	stw	ra,44(sp)
80095bdc:	ddc00915 	stw	r23,36(sp)
80095be0:	dd800815 	stw	r22,32(sp)
80095be4:	dd400715 	stw	r21,28(sp)
80095be8:	dd000615 	stw	r20,24(sp)
80095bec:	dcc00515 	stw	r19,20(sp)
80095bf0:	dc800415 	stw	r18,16(sp)
80095bf4:	2021883a 	mov	r16,r4
80095bf8:	2823883a 	mov	r17,r5
80095bfc:	2839883a 	mov	fp,r5
80095c00:	38003c1e 	bne	r7,zero,80095cf4 <__umoddi3+0x12c>
80095c04:	3027883a 	mov	r19,r6
80095c08:	2029883a 	mov	r20,r4
80095c0c:	2980512e 	bgeu	r5,r6,80095d54 <__umoddi3+0x18c>
80095c10:	00bfffd4 	movui	r2,65535
80095c14:	11809a36 	bltu	r2,r6,80095e80 <__umoddi3+0x2b8>
80095c18:	01003fc4 	movi	r4,255
80095c1c:	2189803a 	cmpltu	r4,r4,r6
80095c20:	200890fa 	slli	r4,r4,3
80095c24:	3104d83a 	srl	r2,r6,r4
80095c28:	00e002b4 	movhi	r3,32778
80095c2c:	18f23c84 	addi	r3,r3,-14094
80095c30:	1885883a 	add	r2,r3,r2
80095c34:	10c00003 	ldbu	r3,0(r2)
80095c38:	00800804 	movi	r2,32
80095c3c:	1909883a 	add	r4,r3,r4
80095c40:	1125c83a 	sub	r18,r2,r4
80095c44:	90000526 	beq	r18,zero,80095c5c <__umoddi3+0x94>
80095c48:	8ca2983a 	sll	r17,r17,r18
80095c4c:	8108d83a 	srl	r4,r16,r4
80095c50:	34a6983a 	sll	r19,r6,r18
80095c54:	84a8983a 	sll	r20,r16,r18
80095c58:	2478b03a 	or	fp,r4,r17
80095c5c:	982ed43a 	srli	r23,r19,16
80095c60:	e009883a 	mov	r4,fp
80095c64:	9dbfffcc 	andi	r22,r19,65535
80095c68:	b80b883a 	mov	r5,r23
80095c6c:	00822ec0 	call	800822ec <__umodsi3>
80095c70:	e009883a 	mov	r4,fp
80095c74:	b80b883a 	mov	r5,r23
80095c78:	102b883a 	mov	r21,r2
80095c7c:	00822880 	call	80082288 <__udivsi3>
80095c80:	a806943a 	slli	r3,r21,16
80095c84:	a008d43a 	srli	r4,r20,16
80095c88:	b085383a 	mul	r2,r22,r2
80095c8c:	20c8b03a 	or	r4,r4,r3
80095c90:	2080032e 	bgeu	r4,r2,80095ca0 <__umoddi3+0xd8>
80095c94:	24c9883a 	add	r4,r4,r19
80095c98:	24c00136 	bltu	r4,r19,80095ca0 <__umoddi3+0xd8>
80095c9c:	20811036 	bltu	r4,r2,800960e0 <__umoddi3+0x518>
80095ca0:	20abc83a 	sub	r21,r4,r2
80095ca4:	b80b883a 	mov	r5,r23
80095ca8:	a809883a 	mov	r4,r21
80095cac:	00822ec0 	call	800822ec <__umodsi3>
80095cb0:	1023883a 	mov	r17,r2
80095cb4:	b80b883a 	mov	r5,r23
80095cb8:	a809883a 	mov	r4,r21
80095cbc:	00822880 	call	80082288 <__udivsi3>
80095cc0:	8822943a 	slli	r17,r17,16
80095cc4:	b085383a 	mul	r2,r22,r2
80095cc8:	a0ffffcc 	andi	r3,r20,65535
80095ccc:	1c46b03a 	or	r3,r3,r17
80095cd0:	1880042e 	bgeu	r3,r2,80095ce4 <__umoddi3+0x11c>
80095cd4:	1cc7883a 	add	r3,r3,r19
80095cd8:	1cc00236 	bltu	r3,r19,80095ce4 <__umoddi3+0x11c>
80095cdc:	1880012e 	bgeu	r3,r2,80095ce4 <__umoddi3+0x11c>
80095ce0:	1cc7883a 	add	r3,r3,r19
80095ce4:	1885c83a 	sub	r2,r3,r2
80095ce8:	1484d83a 	srl	r2,r2,r18
80095cec:	0007883a 	mov	r3,zero
80095cf0:	00004f06 	br	80095e30 <__umoddi3+0x268>
80095cf4:	29c04c36 	bltu	r5,r7,80095e28 <__umoddi3+0x260>
80095cf8:	00bfffd4 	movui	r2,65535
80095cfc:	11c0582e 	bgeu	r2,r7,80095e60 <__umoddi3+0x298>
80095d00:	00804034 	movhi	r2,256
80095d04:	10bfffc4 	addi	r2,r2,-1
80095d08:	11c0e736 	bltu	r2,r7,800960a8 <__umoddi3+0x4e0>
80095d0c:	01000404 	movi	r4,16
80095d10:	3904d83a 	srl	r2,r7,r4
80095d14:	00e002b4 	movhi	r3,32778
80095d18:	18f23c84 	addi	r3,r3,-14094
80095d1c:	1885883a 	add	r2,r3,r2
80095d20:	14c00003 	ldbu	r19,0(r2)
80095d24:	00c00804 	movi	r3,32
80095d28:	9927883a 	add	r19,r19,r4
80095d2c:	1ce9c83a 	sub	r20,r3,r19
80095d30:	a000581e 	bne	r20,zero,80095e94 <__umoddi3+0x2cc>
80095d34:	3c400136 	bltu	r7,r17,80095d3c <__umoddi3+0x174>
80095d38:	8180eb36 	bltu	r16,r6,800960e8 <__umoddi3+0x520>
80095d3c:	8185c83a 	sub	r2,r16,r6
80095d40:	89e3c83a 	sub	r17,r17,r7
80095d44:	8089803a 	cmpltu	r4,r16,r2
80095d48:	8939c83a 	sub	fp,r17,r4
80095d4c:	e007883a 	mov	r3,fp
80095d50:	00003706 	br	80095e30 <__umoddi3+0x268>
80095d54:	3000041e 	bne	r6,zero,80095d68 <__umoddi3+0x1a0>
80095d58:	000b883a 	mov	r5,zero
80095d5c:	01000044 	movi	r4,1
80095d60:	00822880 	call	80082288 <__udivsi3>
80095d64:	1027883a 	mov	r19,r2
80095d68:	00bfffd4 	movui	r2,65535
80095d6c:	14c0402e 	bgeu	r2,r19,80095e70 <__umoddi3+0x2a8>
80095d70:	00804034 	movhi	r2,256
80095d74:	10bfffc4 	addi	r2,r2,-1
80095d78:	14c0cd36 	bltu	r2,r19,800960b0 <__umoddi3+0x4e8>
80095d7c:	00800404 	movi	r2,16
80095d80:	9886d83a 	srl	r3,r19,r2
80095d84:	012002b4 	movhi	r4,32778
80095d88:	21323c84 	addi	r4,r4,-14094
80095d8c:	20c7883a 	add	r3,r4,r3
80095d90:	18c00003 	ldbu	r3,0(r3)
80095d94:	1887883a 	add	r3,r3,r2
80095d98:	00800804 	movi	r2,32
80095d9c:	10e5c83a 	sub	r18,r2,r3
80095da0:	9000901e 	bne	r18,zero,80095fe4 <__umoddi3+0x41c>
80095da4:	982cd43a 	srli	r22,r19,16
80095da8:	8ce3c83a 	sub	r17,r17,r19
80095dac:	9d7fffcc 	andi	r21,r19,65535
80095db0:	b00b883a 	mov	r5,r22
80095db4:	8809883a 	mov	r4,r17
80095db8:	00822ec0 	call	800822ec <__umodsi3>
80095dbc:	8809883a 	mov	r4,r17
80095dc0:	b00b883a 	mov	r5,r22
80095dc4:	1021883a 	mov	r16,r2
80095dc8:	00822880 	call	80082288 <__udivsi3>
80095dcc:	8006943a 	slli	r3,r16,16
80095dd0:	a008d43a 	srli	r4,r20,16
80095dd4:	1545383a 	mul	r2,r2,r21
80095dd8:	20c8b03a 	or	r4,r4,r3
80095ddc:	2080042e 	bgeu	r4,r2,80095df0 <__umoddi3+0x228>
80095de0:	24c9883a 	add	r4,r4,r19
80095de4:	24c00236 	bltu	r4,r19,80095df0 <__umoddi3+0x228>
80095de8:	2080012e 	bgeu	r4,r2,80095df0 <__umoddi3+0x228>
80095dec:	24c9883a 	add	r4,r4,r19
80095df0:	20a1c83a 	sub	r16,r4,r2
80095df4:	b00b883a 	mov	r5,r22
80095df8:	8009883a 	mov	r4,r16
80095dfc:	00822ec0 	call	800822ec <__umodsi3>
80095e00:	1023883a 	mov	r17,r2
80095e04:	b00b883a 	mov	r5,r22
80095e08:	8009883a 	mov	r4,r16
80095e0c:	00822880 	call	80082288 <__udivsi3>
80095e10:	8822943a 	slli	r17,r17,16
80095e14:	1545383a 	mul	r2,r2,r21
80095e18:	a53fffcc 	andi	r20,r20,65535
80095e1c:	a446b03a 	or	r3,r20,r17
80095e20:	18bfb02e 	bgeu	r3,r2,80095ce4 <__umoddi3+0x11c>
80095e24:	003fab06 	br	80095cd4 <__umoddi3+0x10c>
80095e28:	2005883a 	mov	r2,r4
80095e2c:	2807883a 	mov	r3,r5
80095e30:	dfc00b17 	ldw	ra,44(sp)
80095e34:	df000a17 	ldw	fp,40(sp)
80095e38:	ddc00917 	ldw	r23,36(sp)
80095e3c:	dd800817 	ldw	r22,32(sp)
80095e40:	dd400717 	ldw	r21,28(sp)
80095e44:	dd000617 	ldw	r20,24(sp)
80095e48:	dcc00517 	ldw	r19,20(sp)
80095e4c:	dc800417 	ldw	r18,16(sp)
80095e50:	dc400317 	ldw	r17,12(sp)
80095e54:	dc000217 	ldw	r16,8(sp)
80095e58:	dec00c04 	addi	sp,sp,48
80095e5c:	f800283a 	ret
80095e60:	04c03fc4 	movi	r19,255
80095e64:	99c9803a 	cmpltu	r4,r19,r7
80095e68:	200890fa 	slli	r4,r4,3
80095e6c:	003fa806 	br	80095d10 <__umoddi3+0x148>
80095e70:	00803fc4 	movi	r2,255
80095e74:	14c5803a 	cmpltu	r2,r2,r19
80095e78:	100490fa 	slli	r2,r2,3
80095e7c:	003fc006 	br	80095d80 <__umoddi3+0x1b8>
80095e80:	00804034 	movhi	r2,256
80095e84:	10bfffc4 	addi	r2,r2,-1
80095e88:	11808b36 	bltu	r2,r6,800960b8 <__umoddi3+0x4f0>
80095e8c:	01000404 	movi	r4,16
80095e90:	003f6406 	br	80095c24 <__umoddi3+0x5c>
80095e94:	34c4d83a 	srl	r2,r6,r19
80095e98:	3d0e983a 	sll	r7,r7,r20
80095e9c:	8cf8d83a 	srl	fp,r17,r19
80095ea0:	8d10983a 	sll	r8,r17,r20
80095ea4:	38aab03a 	or	r21,r7,r2
80095ea8:	a82cd43a 	srli	r22,r21,16
80095eac:	84e2d83a 	srl	r17,r16,r19
80095eb0:	e009883a 	mov	r4,fp
80095eb4:	b00b883a 	mov	r5,r22
80095eb8:	8a22b03a 	or	r17,r17,r8
80095ebc:	3524983a 	sll	r18,r6,r20
80095ec0:	00822ec0 	call	800822ec <__umodsi3>
80095ec4:	e009883a 	mov	r4,fp
80095ec8:	b00b883a 	mov	r5,r22
80095ecc:	102f883a 	mov	r23,r2
80095ed0:	00822880 	call	80082288 <__udivsi3>
80095ed4:	100d883a 	mov	r6,r2
80095ed8:	b808943a 	slli	r4,r23,16
80095edc:	aa3fffcc 	andi	r8,r21,65535
80095ee0:	8804d43a 	srli	r2,r17,16
80095ee4:	41af383a 	mul	r23,r8,r6
80095ee8:	8520983a 	sll	r16,r16,r20
80095eec:	1104b03a 	or	r2,r2,r4
80095ef0:	15c0042e 	bgeu	r2,r23,80095f04 <__umoddi3+0x33c>
80095ef4:	1545883a 	add	r2,r2,r21
80095ef8:	30ffffc4 	addi	r3,r6,-1
80095efc:	1540742e 	bgeu	r2,r21,800960d0 <__umoddi3+0x508>
80095f00:	180d883a 	mov	r6,r3
80095f04:	15efc83a 	sub	r23,r2,r23
80095f08:	b00b883a 	mov	r5,r22
80095f0c:	b809883a 	mov	r4,r23
80095f10:	d9800115 	stw	r6,4(sp)
80095f14:	da000015 	stw	r8,0(sp)
80095f18:	00822ec0 	call	800822ec <__umodsi3>
80095f1c:	b00b883a 	mov	r5,r22
80095f20:	b809883a 	mov	r4,r23
80095f24:	1039883a 	mov	fp,r2
80095f28:	00822880 	call	80082288 <__udivsi3>
80095f2c:	da000017 	ldw	r8,0(sp)
80095f30:	e038943a 	slli	fp,fp,16
80095f34:	100b883a 	mov	r5,r2
80095f38:	4089383a 	mul	r4,r8,r2
80095f3c:	8a3fffcc 	andi	r8,r17,65535
80095f40:	4710b03a 	or	r8,r8,fp
80095f44:	d9800117 	ldw	r6,4(sp)
80095f48:	4100042e 	bgeu	r8,r4,80095f5c <__umoddi3+0x394>
80095f4c:	4551883a 	add	r8,r8,r21
80095f50:	10bfffc4 	addi	r2,r2,-1
80095f54:	45405a2e 	bgeu	r8,r21,800960c0 <__umoddi3+0x4f8>
80095f58:	100b883a 	mov	r5,r2
80095f5c:	300c943a 	slli	r6,r6,16
80095f60:	91ffffcc 	andi	r7,r18,65535
80095f64:	9004d43a 	srli	r2,r18,16
80095f68:	314cb03a 	or	r6,r6,r5
80095f6c:	317fffcc 	andi	r5,r6,65535
80095f70:	300cd43a 	srli	r6,r6,16
80095f74:	29d3383a 	mul	r9,r5,r7
80095f78:	288b383a 	mul	r5,r5,r2
80095f7c:	31cf383a 	mul	r7,r6,r7
80095f80:	4806d43a 	srli	r3,r9,16
80095f84:	4111c83a 	sub	r8,r8,r4
80095f88:	29cb883a 	add	r5,r5,r7
80095f8c:	194b883a 	add	r5,r3,r5
80095f90:	3085383a 	mul	r2,r6,r2
80095f94:	29c0022e 	bgeu	r5,r7,80095fa0 <__umoddi3+0x3d8>
80095f98:	00c00074 	movhi	r3,1
80095f9c:	10c5883a 	add	r2,r2,r3
80095fa0:	2808d43a 	srli	r4,r5,16
80095fa4:	280a943a 	slli	r5,r5,16
80095fa8:	4a7fffcc 	andi	r9,r9,65535
80095fac:	2085883a 	add	r2,r4,r2
80095fb0:	2a4b883a 	add	r5,r5,r9
80095fb4:	40803636 	bltu	r8,r2,80096090 <__umoddi3+0x4c8>
80095fb8:	40804d26 	beq	r8,r2,800960f0 <__umoddi3+0x528>
80095fbc:	4089c83a 	sub	r4,r8,r2
80095fc0:	280f883a 	mov	r7,r5
80095fc4:	81cfc83a 	sub	r7,r16,r7
80095fc8:	81c7803a 	cmpltu	r3,r16,r7
80095fcc:	20c7c83a 	sub	r3,r4,r3
80095fd0:	1cc4983a 	sll	r2,r3,r19
80095fd4:	3d0ed83a 	srl	r7,r7,r20
80095fd8:	1d06d83a 	srl	r3,r3,r20
80095fdc:	11c4b03a 	or	r2,r2,r7
80095fe0:	003f9306 	br	80095e30 <__umoddi3+0x268>
80095fe4:	9ca6983a 	sll	r19,r19,r18
80095fe8:	88e8d83a 	srl	r20,r17,r3
80095fec:	80c4d83a 	srl	r2,r16,r3
80095ff0:	982cd43a 	srli	r22,r19,16
80095ff4:	8ca2983a 	sll	r17,r17,r18
80095ff8:	a009883a 	mov	r4,r20
80095ffc:	b00b883a 	mov	r5,r22
80096000:	1478b03a 	or	fp,r2,r17
80096004:	00822ec0 	call	800822ec <__umodsi3>
80096008:	a009883a 	mov	r4,r20
8009600c:	b00b883a 	mov	r5,r22
80096010:	1023883a 	mov	r17,r2
80096014:	00822880 	call	80082288 <__udivsi3>
80096018:	9d7fffcc 	andi	r21,r19,65535
8009601c:	880a943a 	slli	r5,r17,16
80096020:	e008d43a 	srli	r4,fp,16
80096024:	a885383a 	mul	r2,r21,r2
80096028:	84a8983a 	sll	r20,r16,r18
8009602c:	2148b03a 	or	r4,r4,r5
80096030:	2080042e 	bgeu	r4,r2,80096044 <__umoddi3+0x47c>
80096034:	24c9883a 	add	r4,r4,r19
80096038:	24c00236 	bltu	r4,r19,80096044 <__umoddi3+0x47c>
8009603c:	2080012e 	bgeu	r4,r2,80096044 <__umoddi3+0x47c>
80096040:	24c9883a 	add	r4,r4,r19
80096044:	20a3c83a 	sub	r17,r4,r2
80096048:	b00b883a 	mov	r5,r22
8009604c:	8809883a 	mov	r4,r17
80096050:	00822ec0 	call	800822ec <__umodsi3>
80096054:	102f883a 	mov	r23,r2
80096058:	8809883a 	mov	r4,r17
8009605c:	b00b883a 	mov	r5,r22
80096060:	00822880 	call	80082288 <__udivsi3>
80096064:	b82e943a 	slli	r23,r23,16
80096068:	a885383a 	mul	r2,r21,r2
8009606c:	e13fffcc 	andi	r4,fp,65535
80096070:	25c8b03a 	or	r4,r4,r23
80096074:	2080042e 	bgeu	r4,r2,80096088 <__umoddi3+0x4c0>
80096078:	24c9883a 	add	r4,r4,r19
8009607c:	24c00236 	bltu	r4,r19,80096088 <__umoddi3+0x4c0>
80096080:	2080012e 	bgeu	r4,r2,80096088 <__umoddi3+0x4c0>
80096084:	24c9883a 	add	r4,r4,r19
80096088:	20a3c83a 	sub	r17,r4,r2
8009608c:	003f4806 	br	80095db0 <__umoddi3+0x1e8>
80096090:	2c8fc83a 	sub	r7,r5,r18
80096094:	1545c83a 	sub	r2,r2,r21
80096098:	29cb803a 	cmpltu	r5,r5,r7
8009609c:	1145c83a 	sub	r2,r2,r5
800960a0:	4089c83a 	sub	r4,r8,r2
800960a4:	003fc706 	br	80095fc4 <__umoddi3+0x3fc>
800960a8:	01000604 	movi	r4,24
800960ac:	003f1806 	br	80095d10 <__umoddi3+0x148>
800960b0:	00800604 	movi	r2,24
800960b4:	003f3206 	br	80095d80 <__umoddi3+0x1b8>
800960b8:	01000604 	movi	r4,24
800960bc:	003ed906 	br	80095c24 <__umoddi3+0x5c>
800960c0:	413fa52e 	bgeu	r8,r4,80095f58 <__umoddi3+0x390>
800960c4:	297fff84 	addi	r5,r5,-2
800960c8:	4551883a 	add	r8,r8,r21
800960cc:	003fa306 	br	80095f5c <__umoddi3+0x394>
800960d0:	15ff8b2e 	bgeu	r2,r23,80095f00 <__umoddi3+0x338>
800960d4:	31bfff84 	addi	r6,r6,-2
800960d8:	1545883a 	add	r2,r2,r21
800960dc:	003f8906 	br	80095f04 <__umoddi3+0x33c>
800960e0:	24c9883a 	add	r4,r4,r19
800960e4:	003eee06 	br	80095ca0 <__umoddi3+0xd8>
800960e8:	8005883a 	mov	r2,r16
800960ec:	003f1706 	br	80095d4c <__umoddi3+0x184>
800960f0:	817fe736 	bltu	r16,r5,80096090 <__umoddi3+0x4c8>
800960f4:	280f883a 	mov	r7,r5
800960f8:	0009883a 	mov	r4,zero
800960fc:	003fb106 	br	80095fc4 <__umoddi3+0x3fc>

80096100 <__eqsf2>:
80096100:	2006d5fa 	srli	r3,r4,23
80096104:	280cd5fa 	srli	r6,r5,23
80096108:	01c02034 	movhi	r7,128
8009610c:	39ffffc4 	addi	r7,r7,-1
80096110:	18c03fcc 	andi	r3,r3,255
80096114:	02003fc4 	movi	r8,255
80096118:	3904703a 	and	r2,r7,r4
8009611c:	31803fcc 	andi	r6,r6,255
80096120:	394e703a 	and	r7,r7,r5
80096124:	2008d7fa 	srli	r4,r4,31
80096128:	280ad7fa 	srli	r5,r5,31
8009612c:	1a000d26 	beq	r3,r8,80096164 <__eqsf2+0x64>
80096130:	02003fc4 	movi	r8,255
80096134:	32000826 	beq	r6,r8,80096158 <__eqsf2+0x58>
80096138:	19800226 	beq	r3,r6,80096144 <__eqsf2+0x44>
8009613c:	00800044 	movi	r2,1
80096140:	f800283a 	ret
80096144:	11fffd1e 	bne	r2,r7,8009613c <__eqsf2+0x3c>
80096148:	21400926 	beq	r4,r5,80096170 <__eqsf2+0x70>
8009614c:	183ffb1e 	bne	r3,zero,8009613c <__eqsf2+0x3c>
80096150:	1004c03a 	cmpne	r2,r2,zero
80096154:	f800283a 	ret
80096158:	383ff726 	beq	r7,zero,80096138 <__eqsf2+0x38>
8009615c:	00800044 	movi	r2,1
80096160:	f800283a 	ret
80096164:	103ff226 	beq	r2,zero,80096130 <__eqsf2+0x30>
80096168:	00800044 	movi	r2,1
8009616c:	f800283a 	ret
80096170:	0005883a 	mov	r2,zero
80096174:	f800283a 	ret

80096178 <__gesf2>:
80096178:	2004d5fa 	srli	r2,r4,23
8009617c:	2806d5fa 	srli	r3,r5,23
80096180:	01802034 	movhi	r6,128
80096184:	31bfffc4 	addi	r6,r6,-1
80096188:	10803fcc 	andi	r2,r2,255
8009618c:	01c03fc4 	movi	r7,255
80096190:	3110703a 	and	r8,r6,r4
80096194:	18c03fcc 	andi	r3,r3,255
80096198:	314c703a 	and	r6,r6,r5
8009619c:	2008d7fa 	srli	r4,r4,31
800961a0:	280ad7fa 	srli	r5,r5,31
800961a4:	11c01926 	beq	r2,r7,8009620c <__gesf2+0x94>
800961a8:	01c03fc4 	movi	r7,255
800961ac:	19c00f26 	beq	r3,r7,800961ec <__gesf2+0x74>
800961b0:	1000061e 	bne	r2,zero,800961cc <__gesf2+0x54>
800961b4:	400f003a 	cmpeq	r7,r8,zero
800961b8:	1800071e 	bne	r3,zero,800961d8 <__gesf2+0x60>
800961bc:	3000061e 	bne	r6,zero,800961d8 <__gesf2+0x60>
800961c0:	0005883a 	mov	r2,zero
800961c4:	40000e1e 	bne	r8,zero,80096200 <__gesf2+0x88>
800961c8:	f800283a 	ret
800961cc:	18000a1e 	bne	r3,zero,800961f8 <__gesf2+0x80>
800961d0:	30000b26 	beq	r6,zero,80096200 <__gesf2+0x88>
800961d4:	000f883a 	mov	r7,zero
800961d8:	29403fcc 	andi	r5,r5,255
800961dc:	38000726 	beq	r7,zero,800961fc <__gesf2+0x84>
800961e0:	28000826 	beq	r5,zero,80096204 <__gesf2+0x8c>
800961e4:	00800044 	movi	r2,1
800961e8:	f800283a 	ret
800961ec:	303ff026 	beq	r6,zero,800961b0 <__gesf2+0x38>
800961f0:	00bfff84 	movi	r2,-2
800961f4:	f800283a 	ret
800961f8:	29403fcc 	andi	r5,r5,255
800961fc:	21400526 	beq	r4,r5,80096214 <__gesf2+0x9c>
80096200:	203ff826 	beq	r4,zero,800961e4 <__gesf2+0x6c>
80096204:	00bfffc4 	movi	r2,-1
80096208:	f800283a 	ret
8009620c:	403fe626 	beq	r8,zero,800961a8 <__gesf2+0x30>
80096210:	003ff706 	br	800961f0 <__gesf2+0x78>
80096214:	18bffa16 	blt	r3,r2,80096200 <__gesf2+0x88>
80096218:	10c00216 	blt	r2,r3,80096224 <__gesf2+0xac>
8009621c:	323ff836 	bltu	r6,r8,80096200 <__gesf2+0x88>
80096220:	4180022e 	bgeu	r8,r6,8009622c <__gesf2+0xb4>
80096224:	203fef1e 	bne	r4,zero,800961e4 <__gesf2+0x6c>
80096228:	003ff606 	br	80096204 <__gesf2+0x8c>
8009622c:	0005883a 	mov	r2,zero
80096230:	f800283a 	ret

80096234 <__lesf2>:
80096234:	2004d5fa 	srli	r2,r4,23
80096238:	280cd5fa 	srli	r6,r5,23
8009623c:	00c02034 	movhi	r3,128
80096240:	18ffffc4 	addi	r3,r3,-1
80096244:	10803fcc 	andi	r2,r2,255
80096248:	01c03fc4 	movi	r7,255
8009624c:	1910703a 	and	r8,r3,r4
80096250:	31803fcc 	andi	r6,r6,255
80096254:	1946703a 	and	r3,r3,r5
80096258:	2008d7fa 	srli	r4,r4,31
8009625c:	280ad7fa 	srli	r5,r5,31
80096260:	11c01b26 	beq	r2,r7,800962d0 <__lesf2+0x9c>
80096264:	01c03fc4 	movi	r7,255
80096268:	31c01126 	beq	r6,r7,800962b0 <__lesf2+0x7c>
8009626c:	1000071e 	bne	r2,zero,8009628c <__lesf2+0x58>
80096270:	400f003a 	cmpeq	r7,r8,zero
80096274:	21003fcc 	andi	r4,r4,255
80096278:	3000081e 	bne	r6,zero,8009629c <__lesf2+0x68>
8009627c:	1800071e 	bne	r3,zero,8009629c <__lesf2+0x68>
80096280:	0005883a 	mov	r2,zero
80096284:	40000f1e 	bne	r8,zero,800962c4 <__lesf2+0x90>
80096288:	f800283a 	ret
8009628c:	21003fcc 	andi	r4,r4,255
80096290:	30000a1e 	bne	r6,zero,800962bc <__lesf2+0x88>
80096294:	18000b26 	beq	r3,zero,800962c4 <__lesf2+0x90>
80096298:	000f883a 	mov	r7,zero
8009629c:	29403fcc 	andi	r5,r5,255
800962a0:	38000726 	beq	r7,zero,800962c0 <__lesf2+0x8c>
800962a4:	28000826 	beq	r5,zero,800962c8 <__lesf2+0x94>
800962a8:	00800044 	movi	r2,1
800962ac:	f800283a 	ret
800962b0:	183fee26 	beq	r3,zero,8009626c <__lesf2+0x38>
800962b4:	00800084 	movi	r2,2
800962b8:	f800283a 	ret
800962bc:	29403fcc 	andi	r5,r5,255
800962c0:	21400626 	beq	r4,r5,800962dc <__lesf2+0xa8>
800962c4:	203ff826 	beq	r4,zero,800962a8 <__lesf2+0x74>
800962c8:	00bfffc4 	movi	r2,-1
800962cc:	f800283a 	ret
800962d0:	403fe426 	beq	r8,zero,80096264 <__lesf2+0x30>
800962d4:	00800084 	movi	r2,2
800962d8:	f800283a 	ret
800962dc:	30bff916 	blt	r6,r2,800962c4 <__lesf2+0x90>
800962e0:	11800216 	blt	r2,r6,800962ec <__lesf2+0xb8>
800962e4:	1a3ff736 	bltu	r3,r8,800962c4 <__lesf2+0x90>
800962e8:	40c0022e 	bgeu	r8,r3,800962f4 <__lesf2+0xc0>
800962ec:	203fee1e 	bne	r4,zero,800962a8 <__lesf2+0x74>
800962f0:	003ff506 	br	800962c8 <__lesf2+0x94>
800962f4:	0005883a 	mov	r2,zero
800962f8:	f800283a 	ret

800962fc <__adddf3>:
800962fc:	02c00434 	movhi	r11,16
80096300:	5affffc4 	addi	r11,r11,-1
80096304:	2806d7fa 	srli	r3,r5,31
80096308:	2ad4703a 	and	r10,r5,r11
8009630c:	3ad2703a 	and	r9,r7,r11
80096310:	3804d53a 	srli	r2,r7,20
80096314:	3018d77a 	srli	r12,r6,29
80096318:	280ad53a 	srli	r5,r5,20
8009631c:	501490fa 	slli	r10,r10,3
80096320:	2010d77a 	srli	r8,r4,29
80096324:	481290fa 	slli	r9,r9,3
80096328:	380ed7fa 	srli	r7,r7,31
8009632c:	defffb04 	addi	sp,sp,-20
80096330:	dc800215 	stw	r18,8(sp)
80096334:	dc400115 	stw	r17,4(sp)
80096338:	dc000015 	stw	r16,0(sp)
8009633c:	dfc00415 	stw	ra,16(sp)
80096340:	dcc00315 	stw	r19,12(sp)
80096344:	1c803fcc 	andi	r18,r3,255
80096348:	2c01ffcc 	andi	r16,r5,2047
8009634c:	5210b03a 	or	r8,r10,r8
80096350:	202290fa 	slli	r17,r4,3
80096354:	1081ffcc 	andi	r2,r2,2047
80096358:	4b12b03a 	or	r9,r9,r12
8009635c:	300c90fa 	slli	r6,r6,3
80096360:	91c07526 	beq	r18,r7,80096538 <__adddf3+0x23c>
80096364:	8087c83a 	sub	r3,r16,r2
80096368:	00c0ab0e 	bge	zero,r3,80096618 <__adddf3+0x31c>
8009636c:	10002a1e 	bne	r2,zero,80096418 <__adddf3+0x11c>
80096370:	4984b03a 	or	r2,r9,r6
80096374:	1000961e 	bne	r2,zero,800965d0 <__adddf3+0x2d4>
80096378:	888001cc 	andi	r2,r17,7
8009637c:	10000726 	beq	r2,zero,8009639c <__adddf3+0xa0>
80096380:	888003cc 	andi	r2,r17,15
80096384:	00c00104 	movi	r3,4
80096388:	10c00426 	beq	r2,r3,8009639c <__adddf3+0xa0>
8009638c:	88c7883a 	add	r3,r17,r3
80096390:	1c63803a 	cmpltu	r17,r3,r17
80096394:	4451883a 	add	r8,r8,r17
80096398:	1823883a 	mov	r17,r3
8009639c:	4080202c 	andhi	r2,r8,128
800963a0:	10005926 	beq	r2,zero,80096508 <__adddf3+0x20c>
800963a4:	84000044 	addi	r16,r16,1
800963a8:	0081ffc4 	movi	r2,2047
800963ac:	8080ba26 	beq	r16,r2,80096698 <__adddf3+0x39c>
800963b0:	00bfe034 	movhi	r2,65408
800963b4:	10bfffc4 	addi	r2,r2,-1
800963b8:	4090703a 	and	r8,r8,r2
800963bc:	4004977a 	slli	r2,r8,29
800963c0:	4010927a 	slli	r8,r8,9
800963c4:	8822d0fa 	srli	r17,r17,3
800963c8:	8401ffcc 	andi	r16,r16,2047
800963cc:	4010d33a 	srli	r8,r8,12
800963d0:	9007883a 	mov	r3,r18
800963d4:	1444b03a 	or	r2,r2,r17
800963d8:	8401ffcc 	andi	r16,r16,2047
800963dc:	8020953a 	slli	r16,r16,20
800963e0:	18c03fcc 	andi	r3,r3,255
800963e4:	01000434 	movhi	r4,16
800963e8:	213fffc4 	addi	r4,r4,-1
800963ec:	180697fa 	slli	r3,r3,31
800963f0:	4110703a 	and	r8,r8,r4
800963f4:	4410b03a 	or	r8,r8,r16
800963f8:	40c6b03a 	or	r3,r8,r3
800963fc:	dfc00417 	ldw	ra,16(sp)
80096400:	dcc00317 	ldw	r19,12(sp)
80096404:	dc800217 	ldw	r18,8(sp)
80096408:	dc400117 	ldw	r17,4(sp)
8009640c:	dc000017 	ldw	r16,0(sp)
80096410:	dec00504 	addi	sp,sp,20
80096414:	f800283a 	ret
80096418:	0081ffc4 	movi	r2,2047
8009641c:	80bfd626 	beq	r16,r2,80096378 <__adddf3+0x7c>
80096420:	4a402034 	orhi	r9,r9,128
80096424:	00800e04 	movi	r2,56
80096428:	10c09f16 	blt	r2,r3,800966a8 <__adddf3+0x3ac>
8009642c:	008007c4 	movi	r2,31
80096430:	10c0c216 	blt	r2,r3,8009673c <__adddf3+0x440>
80096434:	00800804 	movi	r2,32
80096438:	10c5c83a 	sub	r2,r2,r3
8009643c:	488a983a 	sll	r5,r9,r2
80096440:	30c8d83a 	srl	r4,r6,r3
80096444:	3084983a 	sll	r2,r6,r2
80096448:	48c6d83a 	srl	r3,r9,r3
8009644c:	290cb03a 	or	r6,r5,r4
80096450:	1004c03a 	cmpne	r2,r2,zero
80096454:	308cb03a 	or	r6,r6,r2
80096458:	898dc83a 	sub	r6,r17,r6
8009645c:	89a3803a 	cmpltu	r17,r17,r6
80096460:	40d1c83a 	sub	r8,r8,r3
80096464:	4451c83a 	sub	r8,r8,r17
80096468:	3023883a 	mov	r17,r6
8009646c:	4080202c 	andhi	r2,r8,128
80096470:	10002326 	beq	r2,zero,80096500 <__adddf3+0x204>
80096474:	04c02034 	movhi	r19,128
80096478:	9cffffc4 	addi	r19,r19,-1
8009647c:	44e6703a 	and	r19,r8,r19
80096480:	98007626 	beq	r19,zero,8009665c <__adddf3+0x360>
80096484:	9809883a 	mov	r4,r19
80096488:	0098aa80 	call	80098aa8 <__clzsi2>
8009648c:	10fffe04 	addi	r3,r2,-8
80096490:	010007c4 	movi	r4,31
80096494:	20c07716 	blt	r4,r3,80096674 <__adddf3+0x378>
80096498:	00800804 	movi	r2,32
8009649c:	10c5c83a 	sub	r2,r2,r3
800964a0:	8884d83a 	srl	r2,r17,r2
800964a4:	98d0983a 	sll	r8,r19,r3
800964a8:	88e2983a 	sll	r17,r17,r3
800964ac:	1204b03a 	or	r2,r2,r8
800964b0:	1c007416 	blt	r3,r16,80096684 <__adddf3+0x388>
800964b4:	1c21c83a 	sub	r16,r3,r16
800964b8:	82000044 	addi	r8,r16,1
800964bc:	00c007c4 	movi	r3,31
800964c0:	1a009116 	blt	r3,r8,80096708 <__adddf3+0x40c>
800964c4:	00c00804 	movi	r3,32
800964c8:	1a07c83a 	sub	r3,r3,r8
800964cc:	8a08d83a 	srl	r4,r17,r8
800964d0:	88e2983a 	sll	r17,r17,r3
800964d4:	10c6983a 	sll	r3,r2,r3
800964d8:	1210d83a 	srl	r8,r2,r8
800964dc:	8804c03a 	cmpne	r2,r17,zero
800964e0:	1906b03a 	or	r3,r3,r4
800964e4:	18a2b03a 	or	r17,r3,r2
800964e8:	0021883a 	mov	r16,zero
800964ec:	003fa206 	br	80096378 <__adddf3+0x7c>
800964f0:	1890b03a 	or	r8,r3,r2
800964f4:	40017d26 	beq	r8,zero,80096aec <__adddf3+0x7f0>
800964f8:	1011883a 	mov	r8,r2
800964fc:	1823883a 	mov	r17,r3
80096500:	888001cc 	andi	r2,r17,7
80096504:	103f9e1e 	bne	r2,zero,80096380 <__adddf3+0x84>
80096508:	4004977a 	slli	r2,r8,29
8009650c:	8822d0fa 	srli	r17,r17,3
80096510:	4010d0fa 	srli	r8,r8,3
80096514:	9007883a 	mov	r3,r18
80096518:	1444b03a 	or	r2,r2,r17
8009651c:	0101ffc4 	movi	r4,2047
80096520:	81002426 	beq	r16,r4,800965b4 <__adddf3+0x2b8>
80096524:	8120703a 	and	r16,r16,r4
80096528:	01000434 	movhi	r4,16
8009652c:	213fffc4 	addi	r4,r4,-1
80096530:	4110703a 	and	r8,r8,r4
80096534:	003fa806 	br	800963d8 <__adddf3+0xdc>
80096538:	8089c83a 	sub	r4,r16,r2
8009653c:	01005e0e 	bge	zero,r4,800966b8 <__adddf3+0x3bc>
80096540:	10002b26 	beq	r2,zero,800965f0 <__adddf3+0x2f4>
80096544:	0081ffc4 	movi	r2,2047
80096548:	80bf8b26 	beq	r16,r2,80096378 <__adddf3+0x7c>
8009654c:	4a402034 	orhi	r9,r9,128
80096550:	00800e04 	movi	r2,56
80096554:	1100a40e 	bge	r2,r4,800967e8 <__adddf3+0x4ec>
80096558:	498cb03a 	or	r6,r9,r6
8009655c:	300ac03a 	cmpne	r5,r6,zero
80096560:	0013883a 	mov	r9,zero
80096564:	2c4b883a 	add	r5,r5,r17
80096568:	2c63803a 	cmpltu	r17,r5,r17
8009656c:	4a11883a 	add	r8,r9,r8
80096570:	8a11883a 	add	r8,r17,r8
80096574:	2823883a 	mov	r17,r5
80096578:	4080202c 	andhi	r2,r8,128
8009657c:	103fe026 	beq	r2,zero,80096500 <__adddf3+0x204>
80096580:	84000044 	addi	r16,r16,1
80096584:	0081ffc4 	movi	r2,2047
80096588:	8080d226 	beq	r16,r2,800968d4 <__adddf3+0x5d8>
8009658c:	00bfe034 	movhi	r2,65408
80096590:	10bfffc4 	addi	r2,r2,-1
80096594:	4090703a 	and	r8,r8,r2
80096598:	880ad07a 	srli	r5,r17,1
8009659c:	400897fa 	slli	r4,r8,31
800965a0:	88c0004c 	andi	r3,r17,1
800965a4:	28e2b03a 	or	r17,r5,r3
800965a8:	4010d07a 	srli	r8,r8,1
800965ac:	2462b03a 	or	r17,r4,r17
800965b0:	003f7106 	br	80096378 <__adddf3+0x7c>
800965b4:	4088b03a 	or	r4,r8,r2
800965b8:	20014526 	beq	r4,zero,80096ad0 <__adddf3+0x7d4>
800965bc:	01000434 	movhi	r4,16
800965c0:	42000234 	orhi	r8,r8,8
800965c4:	213fffc4 	addi	r4,r4,-1
800965c8:	4110703a 	and	r8,r8,r4
800965cc:	003f8206 	br	800963d8 <__adddf3+0xdc>
800965d0:	18ffffc4 	addi	r3,r3,-1
800965d4:	1800491e 	bne	r3,zero,800966fc <__adddf3+0x400>
800965d8:	898bc83a 	sub	r5,r17,r6
800965dc:	8963803a 	cmpltu	r17,r17,r5
800965e0:	4251c83a 	sub	r8,r8,r9
800965e4:	4451c83a 	sub	r8,r8,r17
800965e8:	2823883a 	mov	r17,r5
800965ec:	003f9f06 	br	8009646c <__adddf3+0x170>
800965f0:	4984b03a 	or	r2,r9,r6
800965f4:	103f6026 	beq	r2,zero,80096378 <__adddf3+0x7c>
800965f8:	213fffc4 	addi	r4,r4,-1
800965fc:	2000931e 	bne	r4,zero,8009684c <__adddf3+0x550>
80096600:	898d883a 	add	r6,r17,r6
80096604:	3463803a 	cmpltu	r17,r6,r17
80096608:	4251883a 	add	r8,r8,r9
8009660c:	8a11883a 	add	r8,r17,r8
80096610:	3023883a 	mov	r17,r6
80096614:	003fd806 	br	80096578 <__adddf3+0x27c>
80096618:	1800541e 	bne	r3,zero,8009676c <__adddf3+0x470>
8009661c:	80800044 	addi	r2,r16,1
80096620:	1081ffcc 	andi	r2,r2,2047
80096624:	00c00044 	movi	r3,1
80096628:	1880a00e 	bge	r3,r2,800968ac <__adddf3+0x5b0>
8009662c:	8989c83a 	sub	r4,r17,r6
80096630:	8905803a 	cmpltu	r2,r17,r4
80096634:	4267c83a 	sub	r19,r8,r9
80096638:	98a7c83a 	sub	r19,r19,r2
8009663c:	9880202c 	andhi	r2,r19,128
80096640:	10006326 	beq	r2,zero,800967d0 <__adddf3+0x4d4>
80096644:	3463c83a 	sub	r17,r6,r17
80096648:	4a07c83a 	sub	r3,r9,r8
8009664c:	344d803a 	cmpltu	r6,r6,r17
80096650:	19a7c83a 	sub	r19,r3,r6
80096654:	3825883a 	mov	r18,r7
80096658:	983f8a1e 	bne	r19,zero,80096484 <__adddf3+0x188>
8009665c:	8809883a 	mov	r4,r17
80096660:	0098aa80 	call	80098aa8 <__clzsi2>
80096664:	10800804 	addi	r2,r2,32
80096668:	10fffe04 	addi	r3,r2,-8
8009666c:	010007c4 	movi	r4,31
80096670:	20ff890e 	bge	r4,r3,80096498 <__adddf3+0x19c>
80096674:	10bff604 	addi	r2,r2,-40
80096678:	8884983a 	sll	r2,r17,r2
8009667c:	0023883a 	mov	r17,zero
80096680:	1c3f8c0e 	bge	r3,r16,800964b4 <__adddf3+0x1b8>
80096684:	023fe034 	movhi	r8,65408
80096688:	423fffc4 	addi	r8,r8,-1
8009668c:	80e1c83a 	sub	r16,r16,r3
80096690:	1210703a 	and	r8,r2,r8
80096694:	003f3806 	br	80096378 <__adddf3+0x7c>
80096698:	9007883a 	mov	r3,r18
8009669c:	0011883a 	mov	r8,zero
800966a0:	0005883a 	mov	r2,zero
800966a4:	003f4c06 	br	800963d8 <__adddf3+0xdc>
800966a8:	498cb03a 	or	r6,r9,r6
800966ac:	300cc03a 	cmpne	r6,r6,zero
800966b0:	0007883a 	mov	r3,zero
800966b4:	003f6806 	br	80096458 <__adddf3+0x15c>
800966b8:	20009c1e 	bne	r4,zero,8009692c <__adddf3+0x630>
800966bc:	80800044 	addi	r2,r16,1
800966c0:	1141ffcc 	andi	r5,r2,2047
800966c4:	01000044 	movi	r4,1
800966c8:	2140670e 	bge	r4,r5,80096868 <__adddf3+0x56c>
800966cc:	0101ffc4 	movi	r4,2047
800966d0:	11007f26 	beq	r2,r4,800968d0 <__adddf3+0x5d4>
800966d4:	898d883a 	add	r6,r17,r6
800966d8:	4247883a 	add	r3,r8,r9
800966dc:	3451803a 	cmpltu	r8,r6,r17
800966e0:	40d1883a 	add	r8,r8,r3
800966e4:	402297fa 	slli	r17,r8,31
800966e8:	300cd07a 	srli	r6,r6,1
800966ec:	4010d07a 	srli	r8,r8,1
800966f0:	1021883a 	mov	r16,r2
800966f4:	89a2b03a 	or	r17,r17,r6
800966f8:	003f1f06 	br	80096378 <__adddf3+0x7c>
800966fc:	0081ffc4 	movi	r2,2047
80096700:	80bf481e 	bne	r16,r2,80096424 <__adddf3+0x128>
80096704:	003f1c06 	br	80096378 <__adddf3+0x7c>
80096708:	843ff844 	addi	r16,r16,-31
8009670c:	01000804 	movi	r4,32
80096710:	1406d83a 	srl	r3,r2,r16
80096714:	41005026 	beq	r8,r4,80096858 <__adddf3+0x55c>
80096718:	01001004 	movi	r4,64
8009671c:	2211c83a 	sub	r8,r4,r8
80096720:	1204983a 	sll	r2,r2,r8
80096724:	88a2b03a 	or	r17,r17,r2
80096728:	8822c03a 	cmpne	r17,r17,zero
8009672c:	1c62b03a 	or	r17,r3,r17
80096730:	0011883a 	mov	r8,zero
80096734:	0021883a 	mov	r16,zero
80096738:	003f7106 	br	80096500 <__adddf3+0x204>
8009673c:	193ff804 	addi	r4,r3,-32
80096740:	00800804 	movi	r2,32
80096744:	4908d83a 	srl	r4,r9,r4
80096748:	18804526 	beq	r3,r2,80096860 <__adddf3+0x564>
8009674c:	00801004 	movi	r2,64
80096750:	10c5c83a 	sub	r2,r2,r3
80096754:	4886983a 	sll	r3,r9,r2
80096758:	198cb03a 	or	r6,r3,r6
8009675c:	300cc03a 	cmpne	r6,r6,zero
80096760:	218cb03a 	or	r6,r4,r6
80096764:	0007883a 	mov	r3,zero
80096768:	003f3b06 	br	80096458 <__adddf3+0x15c>
8009676c:	80002a26 	beq	r16,zero,80096818 <__adddf3+0x51c>
80096770:	0101ffc4 	movi	r4,2047
80096774:	11006826 	beq	r2,r4,80096918 <__adddf3+0x61c>
80096778:	00c7c83a 	sub	r3,zero,r3
8009677c:	42002034 	orhi	r8,r8,128
80096780:	01000e04 	movi	r4,56
80096784:	20c07c16 	blt	r4,r3,80096978 <__adddf3+0x67c>
80096788:	010007c4 	movi	r4,31
8009678c:	20c0da16 	blt	r4,r3,80096af8 <__adddf3+0x7fc>
80096790:	01000804 	movi	r4,32
80096794:	20c9c83a 	sub	r4,r4,r3
80096798:	4114983a 	sll	r10,r8,r4
8009679c:	88cad83a 	srl	r5,r17,r3
800967a0:	8908983a 	sll	r4,r17,r4
800967a4:	40c6d83a 	srl	r3,r8,r3
800967a8:	5162b03a 	or	r17,r10,r5
800967ac:	2008c03a 	cmpne	r4,r4,zero
800967b0:	8922b03a 	or	r17,r17,r4
800967b4:	3463c83a 	sub	r17,r6,r17
800967b8:	48c7c83a 	sub	r3,r9,r3
800967bc:	344d803a 	cmpltu	r6,r6,r17
800967c0:	1991c83a 	sub	r8,r3,r6
800967c4:	1021883a 	mov	r16,r2
800967c8:	3825883a 	mov	r18,r7
800967cc:	003f2706 	br	8009646c <__adddf3+0x170>
800967d0:	24d0b03a 	or	r8,r4,r19
800967d4:	40001b1e 	bne	r8,zero,80096844 <__adddf3+0x548>
800967d8:	0005883a 	mov	r2,zero
800967dc:	0007883a 	mov	r3,zero
800967e0:	0021883a 	mov	r16,zero
800967e4:	003f4d06 	br	8009651c <__adddf3+0x220>
800967e8:	008007c4 	movi	r2,31
800967ec:	11003c16 	blt	r2,r4,800968e0 <__adddf3+0x5e4>
800967f0:	00800804 	movi	r2,32
800967f4:	1105c83a 	sub	r2,r2,r4
800967f8:	488e983a 	sll	r7,r9,r2
800967fc:	310ad83a 	srl	r5,r6,r4
80096800:	3084983a 	sll	r2,r6,r2
80096804:	4912d83a 	srl	r9,r9,r4
80096808:	394ab03a 	or	r5,r7,r5
8009680c:	1004c03a 	cmpne	r2,r2,zero
80096810:	288ab03a 	or	r5,r5,r2
80096814:	003f5306 	br	80096564 <__adddf3+0x268>
80096818:	4448b03a 	or	r4,r8,r17
8009681c:	20003e26 	beq	r4,zero,80096918 <__adddf3+0x61c>
80096820:	00c6303a 	nor	r3,zero,r3
80096824:	18003a1e 	bne	r3,zero,80096910 <__adddf3+0x614>
80096828:	3463c83a 	sub	r17,r6,r17
8009682c:	4a07c83a 	sub	r3,r9,r8
80096830:	344d803a 	cmpltu	r6,r6,r17
80096834:	1991c83a 	sub	r8,r3,r6
80096838:	1021883a 	mov	r16,r2
8009683c:	3825883a 	mov	r18,r7
80096840:	003f0a06 	br	8009646c <__adddf3+0x170>
80096844:	2023883a 	mov	r17,r4
80096848:	003f0d06 	br	80096480 <__adddf3+0x184>
8009684c:	0081ffc4 	movi	r2,2047
80096850:	80bf3f1e 	bne	r16,r2,80096550 <__adddf3+0x254>
80096854:	003ec806 	br	80096378 <__adddf3+0x7c>
80096858:	0005883a 	mov	r2,zero
8009685c:	003fb106 	br	80096724 <__adddf3+0x428>
80096860:	0007883a 	mov	r3,zero
80096864:	003fbc06 	br	80096758 <__adddf3+0x45c>
80096868:	4444b03a 	or	r2,r8,r17
8009686c:	8000871e 	bne	r16,zero,80096a8c <__adddf3+0x790>
80096870:	1000ba26 	beq	r2,zero,80096b5c <__adddf3+0x860>
80096874:	4984b03a 	or	r2,r9,r6
80096878:	103ebf26 	beq	r2,zero,80096378 <__adddf3+0x7c>
8009687c:	8985883a 	add	r2,r17,r6
80096880:	4247883a 	add	r3,r8,r9
80096884:	1451803a 	cmpltu	r8,r2,r17
80096888:	40d1883a 	add	r8,r8,r3
8009688c:	40c0202c 	andhi	r3,r8,128
80096890:	1023883a 	mov	r17,r2
80096894:	183f1a26 	beq	r3,zero,80096500 <__adddf3+0x204>
80096898:	00bfe034 	movhi	r2,65408
8009689c:	10bfffc4 	addi	r2,r2,-1
800968a0:	2021883a 	mov	r16,r4
800968a4:	4090703a 	and	r8,r8,r2
800968a8:	003eb306 	br	80096378 <__adddf3+0x7c>
800968ac:	4444b03a 	or	r2,r8,r17
800968b0:	8000291e 	bne	r16,zero,80096958 <__adddf3+0x65c>
800968b4:	10004b1e 	bne	r2,zero,800969e4 <__adddf3+0x6e8>
800968b8:	4990b03a 	or	r8,r9,r6
800968bc:	40008b26 	beq	r8,zero,80096aec <__adddf3+0x7f0>
800968c0:	4811883a 	mov	r8,r9
800968c4:	3023883a 	mov	r17,r6
800968c8:	3825883a 	mov	r18,r7
800968cc:	003eaa06 	br	80096378 <__adddf3+0x7c>
800968d0:	1021883a 	mov	r16,r2
800968d4:	0011883a 	mov	r8,zero
800968d8:	0005883a 	mov	r2,zero
800968dc:	003f0f06 	br	8009651c <__adddf3+0x220>
800968e0:	217ff804 	addi	r5,r4,-32
800968e4:	00800804 	movi	r2,32
800968e8:	494ad83a 	srl	r5,r9,r5
800968ec:	20807d26 	beq	r4,r2,80096ae4 <__adddf3+0x7e8>
800968f0:	00801004 	movi	r2,64
800968f4:	1109c83a 	sub	r4,r2,r4
800968f8:	4912983a 	sll	r9,r9,r4
800968fc:	498cb03a 	or	r6,r9,r6
80096900:	300cc03a 	cmpne	r6,r6,zero
80096904:	298ab03a 	or	r5,r5,r6
80096908:	0013883a 	mov	r9,zero
8009690c:	003f1506 	br	80096564 <__adddf3+0x268>
80096910:	0101ffc4 	movi	r4,2047
80096914:	113f9a1e 	bne	r2,r4,80096780 <__adddf3+0x484>
80096918:	4811883a 	mov	r8,r9
8009691c:	3023883a 	mov	r17,r6
80096920:	1021883a 	mov	r16,r2
80096924:	3825883a 	mov	r18,r7
80096928:	003e9306 	br	80096378 <__adddf3+0x7c>
8009692c:	8000161e 	bne	r16,zero,80096988 <__adddf3+0x68c>
80096930:	444ab03a 	or	r5,r8,r17
80096934:	28005126 	beq	r5,zero,80096a7c <__adddf3+0x780>
80096938:	0108303a 	nor	r4,zero,r4
8009693c:	20004d1e 	bne	r4,zero,80096a74 <__adddf3+0x778>
80096940:	89a3883a 	add	r17,r17,r6
80096944:	4253883a 	add	r9,r8,r9
80096948:	898d803a 	cmpltu	r6,r17,r6
8009694c:	3251883a 	add	r8,r6,r9
80096950:	1021883a 	mov	r16,r2
80096954:	003f0806 	br	80096578 <__adddf3+0x27c>
80096958:	1000301e 	bne	r2,zero,80096a1c <__adddf3+0x720>
8009695c:	4984b03a 	or	r2,r9,r6
80096960:	10007126 	beq	r2,zero,80096b28 <__adddf3+0x82c>
80096964:	4811883a 	mov	r8,r9
80096968:	3023883a 	mov	r17,r6
8009696c:	3825883a 	mov	r18,r7
80096970:	0401ffc4 	movi	r16,2047
80096974:	003e8006 	br	80096378 <__adddf3+0x7c>
80096978:	4462b03a 	or	r17,r8,r17
8009697c:	8822c03a 	cmpne	r17,r17,zero
80096980:	0007883a 	mov	r3,zero
80096984:	003f8b06 	br	800967b4 <__adddf3+0x4b8>
80096988:	0141ffc4 	movi	r5,2047
8009698c:	11403b26 	beq	r2,r5,80096a7c <__adddf3+0x780>
80096990:	0109c83a 	sub	r4,zero,r4
80096994:	42002034 	orhi	r8,r8,128
80096998:	01400e04 	movi	r5,56
8009699c:	29006716 	blt	r5,r4,80096b3c <__adddf3+0x840>
800969a0:	014007c4 	movi	r5,31
800969a4:	29007016 	blt	r5,r4,80096b68 <__adddf3+0x86c>
800969a8:	01400804 	movi	r5,32
800969ac:	290bc83a 	sub	r5,r5,r4
800969b0:	4154983a 	sll	r10,r8,r5
800969b4:	890ed83a 	srl	r7,r17,r4
800969b8:	894a983a 	sll	r5,r17,r5
800969bc:	4108d83a 	srl	r4,r8,r4
800969c0:	51e2b03a 	or	r17,r10,r7
800969c4:	280ac03a 	cmpne	r5,r5,zero
800969c8:	8962b03a 	or	r17,r17,r5
800969cc:	89a3883a 	add	r17,r17,r6
800969d0:	2253883a 	add	r9,r4,r9
800969d4:	898d803a 	cmpltu	r6,r17,r6
800969d8:	3251883a 	add	r8,r6,r9
800969dc:	1021883a 	mov	r16,r2
800969e0:	003ee506 	br	80096578 <__adddf3+0x27c>
800969e4:	4984b03a 	or	r2,r9,r6
800969e8:	103e6326 	beq	r2,zero,80096378 <__adddf3+0x7c>
800969ec:	8987c83a 	sub	r3,r17,r6
800969f0:	88c9803a 	cmpltu	r4,r17,r3
800969f4:	4245c83a 	sub	r2,r8,r9
800969f8:	1105c83a 	sub	r2,r2,r4
800969fc:	1100202c 	andhi	r4,r2,128
80096a00:	203ebb26 	beq	r4,zero,800964f0 <__adddf3+0x1f4>
80096a04:	3463c83a 	sub	r17,r6,r17
80096a08:	4a07c83a 	sub	r3,r9,r8
80096a0c:	344d803a 	cmpltu	r6,r6,r17
80096a10:	1991c83a 	sub	r8,r3,r6
80096a14:	3825883a 	mov	r18,r7
80096a18:	003e5706 	br	80096378 <__adddf3+0x7c>
80096a1c:	4984b03a 	or	r2,r9,r6
80096a20:	10002e26 	beq	r2,zero,80096adc <__adddf3+0x7e0>
80096a24:	4004d0fa 	srli	r2,r8,3
80096a28:	8822d0fa 	srli	r17,r17,3
80096a2c:	4010977a 	slli	r8,r8,29
80096a30:	10c0022c 	andhi	r3,r2,8
80096a34:	4462b03a 	or	r17,r8,r17
80096a38:	18000826 	beq	r3,zero,80096a5c <__adddf3+0x760>
80096a3c:	4808d0fa 	srli	r4,r9,3
80096a40:	20c0022c 	andhi	r3,r4,8
80096a44:	1800051e 	bne	r3,zero,80096a5c <__adddf3+0x760>
80096a48:	300cd0fa 	srli	r6,r6,3
80096a4c:	4806977a 	slli	r3,r9,29
80096a50:	2005883a 	mov	r2,r4
80096a54:	3825883a 	mov	r18,r7
80096a58:	19a2b03a 	or	r17,r3,r6
80096a5c:	8810d77a 	srli	r8,r17,29
80096a60:	100490fa 	slli	r2,r2,3
80096a64:	882290fa 	slli	r17,r17,3
80096a68:	0401ffc4 	movi	r16,2047
80096a6c:	4090b03a 	or	r8,r8,r2
80096a70:	003e4106 	br	80096378 <__adddf3+0x7c>
80096a74:	0141ffc4 	movi	r5,2047
80096a78:	117fc71e 	bne	r2,r5,80096998 <__adddf3+0x69c>
80096a7c:	4811883a 	mov	r8,r9
80096a80:	3023883a 	mov	r17,r6
80096a84:	1021883a 	mov	r16,r2
80096a88:	003e3b06 	br	80096378 <__adddf3+0x7c>
80096a8c:	10002f26 	beq	r2,zero,80096b4c <__adddf3+0x850>
80096a90:	4984b03a 	or	r2,r9,r6
80096a94:	10001126 	beq	r2,zero,80096adc <__adddf3+0x7e0>
80096a98:	4004d0fa 	srli	r2,r8,3
80096a9c:	8822d0fa 	srli	r17,r17,3
80096aa0:	4010977a 	slli	r8,r8,29
80096aa4:	10c0022c 	andhi	r3,r2,8
80096aa8:	4462b03a 	or	r17,r8,r17
80096aac:	183feb26 	beq	r3,zero,80096a5c <__adddf3+0x760>
80096ab0:	4808d0fa 	srli	r4,r9,3
80096ab4:	20c0022c 	andhi	r3,r4,8
80096ab8:	183fe81e 	bne	r3,zero,80096a5c <__adddf3+0x760>
80096abc:	300cd0fa 	srli	r6,r6,3
80096ac0:	4806977a 	slli	r3,r9,29
80096ac4:	2005883a 	mov	r2,r4
80096ac8:	19a2b03a 	or	r17,r3,r6
80096acc:	003fe306 	br	80096a5c <__adddf3+0x760>
80096ad0:	0011883a 	mov	r8,zero
80096ad4:	0005883a 	mov	r2,zero
80096ad8:	003e3f06 	br	800963d8 <__adddf3+0xdc>
80096adc:	0401ffc4 	movi	r16,2047
80096ae0:	003e2506 	br	80096378 <__adddf3+0x7c>
80096ae4:	0013883a 	mov	r9,zero
80096ae8:	003f8406 	br	800968fc <__adddf3+0x600>
80096aec:	0005883a 	mov	r2,zero
80096af0:	0007883a 	mov	r3,zero
80096af4:	003e8906 	br	8009651c <__adddf3+0x220>
80096af8:	197ff804 	addi	r5,r3,-32
80096afc:	01000804 	movi	r4,32
80096b00:	414ad83a 	srl	r5,r8,r5
80096b04:	19002426 	beq	r3,r4,80096b98 <__adddf3+0x89c>
80096b08:	01001004 	movi	r4,64
80096b0c:	20c7c83a 	sub	r3,r4,r3
80096b10:	40c6983a 	sll	r3,r8,r3
80096b14:	1c46b03a 	or	r3,r3,r17
80096b18:	1806c03a 	cmpne	r3,r3,zero
80096b1c:	28e2b03a 	or	r17,r5,r3
80096b20:	0007883a 	mov	r3,zero
80096b24:	003f2306 	br	800967b4 <__adddf3+0x4b8>
80096b28:	0007883a 	mov	r3,zero
80096b2c:	5811883a 	mov	r8,r11
80096b30:	00bfffc4 	movi	r2,-1
80096b34:	0401ffc4 	movi	r16,2047
80096b38:	003e7806 	br	8009651c <__adddf3+0x220>
80096b3c:	4462b03a 	or	r17,r8,r17
80096b40:	8822c03a 	cmpne	r17,r17,zero
80096b44:	0009883a 	mov	r4,zero
80096b48:	003fa006 	br	800969cc <__adddf3+0x6d0>
80096b4c:	4811883a 	mov	r8,r9
80096b50:	3023883a 	mov	r17,r6
80096b54:	0401ffc4 	movi	r16,2047
80096b58:	003e0706 	br	80096378 <__adddf3+0x7c>
80096b5c:	4811883a 	mov	r8,r9
80096b60:	3023883a 	mov	r17,r6
80096b64:	003e0406 	br	80096378 <__adddf3+0x7c>
80096b68:	21fff804 	addi	r7,r4,-32
80096b6c:	01400804 	movi	r5,32
80096b70:	41ced83a 	srl	r7,r8,r7
80096b74:	21400a26 	beq	r4,r5,80096ba0 <__adddf3+0x8a4>
80096b78:	01401004 	movi	r5,64
80096b7c:	2909c83a 	sub	r4,r5,r4
80096b80:	4108983a 	sll	r4,r8,r4
80096b84:	2448b03a 	or	r4,r4,r17
80096b88:	2008c03a 	cmpne	r4,r4,zero
80096b8c:	3922b03a 	or	r17,r7,r4
80096b90:	0009883a 	mov	r4,zero
80096b94:	003f8d06 	br	800969cc <__adddf3+0x6d0>
80096b98:	0007883a 	mov	r3,zero
80096b9c:	003fdd06 	br	80096b14 <__adddf3+0x818>
80096ba0:	0009883a 	mov	r4,zero
80096ba4:	003ff706 	br	80096b84 <__adddf3+0x888>

80096ba8 <__divdf3>:
80096ba8:	defff204 	addi	sp,sp,-56
80096bac:	dd400915 	stw	r21,36(sp)
80096bb0:	282ad53a 	srli	r21,r5,20
80096bb4:	dd000815 	stw	r20,32(sp)
80096bb8:	2828d7fa 	srli	r20,r5,31
80096bbc:	dc000415 	stw	r16,16(sp)
80096bc0:	04000434 	movhi	r16,16
80096bc4:	df000c15 	stw	fp,48(sp)
80096bc8:	843fffc4 	addi	r16,r16,-1
80096bcc:	dfc00d15 	stw	ra,52(sp)
80096bd0:	ddc00b15 	stw	r23,44(sp)
80096bd4:	dd800a15 	stw	r22,40(sp)
80096bd8:	dcc00715 	stw	r19,28(sp)
80096bdc:	dc800615 	stw	r18,24(sp)
80096be0:	dc400515 	stw	r17,20(sp)
80096be4:	ad41ffcc 	andi	r21,r21,2047
80096be8:	2c20703a 	and	r16,r5,r16
80096bec:	a7003fcc 	andi	fp,r20,255
80096bf0:	a8006126 	beq	r21,zero,80096d78 <__divdf3+0x1d0>
80096bf4:	0081ffc4 	movi	r2,2047
80096bf8:	2025883a 	mov	r18,r4
80096bfc:	a8803726 	beq	r21,r2,80096cdc <__divdf3+0x134>
80096c00:	80800434 	orhi	r2,r16,16
80096c04:	100490fa 	slli	r2,r2,3
80096c08:	2020d77a 	srli	r16,r4,29
80096c0c:	202490fa 	slli	r18,r4,3
80096c10:	ad7f0044 	addi	r21,r21,-1023
80096c14:	80a0b03a 	or	r16,r16,r2
80096c18:	0027883a 	mov	r19,zero
80096c1c:	0013883a 	mov	r9,zero
80096c20:	3804d53a 	srli	r2,r7,20
80096c24:	382cd7fa 	srli	r22,r7,31
80096c28:	04400434 	movhi	r17,16
80096c2c:	8c7fffc4 	addi	r17,r17,-1
80096c30:	1081ffcc 	andi	r2,r2,2047
80096c34:	3011883a 	mov	r8,r6
80096c38:	3c62703a 	and	r17,r7,r17
80096c3c:	b5c03fcc 	andi	r23,r22,255
80096c40:	10006c26 	beq	r2,zero,80096df4 <__divdf3+0x24c>
80096c44:	00c1ffc4 	movi	r3,2047
80096c48:	10c06426 	beq	r2,r3,80096ddc <__divdf3+0x234>
80096c4c:	88c00434 	orhi	r3,r17,16
80096c50:	180690fa 	slli	r3,r3,3
80096c54:	3022d77a 	srli	r17,r6,29
80096c58:	301090fa 	slli	r8,r6,3
80096c5c:	10bf0044 	addi	r2,r2,-1023
80096c60:	88e2b03a 	or	r17,r17,r3
80096c64:	000f883a 	mov	r7,zero
80096c68:	a58cf03a 	xor	r6,r20,r22
80096c6c:	3cc8b03a 	or	r4,r7,r19
80096c70:	a8abc83a 	sub	r21,r21,r2
80096c74:	008003c4 	movi	r2,15
80096c78:	3007883a 	mov	r3,r6
80096c7c:	34c03fcc 	andi	r19,r6,255
80096c80:	11009036 	bltu	r2,r4,80096ec4 <__divdf3+0x31c>
80096c84:	200890ba 	slli	r4,r4,2
80096c88:	00a00274 	movhi	r2,32777
80096c8c:	109b2704 	addi	r2,r2,27804
80096c90:	2089883a 	add	r4,r4,r2
80096c94:	20800017 	ldw	r2,0(r4)
80096c98:	1000683a 	jmp	r2
80096c9c:	80096ec4 	addi	zero,r16,9659
80096ca0:	80096d14 	ori	zero,r16,9652
80096ca4:	80096eb4 	orhi	zero,r16,9658
80096ca8:	80096d08 	cmpgei	zero,r16,9652
80096cac:	80096eb4 	orhi	zero,r16,9658
80096cb0:	80096e88 	cmpgei	zero,r16,9658
80096cb4:	80096eb4 	orhi	zero,r16,9658
80096cb8:	80096d08 	cmpgei	zero,r16,9652
80096cbc:	80096d14 	ori	zero,r16,9652
80096cc0:	80096d14 	ori	zero,r16,9652
80096cc4:	80096e88 	cmpgei	zero,r16,9658
80096cc8:	80096d08 	cmpgei	zero,r16,9652
80096ccc:	80096cf8 	rdprs	zero,r16,9651
80096cd0:	80096cf8 	rdprs	zero,r16,9651
80096cd4:	80096cf8 	rdprs	zero,r16,9651
80096cd8:	800971a8 	cmpgeui	zero,r16,9670
80096cdc:	2404b03a 	or	r2,r4,r16
80096ce0:	1000661e 	bne	r2,zero,80096e7c <__divdf3+0x2d4>
80096ce4:	04c00204 	movi	r19,8
80096ce8:	0021883a 	mov	r16,zero
80096cec:	0025883a 	mov	r18,zero
80096cf0:	02400084 	movi	r9,2
80096cf4:	003fca06 	br	80096c20 <__divdf3+0x78>
80096cf8:	8023883a 	mov	r17,r16
80096cfc:	9011883a 	mov	r8,r18
80096d00:	e02f883a 	mov	r23,fp
80096d04:	480f883a 	mov	r7,r9
80096d08:	00800084 	movi	r2,2
80096d0c:	3881311e 	bne	r7,r2,800971d4 <__divdf3+0x62c>
80096d10:	b827883a 	mov	r19,r23
80096d14:	98c0004c 	andi	r3,r19,1
80096d18:	0081ffc4 	movi	r2,2047
80096d1c:	000b883a 	mov	r5,zero
80096d20:	0025883a 	mov	r18,zero
80096d24:	1004953a 	slli	r2,r2,20
80096d28:	18c03fcc 	andi	r3,r3,255
80096d2c:	04400434 	movhi	r17,16
80096d30:	8c7fffc4 	addi	r17,r17,-1
80096d34:	180697fa 	slli	r3,r3,31
80096d38:	2c4a703a 	and	r5,r5,r17
80096d3c:	288ab03a 	or	r5,r5,r2
80096d40:	28c6b03a 	or	r3,r5,r3
80096d44:	9005883a 	mov	r2,r18
80096d48:	dfc00d17 	ldw	ra,52(sp)
80096d4c:	df000c17 	ldw	fp,48(sp)
80096d50:	ddc00b17 	ldw	r23,44(sp)
80096d54:	dd800a17 	ldw	r22,40(sp)
80096d58:	dd400917 	ldw	r21,36(sp)
80096d5c:	dd000817 	ldw	r20,32(sp)
80096d60:	dcc00717 	ldw	r19,28(sp)
80096d64:	dc800617 	ldw	r18,24(sp)
80096d68:	dc400517 	ldw	r17,20(sp)
80096d6c:	dc000417 	ldw	r16,16(sp)
80096d70:	dec00e04 	addi	sp,sp,56
80096d74:	f800283a 	ret
80096d78:	2404b03a 	or	r2,r4,r16
80096d7c:	2027883a 	mov	r19,r4
80096d80:	10003926 	beq	r2,zero,80096e68 <__divdf3+0x2c0>
80096d84:	80012e26 	beq	r16,zero,80097240 <__divdf3+0x698>
80096d88:	8009883a 	mov	r4,r16
80096d8c:	d9800315 	stw	r6,12(sp)
80096d90:	d9c00215 	stw	r7,8(sp)
80096d94:	0098aa80 	call	80098aa8 <__clzsi2>
80096d98:	d9800317 	ldw	r6,12(sp)
80096d9c:	d9c00217 	ldw	r7,8(sp)
80096da0:	113ffd44 	addi	r4,r2,-11
80096da4:	00c00704 	movi	r3,28
80096da8:	19012116 	blt	r3,r4,80097230 <__divdf3+0x688>
80096dac:	00c00744 	movi	r3,29
80096db0:	147ffe04 	addi	r17,r2,-8
80096db4:	1907c83a 	sub	r3,r3,r4
80096db8:	8460983a 	sll	r16,r16,r17
80096dbc:	98c6d83a 	srl	r3,r19,r3
80096dc0:	9c64983a 	sll	r18,r19,r17
80096dc4:	1c20b03a 	or	r16,r3,r16
80096dc8:	1080fcc4 	addi	r2,r2,1011
80096dcc:	00abc83a 	sub	r21,zero,r2
80096dd0:	0027883a 	mov	r19,zero
80096dd4:	0013883a 	mov	r9,zero
80096dd8:	003f9106 	br	80096c20 <__divdf3+0x78>
80096ddc:	3446b03a 	or	r3,r6,r17
80096de0:	18001f1e 	bne	r3,zero,80096e60 <__divdf3+0x2b8>
80096de4:	0023883a 	mov	r17,zero
80096de8:	0011883a 	mov	r8,zero
80096dec:	01c00084 	movi	r7,2
80096df0:	003f9d06 	br	80096c68 <__divdf3+0xc0>
80096df4:	3446b03a 	or	r3,r6,r17
80096df8:	18001526 	beq	r3,zero,80096e50 <__divdf3+0x2a8>
80096dfc:	88011b26 	beq	r17,zero,8009726c <__divdf3+0x6c4>
80096e00:	8809883a 	mov	r4,r17
80096e04:	d9800315 	stw	r6,12(sp)
80096e08:	da400115 	stw	r9,4(sp)
80096e0c:	0098aa80 	call	80098aa8 <__clzsi2>
80096e10:	d9800317 	ldw	r6,12(sp)
80096e14:	da400117 	ldw	r9,4(sp)
80096e18:	113ffd44 	addi	r4,r2,-11
80096e1c:	00c00704 	movi	r3,28
80096e20:	19010e16 	blt	r3,r4,8009725c <__divdf3+0x6b4>
80096e24:	00c00744 	movi	r3,29
80096e28:	123ffe04 	addi	r8,r2,-8
80096e2c:	1907c83a 	sub	r3,r3,r4
80096e30:	8a22983a 	sll	r17,r17,r8
80096e34:	30c6d83a 	srl	r3,r6,r3
80096e38:	3210983a 	sll	r8,r6,r8
80096e3c:	1c62b03a 	or	r17,r3,r17
80096e40:	1080fcc4 	addi	r2,r2,1011
80096e44:	0085c83a 	sub	r2,zero,r2
80096e48:	000f883a 	mov	r7,zero
80096e4c:	003f8606 	br	80096c68 <__divdf3+0xc0>
80096e50:	0023883a 	mov	r17,zero
80096e54:	0011883a 	mov	r8,zero
80096e58:	01c00044 	movi	r7,1
80096e5c:	003f8206 	br	80096c68 <__divdf3+0xc0>
80096e60:	01c000c4 	movi	r7,3
80096e64:	003f8006 	br	80096c68 <__divdf3+0xc0>
80096e68:	04c00104 	movi	r19,4
80096e6c:	0021883a 	mov	r16,zero
80096e70:	0025883a 	mov	r18,zero
80096e74:	02400044 	movi	r9,1
80096e78:	003f6906 	br	80096c20 <__divdf3+0x78>
80096e7c:	04c00304 	movi	r19,12
80096e80:	024000c4 	movi	r9,3
80096e84:	003f6606 	br	80096c20 <__divdf3+0x78>
80096e88:	01400434 	movhi	r5,16
80096e8c:	0007883a 	mov	r3,zero
80096e90:	297fffc4 	addi	r5,r5,-1
80096e94:	04bfffc4 	movi	r18,-1
80096e98:	0081ffc4 	movi	r2,2047
80096e9c:	003fa106 	br	80096d24 <__divdf3+0x17c>
80096ea0:	00c00044 	movi	r3,1
80096ea4:	1887c83a 	sub	r3,r3,r2
80096ea8:	01000e04 	movi	r4,56
80096eac:	20c1210e 	bge	r4,r3,80097334 <__divdf3+0x78c>
80096eb0:	98c0004c 	andi	r3,r19,1
80096eb4:	0005883a 	mov	r2,zero
80096eb8:	000b883a 	mov	r5,zero
80096ebc:	0025883a 	mov	r18,zero
80096ec0:	003f9806 	br	80096d24 <__divdf3+0x17c>
80096ec4:	8c00fd36 	bltu	r17,r16,800972bc <__divdf3+0x714>
80096ec8:	8440fb26 	beq	r16,r17,800972b8 <__divdf3+0x710>
80096ecc:	8007883a 	mov	r3,r16
80096ed0:	ad7fffc4 	addi	r21,r21,-1
80096ed4:	0021883a 	mov	r16,zero
80096ed8:	4004d63a 	srli	r2,r8,24
80096edc:	8822923a 	slli	r17,r17,8
80096ee0:	1809883a 	mov	r4,r3
80096ee4:	402c923a 	slli	r22,r8,8
80096ee8:	88b8b03a 	or	fp,r17,r2
80096eec:	e028d43a 	srli	r20,fp,16
80096ef0:	d8c00015 	stw	r3,0(sp)
80096ef4:	e5ffffcc 	andi	r23,fp,65535
80096ef8:	a00b883a 	mov	r5,r20
80096efc:	00822880 	call	80082288 <__udivsi3>
80096f00:	d8c00017 	ldw	r3,0(sp)
80096f04:	a00b883a 	mov	r5,r20
80096f08:	d8800315 	stw	r2,12(sp)
80096f0c:	1809883a 	mov	r4,r3
80096f10:	00822ec0 	call	800822ec <__umodsi3>
80096f14:	d9800317 	ldw	r6,12(sp)
80096f18:	1006943a 	slli	r3,r2,16
80096f1c:	9004d43a 	srli	r2,r18,16
80096f20:	b9a3383a 	mul	r17,r23,r6
80096f24:	10c4b03a 	or	r2,r2,r3
80096f28:	1440062e 	bgeu	r2,r17,80096f44 <__divdf3+0x39c>
80096f2c:	1705883a 	add	r2,r2,fp
80096f30:	30ffffc4 	addi	r3,r6,-1
80096f34:	1700ee36 	bltu	r2,fp,800972f0 <__divdf3+0x748>
80096f38:	1440ed2e 	bgeu	r2,r17,800972f0 <__divdf3+0x748>
80096f3c:	31bfff84 	addi	r6,r6,-2
80096f40:	1705883a 	add	r2,r2,fp
80096f44:	1463c83a 	sub	r17,r2,r17
80096f48:	a00b883a 	mov	r5,r20
80096f4c:	8809883a 	mov	r4,r17
80096f50:	d9800315 	stw	r6,12(sp)
80096f54:	00822880 	call	80082288 <__udivsi3>
80096f58:	a00b883a 	mov	r5,r20
80096f5c:	8809883a 	mov	r4,r17
80096f60:	d8800215 	stw	r2,8(sp)
80096f64:	00822ec0 	call	800822ec <__umodsi3>
80096f68:	d9c00217 	ldw	r7,8(sp)
80096f6c:	1004943a 	slli	r2,r2,16
80096f70:	94bfffcc 	andi	r18,r18,65535
80096f74:	b9d1383a 	mul	r8,r23,r7
80096f78:	90a4b03a 	or	r18,r18,r2
80096f7c:	d9800317 	ldw	r6,12(sp)
80096f80:	9200062e 	bgeu	r18,r8,80096f9c <__divdf3+0x3f4>
80096f84:	9725883a 	add	r18,r18,fp
80096f88:	38bfffc4 	addi	r2,r7,-1
80096f8c:	9700d636 	bltu	r18,fp,800972e8 <__divdf3+0x740>
80096f90:	9200d52e 	bgeu	r18,r8,800972e8 <__divdf3+0x740>
80096f94:	39ffff84 	addi	r7,r7,-2
80096f98:	9725883a 	add	r18,r18,fp
80096f9c:	3004943a 	slli	r2,r6,16
80096fa0:	b012d43a 	srli	r9,r22,16
80096fa4:	b1bfffcc 	andi	r6,r22,65535
80096fa8:	11e2b03a 	or	r17,r2,r7
80096fac:	8806d43a 	srli	r3,r17,16
80096fb0:	893fffcc 	andi	r4,r17,65535
80096fb4:	218b383a 	mul	r5,r4,r6
80096fb8:	30c5383a 	mul	r2,r6,r3
80096fbc:	2249383a 	mul	r4,r4,r9
80096fc0:	280ed43a 	srli	r7,r5,16
80096fc4:	9225c83a 	sub	r18,r18,r8
80096fc8:	2089883a 	add	r4,r4,r2
80096fcc:	3909883a 	add	r4,r7,r4
80096fd0:	1a47383a 	mul	r3,r3,r9
80096fd4:	2080022e 	bgeu	r4,r2,80096fe0 <__divdf3+0x438>
80096fd8:	00800074 	movhi	r2,1
80096fdc:	1887883a 	add	r3,r3,r2
80096fe0:	2004d43a 	srli	r2,r4,16
80096fe4:	2008943a 	slli	r4,r4,16
80096fe8:	297fffcc 	andi	r5,r5,65535
80096fec:	10c7883a 	add	r3,r2,r3
80096ff0:	2149883a 	add	r4,r4,r5
80096ff4:	90c0a536 	bltu	r18,r3,8009728c <__divdf3+0x6e4>
80096ff8:	90c0bf26 	beq	r18,r3,800972f8 <__divdf3+0x750>
80096ffc:	90c7c83a 	sub	r3,r18,r3
80097000:	810fc83a 	sub	r7,r16,r4
80097004:	81e5803a 	cmpltu	r18,r16,r7
80097008:	1ca5c83a 	sub	r18,r3,r18
8009700c:	e480c126 	beq	fp,r18,80097314 <__divdf3+0x76c>
80097010:	a00b883a 	mov	r5,r20
80097014:	9009883a 	mov	r4,r18
80097018:	d9800315 	stw	r6,12(sp)
8009701c:	d9c00215 	stw	r7,8(sp)
80097020:	da400115 	stw	r9,4(sp)
80097024:	00822880 	call	80082288 <__udivsi3>
80097028:	a00b883a 	mov	r5,r20
8009702c:	9009883a 	mov	r4,r18
80097030:	d8800015 	stw	r2,0(sp)
80097034:	00822ec0 	call	800822ec <__umodsi3>
80097038:	d9c00217 	ldw	r7,8(sp)
8009703c:	da000017 	ldw	r8,0(sp)
80097040:	1006943a 	slli	r3,r2,16
80097044:	3804d43a 	srli	r2,r7,16
80097048:	ba21383a 	mul	r16,r23,r8
8009704c:	d9800317 	ldw	r6,12(sp)
80097050:	10c4b03a 	or	r2,r2,r3
80097054:	da400117 	ldw	r9,4(sp)
80097058:	1400062e 	bgeu	r2,r16,80097074 <__divdf3+0x4cc>
8009705c:	1705883a 	add	r2,r2,fp
80097060:	40ffffc4 	addi	r3,r8,-1
80097064:	1700ad36 	bltu	r2,fp,8009731c <__divdf3+0x774>
80097068:	1400ac2e 	bgeu	r2,r16,8009731c <__divdf3+0x774>
8009706c:	423fff84 	addi	r8,r8,-2
80097070:	1705883a 	add	r2,r2,fp
80097074:	1421c83a 	sub	r16,r2,r16
80097078:	a00b883a 	mov	r5,r20
8009707c:	8009883a 	mov	r4,r16
80097080:	d9800315 	stw	r6,12(sp)
80097084:	d9c00215 	stw	r7,8(sp)
80097088:	da000015 	stw	r8,0(sp)
8009708c:	da400115 	stw	r9,4(sp)
80097090:	00822880 	call	80082288 <__udivsi3>
80097094:	8009883a 	mov	r4,r16
80097098:	a00b883a 	mov	r5,r20
8009709c:	1025883a 	mov	r18,r2
800970a0:	00822ec0 	call	800822ec <__umodsi3>
800970a4:	d9c00217 	ldw	r7,8(sp)
800970a8:	1004943a 	slli	r2,r2,16
800970ac:	bcaf383a 	mul	r23,r23,r18
800970b0:	393fffcc 	andi	r4,r7,65535
800970b4:	2088b03a 	or	r4,r4,r2
800970b8:	d9800317 	ldw	r6,12(sp)
800970bc:	da000017 	ldw	r8,0(sp)
800970c0:	da400117 	ldw	r9,4(sp)
800970c4:	25c0062e 	bgeu	r4,r23,800970e0 <__divdf3+0x538>
800970c8:	2709883a 	add	r4,r4,fp
800970cc:	90bfffc4 	addi	r2,r18,-1
800970d0:	27009436 	bltu	r4,fp,80097324 <__divdf3+0x77c>
800970d4:	25c0932e 	bgeu	r4,r23,80097324 <__divdf3+0x77c>
800970d8:	94bfff84 	addi	r18,r18,-2
800970dc:	2709883a 	add	r4,r4,fp
800970e0:	4004943a 	slli	r2,r8,16
800970e4:	25efc83a 	sub	r23,r4,r23
800970e8:	1490b03a 	or	r8,r2,r18
800970ec:	4008d43a 	srli	r4,r8,16
800970f0:	40ffffcc 	andi	r3,r8,65535
800970f4:	30c5383a 	mul	r2,r6,r3
800970f8:	1a47383a 	mul	r3,r3,r9
800970fc:	310d383a 	mul	r6,r6,r4
80097100:	100ad43a 	srli	r5,r2,16
80097104:	4913383a 	mul	r9,r9,r4
80097108:	1987883a 	add	r3,r3,r6
8009710c:	28c7883a 	add	r3,r5,r3
80097110:	1980022e 	bgeu	r3,r6,8009711c <__divdf3+0x574>
80097114:	01000074 	movhi	r4,1
80097118:	4913883a 	add	r9,r9,r4
8009711c:	1808d43a 	srli	r4,r3,16
80097120:	1806943a 	slli	r3,r3,16
80097124:	10bfffcc 	andi	r2,r2,65535
80097128:	2253883a 	add	r9,r4,r9
8009712c:	1887883a 	add	r3,r3,r2
80097130:	ba403836 	bltu	r23,r9,80097214 <__divdf3+0x66c>
80097134:	ba403626 	beq	r23,r9,80097210 <__divdf3+0x668>
80097138:	42000054 	ori	r8,r8,1
8009713c:	a880ffc4 	addi	r2,r21,1023
80097140:	00bf570e 	bge	zero,r2,80096ea0 <__divdf3+0x2f8>
80097144:	40c001cc 	andi	r3,r8,7
80097148:	18000726 	beq	r3,zero,80097168 <__divdf3+0x5c0>
8009714c:	40c003cc 	andi	r3,r8,15
80097150:	01000104 	movi	r4,4
80097154:	19000426 	beq	r3,r4,80097168 <__divdf3+0x5c0>
80097158:	4107883a 	add	r3,r8,r4
8009715c:	1a11803a 	cmpltu	r8,r3,r8
80097160:	8a23883a 	add	r17,r17,r8
80097164:	1811883a 	mov	r8,r3
80097168:	88c0402c 	andhi	r3,r17,256
8009716c:	18000426 	beq	r3,zero,80097180 <__divdf3+0x5d8>
80097170:	00ffc034 	movhi	r3,65280
80097174:	18ffffc4 	addi	r3,r3,-1
80097178:	a8810004 	addi	r2,r21,1024
8009717c:	88e2703a 	and	r17,r17,r3
80097180:	00c1ff84 	movi	r3,2046
80097184:	18bee316 	blt	r3,r2,80096d14 <__divdf3+0x16c>
80097188:	8824977a 	slli	r18,r17,29
8009718c:	4010d0fa 	srli	r8,r8,3
80097190:	8822927a 	slli	r17,r17,9
80097194:	1081ffcc 	andi	r2,r2,2047
80097198:	9224b03a 	or	r18,r18,r8
8009719c:	880ad33a 	srli	r5,r17,12
800971a0:	98c0004c 	andi	r3,r19,1
800971a4:	003edf06 	br	80096d24 <__divdf3+0x17c>
800971a8:	8080022c 	andhi	r2,r16,8
800971ac:	10001226 	beq	r2,zero,800971f8 <__divdf3+0x650>
800971b0:	8880022c 	andhi	r2,r17,8
800971b4:	1000101e 	bne	r2,zero,800971f8 <__divdf3+0x650>
800971b8:	00800434 	movhi	r2,16
800971bc:	89400234 	orhi	r5,r17,8
800971c0:	10bfffc4 	addi	r2,r2,-1
800971c4:	b007883a 	mov	r3,r22
800971c8:	288a703a 	and	r5,r5,r2
800971cc:	4025883a 	mov	r18,r8
800971d0:	003f3106 	br	80096e98 <__divdf3+0x2f0>
800971d4:	008000c4 	movi	r2,3
800971d8:	3880a626 	beq	r7,r2,80097474 <__divdf3+0x8cc>
800971dc:	00800044 	movi	r2,1
800971e0:	3880521e 	bne	r7,r2,8009732c <__divdf3+0x784>
800971e4:	b807883a 	mov	r3,r23
800971e8:	0005883a 	mov	r2,zero
800971ec:	000b883a 	mov	r5,zero
800971f0:	0025883a 	mov	r18,zero
800971f4:	003ecb06 	br	80096d24 <__divdf3+0x17c>
800971f8:	00800434 	movhi	r2,16
800971fc:	81400234 	orhi	r5,r16,8
80097200:	10bfffc4 	addi	r2,r2,-1
80097204:	a007883a 	mov	r3,r20
80097208:	288a703a 	and	r5,r5,r2
8009720c:	003f2206 	br	80096e98 <__divdf3+0x2f0>
80097210:	183fca26 	beq	r3,zero,8009713c <__divdf3+0x594>
80097214:	e5ef883a 	add	r23,fp,r23
80097218:	40bfffc4 	addi	r2,r8,-1
8009721c:	bf00392e 	bgeu	r23,fp,80097304 <__divdf3+0x75c>
80097220:	1011883a 	mov	r8,r2
80097224:	ba7fc41e 	bne	r23,r9,80097138 <__divdf3+0x590>
80097228:	b0ffc31e 	bne	r22,r3,80097138 <__divdf3+0x590>
8009722c:	003fc306 	br	8009713c <__divdf3+0x594>
80097230:	143ff604 	addi	r16,r2,-40
80097234:	9c20983a 	sll	r16,r19,r16
80097238:	0025883a 	mov	r18,zero
8009723c:	003ee206 	br	80096dc8 <__divdf3+0x220>
80097240:	d9800315 	stw	r6,12(sp)
80097244:	d9c00215 	stw	r7,8(sp)
80097248:	0098aa80 	call	80098aa8 <__clzsi2>
8009724c:	10800804 	addi	r2,r2,32
80097250:	d9c00217 	ldw	r7,8(sp)
80097254:	d9800317 	ldw	r6,12(sp)
80097258:	003ed106 	br	80096da0 <__divdf3+0x1f8>
8009725c:	147ff604 	addi	r17,r2,-40
80097260:	3462983a 	sll	r17,r6,r17
80097264:	0011883a 	mov	r8,zero
80097268:	003ef506 	br	80096e40 <__divdf3+0x298>
8009726c:	3009883a 	mov	r4,r6
80097270:	d9800315 	stw	r6,12(sp)
80097274:	da400115 	stw	r9,4(sp)
80097278:	0098aa80 	call	80098aa8 <__clzsi2>
8009727c:	10800804 	addi	r2,r2,32
80097280:	da400117 	ldw	r9,4(sp)
80097284:	d9800317 	ldw	r6,12(sp)
80097288:	003ee306 	br	80096e18 <__divdf3+0x270>
8009728c:	85a1883a 	add	r16,r16,r22
80097290:	8585803a 	cmpltu	r2,r16,r22
80097294:	1705883a 	add	r2,r2,fp
80097298:	14a5883a 	add	r18,r2,r18
8009729c:	88bfffc4 	addi	r2,r17,-1
800972a0:	e4800c2e 	bgeu	fp,r18,800972d4 <__divdf3+0x72c>
800972a4:	90c03e36 	bltu	r18,r3,800973a0 <__divdf3+0x7f8>
800972a8:	1c806926 	beq	r3,r18,80097450 <__divdf3+0x8a8>
800972ac:	90c7c83a 	sub	r3,r18,r3
800972b0:	1023883a 	mov	r17,r2
800972b4:	003f5206 	br	80097000 <__divdf3+0x458>
800972b8:	923f0436 	bltu	r18,r8,80096ecc <__divdf3+0x324>
800972bc:	800897fa 	slli	r4,r16,31
800972c0:	9004d07a 	srli	r2,r18,1
800972c4:	8006d07a 	srli	r3,r16,1
800972c8:	902097fa 	slli	r16,r18,31
800972cc:	20a4b03a 	or	r18,r4,r2
800972d0:	003f0106 	br	80096ed8 <__divdf3+0x330>
800972d4:	e4bff51e 	bne	fp,r18,800972ac <__divdf3+0x704>
800972d8:	85bff22e 	bgeu	r16,r22,800972a4 <__divdf3+0x6fc>
800972dc:	e0c7c83a 	sub	r3,fp,r3
800972e0:	1023883a 	mov	r17,r2
800972e4:	003f4606 	br	80097000 <__divdf3+0x458>
800972e8:	100f883a 	mov	r7,r2
800972ec:	003f2b06 	br	80096f9c <__divdf3+0x3f4>
800972f0:	180d883a 	mov	r6,r3
800972f4:	003f1306 	br	80096f44 <__divdf3+0x39c>
800972f8:	813fe436 	bltu	r16,r4,8009728c <__divdf3+0x6e4>
800972fc:	0007883a 	mov	r3,zero
80097300:	003f3f06 	br	80097000 <__divdf3+0x458>
80097304:	ba402c36 	bltu	r23,r9,800973b8 <__divdf3+0x810>
80097308:	4dc05426 	beq	r9,r23,8009745c <__divdf3+0x8b4>
8009730c:	1011883a 	mov	r8,r2
80097310:	003f8906 	br	80097138 <__divdf3+0x590>
80097314:	023fffc4 	movi	r8,-1
80097318:	003f8806 	br	8009713c <__divdf3+0x594>
8009731c:	1811883a 	mov	r8,r3
80097320:	003f5406 	br	80097074 <__divdf3+0x4cc>
80097324:	1025883a 	mov	r18,r2
80097328:	003f6d06 	br	800970e0 <__divdf3+0x538>
8009732c:	b827883a 	mov	r19,r23
80097330:	003f8206 	br	8009713c <__divdf3+0x594>
80097334:	010007c4 	movi	r4,31
80097338:	20c02616 	blt	r4,r3,800973d4 <__divdf3+0x82c>
8009733c:	00800804 	movi	r2,32
80097340:	10c5c83a 	sub	r2,r2,r3
80097344:	888a983a 	sll	r5,r17,r2
80097348:	40c8d83a 	srl	r4,r8,r3
8009734c:	4084983a 	sll	r2,r8,r2
80097350:	88e2d83a 	srl	r17,r17,r3
80097354:	2906b03a 	or	r3,r5,r4
80097358:	1004c03a 	cmpne	r2,r2,zero
8009735c:	1886b03a 	or	r3,r3,r2
80097360:	188001cc 	andi	r2,r3,7
80097364:	10000726 	beq	r2,zero,80097384 <__divdf3+0x7dc>
80097368:	188003cc 	andi	r2,r3,15
8009736c:	01000104 	movi	r4,4
80097370:	11000426 	beq	r2,r4,80097384 <__divdf3+0x7dc>
80097374:	1805883a 	mov	r2,r3
80097378:	10c00104 	addi	r3,r2,4
8009737c:	1885803a 	cmpltu	r2,r3,r2
80097380:	88a3883a 	add	r17,r17,r2
80097384:	8880202c 	andhi	r2,r17,128
80097388:	10002726 	beq	r2,zero,80097428 <__divdf3+0x880>
8009738c:	98c0004c 	andi	r3,r19,1
80097390:	00800044 	movi	r2,1
80097394:	000b883a 	mov	r5,zero
80097398:	0025883a 	mov	r18,zero
8009739c:	003e6106 	br	80096d24 <__divdf3+0x17c>
800973a0:	85a1883a 	add	r16,r16,r22
800973a4:	8585803a 	cmpltu	r2,r16,r22
800973a8:	1705883a 	add	r2,r2,fp
800973ac:	14a5883a 	add	r18,r2,r18
800973b0:	8c7fff84 	addi	r17,r17,-2
800973b4:	003f1106 	br	80096ffc <__divdf3+0x454>
800973b8:	b589883a 	add	r4,r22,r22
800973bc:	25ad803a 	cmpltu	r22,r4,r22
800973c0:	b739883a 	add	fp,r22,fp
800973c4:	40bfff84 	addi	r2,r8,-2
800973c8:	bf2f883a 	add	r23,r23,fp
800973cc:	202d883a 	mov	r22,r4
800973d0:	003f9306 	br	80097220 <__divdf3+0x678>
800973d4:	013ff844 	movi	r4,-31
800973d8:	2085c83a 	sub	r2,r4,r2
800973dc:	8888d83a 	srl	r4,r17,r2
800973e0:	00800804 	movi	r2,32
800973e4:	18802126 	beq	r3,r2,8009746c <__divdf3+0x8c4>
800973e8:	00801004 	movi	r2,64
800973ec:	10c5c83a 	sub	r2,r2,r3
800973f0:	8884983a 	sll	r2,r17,r2
800973f4:	1204b03a 	or	r2,r2,r8
800973f8:	1004c03a 	cmpne	r2,r2,zero
800973fc:	2084b03a 	or	r2,r4,r2
80097400:	144001cc 	andi	r17,r2,7
80097404:	88000d1e 	bne	r17,zero,8009743c <__divdf3+0x894>
80097408:	000b883a 	mov	r5,zero
8009740c:	1024d0fa 	srli	r18,r2,3
80097410:	98c0004c 	andi	r3,r19,1
80097414:	0005883a 	mov	r2,zero
80097418:	9464b03a 	or	r18,r18,r17
8009741c:	003e4106 	br	80096d24 <__divdf3+0x17c>
80097420:	1007883a 	mov	r3,r2
80097424:	0023883a 	mov	r17,zero
80097428:	880a927a 	slli	r5,r17,9
8009742c:	1805883a 	mov	r2,r3
80097430:	8822977a 	slli	r17,r17,29
80097434:	280ad33a 	srli	r5,r5,12
80097438:	003ff406 	br	8009740c <__divdf3+0x864>
8009743c:	10c003cc 	andi	r3,r2,15
80097440:	01000104 	movi	r4,4
80097444:	193ff626 	beq	r3,r4,80097420 <__divdf3+0x878>
80097448:	0023883a 	mov	r17,zero
8009744c:	003fca06 	br	80097378 <__divdf3+0x7d0>
80097450:	813fd336 	bltu	r16,r4,800973a0 <__divdf3+0x7f8>
80097454:	1023883a 	mov	r17,r2
80097458:	003fa806 	br	800972fc <__divdf3+0x754>
8009745c:	b0ffd636 	bltu	r22,r3,800973b8 <__divdf3+0x810>
80097460:	1011883a 	mov	r8,r2
80097464:	b0ff341e 	bne	r22,r3,80097138 <__divdf3+0x590>
80097468:	003f3406 	br	8009713c <__divdf3+0x594>
8009746c:	0005883a 	mov	r2,zero
80097470:	003fe006 	br	800973f4 <__divdf3+0x84c>
80097474:	00800434 	movhi	r2,16
80097478:	89400234 	orhi	r5,r17,8
8009747c:	10bfffc4 	addi	r2,r2,-1
80097480:	b807883a 	mov	r3,r23
80097484:	288a703a 	and	r5,r5,r2
80097488:	4025883a 	mov	r18,r8
8009748c:	003e8206 	br	80096e98 <__divdf3+0x2f0>

80097490 <__eqdf2>:
80097490:	2804d53a 	srli	r2,r5,20
80097494:	3806d53a 	srli	r3,r7,20
80097498:	02000434 	movhi	r8,16
8009749c:	423fffc4 	addi	r8,r8,-1
800974a0:	1081ffcc 	andi	r2,r2,2047
800974a4:	0281ffc4 	movi	r10,2047
800974a8:	2a12703a 	and	r9,r5,r8
800974ac:	18c1ffcc 	andi	r3,r3,2047
800974b0:	3a10703a 	and	r8,r7,r8
800974b4:	280ad7fa 	srli	r5,r5,31
800974b8:	380ed7fa 	srli	r7,r7,31
800974bc:	12801026 	beq	r2,r10,80097500 <__eqdf2+0x70>
800974c0:	0281ffc4 	movi	r10,2047
800974c4:	1a800a26 	beq	r3,r10,800974f0 <__eqdf2+0x60>
800974c8:	10c00226 	beq	r2,r3,800974d4 <__eqdf2+0x44>
800974cc:	00800044 	movi	r2,1
800974d0:	f800283a 	ret
800974d4:	4a3ffd1e 	bne	r9,r8,800974cc <__eqdf2+0x3c>
800974d8:	21bffc1e 	bne	r4,r6,800974cc <__eqdf2+0x3c>
800974dc:	29c00c26 	beq	r5,r7,80097510 <__eqdf2+0x80>
800974e0:	103ffa1e 	bne	r2,zero,800974cc <__eqdf2+0x3c>
800974e4:	2244b03a 	or	r2,r4,r9
800974e8:	1004c03a 	cmpne	r2,r2,zero
800974ec:	f800283a 	ret
800974f0:	3214b03a 	or	r10,r6,r8
800974f4:	503ff426 	beq	r10,zero,800974c8 <__eqdf2+0x38>
800974f8:	00800044 	movi	r2,1
800974fc:	f800283a 	ret
80097500:	2254b03a 	or	r10,r4,r9
80097504:	503fee26 	beq	r10,zero,800974c0 <__eqdf2+0x30>
80097508:	00800044 	movi	r2,1
8009750c:	f800283a 	ret
80097510:	0005883a 	mov	r2,zero
80097514:	f800283a 	ret

80097518 <__gedf2>:
80097518:	2804d53a 	srli	r2,r5,20
8009751c:	3806d53a 	srli	r3,r7,20
80097520:	02000434 	movhi	r8,16
80097524:	423fffc4 	addi	r8,r8,-1
80097528:	1081ffcc 	andi	r2,r2,2047
8009752c:	0241ffc4 	movi	r9,2047
80097530:	2a14703a 	and	r10,r5,r8
80097534:	18c1ffcc 	andi	r3,r3,2047
80097538:	3a10703a 	and	r8,r7,r8
8009753c:	280ad7fa 	srli	r5,r5,31
80097540:	380ed7fa 	srli	r7,r7,31
80097544:	12401d26 	beq	r2,r9,800975bc <__gedf2+0xa4>
80097548:	0241ffc4 	movi	r9,2047
8009754c:	1a401226 	beq	r3,r9,80097598 <__gedf2+0x80>
80097550:	1000081e 	bne	r2,zero,80097574 <__gedf2+0x5c>
80097554:	2296b03a 	or	r11,r4,r10
80097558:	5813003a 	cmpeq	r9,r11,zero
8009755c:	1800091e 	bne	r3,zero,80097584 <__gedf2+0x6c>
80097560:	3218b03a 	or	r12,r6,r8
80097564:	6000071e 	bne	r12,zero,80097584 <__gedf2+0x6c>
80097568:	0005883a 	mov	r2,zero
8009756c:	5800101e 	bne	r11,zero,800975b0 <__gedf2+0x98>
80097570:	f800283a 	ret
80097574:	18000c1e 	bne	r3,zero,800975a8 <__gedf2+0x90>
80097578:	3212b03a 	or	r9,r6,r8
8009757c:	48000c26 	beq	r9,zero,800975b0 <__gedf2+0x98>
80097580:	0013883a 	mov	r9,zero
80097584:	39c03fcc 	andi	r7,r7,255
80097588:	48000826 	beq	r9,zero,800975ac <__gedf2+0x94>
8009758c:	38000926 	beq	r7,zero,800975b4 <__gedf2+0x9c>
80097590:	00800044 	movi	r2,1
80097594:	f800283a 	ret
80097598:	3212b03a 	or	r9,r6,r8
8009759c:	483fec26 	beq	r9,zero,80097550 <__gedf2+0x38>
800975a0:	00bfff84 	movi	r2,-2
800975a4:	f800283a 	ret
800975a8:	39c03fcc 	andi	r7,r7,255
800975ac:	29c00626 	beq	r5,r7,800975c8 <__gedf2+0xb0>
800975b0:	283ff726 	beq	r5,zero,80097590 <__gedf2+0x78>
800975b4:	00bfffc4 	movi	r2,-1
800975b8:	f800283a 	ret
800975bc:	2292b03a 	or	r9,r4,r10
800975c0:	483fe126 	beq	r9,zero,80097548 <__gedf2+0x30>
800975c4:	003ff606 	br	800975a0 <__gedf2+0x88>
800975c8:	18bff916 	blt	r3,r2,800975b0 <__gedf2+0x98>
800975cc:	10c00316 	blt	r2,r3,800975dc <__gedf2+0xc4>
800975d0:	42bff736 	bltu	r8,r10,800975b0 <__gedf2+0x98>
800975d4:	52000326 	beq	r10,r8,800975e4 <__gedf2+0xcc>
800975d8:	5200042e 	bgeu	r10,r8,800975ec <__gedf2+0xd4>
800975dc:	283fec1e 	bne	r5,zero,80097590 <__gedf2+0x78>
800975e0:	003ff406 	br	800975b4 <__gedf2+0x9c>
800975e4:	313ff236 	bltu	r6,r4,800975b0 <__gedf2+0x98>
800975e8:	21bffc36 	bltu	r4,r6,800975dc <__gedf2+0xc4>
800975ec:	0005883a 	mov	r2,zero
800975f0:	f800283a 	ret

800975f4 <__ledf2>:
800975f4:	2804d53a 	srli	r2,r5,20
800975f8:	3810d53a 	srli	r8,r7,20
800975fc:	00c00434 	movhi	r3,16
80097600:	18ffffc4 	addi	r3,r3,-1
80097604:	1081ffcc 	andi	r2,r2,2047
80097608:	0241ffc4 	movi	r9,2047
8009760c:	28d4703a 	and	r10,r5,r3
80097610:	4201ffcc 	andi	r8,r8,2047
80097614:	38c6703a 	and	r3,r7,r3
80097618:	280ad7fa 	srli	r5,r5,31
8009761c:	380ed7fa 	srli	r7,r7,31
80097620:	12401f26 	beq	r2,r9,800976a0 <__ledf2+0xac>
80097624:	0241ffc4 	movi	r9,2047
80097628:	42401426 	beq	r8,r9,8009767c <__ledf2+0x88>
8009762c:	1000091e 	bne	r2,zero,80097654 <__ledf2+0x60>
80097630:	2296b03a 	or	r11,r4,r10
80097634:	5813003a 	cmpeq	r9,r11,zero
80097638:	29403fcc 	andi	r5,r5,255
8009763c:	40000a1e 	bne	r8,zero,80097668 <__ledf2+0x74>
80097640:	30d8b03a 	or	r12,r6,r3
80097644:	6000081e 	bne	r12,zero,80097668 <__ledf2+0x74>
80097648:	0005883a 	mov	r2,zero
8009764c:	5800111e 	bne	r11,zero,80097694 <__ledf2+0xa0>
80097650:	f800283a 	ret
80097654:	29403fcc 	andi	r5,r5,255
80097658:	40000c1e 	bne	r8,zero,8009768c <__ledf2+0x98>
8009765c:	30d2b03a 	or	r9,r6,r3
80097660:	48000c26 	beq	r9,zero,80097694 <__ledf2+0xa0>
80097664:	0013883a 	mov	r9,zero
80097668:	39c03fcc 	andi	r7,r7,255
8009766c:	48000826 	beq	r9,zero,80097690 <__ledf2+0x9c>
80097670:	38001126 	beq	r7,zero,800976b8 <__ledf2+0xc4>
80097674:	00800044 	movi	r2,1
80097678:	f800283a 	ret
8009767c:	30d2b03a 	or	r9,r6,r3
80097680:	483fea26 	beq	r9,zero,8009762c <__ledf2+0x38>
80097684:	00800084 	movi	r2,2
80097688:	f800283a 	ret
8009768c:	39c03fcc 	andi	r7,r7,255
80097690:	39400726 	beq	r7,r5,800976b0 <__ledf2+0xbc>
80097694:	2800081e 	bne	r5,zero,800976b8 <__ledf2+0xc4>
80097698:	00800044 	movi	r2,1
8009769c:	f800283a 	ret
800976a0:	2292b03a 	or	r9,r4,r10
800976a4:	483fdf26 	beq	r9,zero,80097624 <__ledf2+0x30>
800976a8:	00800084 	movi	r2,2
800976ac:	f800283a 	ret
800976b0:	4080030e 	bge	r8,r2,800976c0 <__ledf2+0xcc>
800976b4:	383fef26 	beq	r7,zero,80097674 <__ledf2+0x80>
800976b8:	00bfffc4 	movi	r2,-1
800976bc:	f800283a 	ret
800976c0:	123feb16 	blt	r2,r8,80097670 <__ledf2+0x7c>
800976c4:	1abff336 	bltu	r3,r10,80097694 <__ledf2+0xa0>
800976c8:	50c00326 	beq	r10,r3,800976d8 <__ledf2+0xe4>
800976cc:	50c0042e 	bgeu	r10,r3,800976e0 <__ledf2+0xec>
800976d0:	283fe81e 	bne	r5,zero,80097674 <__ledf2+0x80>
800976d4:	003ff806 	br	800976b8 <__ledf2+0xc4>
800976d8:	313fee36 	bltu	r6,r4,80097694 <__ledf2+0xa0>
800976dc:	21bffc36 	bltu	r4,r6,800976d0 <__ledf2+0xdc>
800976e0:	0005883a 	mov	r2,zero
800976e4:	f800283a 	ret

800976e8 <__muldf3>:
800976e8:	defff304 	addi	sp,sp,-52
800976ec:	2804d53a 	srli	r2,r5,20
800976f0:	dd800915 	stw	r22,36(sp)
800976f4:	282cd7fa 	srli	r22,r5,31
800976f8:	dc000315 	stw	r16,12(sp)
800976fc:	04000434 	movhi	r16,16
80097700:	dd400815 	stw	r21,32(sp)
80097704:	dc800515 	stw	r18,20(sp)
80097708:	843fffc4 	addi	r16,r16,-1
8009770c:	dfc00c15 	stw	ra,48(sp)
80097710:	df000b15 	stw	fp,44(sp)
80097714:	ddc00a15 	stw	r23,40(sp)
80097718:	dd000715 	stw	r20,28(sp)
8009771c:	dcc00615 	stw	r19,24(sp)
80097720:	dc400415 	stw	r17,16(sp)
80097724:	1481ffcc 	andi	r18,r2,2047
80097728:	2c20703a 	and	r16,r5,r16
8009772c:	b02b883a 	mov	r21,r22
80097730:	b2403fcc 	andi	r9,r22,255
80097734:	90006026 	beq	r18,zero,800978b8 <__muldf3+0x1d0>
80097738:	0081ffc4 	movi	r2,2047
8009773c:	2029883a 	mov	r20,r4
80097740:	90803626 	beq	r18,r2,8009781c <__muldf3+0x134>
80097744:	80800434 	orhi	r2,r16,16
80097748:	100490fa 	slli	r2,r2,3
8009774c:	2020d77a 	srli	r16,r4,29
80097750:	202890fa 	slli	r20,r4,3
80097754:	94bf0044 	addi	r18,r18,-1023
80097758:	80a0b03a 	or	r16,r16,r2
8009775c:	0027883a 	mov	r19,zero
80097760:	0039883a 	mov	fp,zero
80097764:	3804d53a 	srli	r2,r7,20
80097768:	382ed7fa 	srli	r23,r7,31
8009776c:	04400434 	movhi	r17,16
80097770:	8c7fffc4 	addi	r17,r17,-1
80097774:	1081ffcc 	andi	r2,r2,2047
80097778:	3011883a 	mov	r8,r6
8009777c:	3c62703a 	and	r17,r7,r17
80097780:	ba803fcc 	andi	r10,r23,255
80097784:	10006d26 	beq	r2,zero,8009793c <__muldf3+0x254>
80097788:	00c1ffc4 	movi	r3,2047
8009778c:	10c06526 	beq	r2,r3,80097924 <__muldf3+0x23c>
80097790:	88c00434 	orhi	r3,r17,16
80097794:	180690fa 	slli	r3,r3,3
80097798:	3022d77a 	srli	r17,r6,29
8009779c:	301090fa 	slli	r8,r6,3
800977a0:	10bf0044 	addi	r2,r2,-1023
800977a4:	88e2b03a 	or	r17,r17,r3
800977a8:	000b883a 	mov	r5,zero
800977ac:	9085883a 	add	r2,r18,r2
800977b0:	2cc8b03a 	or	r4,r5,r19
800977b4:	00c003c4 	movi	r3,15
800977b8:	bdacf03a 	xor	r22,r23,r22
800977bc:	12c00044 	addi	r11,r2,1
800977c0:	19009936 	bltu	r3,r4,80097a28 <__muldf3+0x340>
800977c4:	200890ba 	slli	r4,r4,2
800977c8:	00e00274 	movhi	r3,32777
800977cc:	18ddf704 	addi	r3,r3,30684
800977d0:	20c9883a 	add	r4,r4,r3
800977d4:	20c00017 	ldw	r3,0(r4)
800977d8:	1800683a 	jmp	r3
800977dc:	80097a28 	cmpgeui	zero,r16,9704
800977e0:	8009783c 	xorhi	zero,r16,9696
800977e4:	8009783c 	xorhi	zero,r16,9696
800977e8:	80097838 	rdprs	zero,r16,9696
800977ec:	80097a04 	addi	zero,r16,9704
800977f0:	80097a04 	addi	zero,r16,9704
800977f4:	800979ec 	andhi	zero,r16,9703
800977f8:	80097838 	rdprs	zero,r16,9696
800977fc:	80097a04 	addi	zero,r16,9704
80097800:	800979ec 	andhi	zero,r16,9703
80097804:	80097a04 	addi	zero,r16,9704
80097808:	80097838 	rdprs	zero,r16,9696
8009780c:	80097a14 	ori	zero,r16,9704
80097810:	80097a14 	ori	zero,r16,9704
80097814:	80097a14 	ori	zero,r16,9704
80097818:	80097c30 	cmpltui	zero,r16,9712
8009781c:	2404b03a 	or	r2,r4,r16
80097820:	10006f1e 	bne	r2,zero,800979e0 <__muldf3+0x2f8>
80097824:	04c00204 	movi	r19,8
80097828:	0021883a 	mov	r16,zero
8009782c:	0029883a 	mov	r20,zero
80097830:	07000084 	movi	fp,2
80097834:	003fcb06 	br	80097764 <__muldf3+0x7c>
80097838:	502d883a 	mov	r22,r10
8009783c:	00800084 	movi	r2,2
80097840:	28805726 	beq	r5,r2,800979a0 <__muldf3+0x2b8>
80097844:	008000c4 	movi	r2,3
80097848:	28816626 	beq	r5,r2,80097de4 <__muldf3+0x6fc>
8009784c:	00800044 	movi	r2,1
80097850:	2881411e 	bne	r5,r2,80097d58 <__muldf3+0x670>
80097854:	b02b883a 	mov	r21,r22
80097858:	0005883a 	mov	r2,zero
8009785c:	000b883a 	mov	r5,zero
80097860:	0029883a 	mov	r20,zero
80097864:	1004953a 	slli	r2,r2,20
80097868:	a8c03fcc 	andi	r3,r21,255
8009786c:	04400434 	movhi	r17,16
80097870:	8c7fffc4 	addi	r17,r17,-1
80097874:	180697fa 	slli	r3,r3,31
80097878:	2c4a703a 	and	r5,r5,r17
8009787c:	288ab03a 	or	r5,r5,r2
80097880:	28c6b03a 	or	r3,r5,r3
80097884:	a005883a 	mov	r2,r20
80097888:	dfc00c17 	ldw	ra,48(sp)
8009788c:	df000b17 	ldw	fp,44(sp)
80097890:	ddc00a17 	ldw	r23,40(sp)
80097894:	dd800917 	ldw	r22,36(sp)
80097898:	dd400817 	ldw	r21,32(sp)
8009789c:	dd000717 	ldw	r20,28(sp)
800978a0:	dcc00617 	ldw	r19,24(sp)
800978a4:	dc800517 	ldw	r18,20(sp)
800978a8:	dc400417 	ldw	r17,16(sp)
800978ac:	dc000317 	ldw	r16,12(sp)
800978b0:	dec00d04 	addi	sp,sp,52
800978b4:	f800283a 	ret
800978b8:	2404b03a 	or	r2,r4,r16
800978bc:	2027883a 	mov	r19,r4
800978c0:	10004226 	beq	r2,zero,800979cc <__muldf3+0x2e4>
800978c4:	8000fc26 	beq	r16,zero,80097cb8 <__muldf3+0x5d0>
800978c8:	8009883a 	mov	r4,r16
800978cc:	d9800215 	stw	r6,8(sp)
800978d0:	d9c00015 	stw	r7,0(sp)
800978d4:	da400115 	stw	r9,4(sp)
800978d8:	0098aa80 	call	80098aa8 <__clzsi2>
800978dc:	d9800217 	ldw	r6,8(sp)
800978e0:	d9c00017 	ldw	r7,0(sp)
800978e4:	da400117 	ldw	r9,4(sp)
800978e8:	113ffd44 	addi	r4,r2,-11
800978ec:	00c00704 	movi	r3,28
800978f0:	1900ed16 	blt	r3,r4,80097ca8 <__muldf3+0x5c0>
800978f4:	00c00744 	movi	r3,29
800978f8:	147ffe04 	addi	r17,r2,-8
800978fc:	1907c83a 	sub	r3,r3,r4
80097900:	8460983a 	sll	r16,r16,r17
80097904:	98c6d83a 	srl	r3,r19,r3
80097908:	9c68983a 	sll	r20,r19,r17
8009790c:	1c20b03a 	or	r16,r3,r16
80097910:	1080fcc4 	addi	r2,r2,1011
80097914:	00a5c83a 	sub	r18,zero,r2
80097918:	0027883a 	mov	r19,zero
8009791c:	0039883a 	mov	fp,zero
80097920:	003f9006 	br	80097764 <__muldf3+0x7c>
80097924:	3446b03a 	or	r3,r6,r17
80097928:	1800261e 	bne	r3,zero,800979c4 <__muldf3+0x2dc>
8009792c:	0023883a 	mov	r17,zero
80097930:	0011883a 	mov	r8,zero
80097934:	01400084 	movi	r5,2
80097938:	003f9c06 	br	800977ac <__muldf3+0xc4>
8009793c:	3446b03a 	or	r3,r6,r17
80097940:	18001c26 	beq	r3,zero,800979b4 <__muldf3+0x2cc>
80097944:	8800ce26 	beq	r17,zero,80097c80 <__muldf3+0x598>
80097948:	8809883a 	mov	r4,r17
8009794c:	d9800215 	stw	r6,8(sp)
80097950:	da400115 	stw	r9,4(sp)
80097954:	da800015 	stw	r10,0(sp)
80097958:	0098aa80 	call	80098aa8 <__clzsi2>
8009795c:	d9800217 	ldw	r6,8(sp)
80097960:	da400117 	ldw	r9,4(sp)
80097964:	da800017 	ldw	r10,0(sp)
80097968:	113ffd44 	addi	r4,r2,-11
8009796c:	00c00704 	movi	r3,28
80097970:	1900bf16 	blt	r3,r4,80097c70 <__muldf3+0x588>
80097974:	00c00744 	movi	r3,29
80097978:	123ffe04 	addi	r8,r2,-8
8009797c:	1907c83a 	sub	r3,r3,r4
80097980:	8a22983a 	sll	r17,r17,r8
80097984:	30c6d83a 	srl	r3,r6,r3
80097988:	3210983a 	sll	r8,r6,r8
8009798c:	1c62b03a 	or	r17,r3,r17
80097990:	1080fcc4 	addi	r2,r2,1011
80097994:	0085c83a 	sub	r2,zero,r2
80097998:	000b883a 	mov	r5,zero
8009799c:	003f8306 	br	800977ac <__muldf3+0xc4>
800979a0:	b02b883a 	mov	r21,r22
800979a4:	0081ffc4 	movi	r2,2047
800979a8:	000b883a 	mov	r5,zero
800979ac:	0029883a 	mov	r20,zero
800979b0:	003fac06 	br	80097864 <__muldf3+0x17c>
800979b4:	0023883a 	mov	r17,zero
800979b8:	0011883a 	mov	r8,zero
800979bc:	01400044 	movi	r5,1
800979c0:	003f7a06 	br	800977ac <__muldf3+0xc4>
800979c4:	014000c4 	movi	r5,3
800979c8:	003f7806 	br	800977ac <__muldf3+0xc4>
800979cc:	04c00104 	movi	r19,4
800979d0:	0021883a 	mov	r16,zero
800979d4:	0029883a 	mov	r20,zero
800979d8:	07000044 	movi	fp,1
800979dc:	003f6106 	br	80097764 <__muldf3+0x7c>
800979e0:	04c00304 	movi	r19,12
800979e4:	070000c4 	movi	fp,3
800979e8:	003f5e06 	br	80097764 <__muldf3+0x7c>
800979ec:	01400434 	movhi	r5,16
800979f0:	002b883a 	mov	r21,zero
800979f4:	297fffc4 	addi	r5,r5,-1
800979f8:	053fffc4 	movi	r20,-1
800979fc:	0081ffc4 	movi	r2,2047
80097a00:	003f9806 	br	80097864 <__muldf3+0x17c>
80097a04:	8023883a 	mov	r17,r16
80097a08:	a011883a 	mov	r8,r20
80097a0c:	e00b883a 	mov	r5,fp
80097a10:	003f8a06 	br	8009783c <__muldf3+0x154>
80097a14:	8023883a 	mov	r17,r16
80097a18:	a011883a 	mov	r8,r20
80097a1c:	482d883a 	mov	r22,r9
80097a20:	e00b883a 	mov	r5,fp
80097a24:	003f8506 	br	8009783c <__muldf3+0x154>
80097a28:	a00ad43a 	srli	r5,r20,16
80097a2c:	401ad43a 	srli	r13,r8,16
80097a30:	a53fffcc 	andi	r20,r20,65535
80097a34:	423fffcc 	andi	r8,r8,65535
80097a38:	4519383a 	mul	r12,r8,r20
80097a3c:	4147383a 	mul	r3,r8,r5
80097a40:	6d09383a 	mul	r4,r13,r20
80097a44:	600cd43a 	srli	r6,r12,16
80097a48:	2b5d383a 	mul	r14,r5,r13
80097a4c:	20c9883a 	add	r4,r4,r3
80097a50:	310d883a 	add	r6,r6,r4
80097a54:	30c0022e 	bgeu	r6,r3,80097a60 <__muldf3+0x378>
80097a58:	00c00074 	movhi	r3,1
80097a5c:	70dd883a 	add	r14,r14,r3
80097a60:	8826d43a 	srli	r19,r17,16
80097a64:	8bffffcc 	andi	r15,r17,65535
80097a68:	7d23383a 	mul	r17,r15,r20
80097a6c:	7949383a 	mul	r4,r15,r5
80097a70:	9d29383a 	mul	r20,r19,r20
80097a74:	8814d43a 	srli	r10,r17,16
80097a78:	3012943a 	slli	r9,r6,16
80097a7c:	a129883a 	add	r20,r20,r4
80097a80:	633fffcc 	andi	r12,r12,65535
80097a84:	5515883a 	add	r10,r10,r20
80097a88:	3006d43a 	srli	r3,r6,16
80097a8c:	4b13883a 	add	r9,r9,r12
80097a90:	2ccb383a 	mul	r5,r5,r19
80097a94:	5100022e 	bgeu	r10,r4,80097aa0 <__muldf3+0x3b8>
80097a98:	01000074 	movhi	r4,1
80097a9c:	290b883a 	add	r5,r5,r4
80097aa0:	802ad43a 	srli	r21,r16,16
80097aa4:	843fffcc 	andi	r16,r16,65535
80097aa8:	440d383a 	mul	r6,r8,r16
80097aac:	4565383a 	mul	r18,r8,r21
80097ab0:	8349383a 	mul	r4,r16,r13
80097ab4:	500e943a 	slli	r7,r10,16
80097ab8:	3010d43a 	srli	r8,r6,16
80097abc:	5028d43a 	srli	r20,r10,16
80097ac0:	2489883a 	add	r4,r4,r18
80097ac4:	8abfffcc 	andi	r10,r17,65535
80097ac8:	3a95883a 	add	r10,r7,r10
80097acc:	4119883a 	add	r12,r8,r4
80097ad0:	a169883a 	add	r20,r20,r5
80097ad4:	1a87883a 	add	r3,r3,r10
80097ad8:	6d5b383a 	mul	r13,r13,r21
80097adc:	6480022e 	bgeu	r12,r18,80097ae8 <__muldf3+0x400>
80097ae0:	01000074 	movhi	r4,1
80097ae4:	691b883a 	add	r13,r13,r4
80097ae8:	7c25383a 	mul	r18,r15,r16
80097aec:	7d4b383a 	mul	r5,r15,r21
80097af0:	84cf383a 	mul	r7,r16,r19
80097af4:	901ed43a 	srli	r15,r18,16
80097af8:	6008d43a 	srli	r4,r12,16
80097afc:	6010943a 	slli	r8,r12,16
80097b00:	394f883a 	add	r7,r7,r5
80097b04:	333fffcc 	andi	r12,r6,65535
80097b08:	79df883a 	add	r15,r15,r7
80097b0c:	235b883a 	add	r13,r4,r13
80097b10:	9d63383a 	mul	r17,r19,r21
80097b14:	4309883a 	add	r4,r8,r12
80097b18:	7940022e 	bgeu	r15,r5,80097b24 <__muldf3+0x43c>
80097b1c:	01400074 	movhi	r5,1
80097b20:	8963883a 	add	r17,r17,r5
80097b24:	780a943a 	slli	r5,r15,16
80097b28:	91bfffcc 	andi	r6,r18,65535
80097b2c:	70c7883a 	add	r3,r14,r3
80097b30:	298d883a 	add	r6,r5,r6
80097b34:	1a8f803a 	cmpltu	r7,r3,r10
80097b38:	350b883a 	add	r5,r6,r20
80097b3c:	20c7883a 	add	r3,r4,r3
80097b40:	3955883a 	add	r10,r7,r5
80097b44:	1909803a 	cmpltu	r4,r3,r4
80097b48:	6a91883a 	add	r8,r13,r10
80097b4c:	780cd43a 	srli	r6,r15,16
80097b50:	2219883a 	add	r12,r4,r8
80097b54:	2d0b803a 	cmpltu	r5,r5,r20
80097b58:	51cf803a 	cmpltu	r7,r10,r7
80097b5c:	29ceb03a 	or	r7,r5,r7
80097b60:	4351803a 	cmpltu	r8,r8,r13
80097b64:	610b803a 	cmpltu	r5,r12,r4
80097b68:	4148b03a 	or	r4,r8,r5
80097b6c:	398f883a 	add	r7,r7,r6
80097b70:	3909883a 	add	r4,r7,r4
80097b74:	1810927a 	slli	r8,r3,9
80097b78:	2449883a 	add	r4,r4,r17
80097b7c:	2008927a 	slli	r4,r4,9
80097b80:	6022d5fa 	srli	r17,r12,23
80097b84:	1806d5fa 	srli	r3,r3,23
80097b88:	4252b03a 	or	r9,r8,r9
80097b8c:	600a927a 	slli	r5,r12,9
80097b90:	4810c03a 	cmpne	r8,r9,zero
80097b94:	2462b03a 	or	r17,r4,r17
80097b98:	40c6b03a 	or	r3,r8,r3
80097b9c:	8900402c 	andhi	r4,r17,256
80097ba0:	1950b03a 	or	r8,r3,r5
80097ba4:	20000726 	beq	r4,zero,80097bc4 <__muldf3+0x4dc>
80097ba8:	4006d07a 	srli	r3,r8,1
80097bac:	880497fa 	slli	r2,r17,31
80097bb0:	4200004c 	andi	r8,r8,1
80097bb4:	8822d07a 	srli	r17,r17,1
80097bb8:	1a10b03a 	or	r8,r3,r8
80097bbc:	1210b03a 	or	r8,r2,r8
80097bc0:	5805883a 	mov	r2,r11
80097bc4:	1140ffc4 	addi	r5,r2,1023
80097bc8:	0140440e 	bge	zero,r5,80097cdc <__muldf3+0x5f4>
80097bcc:	40c001cc 	andi	r3,r8,7
80097bd0:	18000726 	beq	r3,zero,80097bf0 <__muldf3+0x508>
80097bd4:	40c003cc 	andi	r3,r8,15
80097bd8:	01000104 	movi	r4,4
80097bdc:	19000426 	beq	r3,r4,80097bf0 <__muldf3+0x508>
80097be0:	4107883a 	add	r3,r8,r4
80097be4:	1a11803a 	cmpltu	r8,r3,r8
80097be8:	8a23883a 	add	r17,r17,r8
80097bec:	1811883a 	mov	r8,r3
80097bf0:	88c0402c 	andhi	r3,r17,256
80097bf4:	18000426 	beq	r3,zero,80097c08 <__muldf3+0x520>
80097bf8:	11410004 	addi	r5,r2,1024
80097bfc:	00bfc034 	movhi	r2,65280
80097c00:	10bfffc4 	addi	r2,r2,-1
80097c04:	88a2703a 	and	r17,r17,r2
80097c08:	0081ff84 	movi	r2,2046
80097c0c:	117f6416 	blt	r2,r5,800979a0 <__muldf3+0x2b8>
80097c10:	8828977a 	slli	r20,r17,29
80097c14:	4010d0fa 	srli	r8,r8,3
80097c18:	8822927a 	slli	r17,r17,9
80097c1c:	2881ffcc 	andi	r2,r5,2047
80097c20:	a228b03a 	or	r20,r20,r8
80097c24:	880ad33a 	srli	r5,r17,12
80097c28:	b02b883a 	mov	r21,r22
80097c2c:	003f0d06 	br	80097864 <__muldf3+0x17c>
80097c30:	8080022c 	andhi	r2,r16,8
80097c34:	10000926 	beq	r2,zero,80097c5c <__muldf3+0x574>
80097c38:	8880022c 	andhi	r2,r17,8
80097c3c:	1000071e 	bne	r2,zero,80097c5c <__muldf3+0x574>
80097c40:	00800434 	movhi	r2,16
80097c44:	89400234 	orhi	r5,r17,8
80097c48:	10bfffc4 	addi	r2,r2,-1
80097c4c:	b82b883a 	mov	r21,r23
80097c50:	288a703a 	and	r5,r5,r2
80097c54:	4029883a 	mov	r20,r8
80097c58:	003f6806 	br	800979fc <__muldf3+0x314>
80097c5c:	00800434 	movhi	r2,16
80097c60:	81400234 	orhi	r5,r16,8
80097c64:	10bfffc4 	addi	r2,r2,-1
80097c68:	288a703a 	and	r5,r5,r2
80097c6c:	003f6306 	br	800979fc <__muldf3+0x314>
80097c70:	147ff604 	addi	r17,r2,-40
80097c74:	3462983a 	sll	r17,r6,r17
80097c78:	0011883a 	mov	r8,zero
80097c7c:	003f4406 	br	80097990 <__muldf3+0x2a8>
80097c80:	3009883a 	mov	r4,r6
80097c84:	d9800215 	stw	r6,8(sp)
80097c88:	da400115 	stw	r9,4(sp)
80097c8c:	da800015 	stw	r10,0(sp)
80097c90:	0098aa80 	call	80098aa8 <__clzsi2>
80097c94:	10800804 	addi	r2,r2,32
80097c98:	da800017 	ldw	r10,0(sp)
80097c9c:	da400117 	ldw	r9,4(sp)
80097ca0:	d9800217 	ldw	r6,8(sp)
80097ca4:	003f3006 	br	80097968 <__muldf3+0x280>
80097ca8:	143ff604 	addi	r16,r2,-40
80097cac:	9c20983a 	sll	r16,r19,r16
80097cb0:	0029883a 	mov	r20,zero
80097cb4:	003f1606 	br	80097910 <__muldf3+0x228>
80097cb8:	d9800215 	stw	r6,8(sp)
80097cbc:	d9c00015 	stw	r7,0(sp)
80097cc0:	da400115 	stw	r9,4(sp)
80097cc4:	0098aa80 	call	80098aa8 <__clzsi2>
80097cc8:	10800804 	addi	r2,r2,32
80097ccc:	da400117 	ldw	r9,4(sp)
80097cd0:	d9c00017 	ldw	r7,0(sp)
80097cd4:	d9800217 	ldw	r6,8(sp)
80097cd8:	003f0306 	br	800978e8 <__muldf3+0x200>
80097cdc:	00c00044 	movi	r3,1
80097ce0:	1947c83a 	sub	r3,r3,r5
80097ce4:	00800e04 	movi	r2,56
80097ce8:	10feda16 	blt	r2,r3,80097854 <__muldf3+0x16c>
80097cec:	008007c4 	movi	r2,31
80097cf0:	10c01b16 	blt	r2,r3,80097d60 <__muldf3+0x678>
80097cf4:	00800804 	movi	r2,32
80097cf8:	10c5c83a 	sub	r2,r2,r3
80097cfc:	888a983a 	sll	r5,r17,r2
80097d00:	40c8d83a 	srl	r4,r8,r3
80097d04:	4084983a 	sll	r2,r8,r2
80097d08:	88e2d83a 	srl	r17,r17,r3
80097d0c:	2906b03a 	or	r3,r5,r4
80097d10:	1004c03a 	cmpne	r2,r2,zero
80097d14:	1886b03a 	or	r3,r3,r2
80097d18:	188001cc 	andi	r2,r3,7
80097d1c:	10000726 	beq	r2,zero,80097d3c <__muldf3+0x654>
80097d20:	188003cc 	andi	r2,r3,15
80097d24:	01000104 	movi	r4,4
80097d28:	11000426 	beq	r2,r4,80097d3c <__muldf3+0x654>
80097d2c:	1805883a 	mov	r2,r3
80097d30:	10c00104 	addi	r3,r2,4
80097d34:	1885803a 	cmpltu	r2,r3,r2
80097d38:	88a3883a 	add	r17,r17,r2
80097d3c:	8880202c 	andhi	r2,r17,128
80097d40:	10001c26 	beq	r2,zero,80097db4 <__muldf3+0x6cc>
80097d44:	b02b883a 	mov	r21,r22
80097d48:	00800044 	movi	r2,1
80097d4c:	000b883a 	mov	r5,zero
80097d50:	0029883a 	mov	r20,zero
80097d54:	003ec306 	br	80097864 <__muldf3+0x17c>
80097d58:	5805883a 	mov	r2,r11
80097d5c:	003f9906 	br	80097bc4 <__muldf3+0x4dc>
80097d60:	00bff844 	movi	r2,-31
80097d64:	1145c83a 	sub	r2,r2,r5
80097d68:	8888d83a 	srl	r4,r17,r2
80097d6c:	00800804 	movi	r2,32
80097d70:	18801a26 	beq	r3,r2,80097ddc <__muldf3+0x6f4>
80097d74:	00801004 	movi	r2,64
80097d78:	10c5c83a 	sub	r2,r2,r3
80097d7c:	8884983a 	sll	r2,r17,r2
80097d80:	1204b03a 	or	r2,r2,r8
80097d84:	1004c03a 	cmpne	r2,r2,zero
80097d88:	2084b03a 	or	r2,r4,r2
80097d8c:	144001cc 	andi	r17,r2,7
80097d90:	88000d1e 	bne	r17,zero,80097dc8 <__muldf3+0x6e0>
80097d94:	000b883a 	mov	r5,zero
80097d98:	1028d0fa 	srli	r20,r2,3
80097d9c:	b02b883a 	mov	r21,r22
80097da0:	0005883a 	mov	r2,zero
80097da4:	a468b03a 	or	r20,r20,r17
80097da8:	003eae06 	br	80097864 <__muldf3+0x17c>
80097dac:	1007883a 	mov	r3,r2
80097db0:	0023883a 	mov	r17,zero
80097db4:	880a927a 	slli	r5,r17,9
80097db8:	1805883a 	mov	r2,r3
80097dbc:	8822977a 	slli	r17,r17,29
80097dc0:	280ad33a 	srli	r5,r5,12
80097dc4:	003ff406 	br	80097d98 <__muldf3+0x6b0>
80097dc8:	10c003cc 	andi	r3,r2,15
80097dcc:	01000104 	movi	r4,4
80097dd0:	193ff626 	beq	r3,r4,80097dac <__muldf3+0x6c4>
80097dd4:	0023883a 	mov	r17,zero
80097dd8:	003fd506 	br	80097d30 <__muldf3+0x648>
80097ddc:	0005883a 	mov	r2,zero
80097de0:	003fe706 	br	80097d80 <__muldf3+0x698>
80097de4:	00800434 	movhi	r2,16
80097de8:	89400234 	orhi	r5,r17,8
80097dec:	10bfffc4 	addi	r2,r2,-1
80097df0:	b02b883a 	mov	r21,r22
80097df4:	288a703a 	and	r5,r5,r2
80097df8:	4029883a 	mov	r20,r8
80097dfc:	003eff06 	br	800979fc <__muldf3+0x314>

80097e00 <__subdf3>:
80097e00:	02000434 	movhi	r8,16
80097e04:	423fffc4 	addi	r8,r8,-1
80097e08:	defffb04 	addi	sp,sp,-20
80097e0c:	2a14703a 	and	r10,r5,r8
80097e10:	3812d53a 	srli	r9,r7,20
80097e14:	3a10703a 	and	r8,r7,r8
80097e18:	2006d77a 	srli	r3,r4,29
80097e1c:	3004d77a 	srli	r2,r6,29
80097e20:	dc000015 	stw	r16,0(sp)
80097e24:	501490fa 	slli	r10,r10,3
80097e28:	2820d53a 	srli	r16,r5,20
80097e2c:	401090fa 	slli	r8,r8,3
80097e30:	dc800215 	stw	r18,8(sp)
80097e34:	dc400115 	stw	r17,4(sp)
80097e38:	dfc00415 	stw	ra,16(sp)
80097e3c:	202290fa 	slli	r17,r4,3
80097e40:	dcc00315 	stw	r19,12(sp)
80097e44:	4a41ffcc 	andi	r9,r9,2047
80097e48:	0101ffc4 	movi	r4,2047
80097e4c:	2824d7fa 	srli	r18,r5,31
80097e50:	8401ffcc 	andi	r16,r16,2047
80097e54:	50c6b03a 	or	r3,r10,r3
80097e58:	380ed7fa 	srli	r7,r7,31
80097e5c:	408ab03a 	or	r5,r8,r2
80097e60:	300c90fa 	slli	r6,r6,3
80097e64:	49009626 	beq	r9,r4,800980c0 <__subdf3+0x2c0>
80097e68:	39c0005c 	xori	r7,r7,1
80097e6c:	8245c83a 	sub	r2,r16,r9
80097e70:	3c807426 	beq	r7,r18,80098044 <__subdf3+0x244>
80097e74:	0080af0e 	bge	zero,r2,80098134 <__subdf3+0x334>
80097e78:	48002a1e 	bne	r9,zero,80097f24 <__subdf3+0x124>
80097e7c:	2988b03a 	or	r4,r5,r6
80097e80:	20009a1e 	bne	r4,zero,800980ec <__subdf3+0x2ec>
80097e84:	888001cc 	andi	r2,r17,7
80097e88:	10000726 	beq	r2,zero,80097ea8 <__subdf3+0xa8>
80097e8c:	888003cc 	andi	r2,r17,15
80097e90:	01000104 	movi	r4,4
80097e94:	11000426 	beq	r2,r4,80097ea8 <__subdf3+0xa8>
80097e98:	890b883a 	add	r5,r17,r4
80097e9c:	2c63803a 	cmpltu	r17,r5,r17
80097ea0:	1c47883a 	add	r3,r3,r17
80097ea4:	2823883a 	mov	r17,r5
80097ea8:	1880202c 	andhi	r2,r3,128
80097eac:	10005926 	beq	r2,zero,80098014 <__subdf3+0x214>
80097eb0:	84000044 	addi	r16,r16,1
80097eb4:	0081ffc4 	movi	r2,2047
80097eb8:	8080be26 	beq	r16,r2,800981b4 <__subdf3+0x3b4>
80097ebc:	017fe034 	movhi	r5,65408
80097ec0:	297fffc4 	addi	r5,r5,-1
80097ec4:	1946703a 	and	r3,r3,r5
80097ec8:	1804977a 	slli	r2,r3,29
80097ecc:	1806927a 	slli	r3,r3,9
80097ed0:	8822d0fa 	srli	r17,r17,3
80097ed4:	8401ffcc 	andi	r16,r16,2047
80097ed8:	180ad33a 	srli	r5,r3,12
80097edc:	9100004c 	andi	r4,r18,1
80097ee0:	1444b03a 	or	r2,r2,r17
80097ee4:	80c1ffcc 	andi	r3,r16,2047
80097ee8:	1820953a 	slli	r16,r3,20
80097eec:	20c03fcc 	andi	r3,r4,255
80097ef0:	180897fa 	slli	r4,r3,31
80097ef4:	00c00434 	movhi	r3,16
80097ef8:	18ffffc4 	addi	r3,r3,-1
80097efc:	28c6703a 	and	r3,r5,r3
80097f00:	1c06b03a 	or	r3,r3,r16
80097f04:	1906b03a 	or	r3,r3,r4
80097f08:	dfc00417 	ldw	ra,16(sp)
80097f0c:	dcc00317 	ldw	r19,12(sp)
80097f10:	dc800217 	ldw	r18,8(sp)
80097f14:	dc400117 	ldw	r17,4(sp)
80097f18:	dc000017 	ldw	r16,0(sp)
80097f1c:	dec00504 	addi	sp,sp,20
80097f20:	f800283a 	ret
80097f24:	0101ffc4 	movi	r4,2047
80097f28:	813fd626 	beq	r16,r4,80097e84 <__subdf3+0x84>
80097f2c:	29402034 	orhi	r5,r5,128
80097f30:	01000e04 	movi	r4,56
80097f34:	2080a316 	blt	r4,r2,800981c4 <__subdf3+0x3c4>
80097f38:	010007c4 	movi	r4,31
80097f3c:	2080c616 	blt	r4,r2,80098258 <__subdf3+0x458>
80097f40:	01000804 	movi	r4,32
80097f44:	2089c83a 	sub	r4,r4,r2
80097f48:	2910983a 	sll	r8,r5,r4
80097f4c:	308ed83a 	srl	r7,r6,r2
80097f50:	3108983a 	sll	r4,r6,r4
80097f54:	2884d83a 	srl	r2,r5,r2
80097f58:	41ccb03a 	or	r6,r8,r7
80097f5c:	2008c03a 	cmpne	r4,r4,zero
80097f60:	310cb03a 	or	r6,r6,r4
80097f64:	898dc83a 	sub	r6,r17,r6
80097f68:	89a3803a 	cmpltu	r17,r17,r6
80097f6c:	1887c83a 	sub	r3,r3,r2
80097f70:	1c47c83a 	sub	r3,r3,r17
80097f74:	3023883a 	mov	r17,r6
80097f78:	1880202c 	andhi	r2,r3,128
80097f7c:	10002326 	beq	r2,zero,8009800c <__subdf3+0x20c>
80097f80:	04c02034 	movhi	r19,128
80097f84:	9cffffc4 	addi	r19,r19,-1
80097f88:	1ce6703a 	and	r19,r3,r19
80097f8c:	98007a26 	beq	r19,zero,80098178 <__subdf3+0x378>
80097f90:	9809883a 	mov	r4,r19
80097f94:	0098aa80 	call	80098aa8 <__clzsi2>
80097f98:	113ffe04 	addi	r4,r2,-8
80097f9c:	00c007c4 	movi	r3,31
80097fa0:	19007b16 	blt	r3,r4,80098190 <__subdf3+0x390>
80097fa4:	00800804 	movi	r2,32
80097fa8:	1105c83a 	sub	r2,r2,r4
80097fac:	8884d83a 	srl	r2,r17,r2
80097fb0:	9906983a 	sll	r3,r19,r4
80097fb4:	8922983a 	sll	r17,r17,r4
80097fb8:	10c4b03a 	or	r2,r2,r3
80097fbc:	24007816 	blt	r4,r16,800981a0 <__subdf3+0x3a0>
80097fc0:	2421c83a 	sub	r16,r4,r16
80097fc4:	80c00044 	addi	r3,r16,1
80097fc8:	010007c4 	movi	r4,31
80097fcc:	20c09516 	blt	r4,r3,80098224 <__subdf3+0x424>
80097fd0:	01400804 	movi	r5,32
80097fd4:	28cbc83a 	sub	r5,r5,r3
80097fd8:	88c8d83a 	srl	r4,r17,r3
80097fdc:	8962983a 	sll	r17,r17,r5
80097fe0:	114a983a 	sll	r5,r2,r5
80097fe4:	10c6d83a 	srl	r3,r2,r3
80097fe8:	8804c03a 	cmpne	r2,r17,zero
80097fec:	290ab03a 	or	r5,r5,r4
80097ff0:	28a2b03a 	or	r17,r5,r2
80097ff4:	0021883a 	mov	r16,zero
80097ff8:	003fa206 	br	80097e84 <__subdf3+0x84>
80097ffc:	2090b03a 	or	r8,r4,r2
80098000:	40018e26 	beq	r8,zero,8009863c <__subdf3+0x83c>
80098004:	1007883a 	mov	r3,r2
80098008:	2023883a 	mov	r17,r4
8009800c:	888001cc 	andi	r2,r17,7
80098010:	103f9e1e 	bne	r2,zero,80097e8c <__subdf3+0x8c>
80098014:	1804977a 	slli	r2,r3,29
80098018:	8822d0fa 	srli	r17,r17,3
8009801c:	1810d0fa 	srli	r8,r3,3
80098020:	9100004c 	andi	r4,r18,1
80098024:	1444b03a 	or	r2,r2,r17
80098028:	00c1ffc4 	movi	r3,2047
8009802c:	80c02826 	beq	r16,r3,800980d0 <__subdf3+0x2d0>
80098030:	01400434 	movhi	r5,16
80098034:	297fffc4 	addi	r5,r5,-1
80098038:	80e0703a 	and	r16,r16,r3
8009803c:	414a703a 	and	r5,r8,r5
80098040:	003fa806 	br	80097ee4 <__subdf3+0xe4>
80098044:	0080630e 	bge	zero,r2,800981d4 <__subdf3+0x3d4>
80098048:	48003026 	beq	r9,zero,8009810c <__subdf3+0x30c>
8009804c:	0101ffc4 	movi	r4,2047
80098050:	813f8c26 	beq	r16,r4,80097e84 <__subdf3+0x84>
80098054:	29402034 	orhi	r5,r5,128
80098058:	01000e04 	movi	r4,56
8009805c:	2080a90e 	bge	r4,r2,80098304 <__subdf3+0x504>
80098060:	298cb03a 	or	r6,r5,r6
80098064:	3012c03a 	cmpne	r9,r6,zero
80098068:	0005883a 	mov	r2,zero
8009806c:	4c53883a 	add	r9,r9,r17
80098070:	4c63803a 	cmpltu	r17,r9,r17
80098074:	10c7883a 	add	r3,r2,r3
80098078:	88c7883a 	add	r3,r17,r3
8009807c:	4823883a 	mov	r17,r9
80098080:	1880202c 	andhi	r2,r3,128
80098084:	1000d026 	beq	r2,zero,800983c8 <__subdf3+0x5c8>
80098088:	84000044 	addi	r16,r16,1
8009808c:	0081ffc4 	movi	r2,2047
80098090:	8080fe26 	beq	r16,r2,8009848c <__subdf3+0x68c>
80098094:	00bfe034 	movhi	r2,65408
80098098:	10bfffc4 	addi	r2,r2,-1
8009809c:	1886703a 	and	r3,r3,r2
800980a0:	880ad07a 	srli	r5,r17,1
800980a4:	180497fa 	slli	r2,r3,31
800980a8:	8900004c 	andi	r4,r17,1
800980ac:	2922b03a 	or	r17,r5,r4
800980b0:	1806d07a 	srli	r3,r3,1
800980b4:	1462b03a 	or	r17,r2,r17
800980b8:	3825883a 	mov	r18,r7
800980bc:	003f7106 	br	80097e84 <__subdf3+0x84>
800980c0:	2984b03a 	or	r2,r5,r6
800980c4:	103f6826 	beq	r2,zero,80097e68 <__subdf3+0x68>
800980c8:	39c03fcc 	andi	r7,r7,255
800980cc:	003f6706 	br	80097e6c <__subdf3+0x6c>
800980d0:	4086b03a 	or	r3,r8,r2
800980d4:	18015226 	beq	r3,zero,80098620 <__subdf3+0x820>
800980d8:	00c00434 	movhi	r3,16
800980dc:	41400234 	orhi	r5,r8,8
800980e0:	18ffffc4 	addi	r3,r3,-1
800980e4:	28ca703a 	and	r5,r5,r3
800980e8:	003f7e06 	br	80097ee4 <__subdf3+0xe4>
800980ec:	10bfffc4 	addi	r2,r2,-1
800980f0:	1000491e 	bne	r2,zero,80098218 <__subdf3+0x418>
800980f4:	898fc83a 	sub	r7,r17,r6
800980f8:	89e3803a 	cmpltu	r17,r17,r7
800980fc:	1947c83a 	sub	r3,r3,r5
80098100:	1c47c83a 	sub	r3,r3,r17
80098104:	3823883a 	mov	r17,r7
80098108:	003f9b06 	br	80097f78 <__subdf3+0x178>
8009810c:	2988b03a 	or	r4,r5,r6
80098110:	203f5c26 	beq	r4,zero,80097e84 <__subdf3+0x84>
80098114:	10bfffc4 	addi	r2,r2,-1
80098118:	1000931e 	bne	r2,zero,80098368 <__subdf3+0x568>
8009811c:	898d883a 	add	r6,r17,r6
80098120:	3463803a 	cmpltu	r17,r6,r17
80098124:	1947883a 	add	r3,r3,r5
80098128:	88c7883a 	add	r3,r17,r3
8009812c:	3023883a 	mov	r17,r6
80098130:	003fd306 	br	80098080 <__subdf3+0x280>
80098134:	1000541e 	bne	r2,zero,80098288 <__subdf3+0x488>
80098138:	80800044 	addi	r2,r16,1
8009813c:	1081ffcc 	andi	r2,r2,2047
80098140:	01000044 	movi	r4,1
80098144:	2080a20e 	bge	r4,r2,800983d0 <__subdf3+0x5d0>
80098148:	8989c83a 	sub	r4,r17,r6
8009814c:	8905803a 	cmpltu	r2,r17,r4
80098150:	1967c83a 	sub	r19,r3,r5
80098154:	98a7c83a 	sub	r19,r19,r2
80098158:	9880202c 	andhi	r2,r19,128
8009815c:	10006326 	beq	r2,zero,800982ec <__subdf3+0x4ec>
80098160:	3463c83a 	sub	r17,r6,r17
80098164:	28c7c83a 	sub	r3,r5,r3
80098168:	344d803a 	cmpltu	r6,r6,r17
8009816c:	19a7c83a 	sub	r19,r3,r6
80098170:	3825883a 	mov	r18,r7
80098174:	983f861e 	bne	r19,zero,80097f90 <__subdf3+0x190>
80098178:	8809883a 	mov	r4,r17
8009817c:	0098aa80 	call	80098aa8 <__clzsi2>
80098180:	10800804 	addi	r2,r2,32
80098184:	113ffe04 	addi	r4,r2,-8
80098188:	00c007c4 	movi	r3,31
8009818c:	193f850e 	bge	r3,r4,80097fa4 <__subdf3+0x1a4>
80098190:	10bff604 	addi	r2,r2,-40
80098194:	8884983a 	sll	r2,r17,r2
80098198:	0023883a 	mov	r17,zero
8009819c:	243f880e 	bge	r4,r16,80097fc0 <__subdf3+0x1c0>
800981a0:	00ffe034 	movhi	r3,65408
800981a4:	18ffffc4 	addi	r3,r3,-1
800981a8:	8121c83a 	sub	r16,r16,r4
800981ac:	10c6703a 	and	r3,r2,r3
800981b0:	003f3406 	br	80097e84 <__subdf3+0x84>
800981b4:	9100004c 	andi	r4,r18,1
800981b8:	000b883a 	mov	r5,zero
800981bc:	0005883a 	mov	r2,zero
800981c0:	003f4806 	br	80097ee4 <__subdf3+0xe4>
800981c4:	298cb03a 	or	r6,r5,r6
800981c8:	300cc03a 	cmpne	r6,r6,zero
800981cc:	0005883a 	mov	r2,zero
800981d0:	003f6406 	br	80097f64 <__subdf3+0x164>
800981d4:	10009a1e 	bne	r2,zero,80098440 <__subdf3+0x640>
800981d8:	82400044 	addi	r9,r16,1
800981dc:	4881ffcc 	andi	r2,r9,2047
800981e0:	02800044 	movi	r10,1
800981e4:	5080670e 	bge	r10,r2,80098384 <__subdf3+0x584>
800981e8:	0081ffc4 	movi	r2,2047
800981ec:	4880af26 	beq	r9,r2,800984ac <__subdf3+0x6ac>
800981f0:	898d883a 	add	r6,r17,r6
800981f4:	1945883a 	add	r2,r3,r5
800981f8:	3447803a 	cmpltu	r3,r6,r17
800981fc:	1887883a 	add	r3,r3,r2
80098200:	182297fa 	slli	r17,r3,31
80098204:	300cd07a 	srli	r6,r6,1
80098208:	1806d07a 	srli	r3,r3,1
8009820c:	4821883a 	mov	r16,r9
80098210:	89a2b03a 	or	r17,r17,r6
80098214:	003f1b06 	br	80097e84 <__subdf3+0x84>
80098218:	0101ffc4 	movi	r4,2047
8009821c:	813f441e 	bne	r16,r4,80097f30 <__subdf3+0x130>
80098220:	003f1806 	br	80097e84 <__subdf3+0x84>
80098224:	843ff844 	addi	r16,r16,-31
80098228:	01400804 	movi	r5,32
8009822c:	1408d83a 	srl	r4,r2,r16
80098230:	19405026 	beq	r3,r5,80098374 <__subdf3+0x574>
80098234:	01401004 	movi	r5,64
80098238:	28c7c83a 	sub	r3,r5,r3
8009823c:	10c4983a 	sll	r2,r2,r3
80098240:	88a2b03a 	or	r17,r17,r2
80098244:	8822c03a 	cmpne	r17,r17,zero
80098248:	2462b03a 	or	r17,r4,r17
8009824c:	0007883a 	mov	r3,zero
80098250:	0021883a 	mov	r16,zero
80098254:	003f6d06 	br	8009800c <__subdf3+0x20c>
80098258:	11fff804 	addi	r7,r2,-32
8009825c:	01000804 	movi	r4,32
80098260:	29ced83a 	srl	r7,r5,r7
80098264:	11004526 	beq	r2,r4,8009837c <__subdf3+0x57c>
80098268:	01001004 	movi	r4,64
8009826c:	2089c83a 	sub	r4,r4,r2
80098270:	2904983a 	sll	r2,r5,r4
80098274:	118cb03a 	or	r6,r2,r6
80098278:	300cc03a 	cmpne	r6,r6,zero
8009827c:	398cb03a 	or	r6,r7,r6
80098280:	0005883a 	mov	r2,zero
80098284:	003f3706 	br	80097f64 <__subdf3+0x164>
80098288:	80002a26 	beq	r16,zero,80098334 <__subdf3+0x534>
8009828c:	0101ffc4 	movi	r4,2047
80098290:	49006626 	beq	r9,r4,8009842c <__subdf3+0x62c>
80098294:	0085c83a 	sub	r2,zero,r2
80098298:	18c02034 	orhi	r3,r3,128
8009829c:	01000e04 	movi	r4,56
800982a0:	20807e16 	blt	r4,r2,8009849c <__subdf3+0x69c>
800982a4:	010007c4 	movi	r4,31
800982a8:	2080e716 	blt	r4,r2,80098648 <__subdf3+0x848>
800982ac:	01000804 	movi	r4,32
800982b0:	2089c83a 	sub	r4,r4,r2
800982b4:	1914983a 	sll	r10,r3,r4
800982b8:	8890d83a 	srl	r8,r17,r2
800982bc:	8908983a 	sll	r4,r17,r4
800982c0:	1884d83a 	srl	r2,r3,r2
800982c4:	5222b03a 	or	r17,r10,r8
800982c8:	2006c03a 	cmpne	r3,r4,zero
800982cc:	88e2b03a 	or	r17,r17,r3
800982d0:	3463c83a 	sub	r17,r6,r17
800982d4:	2885c83a 	sub	r2,r5,r2
800982d8:	344d803a 	cmpltu	r6,r6,r17
800982dc:	1187c83a 	sub	r3,r2,r6
800982e0:	4821883a 	mov	r16,r9
800982e4:	3825883a 	mov	r18,r7
800982e8:	003f2306 	br	80097f78 <__subdf3+0x178>
800982ec:	24d0b03a 	or	r8,r4,r19
800982f0:	40001b1e 	bne	r8,zero,80098360 <__subdf3+0x560>
800982f4:	0005883a 	mov	r2,zero
800982f8:	0009883a 	mov	r4,zero
800982fc:	0021883a 	mov	r16,zero
80098300:	003f4906 	br	80098028 <__subdf3+0x228>
80098304:	010007c4 	movi	r4,31
80098308:	20803a16 	blt	r4,r2,800983f4 <__subdf3+0x5f4>
8009830c:	01000804 	movi	r4,32
80098310:	2089c83a 	sub	r4,r4,r2
80098314:	2912983a 	sll	r9,r5,r4
80098318:	3090d83a 	srl	r8,r6,r2
8009831c:	3108983a 	sll	r4,r6,r4
80098320:	2884d83a 	srl	r2,r5,r2
80098324:	4a12b03a 	or	r9,r9,r8
80098328:	2008c03a 	cmpne	r4,r4,zero
8009832c:	4912b03a 	or	r9,r9,r4
80098330:	003f4e06 	br	8009806c <__subdf3+0x26c>
80098334:	1c48b03a 	or	r4,r3,r17
80098338:	20003c26 	beq	r4,zero,8009842c <__subdf3+0x62c>
8009833c:	0084303a 	nor	r2,zero,r2
80098340:	1000381e 	bne	r2,zero,80098424 <__subdf3+0x624>
80098344:	3463c83a 	sub	r17,r6,r17
80098348:	28c5c83a 	sub	r2,r5,r3
8009834c:	344d803a 	cmpltu	r6,r6,r17
80098350:	1187c83a 	sub	r3,r2,r6
80098354:	4821883a 	mov	r16,r9
80098358:	3825883a 	mov	r18,r7
8009835c:	003f0606 	br	80097f78 <__subdf3+0x178>
80098360:	2023883a 	mov	r17,r4
80098364:	003f0906 	br	80097f8c <__subdf3+0x18c>
80098368:	0101ffc4 	movi	r4,2047
8009836c:	813f3a1e 	bne	r16,r4,80098058 <__subdf3+0x258>
80098370:	003ec406 	br	80097e84 <__subdf3+0x84>
80098374:	0005883a 	mov	r2,zero
80098378:	003fb106 	br	80098240 <__subdf3+0x440>
8009837c:	0005883a 	mov	r2,zero
80098380:	003fbc06 	br	80098274 <__subdf3+0x474>
80098384:	1c44b03a 	or	r2,r3,r17
80098388:	80008e1e 	bne	r16,zero,800985c4 <__subdf3+0x7c4>
8009838c:	1000c826 	beq	r2,zero,800986b0 <__subdf3+0x8b0>
80098390:	2984b03a 	or	r2,r5,r6
80098394:	103ebb26 	beq	r2,zero,80097e84 <__subdf3+0x84>
80098398:	8989883a 	add	r4,r17,r6
8009839c:	1945883a 	add	r2,r3,r5
800983a0:	2447803a 	cmpltu	r3,r4,r17
800983a4:	1887883a 	add	r3,r3,r2
800983a8:	1880202c 	andhi	r2,r3,128
800983ac:	2023883a 	mov	r17,r4
800983b0:	103f1626 	beq	r2,zero,8009800c <__subdf3+0x20c>
800983b4:	00bfe034 	movhi	r2,65408
800983b8:	10bfffc4 	addi	r2,r2,-1
800983bc:	5021883a 	mov	r16,r10
800983c0:	1886703a 	and	r3,r3,r2
800983c4:	003eaf06 	br	80097e84 <__subdf3+0x84>
800983c8:	3825883a 	mov	r18,r7
800983cc:	003f0f06 	br	8009800c <__subdf3+0x20c>
800983d0:	1c44b03a 	or	r2,r3,r17
800983d4:	8000251e 	bne	r16,zero,8009846c <__subdf3+0x66c>
800983d8:	1000661e 	bne	r2,zero,80098574 <__subdf3+0x774>
800983dc:	2990b03a 	or	r8,r5,r6
800983e0:	40009626 	beq	r8,zero,8009863c <__subdf3+0x83c>
800983e4:	2807883a 	mov	r3,r5
800983e8:	3023883a 	mov	r17,r6
800983ec:	3825883a 	mov	r18,r7
800983f0:	003ea406 	br	80097e84 <__subdf3+0x84>
800983f4:	127ff804 	addi	r9,r2,-32
800983f8:	01000804 	movi	r4,32
800983fc:	2a52d83a 	srl	r9,r5,r9
80098400:	11008c26 	beq	r2,r4,80098634 <__subdf3+0x834>
80098404:	01001004 	movi	r4,64
80098408:	2085c83a 	sub	r2,r4,r2
8009840c:	2884983a 	sll	r2,r5,r2
80098410:	118cb03a 	or	r6,r2,r6
80098414:	300cc03a 	cmpne	r6,r6,zero
80098418:	4992b03a 	or	r9,r9,r6
8009841c:	0005883a 	mov	r2,zero
80098420:	003f1206 	br	8009806c <__subdf3+0x26c>
80098424:	0101ffc4 	movi	r4,2047
80098428:	493f9c1e 	bne	r9,r4,8009829c <__subdf3+0x49c>
8009842c:	2807883a 	mov	r3,r5
80098430:	3023883a 	mov	r17,r6
80098434:	4821883a 	mov	r16,r9
80098438:	3825883a 	mov	r18,r7
8009843c:	003e9106 	br	80097e84 <__subdf3+0x84>
80098440:	80001f1e 	bne	r16,zero,800984c0 <__subdf3+0x6c0>
80098444:	1c48b03a 	or	r4,r3,r17
80098448:	20005a26 	beq	r4,zero,800985b4 <__subdf3+0x7b4>
8009844c:	0084303a 	nor	r2,zero,r2
80098450:	1000561e 	bne	r2,zero,800985ac <__subdf3+0x7ac>
80098454:	89a3883a 	add	r17,r17,r6
80098458:	1945883a 	add	r2,r3,r5
8009845c:	898d803a 	cmpltu	r6,r17,r6
80098460:	3087883a 	add	r3,r6,r2
80098464:	4821883a 	mov	r16,r9
80098468:	003f0506 	br	80098080 <__subdf3+0x280>
8009846c:	10002b1e 	bne	r2,zero,8009851c <__subdf3+0x71c>
80098470:	2984b03a 	or	r2,r5,r6
80098474:	10008026 	beq	r2,zero,80098678 <__subdf3+0x878>
80098478:	2807883a 	mov	r3,r5
8009847c:	3023883a 	mov	r17,r6
80098480:	3825883a 	mov	r18,r7
80098484:	0401ffc4 	movi	r16,2047
80098488:	003e7e06 	br	80097e84 <__subdf3+0x84>
8009848c:	3809883a 	mov	r4,r7
80098490:	0011883a 	mov	r8,zero
80098494:	0005883a 	mov	r2,zero
80098498:	003ee306 	br	80098028 <__subdf3+0x228>
8009849c:	1c62b03a 	or	r17,r3,r17
800984a0:	8822c03a 	cmpne	r17,r17,zero
800984a4:	0005883a 	mov	r2,zero
800984a8:	003f8906 	br	800982d0 <__subdf3+0x4d0>
800984ac:	3809883a 	mov	r4,r7
800984b0:	4821883a 	mov	r16,r9
800984b4:	0011883a 	mov	r8,zero
800984b8:	0005883a 	mov	r2,zero
800984bc:	003eda06 	br	80098028 <__subdf3+0x228>
800984c0:	0101ffc4 	movi	r4,2047
800984c4:	49003b26 	beq	r9,r4,800985b4 <__subdf3+0x7b4>
800984c8:	0085c83a 	sub	r2,zero,r2
800984cc:	18c02034 	orhi	r3,r3,128
800984d0:	01000e04 	movi	r4,56
800984d4:	20806e16 	blt	r4,r2,80098690 <__subdf3+0x890>
800984d8:	010007c4 	movi	r4,31
800984dc:	20807716 	blt	r4,r2,800986bc <__subdf3+0x8bc>
800984e0:	01000804 	movi	r4,32
800984e4:	2089c83a 	sub	r4,r4,r2
800984e8:	1914983a 	sll	r10,r3,r4
800984ec:	8890d83a 	srl	r8,r17,r2
800984f0:	8908983a 	sll	r4,r17,r4
800984f4:	1884d83a 	srl	r2,r3,r2
800984f8:	5222b03a 	or	r17,r10,r8
800984fc:	2006c03a 	cmpne	r3,r4,zero
80098500:	88e2b03a 	or	r17,r17,r3
80098504:	89a3883a 	add	r17,r17,r6
80098508:	1145883a 	add	r2,r2,r5
8009850c:	898d803a 	cmpltu	r6,r17,r6
80098510:	3087883a 	add	r3,r6,r2
80098514:	4821883a 	mov	r16,r9
80098518:	003ed906 	br	80098080 <__subdf3+0x280>
8009851c:	2984b03a 	or	r2,r5,r6
80098520:	10004226 	beq	r2,zero,8009862c <__subdf3+0x82c>
80098524:	1808d0fa 	srli	r4,r3,3
80098528:	8822d0fa 	srli	r17,r17,3
8009852c:	1806977a 	slli	r3,r3,29
80098530:	2080022c 	andhi	r2,r4,8
80098534:	1c62b03a 	or	r17,r3,r17
80098538:	10000826 	beq	r2,zero,8009855c <__subdf3+0x75c>
8009853c:	2812d0fa 	srli	r9,r5,3
80098540:	4880022c 	andhi	r2,r9,8
80098544:	1000051e 	bne	r2,zero,8009855c <__subdf3+0x75c>
80098548:	300cd0fa 	srli	r6,r6,3
8009854c:	2804977a 	slli	r2,r5,29
80098550:	4809883a 	mov	r4,r9
80098554:	3825883a 	mov	r18,r7
80098558:	11a2b03a 	or	r17,r2,r6
8009855c:	8806d77a 	srli	r3,r17,29
80098560:	200890fa 	slli	r4,r4,3
80098564:	882290fa 	slli	r17,r17,3
80098568:	0401ffc4 	movi	r16,2047
8009856c:	1906b03a 	or	r3,r3,r4
80098570:	003e4406 	br	80097e84 <__subdf3+0x84>
80098574:	2984b03a 	or	r2,r5,r6
80098578:	103e4226 	beq	r2,zero,80097e84 <__subdf3+0x84>
8009857c:	8989c83a 	sub	r4,r17,r6
80098580:	8911803a 	cmpltu	r8,r17,r4
80098584:	1945c83a 	sub	r2,r3,r5
80098588:	1205c83a 	sub	r2,r2,r8
8009858c:	1200202c 	andhi	r8,r2,128
80098590:	403e9a26 	beq	r8,zero,80097ffc <__subdf3+0x1fc>
80098594:	3463c83a 	sub	r17,r6,r17
80098598:	28c5c83a 	sub	r2,r5,r3
8009859c:	344d803a 	cmpltu	r6,r6,r17
800985a0:	1187c83a 	sub	r3,r2,r6
800985a4:	3825883a 	mov	r18,r7
800985a8:	003e3606 	br	80097e84 <__subdf3+0x84>
800985ac:	0101ffc4 	movi	r4,2047
800985b0:	493fc71e 	bne	r9,r4,800984d0 <__subdf3+0x6d0>
800985b4:	2807883a 	mov	r3,r5
800985b8:	3023883a 	mov	r17,r6
800985bc:	4821883a 	mov	r16,r9
800985c0:	003e3006 	br	80097e84 <__subdf3+0x84>
800985c4:	10003626 	beq	r2,zero,800986a0 <__subdf3+0x8a0>
800985c8:	2984b03a 	or	r2,r5,r6
800985cc:	10001726 	beq	r2,zero,8009862c <__subdf3+0x82c>
800985d0:	1808d0fa 	srli	r4,r3,3
800985d4:	8822d0fa 	srli	r17,r17,3
800985d8:	1806977a 	slli	r3,r3,29
800985dc:	2080022c 	andhi	r2,r4,8
800985e0:	1c62b03a 	or	r17,r3,r17
800985e4:	10000726 	beq	r2,zero,80098604 <__subdf3+0x804>
800985e8:	2812d0fa 	srli	r9,r5,3
800985ec:	4880022c 	andhi	r2,r9,8
800985f0:	1000041e 	bne	r2,zero,80098604 <__subdf3+0x804>
800985f4:	300cd0fa 	srli	r6,r6,3
800985f8:	2804977a 	slli	r2,r5,29
800985fc:	4809883a 	mov	r4,r9
80098600:	11a2b03a 	or	r17,r2,r6
80098604:	8806d77a 	srli	r3,r17,29
80098608:	200890fa 	slli	r4,r4,3
8009860c:	882290fa 	slli	r17,r17,3
80098610:	3825883a 	mov	r18,r7
80098614:	1906b03a 	or	r3,r3,r4
80098618:	0401ffc4 	movi	r16,2047
8009861c:	003e1906 	br	80097e84 <__subdf3+0x84>
80098620:	000b883a 	mov	r5,zero
80098624:	0005883a 	mov	r2,zero
80098628:	003e2e06 	br	80097ee4 <__subdf3+0xe4>
8009862c:	0401ffc4 	movi	r16,2047
80098630:	003e1406 	br	80097e84 <__subdf3+0x84>
80098634:	0005883a 	mov	r2,zero
80098638:	003f7506 	br	80098410 <__subdf3+0x610>
8009863c:	0005883a 	mov	r2,zero
80098640:	0009883a 	mov	r4,zero
80098644:	003e7806 	br	80098028 <__subdf3+0x228>
80098648:	123ff804 	addi	r8,r2,-32
8009864c:	01000804 	movi	r4,32
80098650:	1a10d83a 	srl	r8,r3,r8
80098654:	11002526 	beq	r2,r4,800986ec <__subdf3+0x8ec>
80098658:	01001004 	movi	r4,64
8009865c:	2085c83a 	sub	r2,r4,r2
80098660:	1884983a 	sll	r2,r3,r2
80098664:	1444b03a 	or	r2,r2,r17
80098668:	1004c03a 	cmpne	r2,r2,zero
8009866c:	40a2b03a 	or	r17,r8,r2
80098670:	0005883a 	mov	r2,zero
80098674:	003f1606 	br	800982d0 <__subdf3+0x4d0>
80098678:	02000434 	movhi	r8,16
8009867c:	0009883a 	mov	r4,zero
80098680:	423fffc4 	addi	r8,r8,-1
80098684:	00bfffc4 	movi	r2,-1
80098688:	0401ffc4 	movi	r16,2047
8009868c:	003e6606 	br	80098028 <__subdf3+0x228>
80098690:	1c62b03a 	or	r17,r3,r17
80098694:	8822c03a 	cmpne	r17,r17,zero
80098698:	0005883a 	mov	r2,zero
8009869c:	003f9906 	br	80098504 <__subdf3+0x704>
800986a0:	2807883a 	mov	r3,r5
800986a4:	3023883a 	mov	r17,r6
800986a8:	0401ffc4 	movi	r16,2047
800986ac:	003df506 	br	80097e84 <__subdf3+0x84>
800986b0:	2807883a 	mov	r3,r5
800986b4:	3023883a 	mov	r17,r6
800986b8:	003df206 	br	80097e84 <__subdf3+0x84>
800986bc:	123ff804 	addi	r8,r2,-32
800986c0:	01000804 	movi	r4,32
800986c4:	1a10d83a 	srl	r8,r3,r8
800986c8:	11000a26 	beq	r2,r4,800986f4 <__subdf3+0x8f4>
800986cc:	01001004 	movi	r4,64
800986d0:	2085c83a 	sub	r2,r4,r2
800986d4:	1884983a 	sll	r2,r3,r2
800986d8:	1444b03a 	or	r2,r2,r17
800986dc:	1004c03a 	cmpne	r2,r2,zero
800986e0:	40a2b03a 	or	r17,r8,r2
800986e4:	0005883a 	mov	r2,zero
800986e8:	003f8606 	br	80098504 <__subdf3+0x704>
800986ec:	0005883a 	mov	r2,zero
800986f0:	003fdc06 	br	80098664 <__subdf3+0x864>
800986f4:	0005883a 	mov	r2,zero
800986f8:	003ff706 	br	800986d8 <__subdf3+0x8d8>

800986fc <__fixdfsi>:
800986fc:	280cd53a 	srli	r6,r5,20
80098700:	00c00434 	movhi	r3,16
80098704:	18ffffc4 	addi	r3,r3,-1
80098708:	3181ffcc 	andi	r6,r6,2047
8009870c:	01c0ff84 	movi	r7,1022
80098710:	28c6703a 	and	r3,r5,r3
80098714:	280ad7fa 	srli	r5,r5,31
80098718:	3980120e 	bge	r7,r6,80098764 <__fixdfsi+0x68>
8009871c:	00810744 	movi	r2,1053
80098720:	11800c16 	blt	r2,r6,80098754 <__fixdfsi+0x58>
80098724:	00810cc4 	movi	r2,1075
80098728:	1185c83a 	sub	r2,r2,r6
8009872c:	01c007c4 	movi	r7,31
80098730:	18c00434 	orhi	r3,r3,16
80098734:	38800d16 	blt	r7,r2,8009876c <__fixdfsi+0x70>
80098738:	31befb44 	addi	r6,r6,-1043
8009873c:	2084d83a 	srl	r2,r4,r2
80098740:	1986983a 	sll	r3,r3,r6
80098744:	1884b03a 	or	r2,r3,r2
80098748:	28000726 	beq	r5,zero,80098768 <__fixdfsi+0x6c>
8009874c:	0085c83a 	sub	r2,zero,r2
80098750:	f800283a 	ret
80098754:	00a00034 	movhi	r2,32768
80098758:	10bfffc4 	addi	r2,r2,-1
8009875c:	2885883a 	add	r2,r5,r2
80098760:	f800283a 	ret
80098764:	0005883a 	mov	r2,zero
80098768:	f800283a 	ret
8009876c:	008104c4 	movi	r2,1043
80098770:	1185c83a 	sub	r2,r2,r6
80098774:	1884d83a 	srl	r2,r3,r2
80098778:	003ff306 	br	80098748 <__fixdfsi+0x4c>

8009877c <__floatsidf>:
8009877c:	defffd04 	addi	sp,sp,-12
80098780:	dfc00215 	stw	ra,8(sp)
80098784:	dc400115 	stw	r17,4(sp)
80098788:	dc000015 	stw	r16,0(sp)
8009878c:	20002b26 	beq	r4,zero,8009883c <__floatsidf+0xc0>
80098790:	2023883a 	mov	r17,r4
80098794:	2020d7fa 	srli	r16,r4,31
80098798:	20002d16 	blt	r4,zero,80098850 <__floatsidf+0xd4>
8009879c:	8809883a 	mov	r4,r17
800987a0:	0098aa80 	call	80098aa8 <__clzsi2>
800987a4:	01410784 	movi	r5,1054
800987a8:	288bc83a 	sub	r5,r5,r2
800987ac:	01010cc4 	movi	r4,1075
800987b0:	2149c83a 	sub	r4,r4,r5
800987b4:	00c007c4 	movi	r3,31
800987b8:	1900160e 	bge	r3,r4,80098814 <__floatsidf+0x98>
800987bc:	00c104c4 	movi	r3,1043
800987c0:	1947c83a 	sub	r3,r3,r5
800987c4:	88c6983a 	sll	r3,r17,r3
800987c8:	00800434 	movhi	r2,16
800987cc:	10bfffc4 	addi	r2,r2,-1
800987d0:	1886703a 	and	r3,r3,r2
800987d4:	2941ffcc 	andi	r5,r5,2047
800987d8:	800d883a 	mov	r6,r16
800987dc:	0005883a 	mov	r2,zero
800987e0:	280a953a 	slli	r5,r5,20
800987e4:	31803fcc 	andi	r6,r6,255
800987e8:	01000434 	movhi	r4,16
800987ec:	300c97fa 	slli	r6,r6,31
800987f0:	213fffc4 	addi	r4,r4,-1
800987f4:	1906703a 	and	r3,r3,r4
800987f8:	1946b03a 	or	r3,r3,r5
800987fc:	1986b03a 	or	r3,r3,r6
80098800:	dfc00217 	ldw	ra,8(sp)
80098804:	dc400117 	ldw	r17,4(sp)
80098808:	dc000017 	ldw	r16,0(sp)
8009880c:	dec00304 	addi	sp,sp,12
80098810:	f800283a 	ret
80098814:	00c002c4 	movi	r3,11
80098818:	1887c83a 	sub	r3,r3,r2
8009881c:	88c6d83a 	srl	r3,r17,r3
80098820:	8904983a 	sll	r2,r17,r4
80098824:	01000434 	movhi	r4,16
80098828:	213fffc4 	addi	r4,r4,-1
8009882c:	2941ffcc 	andi	r5,r5,2047
80098830:	1906703a 	and	r3,r3,r4
80098834:	800d883a 	mov	r6,r16
80098838:	003fe906 	br	800987e0 <__floatsidf+0x64>
8009883c:	000d883a 	mov	r6,zero
80098840:	000b883a 	mov	r5,zero
80098844:	0007883a 	mov	r3,zero
80098848:	0005883a 	mov	r2,zero
8009884c:	003fe406 	br	800987e0 <__floatsidf+0x64>
80098850:	0123c83a 	sub	r17,zero,r4
80098854:	003fd106 	br	8009879c <__floatsidf+0x20>

80098858 <__floatunsidf>:
80098858:	defffe04 	addi	sp,sp,-8
8009885c:	dc000015 	stw	r16,0(sp)
80098860:	dfc00115 	stw	ra,4(sp)
80098864:	2021883a 	mov	r16,r4
80098868:	20002226 	beq	r4,zero,800988f4 <__floatunsidf+0x9c>
8009886c:	0098aa80 	call	80098aa8 <__clzsi2>
80098870:	01010784 	movi	r4,1054
80098874:	2089c83a 	sub	r4,r4,r2
80098878:	01810cc4 	movi	r6,1075
8009887c:	310dc83a 	sub	r6,r6,r4
80098880:	00c007c4 	movi	r3,31
80098884:	1980120e 	bge	r3,r6,800988d0 <__floatunsidf+0x78>
80098888:	00c104c4 	movi	r3,1043
8009888c:	1907c83a 	sub	r3,r3,r4
80098890:	80ca983a 	sll	r5,r16,r3
80098894:	00800434 	movhi	r2,16
80098898:	10bfffc4 	addi	r2,r2,-1
8009889c:	2101ffcc 	andi	r4,r4,2047
800988a0:	0021883a 	mov	r16,zero
800988a4:	288a703a 	and	r5,r5,r2
800988a8:	2008953a 	slli	r4,r4,20
800988ac:	00c00434 	movhi	r3,16
800988b0:	18ffffc4 	addi	r3,r3,-1
800988b4:	28c6703a 	and	r3,r5,r3
800988b8:	8005883a 	mov	r2,r16
800988bc:	1906b03a 	or	r3,r3,r4
800988c0:	dfc00117 	ldw	ra,4(sp)
800988c4:	dc000017 	ldw	r16,0(sp)
800988c8:	dec00204 	addi	sp,sp,8
800988cc:	f800283a 	ret
800988d0:	00c002c4 	movi	r3,11
800988d4:	188bc83a 	sub	r5,r3,r2
800988d8:	814ad83a 	srl	r5,r16,r5
800988dc:	00c00434 	movhi	r3,16
800988e0:	18ffffc4 	addi	r3,r3,-1
800988e4:	81a0983a 	sll	r16,r16,r6
800988e8:	2101ffcc 	andi	r4,r4,2047
800988ec:	28ca703a 	and	r5,r5,r3
800988f0:	003fed06 	br	800988a8 <__floatunsidf+0x50>
800988f4:	0009883a 	mov	r4,zero
800988f8:	000b883a 	mov	r5,zero
800988fc:	003fea06 	br	800988a8 <__floatunsidf+0x50>

80098900 <__truncdfsf2>:
80098900:	2810d53a 	srli	r8,r5,20
80098904:	01c00434 	movhi	r7,16
80098908:	39ffffc4 	addi	r7,r7,-1
8009890c:	29ce703a 	and	r7,r5,r7
80098910:	4201ffcc 	andi	r8,r8,2047
80098914:	380e90fa 	slli	r7,r7,3
80098918:	200cd77a 	srli	r6,r4,29
8009891c:	42400044 	addi	r9,r8,1
80098920:	4a41ffcc 	andi	r9,r9,2047
80098924:	00c00044 	movi	r3,1
80098928:	280ad7fa 	srli	r5,r5,31
8009892c:	31ceb03a 	or	r7,r6,r7
80098930:	200490fa 	slli	r2,r4,3
80098934:	1a40230e 	bge	r3,r9,800989c4 <__truncdfsf2+0xc4>
80098938:	40ff2004 	addi	r3,r8,-896
8009893c:	01803f84 	movi	r6,254
80098940:	30c01516 	blt	r6,r3,80098998 <__truncdfsf2+0x98>
80098944:	00c0380e 	bge	zero,r3,80098a28 <__truncdfsf2+0x128>
80098948:	200c91ba 	slli	r6,r4,6
8009894c:	380e90fa 	slli	r7,r7,3
80098950:	1004d77a 	srli	r2,r2,29
80098954:	300cc03a 	cmpne	r6,r6,zero
80098958:	31ccb03a 	or	r6,r6,r7
8009895c:	308cb03a 	or	r6,r6,r2
80098960:	308001cc 	andi	r2,r6,7
80098964:	10000426 	beq	r2,zero,80098978 <__truncdfsf2+0x78>
80098968:	308003cc 	andi	r2,r6,15
8009896c:	01000104 	movi	r4,4
80098970:	11000126 	beq	r2,r4,80098978 <__truncdfsf2+0x78>
80098974:	31800104 	addi	r6,r6,4
80098978:	3081002c 	andhi	r2,r6,1024
8009897c:	10001626 	beq	r2,zero,800989d8 <__truncdfsf2+0xd8>
80098980:	18c00044 	addi	r3,r3,1
80098984:	00803fc4 	movi	r2,255
80098988:	18800326 	beq	r3,r2,80098998 <__truncdfsf2+0x98>
8009898c:	300c91ba 	slli	r6,r6,6
80098990:	300cd27a 	srli	r6,r6,9
80098994:	00000206 	br	800989a0 <__truncdfsf2+0xa0>
80098998:	00ffffc4 	movi	r3,-1
8009899c:	000d883a 	mov	r6,zero
800989a0:	18c03fcc 	andi	r3,r3,255
800989a4:	180895fa 	slli	r4,r3,23
800989a8:	00c02034 	movhi	r3,128
800989ac:	280a97fa 	slli	r5,r5,31
800989b0:	18ffffc4 	addi	r3,r3,-1
800989b4:	30c6703a 	and	r3,r6,r3
800989b8:	1906b03a 	or	r3,r3,r4
800989bc:	1944b03a 	or	r2,r3,r5
800989c0:	f800283a 	ret
800989c4:	40000b1e 	bne	r8,zero,800989f4 <__truncdfsf2+0xf4>
800989c8:	388cb03a 	or	r6,r7,r2
800989cc:	0007883a 	mov	r3,zero
800989d0:	30000426 	beq	r6,zero,800989e4 <__truncdfsf2+0xe4>
800989d4:	01800144 	movi	r6,5
800989d8:	00803fc4 	movi	r2,255
800989dc:	300cd0fa 	srli	r6,r6,3
800989e0:	18800a26 	beq	r3,r2,80098a0c <__truncdfsf2+0x10c>
800989e4:	00802034 	movhi	r2,128
800989e8:	10bfffc4 	addi	r2,r2,-1
800989ec:	308c703a 	and	r6,r6,r2
800989f0:	003feb06 	br	800989a0 <__truncdfsf2+0xa0>
800989f4:	3888b03a 	or	r4,r7,r2
800989f8:	203fe726 	beq	r4,zero,80098998 <__truncdfsf2+0x98>
800989fc:	380c90fa 	slli	r6,r7,3
80098a00:	00c03fc4 	movi	r3,255
80098a04:	31808034 	orhi	r6,r6,512
80098a08:	003fd506 	br	80098960 <__truncdfsf2+0x60>
80098a0c:	303fe226 	beq	r6,zero,80098998 <__truncdfsf2+0x98>
80098a10:	00802034 	movhi	r2,128
80098a14:	31801034 	orhi	r6,r6,64
80098a18:	10bfffc4 	addi	r2,r2,-1
80098a1c:	00ffffc4 	movi	r3,-1
80098a20:	308c703a 	and	r6,r6,r2
80098a24:	003fde06 	br	800989a0 <__truncdfsf2+0xa0>
80098a28:	013ffa44 	movi	r4,-23
80098a2c:	19000e16 	blt	r3,r4,80098a68 <__truncdfsf2+0x168>
80098a30:	01000784 	movi	r4,30
80098a34:	20c9c83a 	sub	r4,r4,r3
80098a38:	018007c4 	movi	r6,31
80098a3c:	39c02034 	orhi	r7,r7,128
80098a40:	31000b16 	blt	r6,r4,80098a70 <__truncdfsf2+0x170>
80098a44:	423f2084 	addi	r8,r8,-894
80098a48:	120c983a 	sll	r6,r2,r8
80098a4c:	3a0e983a 	sll	r7,r7,r8
80098a50:	1104d83a 	srl	r2,r2,r4
80098a54:	300cc03a 	cmpne	r6,r6,zero
80098a58:	31ceb03a 	or	r7,r6,r7
80098a5c:	388cb03a 	or	r6,r7,r2
80098a60:	0007883a 	mov	r3,zero
80098a64:	003fbe06 	br	80098960 <__truncdfsf2+0x60>
80098a68:	0007883a 	mov	r3,zero
80098a6c:	003fd906 	br	800989d4 <__truncdfsf2+0xd4>
80098a70:	01bfff84 	movi	r6,-2
80098a74:	30cdc83a 	sub	r6,r6,r3
80098a78:	00c00804 	movi	r3,32
80098a7c:	398cd83a 	srl	r6,r7,r6
80098a80:	20c00726 	beq	r4,r3,80098aa0 <__truncdfsf2+0x1a0>
80098a84:	423f2884 	addi	r8,r8,-862
80098a88:	3a0e983a 	sll	r7,r7,r8
80098a8c:	3884b03a 	or	r2,r7,r2
80098a90:	1004c03a 	cmpne	r2,r2,zero
80098a94:	118cb03a 	or	r6,r2,r6
80098a98:	0007883a 	mov	r3,zero
80098a9c:	003fb006 	br	80098960 <__truncdfsf2+0x60>
80098aa0:	000f883a 	mov	r7,zero
80098aa4:	003ff906 	br	80098a8c <__truncdfsf2+0x18c>

80098aa8 <__clzsi2>:
80098aa8:	00bfffd4 	movui	r2,65535
80098aac:	11000536 	bltu	r2,r4,80098ac4 <__clzsi2+0x1c>
80098ab0:	00803fc4 	movi	r2,255
80098ab4:	11000f36 	bltu	r2,r4,80098af4 <__clzsi2+0x4c>
80098ab8:	00800804 	movi	r2,32
80098abc:	0007883a 	mov	r3,zero
80098ac0:	00000506 	br	80098ad8 <__clzsi2+0x30>
80098ac4:	00804034 	movhi	r2,256
80098ac8:	10bfffc4 	addi	r2,r2,-1
80098acc:	11000c2e 	bgeu	r2,r4,80098b00 <__clzsi2+0x58>
80098ad0:	00800204 	movi	r2,8
80098ad4:	00c00604 	movi	r3,24
80098ad8:	20c8d83a 	srl	r4,r4,r3
80098adc:	00e002b4 	movhi	r3,32778
80098ae0:	18f23c84 	addi	r3,r3,-14094
80098ae4:	1909883a 	add	r4,r3,r4
80098ae8:	20c00003 	ldbu	r3,0(r4)
80098aec:	10c5c83a 	sub	r2,r2,r3
80098af0:	f800283a 	ret
80098af4:	00800604 	movi	r2,24
80098af8:	00c00204 	movi	r3,8
80098afc:	003ff606 	br	80098ad8 <__clzsi2+0x30>
80098b00:	00800404 	movi	r2,16
80098b04:	1007883a 	mov	r3,r2
80098b08:	003ff306 	br	80098ad8 <__clzsi2+0x30>

80098b0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
80098b0c:	defffd04 	addi	sp,sp,-12
80098b10:	dfc00215 	stw	ra,8(sp)
80098b14:	dc400115 	stw	r17,4(sp)
80098b18:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
80098b1c:	20001f16 	blt	r4,zero,80098b9c <close+0x90>
80098b20:	20c00324 	muli	r3,r4,12
80098b24:	00a002b4 	movhi	r2,32778
80098b28:	10b56004 	addi	r2,r2,-10880
80098b2c:	1885883a 	add	r2,r3,r2
80098b30:	2021883a 	mov	r16,r4

  if (fd)
80098b34:	10001926 	beq	r2,zero,80098b9c <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
80098b38:	10c00017 	ldw	r3,0(r2)
80098b3c:	18c00417 	ldw	r3,16(r3)
80098b40:	18000c26 	beq	r3,zero,80098b74 <close+0x68>
80098b44:	1009883a 	mov	r4,r2
80098b48:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
80098b4c:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
80098b50:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
80098b54:	0098fa80 	call	80098fa8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
80098b58:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
80098b5c:	88000816 	blt	r17,zero,80098b80 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
80098b60:	dfc00217 	ldw	ra,8(sp)
80098b64:	dc400117 	ldw	r17,4(sp)
80098b68:	dc000017 	ldw	r16,0(sp)
80098b6c:	dec00304 	addi	sp,sp,12
80098b70:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
80098b74:	0098fa80 	call	80098fa8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
80098b78:	0005883a 	mov	r2,zero
80098b7c:	003ff806 	br	80098b60 <close+0x54>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
80098b80:	d0a00d17 	ldw	r2,-32716(gp)
80098b84:	10000c26 	beq	r2,zero,80098bb8 <close+0xac>
80098b88:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
80098b8c:	0463c83a 	sub	r17,zero,r17
80098b90:	14400015 	stw	r17,0(r2)
      return -1;
80098b94:	00bfffc4 	movi	r2,-1
80098b98:	003ff106 	br	80098b60 <close+0x54>
80098b9c:	d0a00d17 	ldw	r2,-32716(gp)
80098ba0:	10000726 	beq	r2,zero,80098bc0 <close+0xb4>
80098ba4:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
80098ba8:	00c01444 	movi	r3,81
80098bac:	10c00015 	stw	r3,0(r2)
    return -1;
80098bb0:	00bfffc4 	movi	r2,-1
80098bb4:	003fea06 	br	80098b60 <close+0x54>
80098bb8:	d0a76c04 	addi	r2,gp,-25168
80098bbc:	003ff306 	br	80098b8c <close+0x80>
80098bc0:	d0a76c04 	addi	r2,gp,-25168
80098bc4:	003ff806 	br	80098ba8 <close+0x9c>

80098bc8 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
80098bc8:	3005883a 	mov	r2,r6
80098bcc:	f800283a 	ret

80098bd0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
80098bd0:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
80098bd4:	d1600e04 	addi	r5,gp,-32712
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
80098bd8:	dc000015 	stw	r16,0(sp)
80098bdc:	dfc00115 	stw	ra,4(sp)
80098be0:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
80098be4:	009ac800 	call	8009ac80 <alt_find_dev>

  if ((dev) && dev->open)
80098be8:	10000826 	beq	r2,zero,80098c0c <alt_flash_open_dev+0x3c>
80098bec:	10c00317 	ldw	r3,12(r2)
80098bf0:	18000726 	beq	r3,zero,80098c10 <alt_flash_open_dev+0x40>
  {
    return dev->open(dev, name);
80098bf4:	800b883a 	mov	r5,r16
80098bf8:	1009883a 	mov	r4,r2
  }

  return dev;
}
80098bfc:	dfc00117 	ldw	ra,4(sp)
80098c00:	dc000017 	ldw	r16,0(sp)
80098c04:	dec00204 	addi	sp,sp,8
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
  {
    return dev->open(dev, name);
80098c08:	1800683a 	jmp	r3
80098c0c:	0005883a 	mov	r2,zero
  }

  return dev;
}
80098c10:	dfc00117 	ldw	ra,4(sp)
80098c14:	dc000017 	ldw	r16,0(sp)
80098c18:	dec00204 	addi	sp,sp,8
80098c1c:	f800283a 	ret

80098c20 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
80098c20:	20000326 	beq	r4,zero,80098c30 <alt_flash_close_dev+0x10>
80098c24:	20800417 	ldw	r2,16(r4)
80098c28:	10000126 	beq	r2,zero,80098c30 <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
80098c2c:	1000683a 	jmp	r2
80098c30:	f800283a 	ret

80098c34 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80098c34:	20000d16 	blt	r4,zero,80098c6c <fstat+0x38>
80098c38:	21000324 	muli	r4,r4,12
80098c3c:	00a002b4 	movhi	r2,32778
80098c40:	10b56004 	addi	r2,r2,-10880
80098c44:	2089883a 	add	r4,r4,r2
  
  if (fd)
80098c48:	20000826 	beq	r4,zero,80098c6c <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
80098c4c:	20800017 	ldw	r2,0(r4)
80098c50:	10800817 	ldw	r2,32(r2)
80098c54:	10000126 	beq	r2,zero,80098c5c <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
80098c58:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
80098c5c:	00880004 	movi	r2,8192
80098c60:	28800115 	stw	r2,4(r5)
      return 0;
80098c64:	0005883a 	mov	r2,zero
80098c68:	f800283a 	ret
80098c6c:	d0a00d17 	ldw	r2,-32716(gp)
80098c70:	10000926 	beq	r2,zero,80098c98 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
80098c74:	deffff04 	addi	sp,sp,-4
80098c78:	dfc00015 	stw	ra,0(sp)
80098c7c:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80098c80:	00c01444 	movi	r3,81
80098c84:	10c00015 	stw	r3,0(r2)
    return -1;
80098c88:	00bfffc4 	movi	r2,-1
  }
}
80098c8c:	dfc00017 	ldw	ra,0(sp)
80098c90:	dec00104 	addi	sp,sp,4
80098c94:	f800283a 	ret
80098c98:	d0a76c04 	addi	r2,gp,-25168
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80098c9c:	00c01444 	movi	r3,81
80098ca0:	10c00015 	stw	r3,0(r2)
    return -1;
80098ca4:	00bfffc4 	movi	r2,-1
  }
}
80098ca8:	f800283a 	ret

80098cac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
80098cac:	defff004 	addi	sp,sp,-64
80098cb0:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80098cb4:	20001316 	blt	r4,zero,80098d04 <isatty+0x58>
80098cb8:	20800324 	muli	r2,r4,12
80098cbc:	00e002b4 	movhi	r3,32778
80098cc0:	18f56004 	addi	r3,r3,-10880
80098cc4:	10c5883a 	add	r2,r2,r3
  
  if (fd)
80098cc8:	10000e26 	beq	r2,zero,80098d04 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
80098ccc:	10800017 	ldw	r2,0(r2)
80098cd0:	10800817 	ldw	r2,32(r2)
80098cd4:	10000726 	beq	r2,zero,80098cf4 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
80098cd8:	d80b883a 	mov	r5,sp
80098cdc:	0098c340 	call	80098c34 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
80098ce0:	d8800117 	ldw	r2,4(sp)
80098ce4:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
80098ce8:	dfc00f17 	ldw	ra,60(sp)
80098cec:	dec01004 	addi	sp,sp,64
80098cf0:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
80098cf4:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
80098cf8:	dfc00f17 	ldw	ra,60(sp)
80098cfc:	dec01004 	addi	sp,sp,64
80098d00:	f800283a 	ret
80098d04:	d0a00d17 	ldw	r2,-32716(gp)
80098d08:	10000726 	beq	r2,zero,80098d28 <isatty+0x7c>
80098d0c:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80098d10:	00c01444 	movi	r3,81
80098d14:	10c00015 	stw	r3,0(r2)
    return 0;
80098d18:	0005883a 	mov	r2,zero
  }
}
80098d1c:	dfc00f17 	ldw	ra,60(sp)
80098d20:	dec01004 	addi	sp,sp,64
80098d24:	f800283a 	ret
80098d28:	d0a76c04 	addi	r2,gp,-25168
80098d2c:	003ff806 	br	80098d10 <isatty+0x64>

80098d30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
80098d30:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
80098d34:	012002b4 	movhi	r4,32778
80098d38:	016002b4 	movhi	r5,32778
80098d3c:	dfc00015 	stw	ra,0(sp)
80098d40:	21333704 	addi	r4,r4,-13092
80098d44:	297a8804 	addi	r5,r5,-5600
80098d48:	21400a26 	beq	r4,r5,80098d74 <alt_load+0x44>
  {
    while( to != end )
80098d4c:	00a002b4 	movhi	r2,32778
80098d50:	10ba8804 	addi	r2,r2,-5600
80098d54:	20800726 	beq	r4,r2,80098d74 <alt_load+0x44>
    {
      *to++ = *from++;
80098d58:	21800104 	addi	r6,r4,4
80098d5c:	118dc83a 	sub	r6,r2,r6
80098d60:	300cd0ba 	srli	r6,r6,2
80098d64:	31800044 	addi	r6,r6,1
80098d68:	318d883a 	add	r6,r6,r6
80098d6c:	318d883a 	add	r6,r6,r6
80098d70:	0082cec0 	call	80082cec <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
80098d74:	01200234 	movhi	r4,32776
80098d78:	01600234 	movhi	r5,32776
80098d7c:	21000804 	addi	r4,r4,32
80098d80:	29400804 	addi	r5,r5,32
80098d84:	21400a26 	beq	r4,r5,80098db0 <alt_load+0x80>
  {
    while( to != end )
80098d88:	00a00234 	movhi	r2,32776
80098d8c:	10806304 	addi	r2,r2,396
80098d90:	20800726 	beq	r4,r2,80098db0 <alt_load+0x80>
    {
      *to++ = *from++;
80098d94:	21800104 	addi	r6,r4,4
80098d98:	118dc83a 	sub	r6,r2,r6
80098d9c:	300cd0ba 	srli	r6,r6,2
80098da0:	31800044 	addi	r6,r6,1
80098da4:	318d883a 	add	r6,r6,r6
80098da8:	318d883a 	add	r6,r6,r6
80098dac:	0082cec0 	call	80082cec <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
80098db0:	012002b4 	movhi	r4,32778
80098db4:	016002b4 	movhi	r5,32778
80098db8:	212df904 	addi	r4,r4,-18460
80098dbc:	296df904 	addi	r5,r5,-18460
80098dc0:	21400a26 	beq	r4,r5,80098dec <alt_load+0xbc>
  {
    while( to != end )
80098dc4:	00a002b4 	movhi	r2,32778
80098dc8:	10b33704 	addi	r2,r2,-13092
80098dcc:	20800726 	beq	r4,r2,80098dec <alt_load+0xbc>
    {
      *to++ = *from++;
80098dd0:	21800104 	addi	r6,r4,4
80098dd4:	118dc83a 	sub	r6,r2,r6
80098dd8:	300cd0ba 	srli	r6,r6,2
80098ddc:	31800044 	addi	r6,r6,1
80098de0:	318d883a 	add	r6,r6,r6
80098de4:	318d883a 	add	r6,r6,r6
80098de8:	0082cec0 	call	80082cec <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
80098dec:	009ab340 	call	8009ab34 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
80098df0:	dfc00017 	ldw	ra,0(sp)
80098df4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
80098df8:	009acf81 	jmpi	8009acf8 <alt_icache_flush_all>

80098dfc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
80098dfc:	defffe04 	addi	sp,sp,-8
80098e00:	dfc00115 	stw	ra,4(sp)
80098e04:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80098e08:	20000e16 	blt	r4,zero,80098e44 <lseek+0x48>
80098e0c:	21000324 	muli	r4,r4,12
80098e10:	00a002b4 	movhi	r2,32778
80098e14:	10b56004 	addi	r2,r2,-10880
80098e18:	2089883a 	add	r4,r4,r2
  
  if (fd) 
80098e1c:	20000926 	beq	r4,zero,80098e44 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
80098e20:	20800017 	ldw	r2,0(r4)
80098e24:	10800717 	ldw	r2,28(r2)
80098e28:	10000d26 	beq	r2,zero,80098e60 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
80098e2c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
80098e30:	10000f16 	blt	r2,zero,80098e70 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
80098e34:	dfc00117 	ldw	ra,4(sp)
80098e38:	dc000017 	ldw	r16,0(sp)
80098e3c:	dec00204 	addi	sp,sp,8
80098e40:	f800283a 	ret
80098e44:	04001444 	movi	r16,81
80098e48:	d0a00d17 	ldw	r2,-32716(gp)
80098e4c:	10000626 	beq	r2,zero,80098e68 <lseek+0x6c>
80098e50:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
80098e54:	14000015 	stw	r16,0(r2)
    rc = -1;
80098e58:	00bfffc4 	movi	r2,-1
  }

  return rc;
80098e5c:	003ff506 	br	80098e34 <lseek+0x38>
80098e60:	04002184 	movi	r16,134
80098e64:	003ff806 	br	80098e48 <lseek+0x4c>
80098e68:	d0a76c04 	addi	r2,gp,-25168
80098e6c:	003ff906 	br	80098e54 <lseek+0x58>
80098e70:	00a1c83a 	sub	r16,zero,r2
80098e74:	003ff406 	br	80098e48 <lseek+0x4c>

80098e78 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80098e78:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
80098e7c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80098e80:	dfc00115 	stw	ra,4(sp)
80098e84:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
80098e88:	00990dc0 	call	800990dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
80098e8c:	00990fc0 	call	800990fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
80098e90:	01a002b4 	movhi	r6,32778
80098e94:	31b28004 	addi	r6,r6,-13824
80098e98:	300b883a 	mov	r5,r6
80098e9c:	3009883a 	mov	r4,r6
80098ea0:	009adf80 	call	8009adf8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
80098ea4:	009abb80 	call	8009abb8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
80098ea8:	012002b4 	movhi	r4,32778
80098eac:	212b0704 	addi	r4,r4,-21476
80098eb0:	009b4ec0 	call	8009b4ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
80098eb4:	d1a77017 	ldw	r6,-25152(gp)
80098eb8:	d1677117 	ldw	r5,-25148(gp)
80098ebc:	d1277217 	ldw	r4,-25144(gp)
80098ec0:	00821400 	call	80082140 <main>
  close(STDOUT_FILENO);
80098ec4:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
80098ec8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
80098ecc:	0098b0c0 	call	80098b0c <close>
  exit (result);
80098ed0:	8009883a 	mov	r4,r16
80098ed4:	009b5000 	call	8009b500 <exit>

80098ed8 <__malloc_lock>:
80098ed8:	f800283a 	ret

80098edc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80098edc:	f800283a 	ret

80098ee0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80098ee0:	defffe04 	addi	sp,sp,-8
80098ee4:	dfc00115 	stw	ra,4(sp)
80098ee8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80098eec:	20002116 	blt	r4,zero,80098f74 <read+0x94>
80098ef0:	21000324 	muli	r4,r4,12
80098ef4:	00a002b4 	movhi	r2,32778
80098ef8:	10b56004 	addi	r2,r2,-10880
80098efc:	2089883a 	add	r4,r4,r2
  
  if (fd)
80098f00:	20001c26 	beq	r4,zero,80098f74 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80098f04:	20800217 	ldw	r2,8(r4)
80098f08:	00c00044 	movi	r3,1
80098f0c:	108000cc 	andi	r2,r2,3
80098f10:	10c00a26 	beq	r2,r3,80098f3c <read+0x5c>
        (fd->dev->read))
80098f14:	20800017 	ldw	r2,0(r4)
80098f18:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80098f1c:	10000726 	beq	r2,zero,80098f3c <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
80098f20:	103ee83a 	callr	r2
80098f24:	1021883a 	mov	r16,r2
80098f28:	10000b16 	blt	r2,zero,80098f58 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
80098f2c:	dfc00117 	ldw	ra,4(sp)
80098f30:	dc000017 	ldw	r16,0(sp)
80098f34:	dec00204 	addi	sp,sp,8
80098f38:	f800283a 	ret
80098f3c:	d0a00d17 	ldw	r2,-32716(gp)
80098f40:	10001326 	beq	r2,zero,80098f90 <read+0xb0>
80098f44:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
80098f48:	00c00344 	movi	r3,13
80098f4c:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
80098f50:	00bfffc4 	movi	r2,-1
80098f54:	003ff506 	br	80098f2c <read+0x4c>
80098f58:	d0a00d17 	ldw	r2,-32716(gp)
80098f5c:	10000e26 	beq	r2,zero,80098f98 <read+0xb8>
80098f60:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
80098f64:	0421c83a 	sub	r16,zero,r16
80098f68:	14000015 	stw	r16,0(r2)
          return -1;
80098f6c:	00bfffc4 	movi	r2,-1
80098f70:	003fee06 	br	80098f2c <read+0x4c>
80098f74:	d0a00d17 	ldw	r2,-32716(gp)
80098f78:	10000926 	beq	r2,zero,80098fa0 <read+0xc0>
80098f7c:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
80098f80:	00c01444 	movi	r3,81
80098f84:	10c00015 	stw	r3,0(r2)
  }
  return -1;
80098f88:	00bfffc4 	movi	r2,-1
80098f8c:	003fe706 	br	80098f2c <read+0x4c>
80098f90:	d0a76c04 	addi	r2,gp,-25168
80098f94:	003fec06 	br	80098f48 <read+0x68>
80098f98:	d0a76c04 	addi	r2,gp,-25168
80098f9c:	003ff106 	br	80098f64 <read+0x84>
80098fa0:	d0a76c04 	addi	r2,gp,-25168
80098fa4:	003ff606 	br	80098f80 <read+0xa0>

80098fa8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
80098fa8:	00800084 	movi	r2,2
80098fac:	1100060e 	bge	r2,r4,80098fc8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
80098fb0:	21000324 	muli	r4,r4,12
80098fb4:	00a002b4 	movhi	r2,32778
80098fb8:	10b56004 	addi	r2,r2,-10880
80098fbc:	1109883a 	add	r4,r2,r4
80098fc0:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
80098fc4:	20000015 	stw	zero,0(r4)
80098fc8:	f800283a 	ret

80098fcc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80098fcc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80098fd0:	00bfff84 	movi	r2,-2
80098fd4:	2884703a 	and	r2,r5,r2
80098fd8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80098fdc:	d0a01017 	ldw	r2,-32704(gp)
80098fe0:	00ffff04 	movi	r3,-4
80098fe4:	108000c4 	addi	r2,r2,3
80098fe8:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80098fec:	00e00434 	movhi	r3,32784
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80098ff0:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80098ff4:	1109883a 	add	r4,r2,r4
80098ff8:	18f40004 	addi	r3,r3,-12288
80098ffc:	19000336 	bltu	r3,r4,8009900c <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
80099000:	d1201015 	stw	r4,-32704(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80099004:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
80099008:	f800283a 	ret
8009900c:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
80099010:	00bfffc4 	movi	r2,-1
80099014:	f800283a 	ret

80099018 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80099018:	defffe04 	addi	sp,sp,-8
8009901c:	dfc00115 	stw	ra,4(sp)
80099020:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80099024:	20002216 	blt	r4,zero,800990b0 <write+0x98>
80099028:	21000324 	muli	r4,r4,12
8009902c:	00a002b4 	movhi	r2,32778
80099030:	10b56004 	addi	r2,r2,-10880
80099034:	2089883a 	add	r4,r4,r2
  
  if (fd)
80099038:	20001d26 	beq	r4,zero,800990b0 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8009903c:	20800217 	ldw	r2,8(r4)
80099040:	108000cc 	andi	r2,r2,3
80099044:	10000a26 	beq	r2,zero,80099070 <write+0x58>
80099048:	20800017 	ldw	r2,0(r4)
8009904c:	10800617 	ldw	r2,24(r2)
80099050:	10000726 	beq	r2,zero,80099070 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
80099054:	103ee83a 	callr	r2
80099058:	1021883a 	mov	r16,r2
8009905c:	10000d16 	blt	r2,zero,80099094 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
80099060:	dfc00117 	ldw	ra,4(sp)
80099064:	dc000017 	ldw	r16,0(sp)
80099068:	dec00204 	addi	sp,sp,8
8009906c:	f800283a 	ret
80099070:	d0a00d17 	ldw	r2,-32716(gp)
80099074:	10000526 	beq	r2,zero,8009908c <write+0x74>
80099078:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
8009907c:	00c00344 	movi	r3,13
80099080:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
80099084:	00bfffc4 	movi	r2,-1
80099088:	003ff506 	br	80099060 <write+0x48>
8009908c:	d0a76c04 	addi	r2,gp,-25168
80099090:	003ffa06 	br	8009907c <write+0x64>
80099094:	d0a00d17 	ldw	r2,-32716(gp)
80099098:	10000c26 	beq	r2,zero,800990cc <write+0xb4>
8009909c:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
800990a0:	0421c83a 	sub	r16,zero,r16
800990a4:	14000015 	stw	r16,0(r2)
        return -1;
800990a8:	00bfffc4 	movi	r2,-1
800990ac:	003fec06 	br	80099060 <write+0x48>
800990b0:	d0a00d17 	ldw	r2,-32716(gp)
800990b4:	10000726 	beq	r2,zero,800990d4 <write+0xbc>
800990b8:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
800990bc:	00c01444 	movi	r3,81
800990c0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
800990c4:	00bfffc4 	movi	r2,-1
800990c8:	003fe506 	br	80099060 <write+0x48>
800990cc:	d0a76c04 	addi	r2,gp,-25168
800990d0:	003ff306 	br	800990a0 <write+0x88>
800990d4:	d0a76c04 	addi	r2,gp,-25168
800990d8:	003ff806 	br	800990bc <write+0xa4>

800990dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
800990dc:	deffff04 	addi	sp,sp,-4
800990e0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU, nios_cpu);
800990e4:	009b3240 	call	8009b324 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
800990e8:	00800044 	movi	r2,1
800990ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
800990f0:	dfc00017 	ldw	ra,0(sp)
800990f4:	dec00104 	addi	sp,sp,4
800990f8:	f800283a 	ret

800990fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
800990fc:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
80099100:	01200434 	movhi	r4,32784
80099104:	01c0fa04 	movi	r7,1000
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80099108:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
8009910c:	21040004 	addi	r4,r4,4096
80099110:	018001c4 	movi	r6,7
80099114:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
80099118:	042002b4 	movhi	r16,32778
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8009911c:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
80099120:	84366404 	addi	r16,r16,-9840
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
80099124:	00997c00 	call	800997c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
80099128:	01800184 	movi	r6,6
8009912c:	8009883a 	mov	r4,r16
80099130:	000b883a 	mov	r5,zero
80099134:	00993580 	call	80099358 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
80099138:	813ff604 	addi	r4,r16,-40
8009913c:	d1600904 	addi	r5,gp,-32732
80099140:	009ab4c0 	call	8009ab4c <alt_dev_llist_insert>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_1_DMA, dma_fifo_subsystem_1_dma);
80099144:	012002b4 	movhi	r4,32778
80099148:	21364204 	addi	r4,r4,-9976
8009914c:	21800817 	ldw	r6,32(r4)
80099150:	21400717 	ldw	r5,28(r4)
80099154:	009a2600 	call	8009a260 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_2_DMA, dma_fifo_subsystem_2_dma);
80099158:	012002b4 	movhi	r4,32778
8009915c:	21362a04 	addi	r4,r4,-10072
80099160:	21800817 	ldw	r6,32(r4)
80099164:	21400717 	ldw	r5,28(r4)
80099168:	009a2600 	call	8009a260 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_3_DMA, dma_fifo_subsystem_3_dma);
8009916c:	012002b4 	movhi	r4,32778
80099170:	21361204 	addi	r4,r4,-10168
80099174:	21800817 	ldw	r6,32(r4)
80099178:	21400717 	ldw	r5,28(r4)
8009917c:	009a2600 	call	8009a260 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_4_DMA, dma_fifo_subsystem_4_dma);
80099180:	012002b4 	movhi	r4,32778
80099184:	2135fa04 	addi	r4,r4,-10264
80099188:	21800817 	ldw	r6,32(r4)
8009918c:	21400717 	ldw	r5,28(r4)
80099190:	009a2600 	call	8009a260 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUSBYSTEM_DMA, dma_fifo_susbystem_dma);
80099194:	012002b4 	movhi	r4,32778
80099198:	2135e204 	addi	r4,r4,-10360
8009919c:	21800817 	ldw	r6,32(r4)
800991a0:	21400717 	ldw	r5,28(r4)
800991a4:	009a2600 	call	8009a260 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( FROM_ETH_TO_DDR_ETH_DMA, from_ETH_to_DDR_ETH_DMA);
800991a8:	012002b4 	movhi	r4,32778
800991ac:	2135ca04 	addi	r4,r4,-10456
800991b0:	21800817 	ldw	r6,32(r4)
800991b4:	21400717 	ldw	r5,28(r4)
}
800991b8:	dfc00117 	ldw	ra,4(sp)
800991bc:	dc000017 	ldw	r16,0(sp)
800991c0:	dec00204 	addi	sp,sp,8
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_1_DMA, dma_fifo_subsystem_1_dma);
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_2_DMA, dma_fifo_subsystem_2_dma);
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_3_DMA, dma_fifo_subsystem_3_dma);
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUBSYSTEM_4_DMA, dma_fifo_subsystem_4_dma);
    ALTERA_MSGDMA_INIT ( DMA_FIFO_SUSBYSTEM_DMA, dma_fifo_susbystem_dma);
    ALTERA_MSGDMA_INIT ( FROM_ETH_TO_DDR_ETH_DMA, from_ETH_to_DDR_ETH_DMA);
800991c4:	009a2601 	jmpi	8009a260 <alt_msgdma_init>

800991c8 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
800991c8:	20800017 	ldw	r2,0(r4)
800991cc:	21c00217 	ldw	r7,8(r4)
800991d0:	11000a04 	addi	r4,r2,40
800991d4:	00994901 	jmpi	80099490 <altera_avalon_jtag_uart_read>

800991d8 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
800991d8:	20800017 	ldw	r2,0(r4)
800991dc:	21c00217 	ldw	r7,8(r4)
800991e0:	11000a04 	addi	r4,r2,40
800991e4:	00995e41 	jmpi	800995e4 <altera_avalon_jtag_uart_write>

800991e8 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
800991e8:	20800017 	ldw	r2,0(r4)
800991ec:	21400217 	ldw	r5,8(r4)
800991f0:	11000a04 	addi	r4,r2,40
800991f4:	00993d01 	jmpi	800993d0 <altera_avalon_jtag_uart_close>

800991f8 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
800991f8:	21000017 	ldw	r4,0(r4)
800991fc:	21000a04 	addi	r4,r4,40
80099200:	009941c1 	jmpi	8009941c <altera_avalon_jtag_uart_ioctl>

80099204 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
80099204:	20800017 	ldw	r2,0(r4)
80099208:	10800104 	addi	r2,r2,4
8009920c:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
80099210:	18c1000c 	andi	r3,r3,1024
80099214:	1800081e 	bne	r3,zero,80099238 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
80099218:	20800917 	ldw	r2,36(r4)
8009921c:	00e00034 	movhi	r3,32768
80099220:	18ffff04 	addi	r3,r3,-4
80099224:	18800236 	bltu	r3,r2,80099230 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
80099228:	10800044 	addi	r2,r2,1
8009922c:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
80099230:	d0a77517 	ldw	r2,-25132(gp)
80099234:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80099238:	20c00817 	ldw	r3,32(r4)
8009923c:	18c10014 	ori	r3,r3,1024
80099240:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
80099244:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
80099248:	d0a77517 	ldw	r2,-25132(gp)
8009924c:	f800283a 	ret

80099250 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
80099250:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099254:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80099258:	02bfff44 	movi	r10,-3
8009925c:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80099260:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80099264:	3880c00c 	andi	r2,r7,768
80099268:	10003426 	beq	r2,zero,8009933c <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8009926c:	3880400c 	andi	r2,r7,256
80099270:	10001726 	beq	r2,zero,800992d0 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80099274:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
80099278:	20c00b17 	ldw	r3,44(r4)
8009927c:	10800044 	addi	r2,r2,1
80099280:	1081ffcc 	andi	r2,r2,2047
80099284:	18800d1e 	bne	r3,r2,800992bc <altera_avalon_jtag_uart_irq+0x6c>
80099288:	00002d06 	br	80099340 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8009928c:	20800a17 	ldw	r2,40(r4)
80099290:	2085883a 	add	r2,r4,r2
80099294:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80099298:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
8009929c:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800992a0:	10800044 	addi	r2,r2,1
800992a4:	1081ffcc 	andi	r2,r2,2047
800992a8:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800992ac:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
800992b0:	10800044 	addi	r2,r2,1
800992b4:	1081ffcc 	andi	r2,r2,2047
800992b8:	11400326 	beq	r2,r5,800992c8 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
800992bc:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
800992c0:	18a0000c 	andi	r2,r3,32768
800992c4:	103ff11e 	bne	r2,zero,8009928c <altera_avalon_jtag_uart_irq+0x3c>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
800992c8:	18ffffec 	andhi	r3,r3,65535
800992cc:	18001c1e 	bne	r3,zero,80099340 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
800992d0:	3880800c 	andi	r2,r7,512
800992d4:	103fe226 	beq	r2,zero,80099260 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
800992d8:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
800992dc:	38000b1e 	bne	r7,zero,8009930c <altera_avalon_jtag_uart_irq+0xbc>
800992e0:	003fdf06 	br	80099260 <altera_avalon_jtag_uart_irq+0x10>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
800992e4:	20800d17 	ldw	r2,52(r4)
800992e8:	2085883a 	add	r2,r4,r2
800992ec:	10820e07 	ldb	r2,2104(r2)
800992f0:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800992f4:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
800992f8:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800992fc:	10800044 	addi	r2,r2,1
80099300:	1081ffcc 	andi	r2,r2,2047
80099304:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
80099308:	383fd526 	beq	r7,zero,80099260 <altera_avalon_jtag_uart_irq+0x10>
8009930c:	20c00d17 	ldw	r3,52(r4)
80099310:	20800c17 	ldw	r2,48(r4)
80099314:	18bff31e 	bne	r3,r2,800992e4 <altera_avalon_jtag_uart_irq+0x94>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80099318:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8009931c:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80099320:	1284703a 	and	r2,r2,r10
80099324:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80099328:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8009932c:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80099330:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80099334:	3880c00c 	andi	r2,r7,768
80099338:	103fcc1e 	bne	r2,zero,8009926c <altera_avalon_jtag_uart_irq+0x1c>
8009933c:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099340:	20800817 	ldw	r2,32(r4)
80099344:	1244703a 	and	r2,r2,r9
80099348:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8009934c:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80099350:	40800037 	ldwio	r2,0(r8)
80099354:	003fde06 	br	800992d0 <altera_avalon_jtag_uart_irq+0x80>

80099358 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80099358:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8009935c:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80099360:	dc000115 	stw	r16,4(sp)
80099364:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099368:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8009936c:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099370:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80099374:	2809883a 	mov	r4,r5
80099378:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8009937c:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
80099380:	01a002b4 	movhi	r6,32778
80099384:	31a49404 	addi	r6,r6,-28080
80099388:	800f883a 	mov	r7,r16
8009938c:	d8000015 	stw	zero,0(sp)
80099390:	009ad040 	call	8009ad04 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
80099394:	d1677517 	ldw	r5,-25132(gp)
80099398:	01a002b4 	movhi	r6,32778
8009939c:	31a48104 	addi	r6,r6,-28156
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
800993a0:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
800993a4:	800f883a 	mov	r7,r16
800993a8:	81000204 	addi	r4,r16,8
800993ac:	009aa3c0 	call	8009aa3c <alt_alarm_start>
800993b0:	1000030e 	bge	r2,zero,800993c0 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
800993b4:	00a00034 	movhi	r2,32768
800993b8:	10bfffc4 	addi	r2,r2,-1
800993bc:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
800993c0:	dfc00217 	ldw	ra,8(sp)
800993c4:	dc000117 	ldw	r16,4(sp)
800993c8:	dec00304 	addi	sp,sp,12
800993cc:	f800283a 	ret

800993d0 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
800993d0:	2890000c 	andi	r2,r5,16384
800993d4:	21c00c17 	ldw	r7,48(r4)
800993d8:	10000426 	beq	r2,zero,800993ec <altera_avalon_jtag_uart_close+0x1c>
800993dc:	00000606 	br	800993f8 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
800993e0:	21800917 	ldw	r6,36(r4)
800993e4:	20c00117 	ldw	r3,4(r4)
800993e8:	30c00a2e 	bgeu	r6,r3,80099414 <altera_avalon_jtag_uart_close+0x44>
800993ec:	20c00d17 	ldw	r3,52(r4)
800993f0:	38fffb1e 	bne	r7,r3,800993e0 <altera_avalon_jtag_uart_close+0x10>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
800993f4:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
800993f8:	20800d17 	ldw	r2,52(r4)
800993fc:	11c00526 	beq	r2,r7,80099414 <altera_avalon_jtag_uart_close+0x44>
80099400:	20c00917 	ldw	r3,36(r4)
80099404:	20800117 	ldw	r2,4(r4)
80099408:	1880022e 	bgeu	r3,r2,80099414 <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
8009940c:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
80099410:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80099414:	0005883a 	mov	r2,zero
80099418:	f800283a 	ret

8009941c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
8009941c:	009a8044 	movi	r2,27137
80099420:	28800d26 	beq	r5,r2,80099458 <altera_avalon_jtag_uart_ioctl+0x3c>
80099424:	009a8084 	movi	r2,27138
80099428:	2880091e 	bne	r5,r2,80099450 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8009942c:	21400117 	ldw	r5,4(r4)
80099430:	00a00034 	movhi	r2,32768
80099434:	10bfffc4 	addi	r2,r2,-1
80099438:	28800526 	beq	r5,r2,80099450 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8009943c:	20c00917 	ldw	r3,36(r4)
      rc = 0;
80099440:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
80099444:	1947803a 	cmpltu	r3,r3,r5
80099448:	30c00015 	stw	r3,0(r6)
8009944c:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
80099450:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
80099454:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
80099458:	20c00117 	ldw	r3,4(r4)
8009945c:	00a00034 	movhi	r2,32768
80099460:	10bfffc4 	addi	r2,r2,-1
80099464:	18bffa26 	beq	r3,r2,80099450 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
80099468:	30800017 	ldw	r2,0(r6)
8009946c:	01600034 	movhi	r5,32768
80099470:	297fff04 	addi	r5,r5,-4
80099474:	10ffff84 	addi	r3,r2,-2
80099478:	28c0022e 	bgeu	r5,r3,80099484 <altera_avalon_jtag_uart_ioctl+0x68>
8009947c:	00a00034 	movhi	r2,32768
80099480:	10bfff84 	addi	r2,r2,-2
80099484:	20800115 	stw	r2,4(r4)
      rc = 0;
80099488:	0005883a 	mov	r2,zero
8009948c:	f800283a 	ret

80099490 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80099490:	01804e0e 	bge	zero,r6,800995cc <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
80099494:	defff504 	addi	sp,sp,-44
80099498:	dc000115 	stw	r16,4(sp)
8009949c:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
800994a0:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
800994a4:	dd800715 	stw	r22,28(sp)
800994a8:	dd400615 	stw	r21,24(sp)
800994ac:	dd000515 	stw	r20,20(sp)
800994b0:	dcc00415 	stw	r19,16(sp)
800994b4:	dc800315 	stw	r18,12(sp)
800994b8:	dfc00a15 	stw	ra,40(sp)
800994bc:	df000915 	stw	fp,36(sp)
800994c0:	ddc00815 	stw	r23,32(sp)
800994c4:	dc400215 	stw	r17,8(sp)
800994c8:	3027883a 	mov	r19,r6
800994cc:	2025883a 	mov	r18,r4
800994d0:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
800994d4:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
800994d8:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
800994dc:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
800994e0:	b02f883a 	mov	r23,r22
800994e4:	00000a06 	br	80099510 <altera_avalon_jtag_uart_read+0x80>
800994e8:	9880012e 	bgeu	r19,r2,800994f0 <altera_avalon_jtag_uart_read+0x60>
800994ec:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800994f0:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
800994f4:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800994f8:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
800994fc:	0082cec0 	call	80082cec <memcpy>
      ptr   += n;
      space -= n;
80099500:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80099504:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
80099508:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
8009950c:	04c0080e 	bge	zero,r19,80099530 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
80099510:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
80099514:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
80099518:	e4000136 	bltu	fp,r16,80099520 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
8009951c:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
80099520:	a40b883a 	add	r5,r20,r16
80099524:	b809883a 	mov	r4,r23
80099528:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
8009952c:	103fee1e 	bne	r2,zero,800994e8 <altera_avalon_jtag_uart_read+0x58>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80099530:	bd800d1e 	bne	r23,r22,80099568 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
80099534:	d8800017 	ldw	r2,0(sp)
80099538:	10000426 	beq	r2,zero,8009954c <altera_avalon_jtag_uart_read+0xbc>
8009953c:	00002106 	br	800995c4 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
80099540:	90c00917 	ldw	r3,36(r18)
80099544:	90800117 	ldw	r2,4(r18)
80099548:	1880022e 	bgeu	r3,r2,80099554 <altera_avalon_jtag_uart_read+0xc4>
8009954c:	90800a17 	ldw	r2,40(r18)
80099550:	e0bffb26 	beq	fp,r2,80099540 <altera_avalon_jtag_uart_read+0xb0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80099554:	90800a17 	ldw	r2,40(r18)
80099558:	e0800126 	beq	fp,r2,80099560 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8009955c:	04ffe016 	blt	zero,r19,800994e0 <altera_avalon_jtag_uart_read+0x50>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
80099560:	00bffec4 	movi	r2,-5
80099564:	00000b06 	br	80099594 <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80099568:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009956c:	00bfff84 	movi	r2,-2
80099570:	2084703a 	and	r2,r4,r2
80099574:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099578:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8009957c:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80099580:	10800054 	ori	r2,r2,1
80099584:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80099588:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009958c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
80099590:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
80099594:	dfc00a17 	ldw	ra,40(sp)
80099598:	df000917 	ldw	fp,36(sp)
8009959c:	ddc00817 	ldw	r23,32(sp)
800995a0:	dd800717 	ldw	r22,28(sp)
800995a4:	dd400617 	ldw	r21,24(sp)
800995a8:	dd000517 	ldw	r20,20(sp)
800995ac:	dcc00417 	ldw	r19,16(sp)
800995b0:	dc800317 	ldw	r18,12(sp)
800995b4:	dc400217 	ldw	r17,8(sp)
800995b8:	dc000117 	ldw	r16,4(sp)
800995bc:	dec00b04 	addi	sp,sp,44
800995c0:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
800995c4:	00bffd44 	movi	r2,-11
800995c8:	003ff206 	br	80099594 <altera_avalon_jtag_uart_read+0x104>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
800995cc:	39d0000c 	andi	r7,r7,16384
800995d0:	3800021e 	bne	r7,zero,800995dc <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
800995d4:	00bffec4 	movi	r2,-5
}
800995d8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
800995dc:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
800995e0:	f800283a 	ret

800995e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
800995e4:	defff604 	addi	sp,sp,-40
800995e8:	dc000015 	stw	r16,0(sp)
800995ec:	dfc00915 	stw	ra,36(sp)
800995f0:	df000815 	stw	fp,32(sp)
800995f4:	ddc00715 	stw	r23,28(sp)
800995f8:	dd800615 	stw	r22,24(sp)
800995fc:	dd400515 	stw	r21,20(sp)
80099600:	dd000415 	stw	r20,16(sp)
80099604:	dcc00315 	stw	r19,12(sp)
80099608:	dc800215 	stw	r18,8(sp)
8009960c:	dc400115 	stw	r17,4(sp)
80099610:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80099614:	01804d0e 	bge	zero,r6,8009974c <altera_avalon_jtag_uart_write+0x168>
80099618:	302d883a 	mov	r22,r6
8009961c:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
80099620:	3c50000c 	andi	r17,r7,16384
80099624:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80099628:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
8009962c:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
80099630:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
80099634:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
80099638:	e0c03a2e 	bgeu	fp,r3,80099724 <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
8009963c:	1dffffc4 	addi	r23,r3,-1
80099640:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
80099644:	b800131e 	bne	r23,zero,80099694 <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80099648:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009964c:	24c4703a 	and	r2,r4,r19
80099650:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80099654:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80099658:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8009965c:	10800094 	ori	r2,r2,2
80099660:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80099664:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80099668:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
8009966c:	8800341e 	bne	r17,zero,80099740 <altera_avalon_jtag_uart_write+0x15c>
80099670:	81000917 	ldw	r4,36(r16)
80099674:	00000206 	br	80099680 <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
80099678:	80800117 	ldw	r2,4(r16)
8009967c:	2080022e 	bgeu	r4,r2,80099688 <altera_avalon_jtag_uart_write+0xa4>
80099680:	80800d17 	ldw	r2,52(r16)
80099684:	18bffc26 	beq	r3,r2,80099678 <altera_avalon_jtag_uart_write+0x94>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
80099688:	203fe926 	beq	r4,zero,80099630 <altera_avalon_jtag_uart_write+0x4c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
8009968c:	ad00181e 	bne	r21,r20,800996f0 <altera_avalon_jtag_uart_write+0x10c>
80099690:	00003a06 	br	8009977c <altera_avalon_jtag_uart_write+0x198>
80099694:	b5c0012e 	bgeu	r22,r23,8009969c <altera_avalon_jtag_uart_write+0xb8>
80099698:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
8009969c:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800996a0:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
800996a4:	a80b883a 	mov	r5,r21
800996a8:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800996ac:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
800996b0:	0082cec0 	call	80082cec <memcpy>
      ptr   += n;
      count -= n;
800996b4:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800996b8:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
800996bc:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
800996c0:	05bfdb16 	blt	zero,r22,80099630 <altera_avalon_jtag_uart_write+0x4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
800996c4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800996c8:	00bfff84 	movi	r2,-2
800996cc:	1884703a 	and	r2,r3,r2
800996d0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
800996d4:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
800996d8:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
800996dc:	10800094 	ori	r2,r2,2
800996e0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
800996e4:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
800996e8:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
800996ec:	a5402226 	beq	r20,r21,80099778 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
800996f0:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
800996f4:	dfc00917 	ldw	ra,36(sp)
800996f8:	df000817 	ldw	fp,32(sp)
800996fc:	ddc00717 	ldw	r23,28(sp)
80099700:	dd800617 	ldw	r22,24(sp)
80099704:	dd400517 	ldw	r21,20(sp)
80099708:	dd000417 	ldw	r20,16(sp)
8009970c:	dcc00317 	ldw	r19,12(sp)
80099710:	dc800217 	ldw	r18,8(sp)
80099714:	dc400117 	ldw	r17,4(sp)
80099718:	dc000017 	ldw	r16,0(sp)
8009971c:	dec00a04 	addi	sp,sp,40
80099720:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
80099724:	18000326 	beq	r3,zero,80099734 <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80099728:	00820004 	movi	r2,2048
8009972c:	172fc83a 	sub	r23,r2,fp
80099730:	003fc406 	br	80099644 <altera_avalon_jtag_uart_write+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
80099734:	0081ffc4 	movi	r2,2047
80099738:	172fc83a 	sub	r23,r2,fp
8009973c:	003fc106 	br	80099644 <altera_avalon_jtag_uart_write+0x60>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
80099740:	ad3feb1e 	bne	r21,r20,800996f0 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
80099744:	00bffd44 	movi	r2,-11
80099748:	003fea06 	br	800996f4 <altera_avalon_jtag_uart_write+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009974c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80099750:	00bfff84 	movi	r2,-2
80099754:	1884703a 	and	r2,r3,r2
80099758:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8009975c:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80099760:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80099764:	10800094 	ori	r2,r2,2
80099768:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8009976c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80099770:	1801703a 	wrctl	status,r3
80099774:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
80099778:	883ff21e 	bne	r17,zero,80099744 <altera_avalon_jtag_uart_write+0x160>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8009977c:	00bffec4 	movi	r2,-5
80099780:	003fdc06 	br	800996f4 <altera_avalon_jtag_uart_write+0x110>

80099784 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
80099784:	defffe04 	addi	sp,sp,-8
80099788:	dfc00115 	stw	ra,4(sp)
8009978c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
80099790:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
80099794:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80099798:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009979c:	00bfff84 	movi	r2,-2
800997a0:	8084703a 	and	r2,r16,r2
800997a4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
800997a8:	009b2300 	call	8009b230 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
800997ac:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
800997b0:	dfc00117 	ldw	ra,4(sp)
800997b4:	dc000017 	ldw	r16,0(sp)
800997b8:	dec00204 	addi	sp,sp,8
800997bc:	f800283a 	ret

800997c0 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
800997c0:	d0e77517 	ldw	r3,-25132(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
800997c4:	defffe04 	addi	sp,sp,-8
800997c8:	dfc00115 	stw	ra,4(sp)
800997cc:	2005883a 	mov	r2,r4
800997d0:	2809883a 	mov	r4,r5
800997d4:	300b883a 	mov	r5,r6
800997d8:	1800011e 	bne	r3,zero,800997e0 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
800997dc:	d1e77515 	stw	r7,-25132(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
800997e0:	00c001c4 	movi	r3,7
800997e4:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
800997e8:	01a002b4 	movhi	r6,32778
800997ec:	31a5e104 	addi	r6,r6,-26748
800997f0:	d8000015 	stw	zero,0(sp)
800997f4:	100f883a 	mov	r7,r2
800997f8:	009ad040 	call	8009ad04 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
800997fc:	dfc00117 	ldw	ra,4(sp)
80099800:	dec00204 	addi	sp,sp,8
80099804:	f800283a 	ret

80099808 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
80099808:	defffd04 	addi	sp,sp,-12
8009980c:	dc000015 	stw	r16,0(sp)
80099810:	dfc00215 	stw	ra,8(sp)
80099814:	dc400115 	stw	r17,4(sp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
80099818:	20801783 	ldbu	r2,94(r4)
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8009981c:	2021883a 	mov	r16,r4
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
80099820:	10001d26 	beq	r2,zero,80099898 <alt_msgdma_irq+0x90>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80099824:	20c00617 	ldw	r3,24(r4)
80099828:	19000037 	ldwio	r4,0(r3)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8009982c:	00bffdc4 	movi	r2,-9
80099830:	2084703a 	and	r2,r4,r2
80099834:	18800035 	stwio	r2,0(r3)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
80099838:	80800617 	ldw	r2,24(r16)
8009983c:	00c00044 	movi	r3,1
80099840:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
80099844:	80c00b17 	ldw	r3,44(r16)
80099848:	18000726 	beq	r3,zero,80099868 <alt_msgdma_irq+0x60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009984c:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80099850:	00bfff84 	movi	r2,-2
80099854:	8884703a 	and	r2,r17,r2
80099858:	1001703a 	wrctl	status,r2
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback (dev->callback_context);
8009985c:	81000c17 	ldw	r4,48(r16)
80099860:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80099864:	8801703a 	wrctl	status,r17
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
80099868:	80801783 	ldbu	r2,94(r16)
8009986c:	1000141e 	bne	r2,zero,800998c0 <alt_msgdma_irq+0xb8>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80099870:	80800317 	ldw	r2,12(r16)
80099874:	10800104 	addi	r2,r2,4
80099878:	10c00037 	ldwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8009987c:	18c00414 	ori	r3,r3,16
80099880:	10c00035 	stwio	r3,0(r2)
    }

    return;
}
80099884:	dfc00217 	ldw	ra,8(sp)
80099888:	dc400117 	ldw	r17,4(sp)
8009988c:	dc000017 	ldw	r16,0(sp)
80099890:	dec00304 	addi	sp,sp,12
80099894:	f800283a 	ret
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80099898:	20800317 	ldw	r2,12(r4)
8009989c:	10800104 	addi	r2,r2,4
800998a0:	11000037 	ldwio	r4,0(r2)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
800998a4:	00fffbc4 	movi	r3,-17
800998a8:	20c6703a 	and	r3,r4,r3
800998ac:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
800998b0:	80800317 	ldw	r2,12(r16)
800998b4:	00c08004 	movi	r3,512
800998b8:	10c00035 	stwio	r3,0(r2)
800998bc:	003fe106 	br	80099844 <alt_msgdma_irq+0x3c>

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
800998c0:	80c00617 	ldw	r3,24(r16)
800998c4:	18800037 	ldwio	r2,0(r3)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
800998c8:	10800214 	ori	r2,r2,8
800998cc:	18800035 	stwio	r2,0(r3)
800998d0:	003fec06 	br	80099884 <alt_msgdma_irq+0x7c>

800998d4 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
800998d4:	20801217 	ldw	r2,72(r4)
800998d8:	11c00a36 	bltu	r2,r7,80099904 <alt_msgdma_construct_standard_st_to_mm_descriptor+0x30>
800998dc:	20801703 	ldbu	r2,92(r4)
800998e0:	1000081e 	bne	r2,zero,80099904 <alt_msgdma_construct_standard_st_to_mm_descriptor+0x30>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
800998e4:	d8800017 	ldw	r2,0(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
800998e8:	28000015 	stw	zero,0(r5)
    descriptor->write_address = write_address;
800998ec:	29800115 	stw	r6,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
800998f0:	10a00034 	orhi	r2,r2,32768
800998f4:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
800998f8:	29c00215 	stw	r7,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
800998fc:	0005883a 	mov	r2,zero
80099900:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80099904:	00bffa84 	movi	r2,-22
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
            write_address, length, control);
}
80099908:	f800283a 	ret

8009990c <alt_msgdma_construct_standard_mm_to_st_descriptor>:
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8009990c:	20801217 	ldw	r2,72(r4)
80099910:	11c00a36 	bltu	r2,r7,8009993c <alt_msgdma_construct_standard_mm_to_st_descriptor+0x30>
80099914:	20801703 	ldbu	r2,92(r4)
80099918:	1000081e 	bne	r2,zero,8009993c <alt_msgdma_construct_standard_mm_to_st_descriptor+0x30>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8009991c:	d8800017 	ldw	r2,0(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
80099920:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
80099924:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80099928:	10a00034 	orhi	r2,r2,32768
8009992c:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
80099930:	29c00215 	stw	r7,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80099934:	0005883a 	mov	r2,zero
80099938:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8009993c:	00bffa84 	movi	r2,-22
	alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
            NULL, length, control);

}
80099940:	f800283a 	ret

80099944 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
80099944:	d8c00017 	ldw	r3,0(sp)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
80099948:	20801217 	ldw	r2,72(r4)
8009994c:	10c00a36 	bltu	r2,r3,80099978 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0x34>
80099950:	20801703 	ldbu	r2,92(r4)
80099954:	1000081e 	bne	r2,zero,80099978 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0x34>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80099958:	d8800117 	ldw	r2,4(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
8009995c:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
80099960:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80099964:	10a00034 	orhi	r2,r2,32768
80099968:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
8009996c:	28c00215 	stw	r3,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80099970:	0005883a 	mov	r2,zero
80099974:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80099978:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
            write_address, length, control);
}
8009997c:	f800283a 	ret

80099980 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80099980:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
80099984:	da400117 	ldw	r9,4(sp)
80099988:	da000217 	ldw	r8,8(sp)
8009998c:	d8c00317 	ldw	r3,12(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80099990:	11c01736 	bltu	r2,r7,800999f0 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
       dev->max_stride < read_stride ||
80099994:	20801417 	ldw	r2,80(r4)
80099998:	1abfffcc 	andi	r10,r3,65535
8009999c:	10001226 	beq	r2,zero,800999e8 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x68>
       dev->max_stride < write_stride ||
800999a0:	21001703 	ldbu	r4,92(r4)
800999a4:	00800044 	movi	r2,1
800999a8:	2080111e 	bne	r4,r2,800999f0 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
800999ac:	d8800017 	ldw	r2,0(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
800999b0:	28000015 	stw	zero,0(r5)
    descriptor->write_address_low = write_address;
800999b4:	29800115 	stw	r6,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
800999b8:	10a00034 	orhi	r2,r2,32768
800999bc:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
800999c0:	29c00215 	stw	r7,8(r5)
    descriptor->sequence_number = sequence_number;
800999c4:	2a40030d 	sth	r9,12(r5)
    descriptor->read_burst_count = read_burst_count;
800999c8:	28000385 	stb	zero,14(r5)
    descriptor->write_burst_count = write_burst_count;
800999cc:	2a0003c5 	stb	r8,15(r5)
    descriptor->read_stride = read_stride;
800999d0:	2800040d 	sth	zero,16(r5)
    descriptor->write_stride = write_stride;
800999d4:	28c0048d 	sth	r3,18(r5)
    descriptor->read_address_high = NULL;
800999d8:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
800999dc:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
800999e0:	0005883a 	mov	r2,zero
800999e4:	f800283a 	ret
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
800999e8:	20801317 	ldw	r2,76(r4)
800999ec:	12bfec2e 	bgeu	r2,r10,800999a0 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x20>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
800999f0:	00bffa84 	movi	r2,-22
	alt_u16 write_stride)
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
800999f4:	f800283a 	ret

800999f8 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
800999f8:	20801217 	ldw	r2,72(r4)
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
800999fc:	da400117 	ldw	r9,4(sp)
80099a00:	da000217 	ldw	r8,8(sp)
80099a04:	d8c00317 	ldw	r3,12(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80099a08:	11c01736 	bltu	r2,r7,80099a68 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
80099a0c:	20801417 	ldw	r2,80(r4)
80099a10:	1abfffcc 	andi	r10,r3,65535
80099a14:	10001226 	beq	r2,zero,80099a60 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x68>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80099a18:	21001703 	ldbu	r4,92(r4)
80099a1c:	00800044 	movi	r2,1
80099a20:	2080111e 	bne	r4,r2,80099a68 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80099a24:	d8800017 	ldw	r2,0(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
80099a28:	29800015 	stw	r6,0(r5)
    descriptor->write_address_low = write_address;
80099a2c:	28000115 	stw	zero,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80099a30:	10a00034 	orhi	r2,r2,32768
80099a34:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
80099a38:	29c00215 	stw	r7,8(r5)
    descriptor->sequence_number = sequence_number;
80099a3c:	2a40030d 	sth	r9,12(r5)
    descriptor->read_burst_count = read_burst_count;
80099a40:	2a000385 	stb	r8,14(r5)
    descriptor->write_burst_count = write_burst_count;
80099a44:	280003c5 	stb	zero,15(r5)
    descriptor->read_stride = read_stride;
80099a48:	28c0040d 	sth	r3,16(r5)
    descriptor->write_stride = write_stride;
80099a4c:	2800048d 	sth	zero,18(r5)
    descriptor->read_address_high = NULL;
80099a50:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
80099a54:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
80099a58:	0005883a 	mov	r2,zero
80099a5c:	f800283a 	ret
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80099a60:	20801317 	ldw	r2,76(r4)
80099a64:	12bfec2e 	bgeu	r2,r10,80099a18 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x20>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80099a68:	00bffa84 	movi	r2,-22
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
80099a6c:	f800283a 	ret

80099a70 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80099a70:	d8c00017 	ldw	r3,0(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80099a74:	20801217 	ldw	r2,72(r4)
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80099a78:	db000217 	ldw	r12,8(sp)
80099a7c:	dac00317 	ldw	r11,12(sp)
80099a80:	da800417 	ldw	r10,16(sp)
80099a84:	da000517 	ldw	r8,20(sp)
80099a88:	da400617 	ldw	r9,24(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80099a8c:	10c01936 	bltu	r2,r3,80099af4 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x84>
       dev->max_stride < read_stride ||
80099a90:	20801417 	ldw	r2,80(r4)
80099a94:	23401317 	ldw	r13,76(r4)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80099a98:	43bfffcc 	andi	r14,r8,65535
80099a9c:	10001726 	beq	r2,zero,80099afc <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x8c>
       dev->max_stride < read_stride ||
80099aa0:	4bbfffcc 	andi	r14,r9,65535
80099aa4:	10001226 	beq	r2,zero,80099af0 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x80>
       dev->max_stride < write_stride ||
80099aa8:	21001703 	ldbu	r4,92(r4)
80099aac:	00800044 	movi	r2,1
80099ab0:	2080101e 	bne	r4,r2,80099af4 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x84>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80099ab4:	d8800117 	ldw	r2,4(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
80099ab8:	29800015 	stw	r6,0(r5)
    descriptor->write_address_low = write_address;
80099abc:	29c00115 	stw	r7,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80099ac0:	10a00034 	orhi	r2,r2,32768
80099ac4:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
80099ac8:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
80099acc:	2b00030d 	sth	r12,12(r5)
    descriptor->read_burst_count = read_burst_count;
80099ad0:	2ac00385 	stb	r11,14(r5)
    descriptor->write_burst_count = write_burst_count;
80099ad4:	2a8003c5 	stb	r10,15(r5)
    descriptor->read_stride = read_stride;
80099ad8:	2a00040d 	sth	r8,16(r5)
    descriptor->write_stride = write_stride;
80099adc:	2a40048d 	sth	r9,18(r5)
    descriptor->read_address_high = NULL;
80099ae0:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
80099ae4:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
80099ae8:	0005883a 	mov	r2,zero
80099aec:	f800283a 	ret
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80099af0:	6bbfed2e 	bgeu	r13,r14,80099aa8 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x38>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80099af4:	00bffa84 	movi	r2,-22
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80099af8:	f800283a 	ret
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80099afc:	6bbfe82e 	bgeu	r13,r14,80099aa0 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x30>
80099b00:	003ffc06 	br	80099af4 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x84>

80099b04 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
80099b04:	d8c00017 	ldw	r3,0(sp)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
80099b08:	20801217 	ldw	r2,72(r4)
80099b0c:	10c00e36 	bltu	r2,r3,80099b48 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0x44>
80099b10:	20801703 	ldbu	r2,92(r4)
80099b14:	10000c1e 	bne	r2,zero,80099b48 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0x44>
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80099b18:	d9000117 	ldw	r4,4(sp)
80099b1c:	00900034 	movhi	r2,16384
80099b20:	10bfffc4 	addi	r2,r2,-1
80099b24:	2084703a 	and	r2,r4,r2
80099b28:	10a00034 	orhi	r2,r2,32768
80099b2c:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
80099b30:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
80099b34:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
80099b38:	28c00215 	stw	r3,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
80099b3c:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80099b40:	0005883a 	mov	r2,zero
80099b44:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80099b48:	00bffa84 	movi	r2,-22
	alt_u32 length,
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		read_address, write_address, length, control);
}
80099b4c:	f800283a 	ret

80099b50 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
80099b50:	20801217 	ldw	r2,72(r4)
80099b54:	11c00e36 	bltu	r2,r7,80099b90 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0x40>
80099b58:	20801703 	ldbu	r2,92(r4)
80099b5c:	10000c1e 	bne	r2,zero,80099b90 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0x40>
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80099b60:	d8c00017 	ldw	r3,0(sp)
80099b64:	00900034 	movhi	r2,16384
80099b68:	10bfffc4 	addi	r2,r2,-1
80099b6c:	1884703a 	and	r2,r3,r2
80099b70:	10a00034 	orhi	r2,r2,32768
80099b74:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
80099b78:	28000015 	stw	zero,0(r5)
    descriptor->write_address = write_address;
80099b7c:	29800115 	stw	r6,4(r5)
    descriptor->transfer_length = length;
80099b80:	29c00215 	stw	r7,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
80099b84:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80099b88:	0005883a 	mov	r2,zero
80099b8c:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80099b90:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		0, write_address, length, control);
}
80099b94:	f800283a 	ret

80099b98 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
80099b98:	20801217 	ldw	r2,72(r4)
80099b9c:	11c00e36 	bltu	r2,r7,80099bd8 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0x40>
80099ba0:	20801703 	ldbu	r2,92(r4)
80099ba4:	10000c1e 	bne	r2,zero,80099bd8 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0x40>
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80099ba8:	d8c00017 	ldw	r3,0(sp)
80099bac:	00900034 	movhi	r2,16384
80099bb0:	10bfffc4 	addi	r2,r2,-1
80099bb4:	1884703a 	and	r2,r3,r2
80099bb8:	10a00034 	orhi	r2,r2,32768
80099bbc:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
80099bc0:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
80099bc4:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
80099bc8:	29c00215 	stw	r7,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
80099bcc:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
80099bd0:	0005883a 	mov	r2,zero
80099bd4:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80099bd8:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		read_address, 0, length, control);
}
80099bdc:	f800283a 	ret

80099be0 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
80099be0:	d8c00017 	ldw	r3,0(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099be4:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
80099be8:	da800217 	ldw	r10,8(sp)
80099bec:	da400317 	ldw	r9,12(sp)
80099bf0:	da000417 	ldw	r8,16(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099bf4:	10c01c36 	bltu	r2,r3,80099c68 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
       dev->max_stride < read_stride ||
80099bf8:	20801417 	ldw	r2,80(r4)
80099bfc:	42ffffcc 	andi	r11,r8,65535
80099c00:	10001726 	beq	r2,zero,80099c60 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x80>
       dev->max_stride < write_stride ||
80099c04:	21001703 	ldbu	r4,92(r4)
80099c08:	00800044 	movi	r2,1
80099c0c:	2080161e 	bne	r4,r2,80099c68 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
80099c10:	d9000117 	ldw	r4,4(sp)
80099c14:	00900034 	movhi	r2,16384
80099c18:	10bfffc4 	addi	r2,r2,-1
80099c1c:	2084703a 	and	r2,r4,r2
80099c20:	10a00034 	orhi	r2,r2,32768
80099c24:	28800f15 	stw	r2,60(r5)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
80099c28:	28000915 	stw	zero,36(r5)
    descriptor->read_address_low = read_address_low;
80099c2c:	28000015 	stw	zero,0(r5)
    descriptor->write_address_high = write_address_high;
80099c30:	29800a15 	stw	r6,40(r5)
    descriptor->write_address_low = write_address_low;
80099c34:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
80099c38:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
80099c3c:	2a80070d 	sth	r10,28(r5)
    descriptor->read_burst_count = read_burst_count;
80099c40:	28000785 	stb	zero,30(r5)
    descriptor->write_burst_count = write_burst_count;
80099c44:	2a4007c5 	stb	r9,31(r5)
    descriptor->read_stride = read_stride;
80099c48:	2800080d 	sth	zero,32(r5)
    descriptor->write_stride = write_stride;
80099c4c:	2a00088d 	sth	r8,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
80099c50:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80099c54:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
80099c58:	0005883a 	mov	r2,zero
80099c5c:	f800283a 	ret
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80099c60:	20801317 	ldw	r2,76(r4)
80099c64:	12ffe72e 	bgeu	r2,r11,80099c04 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x24>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80099c68:	00bffa84 	movi	r2,-22
	alt_u16 write_stride)
{
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
80099c6c:	f800283a 	ret

80099c70 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
80099c70:	d8c00017 	ldw	r3,0(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099c74:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
80099c78:	da800217 	ldw	r10,8(sp)
80099c7c:	da400317 	ldw	r9,12(sp)
80099c80:	da000417 	ldw	r8,16(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099c84:	10c01c36 	bltu	r2,r3,80099cf8 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
80099c88:	20801417 	ldw	r2,80(r4)
80099c8c:	42ffffcc 	andi	r11,r8,65535
80099c90:	10001726 	beq	r2,zero,80099cf0 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x80>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80099c94:	21001703 	ldbu	r4,92(r4)
80099c98:	00800044 	movi	r2,1
80099c9c:	2080161e 	bne	r4,r2,80099cf8 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
80099ca0:	d9000117 	ldw	r4,4(sp)
80099ca4:	00900034 	movhi	r2,16384
80099ca8:	10bfffc4 	addi	r2,r2,-1
80099cac:	2084703a 	and	r2,r4,r2
80099cb0:	10a00034 	orhi	r2,r2,32768
80099cb4:	28800f15 	stw	r2,60(r5)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
80099cb8:	29800915 	stw	r6,36(r5)
    descriptor->read_address_low = read_address_low;
80099cbc:	29c00015 	stw	r7,0(r5)
    descriptor->write_address_high = write_address_high;
80099cc0:	28000a15 	stw	zero,40(r5)
    descriptor->write_address_low = write_address_low;
80099cc4:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
80099cc8:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
80099ccc:	2a80070d 	sth	r10,28(r5)
    descriptor->read_burst_count = read_burst_count;
80099cd0:	2a400785 	stb	r9,30(r5)
    descriptor->write_burst_count = write_burst_count;
80099cd4:	280007c5 	stb	zero,31(r5)
    descriptor->read_stride = read_stride;
80099cd8:	2a00080d 	sth	r8,32(r5)
    descriptor->write_stride = write_stride;
80099cdc:	2800088d 	sth	zero,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
80099ce0:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80099ce4:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
80099ce8:	0005883a 	mov	r2,zero
80099cec:	f800283a 	ret
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099cf0:	20801317 	ldw	r2,76(r4)
80099cf4:	12ffe72e 	bgeu	r2,r11,80099c94 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x24>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80099cf8:	00bffa84 	movi	r2,-22
	alt_u16 read_stride)
{
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
80099cfc:	f800283a 	ret

80099d00 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
80099d00:	d8c00217 	ldw	r3,8(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099d04:	20801217 	ldw	r2,72(r4)
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
80099d08:	db000417 	ldw	r12,16(sp)
80099d0c:	dac00517 	ldw	r11,20(sp)
80099d10:	da800617 	ldw	r10,24(sp)
80099d14:	da000717 	ldw	r8,28(sp)
80099d18:	da400817 	ldw	r9,32(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099d1c:	10c02036 	bltu	r2,r3,80099da0 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa0>
       dev->max_stride < read_stride ||
80099d20:	20801417 	ldw	r2,80(r4)
80099d24:	23401317 	ldw	r13,76(r4)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099d28:	43bfffcc 	andi	r14,r8,65535
80099d2c:	10001e26 	beq	r2,zero,80099da8 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa8>
       dev->max_stride < read_stride ||
80099d30:	4bbfffcc 	andi	r14,r9,65535
80099d34:	10001926 	beq	r2,zero,80099d9c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0x9c>
       dev->max_stride < write_stride ||
80099d38:	21001703 	ldbu	r4,92(r4)
80099d3c:	00800044 	movi	r2,1
80099d40:	2080171e 	bne	r4,r2,80099da0 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa0>
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
80099d44:	d9000317 	ldw	r4,12(sp)
80099d48:	00900034 	movhi	r2,16384
80099d4c:	10bfffc4 	addi	r2,r2,-1
80099d50:	2084703a 	and	r2,r4,r2
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
    descriptor->read_address_low = read_address_low;
    descriptor->write_address_high = write_address_high;
80099d54:	d9000017 	ldw	r4,0(sp)
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
80099d58:	10a00034 	orhi	r2,r2,32768
80099d5c:	28800f15 	stw	r2,60(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
    descriptor->read_address_low = read_address_low;
    descriptor->write_address_high = write_address_high;
80099d60:	29000a15 	stw	r4,40(r5)
    descriptor->write_address_low = write_address_low;
80099d64:	d9000117 	ldw	r4,4(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
80099d68:	29800915 	stw	r6,36(r5)
    descriptor->read_address_low = read_address_low;
80099d6c:	29c00015 	stw	r7,0(r5)
    descriptor->write_address_high = write_address_high;
    descriptor->write_address_low = write_address_low;
80099d70:	29000115 	stw	r4,4(r5)
    descriptor->transfer_length = length;
80099d74:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
80099d78:	2b00070d 	sth	r12,28(r5)
    descriptor->read_burst_count = read_burst_count;
80099d7c:	2ac00785 	stb	r11,30(r5)
    descriptor->write_burst_count = write_burst_count;
80099d80:	2a8007c5 	stb	r10,31(r5)
    descriptor->read_stride = read_stride;
80099d84:	2a00080d 	sth	r8,32(r5)
    descriptor->write_stride = write_stride;
80099d88:	2a40088d 	sth	r9,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
80099d8c:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80099d90:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
80099d94:	0005883a 	mov	r2,zero
80099d98:	f800283a 	ret
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80099d9c:	6bbfe62e 	bgeu	r13,r14,80099d38 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0x38>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80099da0:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
80099da4:	f800283a 	ret
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
80099da8:	6bbfe12e 	bgeu	r13,r14,80099d30 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0x30>
80099dac:	003ffc06 	br	80099da0 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa0>

80099db0 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
80099db0:	28001226 	beq	r5,zero,80099dfc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
80099db4:	29800317 	ldw	r6,12(r5)
80099db8:	2980101e 	bne	r5,r6,80099dfc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	if (*list == NULL)
80099dbc:	20c00017 	ldw	r3,0(r4)
80099dc0:	18001026 	beq	r3,zero,80099e04 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x54>
	{
		*list = descriptor;  /* make this root-node if list is empty */
		return 0;  /* successfully added */
	}
	if (*list == descriptor)
80099dc4:	28c00d26 	beq	r5,r3,80099dfc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80099dc8:	18800317 	ldw	r2,12(r3)
80099dcc:	1809883a 	mov	r4,r3
80099dd0:	18800626 	beq	r3,r2,80099dec <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
80099dd4:	2880021e 	bne	r5,r2,80099de0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x30>
80099dd8:	00000806 	br	80099dfc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
80099ddc:	30800726 	beq	r6,r2,80099dfc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
80099de0:	1007883a 	mov	r3,r2
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80099de4:	10800317 	ldw	r2,12(r2)
80099de8:	113ffc1e 	bne	r2,r4,80099ddc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
80099dec:	19800315 	stw	r6,12(r3)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
80099df0:	29000315 	stw	r4,12(r5)
	return 0; /* successfully added */
80099df4:	0005883a 	mov	r2,zero
80099df8:	f800283a 	ret
{
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
80099dfc:	00bffa84 	movi	r2,-22
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
	return 0; /* successfully added */
}
80099e00:	f800283a 	ret
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	if (*list == NULL)
	{
		*list = descriptor;  /* make this root-node if list is empty */
80099e04:	21400015 	stw	r5,0(r4)
		return 0;  /* successfully added */
80099e08:	0005883a 	mov	r2,zero
80099e0c:	f800283a 	ret

80099e10 <alt_msgdma_prefetcher_add_extended_desc_to_list>:
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
80099e10:	28001526 	beq	r5,zero,80099e68 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
80099e14:	28800317 	ldw	r2,12(r5)
80099e18:	11400226 	beq	r2,r5,80099e24 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x14>
80099e1c:	28800b17 	ldw	r2,44(r5)
80099e20:	1000111e 	bne	r2,zero,80099e68 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	
	if (*list == NULL)
80099e24:	21800017 	ldw	r6,0(r4)
80099e28:	30001726 	beq	r6,zero,80099e88 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x78>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
		return 0;
	}
	if (*list == descriptor)
80099e2c:	29800e26 	beq	r5,r6,80099e68 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80099e30:	30800317 	ldw	r2,12(r6)
80099e34:	300f883a 	mov	r7,r6
80099e38:	30800d26 	beq	r6,r2,80099e70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80099e3c:	30c00b17 	ldw	r3,44(r6)
80099e40:	1800051e 	bne	r3,zero,80099e58 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x48>
80099e44:	00000a06 	br	80099e70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80099e48:	10800317 	ldw	r2,12(r2)
80099e4c:	11c00826 	beq	r2,r7,80099e70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80099e50:	20c00b17 	ldw	r3,44(r4)
80099e54:	18000626 	beq	r3,zero,80099e70 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80099e58:	1009883a 	mov	r4,r2
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
80099e5c:	100d883a 	mov	r6,r2
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
80099e60:	28bff91e 	bne	r5,r2,80099e48 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x38>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
80099e64:	183ff81e 	bne	r3,zero,80099e48 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x38>
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
80099e68:	00bffa84 	movi	r2,-22
80099e6c:	f800283a 	ret
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
80099e70:	31400315 	stw	r5,12(r6)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
80099e74:	30000b15 	stw	zero,44(r6)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
80099e78:	29c00315 	stw	r7,12(r5)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
80099e7c:	28000b15 	stw	zero,44(r5)
	return 0;
80099e80:	0005883a 	mov	r2,zero
}
80099e84:	f800283a 	ret
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	
	if (*list == NULL)
	{
		*list = descriptor;  /* make this the root-node if list is empty */
80099e88:	21400015 	stw	r5,0(r4)
		return 0;
80099e8c:	0005883a 	mov	r2,zero
80099e90:	f800283a 	ret

80099e94 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
80099e94:	20000e26 	beq	r4,zero,80099ed0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80099e98:	20800317 	ldw	r2,12(r4)
80099e9c:	200b883a 	mov	r5,r4
80099ea0:	11000626 	beq	r2,r4,80099ebc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x28>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
80099ea4:	20c00717 	ldw	r3,28(r4)
80099ea8:	18d00034 	orhi	r3,r3,16384
80099eac:	20c00715 	stw	r3,28(r4)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
80099eb0:	1009883a 	mov	r4,r2
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80099eb4:	10800317 	ldw	r2,12(r2)
80099eb8:	117ffa1e 	bne	r2,r5,80099ea4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x10>
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
80099ebc:	20c00717 	ldw	r3,28(r4)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
80099ec0:	0005883a 	mov	r2,zero
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
80099ec4:	18d00034 	orhi	r3,r3,16384
80099ec8:	20c00715 	stw	r3,28(r4)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
80099ecc:	f800283a 	ret
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
	{
		return -EINVAL;  /* this list cannot be empty */
80099ed0:	00bffa84 	movi	r2,-22
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
}
80099ed4:	f800283a 	ret

80099ed8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
{
	alt_u32 descriptor_control_field = 0;
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
80099ed8:	20001426 	beq	r4,zero,80099f2c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x54>
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80099edc:	20800317 	ldw	r2,12(r4)
80099ee0:	200d883a 	mov	r6,r4
80099ee4:	20800c26 	beq	r4,r2,80099f18 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80099ee8:	20c00b17 	ldw	r3,44(r4)
80099eec:	1800031e 	bne	r3,zero,80099efc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
80099ef0:	00000906 	br	80099f18 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
80099ef4:	28c00b17 	ldw	r3,44(r5)
80099ef8:	18000726 	beq	r3,zero,80099f18 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
80099efc:	20c00f17 	ldw	r3,60(r4)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80099f00:	100b883a 	mov	r5,r2
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
80099f04:	18d00034 	orhi	r3,r3,16384
80099f08:	20c00f15 	stw	r3,60(r4)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
80099f0c:	1009883a 	mov	r4,r2
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80099f10:	10800317 	ldw	r2,12(r2)
80099f14:	11bff71e 	bne	r2,r6,80099ef4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x1c>
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
80099f18:	20c00f17 	ldw	r3,60(r4)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
80099f1c:	0005883a 	mov	r2,zero
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
80099f20:	18d00034 	orhi	r3,r3,16384
80099f24:	20c00f15 	stw	r3,60(r4)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
80099f28:	f800283a 	ret
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
	{
		return -EINVAL;  /* this list cannot be empty */
80099f2c:	00bffa84 	movi	r2,-22
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
}
80099f30:	f800283a 	ret

80099f34 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
80099f34:	da400017 	ldw	r9,0(sp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
80099f38:	20800617 	ldw	r2,24(r4)
80099f3c:	10800037 	ldwio	r2,0(r2)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
80099f40:	10c0004c 	andi	r3,r2,1
80099f44:	18003d1e 	bne	r3,zero,8009a03c <alt_msgdma_start_prefetcher_with_list_addr+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80099f48:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80099f4c:	023fff84 	movi	r8,-2
80099f50:	1a14703a 	and	r10,r3,r8
80099f54:	5001703a 	wrctl	status,r10
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80099f58:	22800317 	ldw	r10,12(r4)
80099f5c:	02c00804 	movi	r11,32
80099f60:	52c00135 	stwio	r11,4(r10)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
80099f64:	22800317 	ldw	r10,12(r4)
80099f68:	52c00037 	ldwio	r11,0(r10)
80099f6c:	52c00035 	stwio	r11,0(r10)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80099f70:	1801703a 	wrctl	status,r3
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
80099f74:	20c00b17 	ldw	r3,44(r4)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80099f78:	22800d17 	ldw	r10,52(r4)
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
80099f7c:	18002926 	beq	r3,zero,8009a024 <alt_msgdma_start_prefetcher_with_list_addr+0xf0>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80099f80:	00fff7c4 	movi	r3,-33
80099f84:	50c6703a 	and	r3,r10,r3
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80099f88:	10800214 	ori	r2,r2,8
	 */
	if(dev->callback)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80099f8c:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80099f90:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80099f94:	5210703a 	and	r8,r10,r8
80099f98:	4001703a 	wrctl	status,r8
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80099f9c:	22000317 	ldw	r8,12(r4)
80099fa0:	40c00135 	stwio	r3,4(r8)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80099fa4:	20c00617 	ldw	r3,24(r4)
80099fa8:	18800035 	stwio	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80099fac:	5001703a 	wrctl	status,r10
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
80099fb0:	20c00617 	ldw	r3,24(r4)
80099fb4:	19400135 	stwio	r5,4(r3)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80099fb8:	20c00617 	ldw	r3,24(r4)
80099fbc:	19800235 	stwio	r6,8(r3)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
80099fc0:	39c03fcc 	andi	r7,r7,255
80099fc4:	38000b1e 	bne	r7,zero,80099ff4 <alt_msgdma_start_prefetcher_with_list_addr+0xc0>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
80099fc8:	00fffbc4 	movi	r3,-17
80099fcc:	10c4703a 	and	r2,r2,r3
	 }
	 
	 /* set poll-en */
	 if (poll_en){
80099fd0:	48c03fcc 	andi	r3,r9,255
80099fd4:	18000a1e 	bne	r3,zero,8009a000 <alt_msgdma_start_prefetcher_with_list_addr+0xcc>
80099fd8:	20c00617 	ldw	r3,24(r4)
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
80099fdc:	013fff44 	movi	r4,-3
80099fe0:	1104703a 	and	r2,r2,r4
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80099fe4:	10800054 	ori	r2,r2,1
80099fe8:	18800035 	stwio	r2,0(r3)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
80099fec:	0005883a 	mov	r2,zero
80099ff0:	f800283a 	ret
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
80099ff4:	48c03fcc 	andi	r3,r9,255
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
80099ff8:	10800414 	ori	r2,r2,16
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
80099ffc:	183ff626 	beq	r3,zero,80099fd8 <alt_msgdma_start_prefetcher_with_list_addr+0xa4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009a000:	20c00617 	ldw	r3,24(r4)
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8009a004:	10800094 	ori	r2,r2,2
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009a008:	19400304 	addi	r5,r3,12
8009a00c:	29800037 	ldwio	r6,0(r5)
8009a010:	303ff41e 	bne	r6,zero,80099fe4 <alt_msgdma_start_prefetcher_with_list_addr+0xb0>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009a014:	00c03fc4 	movi	r3,255
8009a018:	28c00035 	stwio	r3,0(r5)
8009a01c:	20c00617 	ldw	r3,24(r4)
8009a020:	003ff006 	br	80099fe4 <alt_msgdma_start_prefetcher_with_list_addr+0xb0>
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8009a024:	00fff3c4 	movi	r3,-49
8009a028:	50c6703a 	and	r3,r10,r3
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8009a02c:	02bffdc4 	movi	r10,-9
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8009a030:	18c00114 	ori	r3,r3,4
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8009a034:	1284703a 	and	r2,r2,r10
8009a038:	003fd506 	br	80099f90 <alt_msgdma_start_prefetcher_with_list_addr+0x5c>
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
8009a03c:	00bffc04 	movi	r2,-16
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
}
8009a040:	f800283a 	ret

8009a044 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8009a044:	28004726 	beq	r5,zero,8009a164 <alt_msgdma_start_prefetcher_with_std_desc_list+0x120>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8009a048:	28800317 	ldw	r2,12(r5)
8009a04c:	2811883a 	mov	r8,r5
8009a050:	11400626 	beq	r2,r5,8009a06c <alt_msgdma_start_prefetcher_with_std_desc_list+0x28>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8009a054:	28c00717 	ldw	r3,28(r5)
8009a058:	18d00034 	orhi	r3,r3,16384
8009a05c:	28c00715 	stw	r3,28(r5)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8009a060:	100b883a 	mov	r5,r2
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8009a064:	10800317 	ldw	r2,12(r2)
8009a068:	123ffa1e 	bne	r2,r8,8009a054 <alt_msgdma_start_prefetcher_with_std_desc_list+0x10>
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8009a06c:	28800717 	ldw	r2,28(r5)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8009a070:	20c00617 	ldw	r3,24(r4)
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8009a074:	10900034 	orhi	r2,r2,16384
8009a078:	28800715 	stw	r2,28(r5)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8009a07c:	18800037 	ldwio	r2,0(r3)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8009a080:	10c0004c 	andi	r3,r2,1
8009a084:	18003f1e 	bne	r3,zero,8009a184 <alt_msgdma_start_prefetcher_with_std_desc_list+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a088:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a08c:	017fff84 	movi	r5,-2
8009a090:	1952703a 	and	r9,r3,r5
8009a094:	4801703a 	wrctl	status,r9
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8009a098:	22400317 	ldw	r9,12(r4)
8009a09c:	02800804 	movi	r10,32
8009a0a0:	4a800135 	stwio	r10,4(r9)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8009a0a4:	22400317 	ldw	r9,12(r4)
8009a0a8:	4a800037 	ldwio	r10,0(r9)
8009a0ac:	4a800035 	stwio	r10,0(r9)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a0b0:	1801703a 	wrctl	status,r3
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8009a0b4:	20c00b17 	ldw	r3,44(r4)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009a0b8:	22400d17 	ldw	r9,52(r4)
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8009a0bc:	18002b26 	beq	r3,zero,8009a16c <alt_msgdma_start_prefetcher_with_std_desc_list+0x128>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009a0c0:	00fff7c4 	movi	r3,-33
8009a0c4:	48c6703a 	and	r3,r9,r3
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8009a0c8:	10800214 	ori	r2,r2,8
	 */
	if(dev->callback)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009a0cc:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a0d0:	0013303a 	rdctl	r9,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a0d4:	494a703a 	and	r5,r9,r5
8009a0d8:	2801703a 	wrctl	status,r5
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8009a0dc:	21400317 	ldw	r5,12(r4)
8009a0e0:	28c00135 	stwio	r3,4(r5)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8009a0e4:	20c00617 	ldw	r3,24(r4)
8009a0e8:	18800035 	stwio	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a0ec:	4801703a 	wrctl	status,r9
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8009a0f0:	20c00617 	ldw	r3,24(r4)
8009a0f4:	1a000135 	stwio	r8,4(r3)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8009a0f8:	20c00617 	ldw	r3,24(r4)
8009a0fc:	18000235 	stwio	zero,8(r3)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8009a100:	31803fcc 	andi	r6,r6,255
8009a104:	30000b1e 	bne	r6,zero,8009a134 <alt_msgdma_start_prefetcher_with_std_desc_list+0xf0>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8009a108:	00fffbc4 	movi	r3,-17
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8009a10c:	39c03fcc 	andi	r7,r7,255
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8009a110:	10c4703a 	and	r2,r2,r3
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009a114:	20c00617 	ldw	r3,24(r4)
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8009a118:	38000a1e 	bne	r7,zero,8009a144 <alt_msgdma_start_prefetcher_with_std_desc_list+0x100>
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8009a11c:	013fff44 	movi	r4,-3
8009a120:	1104703a 	and	r2,r2,r4
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8009a124:	10800054 	ori	r2,r2,1
8009a128:	18800035 	stwio	r2,0(r3)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
8009a12c:	0005883a 	mov	r2,zero
8009a130:	f800283a 	ret
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8009a134:	39c03fcc 	andi	r7,r7,255
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8009a138:	10800414 	ori	r2,r2,16
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009a13c:	20c00617 	ldw	r3,24(r4)
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8009a140:	383ff626 	beq	r7,zero,8009a11c <alt_msgdma_start_prefetcher_with_std_desc_list+0xd8>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8009a144:	10800094 	ori	r2,r2,2
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009a148:	19400304 	addi	r5,r3,12
8009a14c:	29800037 	ldwio	r6,0(r5)
8009a150:	303ff41e 	bne	r6,zero,8009a124 <alt_msgdma_start_prefetcher_with_std_desc_list+0xe0>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8009a154:	00c03fc4 	movi	r3,255
8009a158:	28c00035 	stwio	r3,0(r5)
8009a15c:	20c00617 	ldw	r3,24(r4)
8009a160:	003ff006 	br	8009a124 <alt_msgdma_start_prefetcher_with_std_desc_list+0xe0>
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
8009a164:	00bffa84 	movi	r2,-22
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
			park_mode_en, poll_en);
}
8009a168:	f800283a 	ret
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8009a16c:	00fff3c4 	movi	r3,-49
8009a170:	48c6703a 	and	r3,r9,r3
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8009a174:	027ffdc4 	movi	r9,-9
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8009a178:	18c00114 	ori	r3,r3,4
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8009a17c:	1244703a 	and	r2,r2,r9
8009a180:	003fd306 	br	8009a0d0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x8c>
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
8009a184:	00bffc04 	movi	r2,-16
{	
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8009a188:	f800283a 	ret

8009a18c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8009a18c:	defffe04 	addi	sp,sp,-8
8009a190:	dfc00115 	stw	ra,4(sp)
{
	alt_u32 descriptor_control_field = 0;
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8009a194:	28001c26 	beq	r5,zero,8009a208 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x7c>
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8009a198:	28800317 	ldw	r2,12(r5)
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8009a19c:	2815883a 	mov	r10,r5

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8009a1a0:	2813883a 	mov	r9,r5
8009a1a4:	28800c26 	beq	r5,r2,8009a1d8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8009a1a8:	28c00b17 	ldw	r3,44(r5)
8009a1ac:	1800031e 	bne	r3,zero,8009a1bc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x30>
8009a1b0:	00000906 	br	8009a1d8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
8009a1b4:	40c00b17 	ldw	r3,44(r8)
8009a1b8:	18000726 	beq	r3,zero,8009a1d8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8009a1bc:	28c00f17 	ldw	r3,60(r5)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8009a1c0:	1011883a 	mov	r8,r2
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8009a1c4:	18d00034 	orhi	r3,r3,16384
8009a1c8:	28c00f15 	stw	r3,60(r5)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8009a1cc:	100b883a 	mov	r5,r2
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8009a1d0:	10800317 	ldw	r2,12(r2)
8009a1d4:	127ff71e 	bne	r2,r9,8009a1b4 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x28>
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8009a1d8:	28c00f17 	ldw	r3,60(r5)
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8009a1dc:	38803fcc 	andi	r2,r7,255
8009a1e0:	31c03fcc 	andi	r7,r6,255
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8009a1e4:	18d00034 	orhi	r3,r3,16384
8009a1e8:	28c00f15 	stw	r3,60(r5)
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8009a1ec:	d8800015 	stw	r2,0(sp)
8009a1f0:	500b883a 	mov	r5,r10
8009a1f4:	000d883a 	mov	r6,zero
8009a1f8:	0099f340 	call	80099f34 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8009a1fc:	dfc00117 	ldw	ra,4(sp)
8009a200:	dec00204 	addi	sp,sp,8
8009a204:	f800283a 	ret
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
8009a208:	00bffa84 	movi	r2,-22
8009a20c:	003ffb06 	br	8009a1fc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>

8009a210 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8009a210:	defffe04 	addi	sp,sp,-8
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8009a214:	d1601104 	addi	r5,gp,-32700
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8009a218:	dc000015 	stw	r16,0(sp)
8009a21c:	dfc00115 	stw	ra,4(sp)
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8009a220:	009ac800 	call	8009ac80 <alt_find_dev>
8009a224:	1021883a 	mov	r16,r2

    if (NULL == dev)
8009a228:	10000526 	beq	r2,zero,8009a240 <alt_msgdma_open+0x30>
    {
        ALT_ERRNO = ENODEV;
    }

    return dev;
}
8009a22c:	8005883a 	mov	r2,r16
8009a230:	dfc00117 	ldw	ra,4(sp)
8009a234:	dc000017 	ldw	r16,0(sp)
8009a238:	dec00204 	addi	sp,sp,8
8009a23c:	f800283a 	ret
8009a240:	d0a00d17 	ldw	r2,-32716(gp)
8009a244:	10000426 	beq	r2,zero,8009a258 <alt_msgdma_open+0x48>
8009a248:	103ee83a 	callr	r2

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);

    if (NULL == dev)
    {
        ALT_ERRNO = ENODEV;
8009a24c:	00c004c4 	movi	r3,19
8009a250:	10c00015 	stw	r3,0(r2)
8009a254:	003ff506 	br	8009a22c <alt_msgdma_open+0x1c>
8009a258:	d0a76c04 	addi	r2,gp,-25168
8009a25c:	003ffb06 	br	8009a24c <alt_msgdma_open+0x3c>

8009a260 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8009a260:	defffb04 	addi	sp,sp,-20
8009a264:	dc800315 	stw	r18,12(sp)
8009a268:	dc400215 	stw	r17,8(sp)
8009a26c:	dc000115 	stw	r16,4(sp)
8009a270:	dfc00415 	stw	ra,16(sp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8009a274:	20801783 	ldbu	r2,94(r4)
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8009a278:	2021883a 	mov	r16,r4
8009a27c:	2823883a 	mov	r17,r5
8009a280:	3025883a 	mov	r18,r6
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8009a284:	1000261e 	bne	r2,zero,8009a320 <alt_msgdma_init+0xc0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8009a288:	80800317 	ldw	r2,12(r16)
8009a28c:	00c00084 	movi	r3,2
8009a290:	10c00135 	stwio	r3,4(r2)
8009a294:	80c00317 	ldw	r3,12(r16)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8009a298:	18800037 	ldwio	r2,0(r3)
8009a29c:	1080100c 	andi	r2,r2,64
8009a2a0:	103ffd1e 	bne	r2,zero,8009a298 <alt_msgdma_init+0x38>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8009a2a4:	18c00104 	addi	r3,r3,4
8009a2a8:	19000037 	ldwio	r4,0(r3)
8009a2ac:	00bffbc4 	movi	r2,-17
8009a2b0:	2084703a 	and	r2,r4,r2
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8009a2b4:	10800814 	ori	r2,r2,32
8009a2b8:	18800035 	stwio	r2,0(r3)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8009a2bc:	80800317 	ldw	r2,12(r16)
8009a2c0:	10c00037 	ldwio	r3,0(r2)
8009a2c4:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8009a2c8:	80801783 	ldbu	r2,94(r16)
8009a2cc:	10000426 	beq	r2,zero,8009a2e0 <alt_msgdma_init+0x80>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8009a2d0:	80800617 	ldw	r2,24(r16)
8009a2d4:	10800404 	addi	r2,r2,16
8009a2d8:	10c00037 	ldwio	r3,0(r2)
8009a2dc:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8009a2e0:	8009883a 	mov	r4,r16
8009a2e4:	d1601104 	addi	r5,gp,-32700
8009a2e8:	009ab4c0 	call	8009ab4c <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
            
    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8009a2ec:	01a002b4 	movhi	r6,32778
8009a2f0:	31a60204 	addi	r6,r6,-26616
8009a2f4:	d8000015 	stw	zero,0(sp)
8009a2f8:	800f883a 	mov	r7,r16
8009a2fc:	900b883a 	mov	r5,r18
8009a300:	8809883a 	mov	r4,r17
8009a304:	009ad040 	call	8009ad04 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }
    
    return;

}
8009a308:	dfc00417 	ldw	ra,16(sp)
8009a30c:	dc800317 	ldw	r18,12(sp)
8009a310:	dc400217 	ldw	r17,8(sp)
8009a314:	dc000117 	ldw	r16,4(sp)
8009a318:	dec00504 	addi	sp,sp,20
8009a31c:	f800283a 	ret
    int error;

    if (dev->prefetcher_enable)
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8009a320:	20800617 	ldw	r2,24(r4)
8009a324:	00c00104 	movi	r3,4
8009a328:	10c00035 	stwio	r3,0(r2)
8009a32c:	20c00617 	ldw	r3,24(r4)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8009a330:	18800037 	ldwio	r2,0(r3)
8009a334:	1080010c 	andi	r2,r2,4
8009a338:	103ffd1e 	bne	r2,zero,8009a330 <alt_msgdma_init+0xd0>
8009a33c:	003fd206 	br	8009a288 <alt_msgdma_init+0x28>

8009a340 <alt_msgdma_register_callback>:
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
    dev->callback         = callback;
8009a340:	21400b15 	stw	r5,44(r4)
    dev->callback_context = context;
8009a344:	21c00c15 	stw	r7,48(r4)
    dev->control          = control;
8009a348:	21800d15 	stw	r6,52(r4)
8009a34c:	f800283a 	ret

8009a350 <alt_msgdma_standard_descriptor_async_transfer>:
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a350:	21c00317 	ldw	r7,12(r4)
8009a354:	39800204 	addi	r6,r7,8
8009a358:	30800037 	ldwio	r2,0(r6)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8009a35c:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a360:	30800037 	ldwio	r2,0(r6)
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009a364:	21800917 	ldw	r6,36(r4)
8009a368:	1004d43a 	srli	r2,r2,16
8009a36c:	1180462e 	bgeu	r2,r6,8009a488 <alt_msgdma_standard_descriptor_async_transfer+0x138>
8009a370:	1980452e 	bgeu	r3,r6,8009a488 <alt_msgdma_standard_descriptor_async_transfer+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a374:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a378:	00bfff84 	movi	r2,-2
8009a37c:	1884703a 	and	r2,r3,r2
8009a380:	1001703a 	wrctl	status,r2
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009a384:	00800804 	movi	r2,32
8009a388:	38800135 	stwio	r2,4(r7)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009a38c:	20800317 	ldw	r2,12(r4)
8009a390:	11800037 	ldwio	r6,0(r2)
8009a394:	11800035 	stwio	r6,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a398:	1801703a 	wrctl	status,r3
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8009a39c:	28003326 	beq	r5,zero,8009a46c <alt_msgdma_standard_descriptor_async_transfer+0x11c>
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8009a3a0:	defffc04 	addi	sp,sp,-16
8009a3a4:	dc800215 	stw	r18,8(sp)
8009a3a8:	dc400115 	stw	r17,4(sp)
8009a3ac:	dc000015 	stw	r16,0(sp)
8009a3b0:	dfc00315 	stw	ra,12(sp)
8009a3b4:	2825883a 	mov	r18,r5
8009a3b8:	2023883a 	mov	r17,r4
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8009a3bc:	0404e244 	movi	r16,5001
8009a3c0:	00000506 	br	8009a3d8 <alt_msgdma_standard_descriptor_async_transfer+0x88>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8009a3c4:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a3c8:	80bfffc4 	addi	r2,r16,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a3cc:	10ffffcc 	andi	r3,r2,65535
8009a3d0:	1021883a 	mov	r16,r2
8009a3d4:	18002726 	beq	r3,zero,8009a474 <alt_msgdma_standard_descriptor_async_transfer+0x124>

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8009a3d8:	88c00417 	ldw	r3,16(r17)
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8009a3dc:	88800317 	ldw	r2,12(r17)
8009a3e0:	10800037 	ldwio	r2,0(r2)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8009a3e4:	01000044 	movi	r4,1
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8009a3e8:	1080010c 	andi	r2,r2,4
8009a3ec:	103ff51e 	bne	r2,zero,8009a3c4 <alt_msgdma_standard_descriptor_async_transfer+0x74>
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8009a3f0:	91000017 	ldw	r4,0(r18)
8009a3f4:	19000035 	stwio	r4,0(r3)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8009a3f8:	91000117 	ldw	r4,4(r18)
8009a3fc:	19000135 	stwio	r4,4(r3)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8009a400:	91000217 	ldw	r4,8(r18)
8009a404:	19000235 	stwio	r4,8(r3)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8009a408:	91000317 	ldw	r4,12(r18)
8009a40c:	19000335 	stwio	r4,12(r3)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8009a410:	88c00b17 	ldw	r3,44(r17)
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009a414:	89000d17 	ldw	r4,52(r17)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8009a418:	18001026 	beq	r3,zero,8009a45c <alt_msgdma_standard_descriptor_async_transfer+0x10c>
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009a41c:	00fff7c4 	movi	r3,-33
8009a420:	20c6703a 	and	r3,r4,r3
8009a424:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a428:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a42c:	013fff84 	movi	r4,-2
8009a430:	2908703a 	and	r4,r5,r4
8009a434:	2001703a 	wrctl	status,r4
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009a438:	89000317 	ldw	r4,12(r17)
8009a43c:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a440:	2801703a 	wrctl	status,r5
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);

}
8009a444:	dfc00317 	ldw	ra,12(sp)
8009a448:	dc800217 	ldw	r18,8(sp)
8009a44c:	dc400117 	ldw	r17,4(sp)
8009a450:	dc000017 	ldw	r16,0(sp)
8009a454:	dec00404 	addi	sp,sp,16
8009a458:	f800283a 	ret
    */
    else
    {
        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8009a45c:	00fff3c4 	movi	r3,-49
8009a460:	20c6703a 	and	r3,r4,r3
8009a464:	18c00114 	ori	r3,r3,4
8009a468:	003fef06 	br	8009a428 <alt_msgdma_standard_descriptor_async_transfer+0xd8>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8009a46c:	00bfffc4 	movi	r2,-1
8009a470:	f800283a 	ret
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
            {
                alt_printf("time out after 5 msec while waiting" 
8009a474:	012002b4 	movhi	r4,32778
8009a478:	2132c304 	addi	r4,r4,-13556
8009a47c:	009b0740 	call	8009b074 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009a480:	00bff084 	movi	r2,-62
8009a484:	003fef06 	br	8009a444 <alt_msgdma_standard_descriptor_async_transfer+0xf4>
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8009a488:	00bff904 	movi	r2,-28
{
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8009a48c:	f800283a 	ret

8009a490 <alt_msgdma_extended_descriptor_async_transfer>:
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a490:	21c00317 	ldw	r7,12(r4)
8009a494:	39800204 	addi	r6,r7,8
8009a498:	30800037 	ldwio	r2,0(r6)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8009a49c:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a4a0:	30800037 	ldwio	r2,0(r6)
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009a4a4:	21800917 	ldw	r6,36(r4)
8009a4a8:	1004d43a 	srli	r2,r2,16
8009a4ac:	11804f2e 	bgeu	r2,r6,8009a5ec <alt_msgdma_extended_descriptor_async_transfer+0x15c>
8009a4b0:	19804e2e 	bgeu	r3,r6,8009a5ec <alt_msgdma_extended_descriptor_async_transfer+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a4b4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a4b8:	00bfff84 	movi	r2,-2
8009a4bc:	1884703a 	and	r2,r3,r2
8009a4c0:	1001703a 	wrctl	status,r2
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009a4c4:	00800804 	movi	r2,32
8009a4c8:	38800135 	stwio	r2,4(r7)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009a4cc:	20800317 	ldw	r2,12(r4)
8009a4d0:	11800037 	ldwio	r6,0(r2)
8009a4d4:	11800035 	stwio	r6,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a4d8:	1801703a 	wrctl	status,r3
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8009a4dc:	28004526 	beq	r5,zero,8009a5f4 <alt_msgdma_extended_descriptor_async_transfer+0x164>
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8009a4e0:	defffc04 	addi	sp,sp,-16
8009a4e4:	dc800215 	stw	r18,8(sp)
8009a4e8:	dc400115 	stw	r17,4(sp)
8009a4ec:	dc000015 	stw	r16,0(sp)
8009a4f0:	dfc00315 	stw	ra,12(sp)
8009a4f4:	2821883a 	mov	r16,r5
8009a4f8:	2025883a 	mov	r18,r4
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8009a4fc:	0444e244 	movi	r17,5001
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8009a500:	90c00417 	ldw	r3,16(r18)
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8009a504:	90800317 	ldw	r2,12(r18)
8009a508:	10800037 	ldwio	r2,0(r2)
8009a50c:	1080010c 	andi	r2,r2,4
8009a510:	1000271e 	bne	r2,zero,8009a5b0 <alt_msgdma_extended_descriptor_async_transfer+0x120>
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8009a514:	81000017 	ldw	r4,0(r16)
8009a518:	19000035 	stwio	r4,0(r3)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8009a51c:	81000117 	ldw	r4,4(r16)
8009a520:	19000135 	stwio	r4,4(r3)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8009a524:	81000217 	ldw	r4,8(r16)
8009a528:	19000235 	stwio	r4,8(r3)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8009a52c:	8100030b 	ldhu	r4,12(r16)
8009a530:	1900032d 	sthio	r4,12(r3)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8009a534:	81000383 	ldbu	r4,14(r16)
8009a538:	190003a5 	stbio	r4,14(r3)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8009a53c:	810003c3 	ldbu	r4,15(r16)
8009a540:	190003e5 	stbio	r4,15(r3)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8009a544:	8100040b 	ldhu	r4,16(r16)
8009a548:	1900042d 	sthio	r4,16(r3)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8009a54c:	8100048b 	ldhu	r4,18(r16)
8009a550:	190004ad 	sthio	r4,18(r3)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8009a554:	18000535 	stwio	zero,20(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8009a558:	18000635 	stwio	zero,24(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8009a55c:	81000717 	ldw	r4,28(r16)
8009a560:	19000735 	stwio	r4,28(r3)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8009a564:	90c00b17 	ldw	r3,44(r18)
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009a568:	91000d17 	ldw	r4,52(r18)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8009a56c:	18001b26 	beq	r3,zero,8009a5dc <alt_msgdma_extended_descriptor_async_transfer+0x14c>
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8009a570:	00fff7c4 	movi	r3,-33
8009a574:	20c6703a 	and	r3,r4,r3
8009a578:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a57c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a580:	013fff84 	movi	r4,-2
8009a584:	2908703a 	and	r4,r5,r4
8009a588:	2001703a 	wrctl	status,r4
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009a58c:	91000317 	ldw	r4,12(r18)
8009a590:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a594:	2801703a 	wrctl	status,r5
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
}
8009a598:	dfc00317 	ldw	ra,12(sp)
8009a59c:	dc800217 	ldw	r18,8(sp)
8009a5a0:	dc400117 	ldw	r17,4(sp)
8009a5a4:	dc000017 	ldw	r16,0(sp)
8009a5a8:	dec00404 	addi	sp,sp,16
8009a5ac:	f800283a 	ret
        while(0 != alt_msgdma_write_extended_descriptor (
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8009a5b0:	01000044 	movi	r4,1
8009a5b4:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a5b8:	88bfffc4 	addi	r2,r17,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a5bc:	10ffffcc 	andi	r3,r2,65535
8009a5c0:	1023883a 	mov	r17,r2
8009a5c4:	183fce1e 	bne	r3,zero,8009a500 <alt_msgdma_extended_descriptor_async_transfer+0x70>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8009a5c8:	012002b4 	movhi	r4,32778
8009a5cc:	2132d904 	addi	r4,r4,-13468
8009a5d0:	009b0740 	call	8009b074 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009a5d4:	00bff084 	movi	r2,-62
8009a5d8:	003fef06 	br	8009a598 <alt_msgdma_extended_descriptor_async_transfer+0x108>
    */
    else
    {
        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8009a5dc:	00fff3c4 	movi	r3,-49
8009a5e0:	20c6703a 	and	r3,r4,r3
8009a5e4:	18c00114 	ori	r3,r3,4
8009a5e8:	003fe406 	br	8009a57c <alt_msgdma_extended_descriptor_async_transfer+0xec>
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8009a5ec:	00bff904 	movi	r2,-28
{
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8009a5f0:	f800283a 	ret
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8009a5f4:	00bfffc4 	movi	r2,-1
8009a5f8:	f800283a 	ret

8009a5fc <alt_msgdma_standard_descriptor_sync_transfer>:
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a5fc:	21800317 	ldw	r6,12(r4)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8009a600:	defffa04 	addi	sp,sp,-24
8009a604:	dc800215 	stw	r18,8(sp)
8009a608:	dc400115 	stw	r17,4(sp)
8009a60c:	2825883a 	mov	r18,r5
8009a610:	2023883a 	mov	r17,r4
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a614:	31000204 	addi	r4,r6,8
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8009a618:	dfc00515 	stw	ra,20(sp)
8009a61c:	dd000415 	stw	r20,16(sp)
8009a620:	dcc00315 	stw	r19,12(sp)
8009a624:	dc000015 	stw	r16,0(sp)
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a628:	20800037 	ldwio	r2,0(r4)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8009a62c:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a630:	20800037 	ldwio	r2,0(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8009a634:	0404e244 	movi	r16,5001
8009a638:	1004d43a 	srli	r2,r2,16
8009a63c:	00000b06 	br	8009a66c <alt_msgdma_standard_descriptor_sync_transfer+0x70>
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8009a640:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a644:	80bfffc4 	addi	r2,r16,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a648:	10ffffcc 	andi	r3,r2,65535
8009a64c:	1021883a 	mov	r16,r2
8009a650:	18005426 	beq	r3,zero,8009a7a4 <alt_msgdma_standard_descriptor_sync_transfer+0x1a8>
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a654:	89800317 	ldw	r6,12(r17)
8009a658:	31000204 	addi	r4,r6,8
8009a65c:	20800037 	ldwio	r2,0(r4)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8009a660:	10ffffcc 	andi	r3,r2,65535
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a664:	20800037 	ldwio	r2,0(r4)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8009a668:	1004d43a 	srli	r2,r2,16
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009a66c:	89400917 	ldw	r5,36(r17)
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8009a670:	01000044 	movi	r4,1
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009a674:	117ff22e 	bgeu	r2,r5,8009a640 <alt_msgdma_standard_descriptor_sync_transfer+0x44>
8009a678:	197ff12e 	bgeu	r3,r5,8009a640 <alt_msgdma_standard_descriptor_sync_transfer+0x44>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a67c:	0029303a 	rdctl	r20,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a680:	00bfff84 	movi	r2,-2
8009a684:	a084703a 	and	r2,r20,r2
8009a688:	1001703a 	wrctl	status,r2
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8009a68c:	00800804 	movi	r2,32
8009a690:	30800135 	stwio	r2,4(r6)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009a694:	88800317 	ldw	r2,12(r17)
8009a698:	10c00037 	ldwio	r3,0(r2)
8009a69c:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8009a6a0:	90005726 	beq	r18,zero,8009a800 <alt_msgdma_standard_descriptor_sync_transfer+0x204>
8009a6a4:	0404e244 	movi	r16,5001
8009a6a8:	00000506 	br	8009a6c0 <alt_msgdma_standard_descriptor_sync_transfer+0xc4>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8009a6ac:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a6b0:	80bfffc4 	addi	r2,r16,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a6b4:	10ffffcc 	andi	r3,r2,65535
8009a6b8:	1021883a 	mov	r16,r2
8009a6bc:	18004b26 	beq	r3,zero,8009a7ec <alt_msgdma_standard_descriptor_sync_transfer+0x1f0>
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8009a6c0:	88800417 	ldw	r2,16(r17)
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8009a6c4:	88c00317 	ldw	r3,12(r17)
8009a6c8:	1cc00037 	ldwio	r19,0(r3)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8009a6cc:	01000044 	movi	r4,1
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8009a6d0:	9cc0010c 	andi	r19,r19,4
8009a6d4:	983ff51e 	bne	r19,zero,8009a6ac <alt_msgdma_standard_descriptor_sync_transfer+0xb0>
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8009a6d8:	90c00017 	ldw	r3,0(r18)
8009a6dc:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8009a6e0:	90c00117 	ldw	r3,4(r18)
8009a6e4:	10c00135 	stwio	r3,4(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8009a6e8:	90c00217 	ldw	r3,8(r18)
8009a6ec:	10c00235 	stwio	r3,8(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8009a6f0:	90c00317 	ldw	r3,12(r18)
8009a6f4:	10c00335 	stwio	r3,12(r2)
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8009a6f8:	89000d17 	ldw	r4,52(r17)
8009a6fc:	88c00317 	ldw	r3,12(r17)
8009a700:	00bff2c4 	movi	r2,-53
8009a704:	2084703a 	and	r2,r4,r2
8009a708:	10800114 	ori	r2,r2,4
8009a70c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a710:	a001703a 	wrctl	status,r20
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8009a714:	89800317 	ldw	r6,12(r17)
8009a718:	30800037 	ldwio	r2,0(r6)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8009a71c:	10c0780c 	andi	r3,r2,480
8009a720:	1800161e 	bne	r3,zero,8009a77c <alt_msgdma_standard_descriptor_sync_transfer+0x180>
8009a724:	1080004c 	andi	r2,r2,1
8009a728:	10002326 	beq	r2,zero,8009a7b8 <alt_msgdma_standard_descriptor_sync_transfer+0x1bc>
    {
        alt_busy_sleep(1); /* delay 1us */
8009a72c:	01000044 	movi	r4,1
8009a730:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a734:	0404e204 	movi	r16,5000
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
        }
        counter++;
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8009a738:	89800317 	ldw	r6,12(r17)
8009a73c:	30800037 	ldwio	r2,0(r6)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
8009a740:	01000044 	movi	r4,1
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8009a744:	10c0780c 	andi	r3,r2,480
8009a748:	1104703a 	and	r2,r2,r4
8009a74c:	18000b1e 	bne	r3,zero,8009a77c <alt_msgdma_standard_descriptor_sync_transfer+0x180>
8009a750:	10001926 	beq	r2,zero,8009a7b8 <alt_msgdma_standard_descriptor_sync_transfer+0x1bc>
    {
        alt_busy_sleep(1); /* delay 1us */
8009a754:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a758:	80bfffc4 	addi	r2,r16,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a75c:	10ffffcc 	andi	r3,r2,65535
8009a760:	1021883a 	mov	r16,r2
8009a764:	183ff41e 	bne	r3,zero,8009a738 <alt_msgdma_standard_descriptor_sync_transfer+0x13c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8009a768:	012002b4 	movhi	r4,32778
8009a76c:	21331404 	addi	r4,r4,-13232
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
8009a770:	04fff084 	movi	r19,-62
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8009a774:	009b0740 	call	8009b074 <alt_printf>
8009a778:	00000106 	br	8009a780 <alt_msgdma_standard_descriptor_sync_transfer+0x184>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
8009a77c:	04c07804 	movi	r19,480
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
}
8009a780:	9805883a 	mov	r2,r19
8009a784:	dfc00517 	ldw	ra,20(sp)
8009a788:	dd000417 	ldw	r20,16(sp)
8009a78c:	dcc00317 	ldw	r19,12(sp)
8009a790:	dc800217 	ldw	r18,8(sp)
8009a794:	dc400117 	ldw	r17,4(sp)
8009a798:	dc000017 	ldw	r16,0(sp)
8009a79c:	dec00604 	addi	sp,sp,24
8009a7a0:	f800283a 	ret
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8009a7a4:	012002b4 	movhi	r4,32778
8009a7a8:	2132ef04 	addi	r4,r4,-13380
				" for storing descriptor\n");
            return -ETIME;
8009a7ac:	04fff084 	movi	r19,-62
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8009a7b0:	009b0740 	call	8009b074 <alt_printf>
8009a7b4:	003ff206 	br	8009a780 <alt_msgdma_standard_descriptor_sync_transfer+0x184>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8009a7b8:	31800104 	addi	r6,r6,4
8009a7bc:	30800037 	ldwio	r2,0(r6)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a7c0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a7c4:	00ffff84 	movi	r3,-2
8009a7c8:	20c6703a 	and	r3,r4,r3
8009a7cc:	1801703a 	wrctl	status,r3
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009a7d0:	10800814 	ori	r2,r2,32
8009a7d4:	30800035 	stwio	r2,0(r6)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009a7d8:	88800317 	ldw	r2,12(r17)
8009a7dc:	10c00037 	ldwio	r3,0(r2)
8009a7e0:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a7e4:	2001703a 	wrctl	status,r4
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8009a7e8:	003fe506 	br	8009a780 <alt_msgdma_standard_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
            {
                alt_printf("time out after 5 msec while writing standard" 
8009a7ec:	012002b4 	movhi	r4,32778
8009a7f0:	21330304 	addi	r4,r4,-13300
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009a7f4:	04fff084 	movi	r19,-62
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
            {
                alt_printf("time out after 5 msec while writing standard" 
8009a7f8:	009b0740 	call	8009b074 <alt_printf>
8009a7fc:	003fe006 	br	8009a780 <alt_msgdma_standard_descriptor_sync_transfer+0x184>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8009a800:	04ffffc4 	movi	r19,-1
8009a804:	003fde06 	br	8009a780 <alt_msgdma_standard_descriptor_sync_transfer+0x184>

8009a808 <alt_msgdma_extended_descriptor_sync_transfer>:
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a808:	20c00317 	ldw	r3,12(r4)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8009a80c:	defffa04 	addi	sp,sp,-24
8009a810:	dc800215 	stw	r18,8(sp)
8009a814:	dc000015 	stw	r16,0(sp)
8009a818:	2825883a 	mov	r18,r5
8009a81c:	2021883a 	mov	r16,r4
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a820:	19000204 	addi	r4,r3,8
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8009a824:	dfc00515 	stw	ra,20(sp)
8009a828:	dd000415 	stw	r20,16(sp)
8009a82c:	dcc00315 	stw	r19,12(sp)
8009a830:	dc400115 	stw	r17,4(sp)
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a834:	20800037 	ldwio	r2,0(r4)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8009a838:	117fffcc 	andi	r5,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a83c:	20800037 	ldwio	r2,0(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8009a840:	0444e244 	movi	r17,5001
8009a844:	1004d43a 	srli	r2,r2,16
8009a848:	00000b06 	br	8009a878 <alt_msgdma_extended_descriptor_sync_transfer+0x70>
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8009a84c:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a850:	88bfffc4 	addi	r2,r17,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a854:	10ffffcc 	andi	r3,r2,65535
8009a858:	1023883a 	mov	r17,r2
8009a85c:	18007026 	beq	r3,zero,8009aa20 <alt_msgdma_extended_descriptor_sync_transfer+0x218>
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a860:	80c00317 	ldw	r3,12(r16)
8009a864:	19000204 	addi	r4,r3,8
8009a868:	20800037 	ldwio	r2,0(r4)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8009a86c:	117fffcc 	andi	r5,r2,65535
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8009a870:	20800037 	ldwio	r2,0(r4)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8009a874:	1004d43a 	srli	r2,r2,16
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009a878:	81800917 	ldw	r6,36(r16)
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8009a87c:	01000044 	movi	r4,1
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8009a880:	11bff22e 	bgeu	r2,r6,8009a84c <alt_msgdma_extended_descriptor_sync_transfer+0x44>
8009a884:	29bff12e 	bgeu	r5,r6,8009a84c <alt_msgdma_extended_descriptor_sync_transfer+0x44>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a888:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a88c:	00bfff84 	movi	r2,-2
8009a890:	8884703a 	and	r2,r17,r2
8009a894:	1001703a 	wrctl	status,r2
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8009a898:	00800804 	movi	r2,32
8009a89c:	18800135 	stwio	r2,4(r3)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009a8a0:	80800317 	ldw	r2,12(r16)
8009a8a4:	10c00037 	ldwio	r3,0(r2)
8009a8a8:	10c00035 	stwio	r3,0(r2)
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8009a8ac:	90006126 	beq	r18,zero,8009aa34 <alt_msgdma_extended_descriptor_sync_transfer+0x22c>
8009a8b0:	04c4e244 	movi	r19,5001
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8009a8b4:	80c00417 	ldw	r3,16(r16)
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8009a8b8:	80800317 	ldw	r2,12(r16)
8009a8bc:	15000037 	ldwio	r20,0(r2)
8009a8c0:	a500010c 	andi	r20,r20,4
8009a8c4:	a000341e 	bne	r20,zero,8009a998 <alt_msgdma_extended_descriptor_sync_transfer+0x190>
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8009a8c8:	90800017 	ldw	r2,0(r18)
8009a8cc:	18800035 	stwio	r2,0(r3)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8009a8d0:	90800117 	ldw	r2,4(r18)
8009a8d4:	18800135 	stwio	r2,4(r3)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8009a8d8:	90800217 	ldw	r2,8(r18)
8009a8dc:	18800235 	stwio	r2,8(r3)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8009a8e0:	9080030b 	ldhu	r2,12(r18)
8009a8e4:	1880032d 	sthio	r2,12(r3)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8009a8e8:	90800383 	ldbu	r2,14(r18)
8009a8ec:	188003a5 	stbio	r2,14(r3)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8009a8f0:	908003c3 	ldbu	r2,15(r18)
8009a8f4:	188003e5 	stbio	r2,15(r3)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8009a8f8:	9080040b 	ldhu	r2,16(r18)
8009a8fc:	1880042d 	sthio	r2,16(r3)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8009a900:	9080048b 	ldhu	r2,18(r18)
8009a904:	188004ad 	sthio	r2,18(r3)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8009a908:	18000535 	stwio	zero,20(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8009a90c:	18000635 	stwio	zero,24(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8009a910:	90800717 	ldw	r2,28(r18)
8009a914:	18800735 	stwio	r2,28(r3)
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8009a918:	81000d17 	ldw	r4,52(r16)
8009a91c:	80c00317 	ldw	r3,12(r16)
8009a920:	00bff2c4 	movi	r2,-53
8009a924:	2084703a 	and	r2,r4,r2
8009a928:	10800114 	ori	r2,r2,4
8009a92c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009a930:	8801703a 	wrctl	status,r17
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8009a934:	80c00317 	ldw	r3,12(r16)
8009a938:	18800037 	ldwio	r2,0(r3)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8009a93c:	1100780c 	andi	r4,r2,480
8009a940:	2000201e 	bne	r4,zero,8009a9c4 <alt_msgdma_extended_descriptor_sync_transfer+0x1bc>
8009a944:	1080004c 	andi	r2,r2,1
8009a948:	10002826 	beq	r2,zero,8009a9ec <alt_msgdma_extended_descriptor_sync_transfer+0x1e4>
    {
        alt_busy_sleep(1); /* delay 1us */
8009a94c:	01000044 	movi	r4,1
8009a950:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a954:	0444e204 	movi	r17,5000
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
        }
        counter++;
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8009a958:	80c00317 	ldw	r3,12(r16)
8009a95c:	18800037 	ldwio	r2,0(r3)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
8009a960:	01000044 	movi	r4,1
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8009a964:	1140780c 	andi	r5,r2,480
8009a968:	1104703a 	and	r2,r2,r4
8009a96c:	2800151e 	bne	r5,zero,8009a9c4 <alt_msgdma_extended_descriptor_sync_transfer+0x1bc>
8009a970:	10001e26 	beq	r2,zero,8009a9ec <alt_msgdma_extended_descriptor_sync_transfer+0x1e4>
    {
        alt_busy_sleep(1); /* delay 1us */
8009a974:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a978:	8c7fffc4 	addi	r17,r17,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a97c:	88bfffcc 	andi	r2,r17,65535
8009a980:	103ff51e 	bne	r2,zero,8009a958 <alt_msgdma_extended_descriptor_sync_transfer+0x150>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8009a984:	012002b4 	movhi	r4,32778
8009a988:	21331404 	addi	r4,r4,-13232
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
8009a98c:	053ff084 	movi	r20,-62
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8009a990:	009b0740 	call	8009b074 <alt_printf>
8009a994:	00000c06 	br	8009a9c8 <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8009a998:	01000044 	movi	r4,1
8009a99c:	009aabc0 	call	8009aabc <alt_busy_sleep>
8009a9a0:	98bfffc4 	addi	r2,r19,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8009a9a4:	10ffffcc 	andi	r3,r2,65535
8009a9a8:	1027883a 	mov	r19,r2
8009a9ac:	183fc11e 	bne	r3,zero,8009a8b4 <alt_msgdma_extended_descriptor_sync_transfer+0xac>
            {
                alt_printf("time out after 5 msec while writing extended" 
8009a9b0:	012002b4 	movhi	r4,32778
8009a9b4:	21332604 	addi	r4,r4,-13160
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8009a9b8:	053ff084 	movi	r20,-62
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
            {
                alt_printf("time out after 5 msec while writing extended" 
8009a9bc:	009b0740 	call	8009b074 <alt_printf>
8009a9c0:	00000106 	br	8009a9c8 <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
8009a9c4:	05007804 	movi	r20,480
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
}
8009a9c8:	a005883a 	mov	r2,r20
8009a9cc:	dfc00517 	ldw	ra,20(sp)
8009a9d0:	dd000417 	ldw	r20,16(sp)
8009a9d4:	dcc00317 	ldw	r19,12(sp)
8009a9d8:	dc800217 	ldw	r18,8(sp)
8009a9dc:	dc400117 	ldw	r17,4(sp)
8009a9e0:	dc000017 	ldw	r16,0(sp)
8009a9e4:	dec00604 	addi	sp,sp,24
8009a9e8:	f800283a 	ret
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8009a9ec:	18c00104 	addi	r3,r3,4
8009a9f0:	18800037 	ldwio	r2,0(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009a9f4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009a9f8:	013fff84 	movi	r4,-2
8009a9fc:	2908703a 	and	r4,r5,r4
8009aa00:	2001703a 	wrctl	status,r4
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8009aa04:	10800814 	ori	r2,r2,32
8009aa08:	18800035 	stwio	r2,0(r3)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8009aa0c:	80800317 	ldw	r2,12(r16)
8009aa10:	10c00037 	ldwio	r3,0(r2)
8009aa14:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009aa18:	2801703a 	wrctl	status,r5
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8009aa1c:	003fea06 	br	8009a9c8 <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8009aa20:	012002b4 	movhi	r4,32778
8009aa24:	2132ef04 	addi	r4,r4,-13380
				" for storing descriptor\n");
            return -ETIME;
8009aa28:	053ff084 	movi	r20,-62
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8009aa2c:	009b0740 	call	8009b074 <alt_printf>
8009aa30:	003fe506 	br	8009a9c8 <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8009aa34:	053fffc4 	movi	r20,-1
8009aa38:	003fe306 	br	8009a9c8 <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>

8009aa3c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
8009aa3c:	d0a77517 	ldw	r2,-25132(gp)
8009aa40:	10001a26 	beq	r2,zero,8009aaac <alt_alarm_start+0x70>
  {
    if (alarm)
8009aa44:	20001b26 	beq	r4,zero,8009aab4 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
8009aa48:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
8009aa4c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009aa50:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009aa54:	00bfff84 	movi	r2,-2
8009aa58:	1884703a 	and	r2,r3,r2
8009aa5c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8009aa60:	d0a77417 	ldw	r2,-25136(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
8009aa64:	11800044 	addi	r6,r2,1
8009aa68:	314b883a 	add	r5,r6,r5
8009aa6c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8009aa70:	28800b36 	bltu	r5,r2,8009aaa0 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
8009aa74:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8009aa78:	d0a01404 	addi	r2,gp,-32688
8009aa7c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
8009aa80:	d0a01417 	ldw	r2,-32688(gp)
8009aa84:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
8009aa88:	d0a01417 	ldw	r2,-32688(gp)
  list->next           = entry;
8009aa8c:	d1201415 	stw	r4,-32688(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
8009aa90:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009aa94:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
8009aa98:	0005883a 	mov	r2,zero
8009aa9c:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
8009aaa0:	00800044 	movi	r2,1
8009aaa4:	20800405 	stb	r2,16(r4)
8009aaa8:	003ff306 	br	8009aa78 <alt_alarm_start+0x3c>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
8009aaac:	00bfde84 	movi	r2,-134
8009aab0:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
8009aab4:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
8009aab8:	f800283a 	ret

8009aabc <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
8009aabc:	01407c34 	movhi	r5,496
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
8009aac0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
8009aac4:	295f07c4 	addi	r5,r5,31775
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
8009aac8:	dc000015 	stw	r16,0(sp)
8009aacc:	dfc00115 	stw	ra,4(sp)
8009aad0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
8009aad4:	00822880 	call	80082288 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
8009aad8:	10001226 	beq	r2,zero,8009ab24 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8009aadc:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8009aae0:	013f8434 	movhi	r4,65040
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8009aae4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8009aae8:	2120f844 	addi	r4,r4,-31775
8009aaec:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8009aaf0:	297fffc4 	addi	r5,r5,-1
8009aaf4:	283ffe1e 	bne	r5,zero,8009aaf0 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
8009aaf8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8009aafc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
8009ab00:	18bffb16 	blt	r3,r2,8009aaf0 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8009ab04:	840010a4 	muli	r16,r16,66
8009ab08:	843fffc4 	addi	r16,r16,-1
8009ab0c:	803ffe1e 	bne	r16,zero,8009ab08 <alt_busy_sleep+0x4c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
8009ab10:	0005883a 	mov	r2,zero
8009ab14:	dfc00117 	ldw	ra,4(sp)
8009ab18:	dc000017 	ldw	r16,0(sp)
8009ab1c:	dec00204 	addi	sp,sp,8
8009ab20:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8009ab24:	840010a4 	muli	r16,r16,66
8009ab28:	843fffc4 	addi	r16,r16,-1
8009ab2c:	043ffe16 	blt	zero,r16,8009ab28 <alt_busy_sleep+0x6c>
8009ab30:	003ff706 	br	8009ab10 <alt_busy_sleep+0x54>

8009ab34 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
8009ab34:	0005883a 	mov	r2,zero
8009ab38:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
8009ab3c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
8009ab40:	10800804 	addi	r2,r2,32
8009ab44:	10fffd1e 	bne	r2,r3,8009ab3c <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8009ab48:	f800283a 	ret

8009ab4c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8009ab4c:	20000a26 	beq	r4,zero,8009ab78 <alt_dev_llist_insert+0x2c>
8009ab50:	20800217 	ldw	r2,8(r4)
8009ab54:	10000826 	beq	r2,zero,8009ab78 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
8009ab58:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8009ab5c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
8009ab60:	0005883a 	mov	r2,zero
  entry->next     = list->next;
8009ab64:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
8009ab68:	28c00017 	ldw	r3,0(r5)
8009ab6c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
8009ab70:	29000015 	stw	r4,0(r5)
8009ab74:	f800283a 	ret
8009ab78:	d0a00d17 	ldw	r2,-32716(gp)
8009ab7c:	10000926 	beq	r2,zero,8009aba4 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8009ab80:	deffff04 	addi	sp,sp,-4
8009ab84:	dfc00015 	stw	ra,0(sp)
8009ab88:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
8009ab8c:	00c00584 	movi	r3,22
8009ab90:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
8009ab94:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
8009ab98:	dfc00017 	ldw	ra,0(sp)
8009ab9c:	dec00104 	addi	sp,sp,4
8009aba0:	f800283a 	ret
8009aba4:	d0a76c04 	addi	r2,gp,-25168
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
8009aba8:	00c00584 	movi	r3,22
8009abac:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
8009abb0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
8009abb4:	f800283a 	ret

8009abb8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8009abb8:	defffc04 	addi	sp,sp,-16
8009abbc:	dc800215 	stw	r18,8(sp)
8009abc0:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8009abc4:	04a002b4 	movhi	r18,32778
8009abc8:	042002b4 	movhi	r16,32778
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8009abcc:	dfc00315 	stw	ra,12(sp)
8009abd0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8009abd4:	842df804 	addi	r16,r16,-18464
8009abd8:	94adf904 	addi	r18,r18,-18460
8009abdc:	84800936 	bltu	r16,r18,8009ac04 <_do_ctors+0x4c>
8009abe0:	84a5c83a 	sub	r18,r16,r18
8009abe4:	9024d0ba 	srli	r18,r18,2
8009abe8:	0023883a 	mov	r17,zero
8009abec:	94800044 	addi	r18,r18,1
        (*ctor) (); 
8009abf0:	80800017 	ldw	r2,0(r16)
8009abf4:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8009abf8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
8009abfc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8009ac00:	8cbffb1e 	bne	r17,r18,8009abf0 <_do_ctors+0x38>
        (*ctor) (); 
}
8009ac04:	dfc00317 	ldw	ra,12(sp)
8009ac08:	dc800217 	ldw	r18,8(sp)
8009ac0c:	dc400117 	ldw	r17,4(sp)
8009ac10:	dc000017 	ldw	r16,0(sp)
8009ac14:	dec00404 	addi	sp,sp,16
8009ac18:	f800283a 	ret

8009ac1c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8009ac1c:	defffc04 	addi	sp,sp,-16
8009ac20:	dc800215 	stw	r18,8(sp)
8009ac24:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8009ac28:	04a002b4 	movhi	r18,32778
8009ac2c:	042002b4 	movhi	r16,32778
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8009ac30:	dfc00315 	stw	ra,12(sp)
8009ac34:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8009ac38:	842df804 	addi	r16,r16,-18464
8009ac3c:	94adf904 	addi	r18,r18,-18460
8009ac40:	84800936 	bltu	r16,r18,8009ac68 <_do_dtors+0x4c>
8009ac44:	84a5c83a 	sub	r18,r16,r18
8009ac48:	9024d0ba 	srli	r18,r18,2
8009ac4c:	0023883a 	mov	r17,zero
8009ac50:	94800044 	addi	r18,r18,1
        (*dtor) (); 
8009ac54:	80800017 	ldw	r2,0(r16)
8009ac58:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8009ac5c:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
8009ac60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8009ac64:	8cbffb1e 	bne	r17,r18,8009ac54 <_do_dtors+0x38>
        (*dtor) (); 
}
8009ac68:	dfc00317 	ldw	ra,12(sp)
8009ac6c:	dc800217 	ldw	r18,8(sp)
8009ac70:	dc400117 	ldw	r17,4(sp)
8009ac74:	dc000017 	ldw	r16,0(sp)
8009ac78:	dec00404 	addi	sp,sp,16
8009ac7c:	f800283a 	ret

8009ac80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8009ac80:	defffb04 	addi	sp,sp,-20
8009ac84:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
8009ac88:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8009ac8c:	dc400115 	stw	r17,4(sp)
8009ac90:	2823883a 	mov	r17,r5
8009ac94:	dcc00315 	stw	r19,12(sp)
8009ac98:	dfc00415 	stw	ra,16(sp)
8009ac9c:	dc800215 	stw	r18,8(sp)
8009aca0:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
8009aca4:	00832a00 	call	800832a0 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8009aca8:	8c000b26 	beq	r17,r16,8009acd8 <alt_find_dev+0x58>
8009acac:	14800044 	addi	r18,r2,1
8009acb0:	00000206 	br	8009acbc <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
8009acb4:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8009acb8:	8c000726 	beq	r17,r16,8009acd8 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8009acbc:	81000217 	ldw	r4,8(r16)
8009acc0:	900d883a 	mov	r6,r18
8009acc4:	980b883a 	mov	r5,r19
8009acc8:	0082c700 	call	80082c70 <memcmp>
8009accc:	103ff91e 	bne	r2,zero,8009acb4 <alt_find_dev+0x34>
8009acd0:	8005883a 	mov	r2,r16
8009acd4:	00000106 	br	8009acdc <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8009acd8:	0005883a 	mov	r2,zero
}
8009acdc:	dfc00417 	ldw	ra,16(sp)
8009ace0:	dcc00317 	ldw	r19,12(sp)
8009ace4:	dc800217 	ldw	r18,8(sp)
8009ace8:	dc400117 	ldw	r17,4(sp)
8009acec:	dc000017 	ldw	r16,0(sp)
8009acf0:	dec00504 	addi	sp,sp,20
8009acf4:	f800283a 	ret

8009acf8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
8009acf8:	01440004 	movi	r5,4096
8009acfc:	0009883a 	mov	r4,zero
8009ad00:	009b4281 	jmpi	8009b428 <alt_icache_flush>

8009ad04 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8009ad04:	009ad901 	jmpi	8009ad90 <alt_iic_isr_register>

8009ad08 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009ad08:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009ad0c:	00bfff84 	movi	r2,-2
8009ad10:	2084703a 	and	r2,r4,r2
8009ad14:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
8009ad18:	00c00044 	movi	r3,1
8009ad1c:	d0a77317 	ldw	r2,-25140(gp)
8009ad20:	194a983a 	sll	r5,r3,r5
8009ad24:	288ab03a 	or	r5,r5,r2
8009ad28:	d1677315 	stw	r5,-25140(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8009ad2c:	d0a77317 	ldw	r2,-25140(gp)
8009ad30:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009ad34:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
8009ad38:	0005883a 	mov	r2,zero
8009ad3c:	f800283a 	ret

8009ad40 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009ad40:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009ad44:	00bfff84 	movi	r2,-2
8009ad48:	2084703a 	and	r2,r4,r2
8009ad4c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
8009ad50:	00ffff84 	movi	r3,-2
8009ad54:	d0a77317 	ldw	r2,-25140(gp)
8009ad58:	194a183a 	rol	r5,r3,r5
8009ad5c:	288a703a 	and	r5,r5,r2
8009ad60:	d1677315 	stw	r5,-25140(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8009ad64:	d0a77317 	ldw	r2,-25140(gp)
8009ad68:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009ad6c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
8009ad70:	0005883a 	mov	r2,zero
8009ad74:	f800283a 	ret

8009ad78 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8009ad78:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
8009ad7c:	00800044 	movi	r2,1
8009ad80:	1144983a 	sll	r2,r2,r5
8009ad84:	10c4703a 	and	r2,r2,r3
}
8009ad88:	1004c03a 	cmpne	r2,r2,zero
8009ad8c:	f800283a 	ret

8009ad90 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
8009ad90:	00c007c4 	movi	r3,31
8009ad94:	19401616 	blt	r3,r5,8009adf0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8009ad98:	defffe04 	addi	sp,sp,-8
8009ad9c:	dfc00115 	stw	ra,4(sp)
8009ada0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009ada4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009ada8:	00ffff84 	movi	r3,-2
8009adac:	80c6703a 	and	r3,r16,r3
8009adb0:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
8009adb4:	280490fa 	slli	r2,r5,3
8009adb8:	00e002b4 	movhi	r3,32778
8009adbc:	18c1f304 	addi	r3,r3,1996
8009adc0:	1885883a 	add	r2,r3,r2
8009adc4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
8009adc8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8009adcc:	30000626 	beq	r6,zero,8009ade8 <alt_iic_isr_register+0x58>
8009add0:	009ad080 	call	8009ad08 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009add4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
8009add8:	dfc00117 	ldw	ra,4(sp)
8009addc:	dc000017 	ldw	r16,0(sp)
8009ade0:	dec00204 	addi	sp,sp,8
8009ade4:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8009ade8:	009ad400 	call	8009ad40 <alt_ic_irq_disable>
8009adec:	003ff906 	br	8009add4 <alt_iic_isr_register+0x44>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
8009adf0:	00bffa84 	movi	r2,-22
8009adf4:	f800283a 	ret

8009adf8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8009adf8:	defffd04 	addi	sp,sp,-12
8009adfc:	dc400115 	stw	r17,4(sp)
8009ae00:	dc000015 	stw	r16,0(sp)
8009ae04:	2823883a 	mov	r17,r5
8009ae08:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
8009ae0c:	01400044 	movi	r5,1
8009ae10:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8009ae14:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
8009ae18:	009aefc0 	call	8009aefc <open>

  if (old >= 0)
8009ae1c:	10000c16 	blt	r2,zero,8009ae50 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
8009ae20:	10c00324 	muli	r3,r2,12
8009ae24:	016002b4 	movhi	r5,32778
8009ae28:	29756004 	addi	r5,r5,-10880
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
8009ae2c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
8009ae30:	28c5883a 	add	r2,r5,r3
8009ae34:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
8009ae38:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
8009ae3c:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
8009ae40:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8009ae44:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
8009ae48:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
8009ae4c:	0098fa80 	call	80098fa8 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
8009ae50:	01807fc4 	movi	r6,511
8009ae54:	000b883a 	mov	r5,zero
8009ae58:	8809883a 	mov	r4,r17
8009ae5c:	009aefc0 	call	8009aefc <open>

  if (old >= 0)
8009ae60:	10000c16 	blt	r2,zero,8009ae94 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
8009ae64:	10c00324 	muli	r3,r2,12
8009ae68:	016002b4 	movhi	r5,32778
8009ae6c:	29756004 	addi	r5,r5,-10880
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
8009ae70:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
8009ae74:	28c5883a 	add	r2,r5,r3
8009ae78:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
8009ae7c:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
8009ae80:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
8009ae84:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8009ae88:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
8009ae8c:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
8009ae90:	0098fa80 	call	80098fa8 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
8009ae94:	01807fc4 	movi	r6,511
8009ae98:	01400044 	movi	r5,1
8009ae9c:	8009883a 	mov	r4,r16
8009aea0:	009aefc0 	call	8009aefc <open>

  if (old >= 0)
8009aea4:	10001016 	blt	r2,zero,8009aee8 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
8009aea8:	10c00324 	muli	r3,r2,12
8009aeac:	016002b4 	movhi	r5,32778
8009aeb0:	29756004 	addi	r5,r5,-10880
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
8009aeb4:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
8009aeb8:	28c5883a 	add	r2,r5,r3
8009aebc:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
8009aec0:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
8009aec4:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
8009aec8:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8009aecc:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
8009aed0:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
8009aed4:	dfc00217 	ldw	ra,8(sp)
8009aed8:	dc400117 	ldw	r17,4(sp)
8009aedc:	dc000017 	ldw	r16,0(sp)
8009aee0:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
8009aee4:	0098fa81 	jmpi	80098fa8 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
8009aee8:	dfc00217 	ldw	ra,8(sp)
8009aeec:	dc400117 	ldw	r17,4(sp)
8009aef0:	dc000017 	ldw	r16,0(sp)
8009aef4:	dec00304 	addi	sp,sp,12
8009aef8:	f800283a 	ret

8009aefc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8009aefc:	defffa04 	addi	sp,sp,-24
8009af00:	dc000015 	stw	r16,0(sp)
8009af04:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8009af08:	d1600904 	addi	r5,gp,-32732
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8009af0c:	dc800215 	stw	r18,8(sp)
8009af10:	dc400115 	stw	r17,4(sp)
8009af14:	dfc00515 	stw	ra,20(sp)
8009af18:	dd000415 	stw	r20,16(sp)
8009af1c:	dcc00315 	stw	r19,12(sp)
8009af20:	2023883a 	mov	r17,r4
8009af24:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8009af28:	009ac800 	call	8009ac80 <alt_find_dev>
8009af2c:	10004626 	beq	r2,zero,8009b048 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
8009af30:	1009883a 	mov	r4,r2
8009af34:	1029883a 	mov	r20,r2
8009af38:	009b3d80 	call	8009b3d8 <alt_get_fd>
8009af3c:	1027883a 	mov	r19,r2
8009af40:	1000090e 	bge	r2,zero,8009af68 <open+0x6c>
8009af44:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
8009af48:	9809883a 	mov	r4,r19
8009af4c:	0098fa80 	call	80098fa8 <alt_release_fd>
8009af50:	d0a00d17 	ldw	r2,-32716(gp)
8009af54:	10004326 	beq	r2,zero,8009b064 <open+0x168>
8009af58:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
8009af5c:	14000015 	stw	r16,0(r2)
    return -1;
8009af60:	00bfffc4 	movi	r2,-1
8009af64:	00002e06 	br	8009b020 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
8009af68:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8009af6c:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
8009af70:	00a002b4 	movhi	r2,32778

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8009af74:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
8009af78:	10b56004 	addi	r2,r2,-10880

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8009af7c:	80c6703a 	and	r3,r16,r3
8009af80:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
8009af84:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8009af88:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8009af8c:	d2200817 	ldw	r8,-32736(gp)
8009af90:	21c00017 	ldw	r7,0(r4)
8009af94:	11400204 	addi	r5,r2,8
8009af98:	0007883a 	mov	r3,zero
8009af9c:	00000306 	br	8009afac <open+0xb0>
8009afa0:	10800304 	addi	r2,r2,12
8009afa4:	29400304 	addi	r5,r5,12
8009afa8:	40c01436 	bltu	r8,r3,8009affc <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8009afac:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8009afb0:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8009afb4:	31fffa1e 	bne	r6,r7,8009afa0 <open+0xa4>
8009afb8:	29800017 	ldw	r6,0(r5)
8009afbc:	303ff80e 	bge	r6,zero,8009afa0 <open+0xa4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8009afc0:	20bff726 	beq	r4,r2,8009afa0 <open+0xa4>
8009afc4:	04000344 	movi	r16,13
8009afc8:	003fdf06 	br	8009af48 <open+0x4c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
8009afcc:	1009883a 	mov	r4,r2
8009afd0:	009b3d80 	call	8009b3d8 <alt_get_fd>
8009afd4:	1027883a 	mov	r19,r2
8009afd8:	103fda16 	blt	r2,zero,8009af44 <open+0x48>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
8009afdc:	99000324 	muli	r4,r19,12
8009afe0:	00a002b4 	movhi	r2,32778
8009afe4:	10b56004 	addi	r2,r2,-10880
8009afe8:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8009afec:	00900034 	movhi	r2,16384
8009aff0:	10bfffc4 	addi	r2,r2,-1
8009aff4:	8084703a 	and	r2,r16,r2
8009aff8:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8009affc:	a0800317 	ldw	r2,12(r20)
8009b000:	10000f26 	beq	r2,zero,8009b040 <open+0x144>
8009b004:	900f883a 	mov	r7,r18
8009b008:	800d883a 	mov	r6,r16
8009b00c:	880b883a 	mov	r5,r17
8009b010:	103ee83a 	callr	r2
8009b014:	1007883a 	mov	r3,r2
8009b018:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8009b01c:	18001316 	blt	r3,zero,8009b06c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
8009b020:	dfc00517 	ldw	ra,20(sp)
8009b024:	dd000417 	ldw	r20,16(sp)
8009b028:	dcc00317 	ldw	r19,12(sp)
8009b02c:	dc800217 	ldw	r18,8(sp)
8009b030:	dc400117 	ldw	r17,4(sp)
8009b034:	dc000017 	ldw	r16,0(sp)
8009b038:	dec00604 	addi	sp,sp,24
8009b03c:	f800283a 	ret
8009b040:	9805883a 	mov	r2,r19
8009b044:	003ff606 	br	8009b020 <open+0x124>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8009b048:	8809883a 	mov	r4,r17
8009b04c:	009b32c0 	call	8009b32c <alt_find_file>
8009b050:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8009b054:	103fdd1e 	bne	r2,zero,8009afcc <open+0xd0>
8009b058:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8009b05c:	04ffffc4 	movi	r19,-1
8009b060:	003fb906 	br	8009af48 <open+0x4c>
8009b064:	d0a76c04 	addi	r2,gp,-25168
8009b068:	003fbc06 	br	8009af5c <open+0x60>
8009b06c:	00e1c83a 	sub	r16,zero,r3
8009b070:	003fb506 	br	8009af48 <open+0x4c>

8009b074 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8009b074:	defff304 	addi	sp,sp,-52
8009b078:	dc000015 	stw	r16,0(sp)
8009b07c:	2021883a 	mov	r16,r4
8009b080:	dfc00915 	stw	ra,36(sp)
8009b084:	df000815 	stw	fp,32(sp)
8009b088:	ddc00715 	stw	r23,28(sp)
8009b08c:	dd800615 	stw	r22,24(sp)
8009b090:	dd400515 	stw	r21,20(sp)
8009b094:	dd000415 	stw	r20,16(sp)
8009b098:	dcc00315 	stw	r19,12(sp)
8009b09c:	dc800215 	stw	r18,8(sp)
8009b0a0:	dc400115 	stw	r17,4(sp)
8009b0a4:	d9400a15 	stw	r5,40(sp)
8009b0a8:	d9800b15 	stw	r6,44(sp)
8009b0ac:	d9c00c15 	stw	r7,48(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8009b0b0:	04400944 	movi	r17,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
8009b0b4:	dcc00a04 	addi	r19,sp,40
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
8009b0b8:	054018c4 	movi	r21,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
8009b0bc:	05801e04 	movi	r22,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8009b0c0:	048003c4 	movi	r18,15
                        if (digit <= 9)
8009b0c4:	05000244 	movi	r20,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8009b0c8:	81000007 	ldb	r4,0(r16)
8009b0cc:	20000526 	beq	r4,zero,8009b0e4 <alt_printf+0x70>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8009b0d0:	24401026 	beq	r4,r17,8009b114 <alt_printf+0xa0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8009b0d4:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
8009b0d8:	009b1f00 	call	8009b1f0 <alt_putchar>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8009b0dc:	81000007 	ldb	r4,0(r16)
8009b0e0:	203ffb1e 	bne	r4,zero,8009b0d0 <alt_printf+0x5c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8009b0e4:	dfc00917 	ldw	ra,36(sp)
8009b0e8:	df000817 	ldw	fp,32(sp)
8009b0ec:	ddc00717 	ldw	r23,28(sp)
8009b0f0:	dd800617 	ldw	r22,24(sp)
8009b0f4:	dd400517 	ldw	r21,20(sp)
8009b0f8:	dd000417 	ldw	r20,16(sp)
8009b0fc:	dcc00317 	ldw	r19,12(sp)
8009b100:	dc800217 	ldw	r18,8(sp)
8009b104:	dc400117 	ldw	r17,4(sp)
8009b108:	dc000017 	ldw	r16,0(sp)
8009b10c:	dec00d04 	addi	sp,sp,52
8009b110:	f800283a 	ret
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8009b114:	80800047 	ldb	r2,1(r16)
8009b118:	84000084 	addi	r16,r16,2
8009b11c:	103ff126 	beq	r2,zero,8009b0e4 <alt_printf+0x70>
            {
                if (c == '%')
8009b120:	14402926 	beq	r2,r17,8009b1c8 <alt_printf+0x154>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
8009b124:	15402b26 	beq	r2,r21,8009b1d4 <alt_printf+0x160>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
8009b128:	15800b26 	beq	r2,r22,8009b158 <alt_printf+0xe4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8009b12c:	00c01cc4 	movi	r3,115
8009b130:	10ffe51e 	bne	r2,r3,8009b0c8 <alt_printf+0x54>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8009b134:	9f000017 	ldw	fp,0(r19)
8009b138:	9cc00104 	addi	r19,r19,4

                    while(*s)
8009b13c:	e1000007 	ldb	r4,0(fp)
8009b140:	203fe126 	beq	r4,zero,8009b0c8 <alt_printf+0x54>
                      alt_putchar(*s++);
8009b144:	e7000044 	addi	fp,fp,1
8009b148:	009b1f00 	call	8009b1f0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8009b14c:	e1000007 	ldb	r4,0(fp)
8009b150:	203ffc1e 	bne	r4,zero,8009b144 <alt_printf+0xd0>
8009b154:	003fdc06 	br	8009b0c8 <alt_printf+0x54>
                    alt_putchar(v);
                }
                else if (c == 'x')
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8009b158:	9dc00017 	ldw	r23,0(r19)
8009b15c:	9cc00104 	addi	r19,r19,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8009b160:	b8002026 	beq	r23,zero,8009b1e4 <alt_printf+0x170>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8009b164:	b8bc002c 	andhi	r2,r23,61440
8009b168:	07000704 	movi	fp,28
8009b16c:	1000101e 	bne	r2,zero,8009b1b0 <alt_printf+0x13c>
                        digit_shift -= 4;
8009b170:	e73fff04 	addi	fp,fp,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8009b174:	9704983a 	sll	r2,r18,fp
8009b178:	15c4703a 	and	r2,r2,r23
8009b17c:	103ffc26 	beq	r2,zero,8009b170 <alt_printf+0xfc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8009b180:	e03fd116 	blt	fp,zero,8009b0c8 <alt_printf+0x54>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8009b184:	9708983a 	sll	r4,r18,fp
8009b188:	25c8703a 	and	r4,r4,r23
8009b18c:	2708d83a 	srl	r4,r4,fp
                        if (digit <= 9)
8009b190:	a1000b36 	bltu	r20,r4,8009b1c0 <alt_printf+0x14c>
                            c = '0' + digit;
8009b194:	21000c04 	addi	r4,r4,48
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
8009b198:	21003fcc 	andi	r4,r4,255
8009b19c:	2100201c 	xori	r4,r4,128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8009b1a0:	e73fff04 	addi	fp,fp,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
8009b1a4:	213fe004 	addi	r4,r4,-128
8009b1a8:	009b1f00 	call	8009b1f0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8009b1ac:	e03fc616 	blt	fp,zero,8009b0c8 <alt_printf+0x54>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8009b1b0:	9708983a 	sll	r4,r18,fp
8009b1b4:	25c8703a 	and	r4,r4,r23
8009b1b8:	2708d83a 	srl	r4,r4,fp
                        if (digit <= 9)
8009b1bc:	a13ff52e 	bgeu	r20,r4,8009b194 <alt_printf+0x120>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
8009b1c0:	210015c4 	addi	r4,r4,87
8009b1c4:	003ff406 	br	8009b198 <alt_printf+0x124>
            if ((c = *w++) != 0)
            {
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8009b1c8:	8809883a 	mov	r4,r17
8009b1cc:	009b1f00 	call	8009b1f0 <alt_putchar>
8009b1d0:	003fbd06 	br	8009b0c8 <alt_printf+0x54>
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
8009b1d4:	99000017 	ldw	r4,0(r19)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
8009b1d8:	9cc00104 	addi	r19,r19,4
                    alt_putchar(v);
8009b1dc:	009b1f00 	call	8009b1f0 <alt_putchar>
8009b1e0:	003fb906 	br	8009b0c8 <alt_printf+0x54>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
8009b1e4:	01000c04 	movi	r4,48
8009b1e8:	009b1f00 	call	8009b1f0 <alt_putchar>
                        continue;
8009b1ec:	003fb606 	br	8009b0c8 <alt_printf+0x54>

8009b1f0 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8009b1f0:	d0a00117 	ldw	r2,-32764(gp)
8009b1f4:	11400217 	ldw	r5,8(r2)
8009b1f8:	008b2641 	jmpi	8008b264 <putc>

8009b1fc <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009b1fc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009b200:	00bfff84 	movi	r2,-2
8009b204:	1884703a 	and	r2,r3,r2
8009b208:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
8009b20c:	21400117 	ldw	r5,4(r4)
8009b210:	20800017 	ldw	r2,0(r4)
8009b214:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
8009b218:	21400117 	ldw	r5,4(r4)
8009b21c:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8009b220:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
8009b224:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009b228:	1801703a 	wrctl	status,r3
8009b22c:	f800283a 	ret

8009b230 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8009b230:	d0a77417 	ldw	r2,-25136(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8009b234:	defffa04 	addi	sp,sp,-24
8009b238:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8009b23c:	d4201417 	ldw	r16,-32688(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8009b240:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8009b244:	dc800215 	stw	r18,8(sp)
8009b248:	dfc00515 	stw	ra,20(sp)
8009b24c:	dd000415 	stw	r20,16(sp)
8009b250:	dcc00315 	stw	r19,12(sp)
8009b254:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8009b258:	d4a01404 	addi	r18,gp,-32688

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8009b25c:	d0a77415 	stw	r2,-25136(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8009b260:	84801126 	beq	r16,r18,8009b2a8 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
8009b264:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009b268:	053fff84 	movi	r20,-2
8009b26c:	00000606 	br	8009b288 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
8009b270:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
8009b274:	d0e77417 	ldw	r3,-25136(gp)
8009b278:	80800217 	ldw	r2,8(r16)
8009b27c:	1880122e 	bgeu	r3,r2,8009b2c8 <alt_tick+0x98>
8009b280:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8009b284:	8c800826 	beq	r17,r18,8009b2a8 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
8009b288:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
8009b28c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
8009b290:	103ff826 	beq	r2,zero,8009b274 <alt_tick+0x44>
8009b294:	d0a77417 	ldw	r2,-25136(gp)
8009b298:	103ff526 	beq	r2,zero,8009b270 <alt_tick+0x40>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
8009b29c:	d0a77417 	ldw	r2,-25136(gp)
8009b2a0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8009b2a4:	8cbff81e 	bne	r17,r18,8009b288 <alt_tick+0x58>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
8009b2a8:	dfc00517 	ldw	ra,20(sp)
8009b2ac:	dd000417 	ldw	r20,16(sp)
8009b2b0:	dcc00317 	ldw	r19,12(sp)
8009b2b4:	dc800217 	ldw	r18,8(sp)
8009b2b8:	dc400117 	ldw	r17,4(sp)
8009b2bc:	dc000017 	ldw	r16,0(sp)
8009b2c0:	dec00604 	addi	sp,sp,24
8009b2c4:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
8009b2c8:	80800317 	ldw	r2,12(r16)
8009b2cc:	81000517 	ldw	r4,20(r16)
8009b2d0:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8009b2d4:	10000726 	beq	r2,zero,8009b2f4 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
8009b2d8:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8009b2dc:	d1277417 	ldw	r4,-25136(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
8009b2e0:	10c5883a 	add	r2,r2,r3
8009b2e4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8009b2e8:	113fe52e 	bgeu	r2,r4,8009b280 <alt_tick+0x50>
        {
          alarm->rollover = 1;
8009b2ec:	84c00405 	stb	r19,16(r16)
8009b2f0:	003fe306 	br	8009b280 <alt_tick+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8009b2f4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8009b2f8:	1506703a 	and	r3,r2,r20
8009b2fc:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
8009b300:	81000117 	ldw	r4,4(r16)
8009b304:	80c00017 	ldw	r3,0(r16)
8009b308:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
8009b30c:	81000117 	ldw	r4,4(r16)
8009b310:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8009b314:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
8009b318:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8009b31c:	1001703a 	wrctl	status,r2
8009b320:	003fd706 	br	8009b280 <alt_tick+0x50>

8009b324 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
8009b324:	000170fa 	wrctl	ienable,zero
8009b328:	f800283a 	ret

8009b32c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8009b32c:	defffa04 	addi	sp,sp,-24
8009b330:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8009b334:	d4200b17 	ldw	r16,-32724(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8009b338:	dd000415 	stw	r20,16(sp)
8009b33c:	dfc00515 	stw	ra,20(sp)
8009b340:	dcc00315 	stw	r19,12(sp)
8009b344:	dc800215 	stw	r18,8(sp)
8009b348:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8009b34c:	d5200b04 	addi	r20,gp,-32724
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8009b350:	85001626 	beq	r16,r20,8009b3ac <alt_find_file+0x80>
8009b354:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
8009b358:	04c00bc4 	movi	r19,47
8009b35c:	00000806 	br	8009b380 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8009b360:	9185883a 	add	r2,r18,r6
8009b364:	10800007 	ldb	r2,0(r2)
8009b368:	14c00126 	beq	r2,r19,8009b370 <alt_find_file+0x44>
8009b36c:	1000021e 	bne	r2,zero,8009b378 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
8009b370:	0082c700 	call	80082c70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8009b374:	10001626 	beq	r2,zero,8009b3d0 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
8009b378:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8009b37c:	85000b26 	beq	r16,r20,8009b3ac <alt_find_file+0x80>
  {
    len = strlen(next->name);
8009b380:	84400217 	ldw	r17,8(r16)
8009b384:	8809883a 	mov	r4,r17
8009b388:	00832a00 	call	800832a0 <strlen>
8009b38c:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
8009b390:	8885883a 	add	r2,r17,r2
8009b394:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
8009b398:	900b883a 	mov	r5,r18
8009b39c:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
8009b3a0:	14ffef1e 	bne	r2,r19,8009b360 <alt_find_file+0x34>
    {
      len -= 1;
8009b3a4:	31bfffc4 	addi	r6,r6,-1
8009b3a8:	003fed06 	br	8009b360 <alt_find_file+0x34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8009b3ac:	0005883a 	mov	r2,zero
}
8009b3b0:	dfc00517 	ldw	ra,20(sp)
8009b3b4:	dd000417 	ldw	r20,16(sp)
8009b3b8:	dcc00317 	ldw	r19,12(sp)
8009b3bc:	dc800217 	ldw	r18,8(sp)
8009b3c0:	dc400117 	ldw	r17,4(sp)
8009b3c4:	dc000017 	ldw	r16,0(sp)
8009b3c8:	dec00604 	addi	sp,sp,24
8009b3cc:	f800283a 	ret
8009b3d0:	8005883a 	mov	r2,r16
8009b3d4:	003ff606 	br	8009b3b0 <alt_find_file+0x84>

8009b3d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8009b3d8:	01e002b4 	movhi	r7,32778
8009b3dc:	39f56004 	addi	r7,r7,-10880
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8009b3e0:	0005883a 	mov	r2,zero
8009b3e4:	3807883a 	mov	r3,r7
8009b3e8:	01800804 	movi	r6,32
8009b3ec:	00000206 	br	8009b3f8 <alt_get_fd+0x20>
8009b3f0:	10800044 	addi	r2,r2,1
8009b3f4:	11800a26 	beq	r2,r6,8009b420 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
8009b3f8:	19400017 	ldw	r5,0(r3)
8009b3fc:	18c00304 	addi	r3,r3,12
8009b400:	283ffb1e 	bne	r5,zero,8009b3f0 <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
8009b404:	10c00324 	muli	r3,r2,12
8009b408:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
8009b40c:	d0e00817 	ldw	r3,-32736(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
8009b410:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
8009b414:	1880030e 	bge	r3,r2,8009b424 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
8009b418:	d0a00815 	stw	r2,-32736(gp)
8009b41c:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
8009b420:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
8009b424:	f800283a 	ret

8009b428 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
8009b428:	00840004 	movi	r2,4096
8009b42c:	1140012e 	bgeu	r2,r5,8009b434 <alt_icache_flush+0xc>
8009b430:	100b883a 	mov	r5,r2
8009b434:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
8009b438:	2005883a 	mov	r2,r4
8009b43c:	2140092e 	bgeu	r4,r5,8009b464 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
8009b440:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
8009b444:	10800804 	addi	r2,r2,32
8009b448:	117ffd36 	bltu	r2,r5,8009b440 <alt_icache_flush+0x18>
8009b44c:	0104303a 	nor	r2,zero,r4
8009b450:	2885883a 	add	r2,r5,r2
8009b454:	1004d17a 	srli	r2,r2,5
8009b458:	10800044 	addi	r2,r2,1
8009b45c:	1004917a 	slli	r2,r2,5
8009b460:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
8009b464:	210007cc 	andi	r4,r4,31
8009b468:	20000126 	beq	r4,zero,8009b470 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
8009b46c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
8009b470:	0000203a 	flushp
8009b474:	f800283a 	ret

8009b478 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
8009b478:	213ffe84 	addi	r4,r4,-6
8009b47c:	008003c4 	movi	r2,15
8009b480:	11001636 	bltu	r2,r4,8009b4dc <alt_exception_cause_generated_bad_addr+0x64>
8009b484:	200890ba 	slli	r4,r4,2
8009b488:	00a002b4 	movhi	r2,32778
8009b48c:	10ad2704 	addi	r2,r2,-19300
8009b490:	2089883a 	add	r4,r4,r2
8009b494:	20800017 	ldw	r2,0(r4)
8009b498:	1000683a 	jmp	r2
8009b49c:	8009b4e4 	muli	zero,r16,9939
8009b4a0:	8009b4e4 	muli	zero,r16,9939
8009b4a4:	8009b4dc 	xori	zero,r16,9939
8009b4a8:	8009b4dc 	xori	zero,r16,9939
8009b4ac:	8009b4dc 	xori	zero,r16,9939
8009b4b0:	8009b4e4 	muli	zero,r16,9939
8009b4b4:	8009b4dc 	xori	zero,r16,9939
8009b4b8:	8009b4dc 	xori	zero,r16,9939
8009b4bc:	8009b4e4 	muli	zero,r16,9939
8009b4c0:	8009b4e4 	muli	zero,r16,9939
8009b4c4:	8009b4dc 	xori	zero,r16,9939
8009b4c8:	8009b4e4 	muli	zero,r16,9939
8009b4cc:	8009b4dc 	xori	zero,r16,9939
8009b4d0:	8009b4dc 	xori	zero,r16,9939
8009b4d4:	8009b4dc 	xori	zero,r16,9939
8009b4d8:	8009b4e4 	muli	zero,r16,9939
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8009b4dc:	0005883a 	mov	r2,zero
8009b4e0:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8009b4e4:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
8009b4e8:	f800283a 	ret

8009b4ec <atexit>:
8009b4ec:	200b883a 	mov	r5,r4
8009b4f0:	000f883a 	mov	r7,zero
8009b4f4:	000d883a 	mov	r6,zero
8009b4f8:	0009883a 	mov	r4,zero
8009b4fc:	009b5381 	jmpi	8009b538 <__register_exitproc>

8009b500 <exit>:
8009b500:	defffe04 	addi	sp,sp,-8
8009b504:	000b883a 	mov	r5,zero
8009b508:	dc000015 	stw	r16,0(sp)
8009b50c:	dfc00115 	stw	ra,4(sp)
8009b510:	2021883a 	mov	r16,r4
8009b514:	009b6500 	call	8009b650 <__call_exitprocs>
8009b518:	00a002b4 	movhi	r2,32778
8009b51c:	10ba7204 	addi	r2,r2,-5688
8009b520:	11000017 	ldw	r4,0(r2)
8009b524:	20800f17 	ldw	r2,60(r4)
8009b528:	10000126 	beq	r2,zero,8009b530 <exit+0x30>
8009b52c:	103ee83a 	callr	r2
8009b530:	8009883a 	mov	r4,r16
8009b534:	009b7d00 	call	8009b7d0 <_exit>

8009b538 <__register_exitproc>:
8009b538:	defffa04 	addi	sp,sp,-24
8009b53c:	dc000315 	stw	r16,12(sp)
8009b540:	042002b4 	movhi	r16,32778
8009b544:	843a7204 	addi	r16,r16,-5688
8009b548:	80c00017 	ldw	r3,0(r16)
8009b54c:	dc400415 	stw	r17,16(sp)
8009b550:	dfc00515 	stw	ra,20(sp)
8009b554:	18805217 	ldw	r2,328(r3)
8009b558:	2023883a 	mov	r17,r4
8009b55c:	10003726 	beq	r2,zero,8009b63c <__register_exitproc+0x104>
8009b560:	10c00117 	ldw	r3,4(r2)
8009b564:	010007c4 	movi	r4,31
8009b568:	20c00e16 	blt	r4,r3,8009b5a4 <__register_exitproc+0x6c>
8009b56c:	1a000044 	addi	r8,r3,1
8009b570:	8800221e 	bne	r17,zero,8009b5fc <__register_exitproc+0xc4>
8009b574:	18c00084 	addi	r3,r3,2
8009b578:	18c7883a 	add	r3,r3,r3
8009b57c:	18c7883a 	add	r3,r3,r3
8009b580:	12000115 	stw	r8,4(r2)
8009b584:	10c7883a 	add	r3,r2,r3
8009b588:	19400015 	stw	r5,0(r3)
8009b58c:	0005883a 	mov	r2,zero
8009b590:	dfc00517 	ldw	ra,20(sp)
8009b594:	dc400417 	ldw	r17,16(sp)
8009b598:	dc000317 	ldw	r16,12(sp)
8009b59c:	dec00604 	addi	sp,sp,24
8009b5a0:	f800283a 	ret
8009b5a4:	00a00234 	movhi	r2,32776
8009b5a8:	10890f04 	addi	r2,r2,9276
8009b5ac:	10002626 	beq	r2,zero,8009b648 <__register_exitproc+0x110>
8009b5b0:	01006404 	movi	r4,400
8009b5b4:	d9400015 	stw	r5,0(sp)
8009b5b8:	d9800115 	stw	r6,4(sp)
8009b5bc:	d9c00215 	stw	r7,8(sp)
8009b5c0:	008243c0 	call	8008243c <malloc>
8009b5c4:	d9400017 	ldw	r5,0(sp)
8009b5c8:	d9800117 	ldw	r6,4(sp)
8009b5cc:	d9c00217 	ldw	r7,8(sp)
8009b5d0:	10001d26 	beq	r2,zero,8009b648 <__register_exitproc+0x110>
8009b5d4:	81000017 	ldw	r4,0(r16)
8009b5d8:	10000115 	stw	zero,4(r2)
8009b5dc:	02000044 	movi	r8,1
8009b5e0:	22405217 	ldw	r9,328(r4)
8009b5e4:	0007883a 	mov	r3,zero
8009b5e8:	12400015 	stw	r9,0(r2)
8009b5ec:	20805215 	stw	r2,328(r4)
8009b5f0:	10006215 	stw	zero,392(r2)
8009b5f4:	10006315 	stw	zero,396(r2)
8009b5f8:	883fde26 	beq	r17,zero,8009b574 <__register_exitproc+0x3c>
8009b5fc:	18c9883a 	add	r4,r3,r3
8009b600:	2109883a 	add	r4,r4,r4
8009b604:	1109883a 	add	r4,r2,r4
8009b608:	21802215 	stw	r6,136(r4)
8009b60c:	01800044 	movi	r6,1
8009b610:	12406217 	ldw	r9,392(r2)
8009b614:	30cc983a 	sll	r6,r6,r3
8009b618:	4992b03a 	or	r9,r9,r6
8009b61c:	12406215 	stw	r9,392(r2)
8009b620:	21c04215 	stw	r7,264(r4)
8009b624:	01000084 	movi	r4,2
8009b628:	893fd21e 	bne	r17,r4,8009b574 <__register_exitproc+0x3c>
8009b62c:	11006317 	ldw	r4,396(r2)
8009b630:	218cb03a 	or	r6,r4,r6
8009b634:	11806315 	stw	r6,396(r2)
8009b638:	003fce06 	br	8009b574 <__register_exitproc+0x3c>
8009b63c:	18805304 	addi	r2,r3,332
8009b640:	18805215 	stw	r2,328(r3)
8009b644:	003fc606 	br	8009b560 <__register_exitproc+0x28>
8009b648:	00bfffc4 	movi	r2,-1
8009b64c:	003fd006 	br	8009b590 <__register_exitproc+0x58>

8009b650 <__call_exitprocs>:
8009b650:	defff504 	addi	sp,sp,-44
8009b654:	df000915 	stw	fp,36(sp)
8009b658:	dd400615 	stw	r21,24(sp)
8009b65c:	dc800315 	stw	r18,12(sp)
8009b660:	dfc00a15 	stw	ra,40(sp)
8009b664:	ddc00815 	stw	r23,32(sp)
8009b668:	dd800715 	stw	r22,28(sp)
8009b66c:	dd000515 	stw	r20,20(sp)
8009b670:	dcc00415 	stw	r19,16(sp)
8009b674:	dc400215 	stw	r17,8(sp)
8009b678:	dc000115 	stw	r16,4(sp)
8009b67c:	d9000015 	stw	r4,0(sp)
8009b680:	2839883a 	mov	fp,r5
8009b684:	04800044 	movi	r18,1
8009b688:	057fffc4 	movi	r21,-1
8009b68c:	00a002b4 	movhi	r2,32778
8009b690:	10ba7204 	addi	r2,r2,-5688
8009b694:	12000017 	ldw	r8,0(r2)
8009b698:	45005217 	ldw	r20,328(r8)
8009b69c:	44c05204 	addi	r19,r8,328
8009b6a0:	a0001c26 	beq	r20,zero,8009b714 <__call_exitprocs+0xc4>
8009b6a4:	a0800117 	ldw	r2,4(r20)
8009b6a8:	15ffffc4 	addi	r23,r2,-1
8009b6ac:	b8000d16 	blt	r23,zero,8009b6e4 <__call_exitprocs+0x94>
8009b6b0:	14000044 	addi	r16,r2,1
8009b6b4:	8421883a 	add	r16,r16,r16
8009b6b8:	8421883a 	add	r16,r16,r16
8009b6bc:	84402004 	addi	r17,r16,128
8009b6c0:	a463883a 	add	r17,r20,r17
8009b6c4:	a421883a 	add	r16,r20,r16
8009b6c8:	e0001e26 	beq	fp,zero,8009b744 <__call_exitprocs+0xf4>
8009b6cc:	80804017 	ldw	r2,256(r16)
8009b6d0:	e0801c26 	beq	fp,r2,8009b744 <__call_exitprocs+0xf4>
8009b6d4:	bdffffc4 	addi	r23,r23,-1
8009b6d8:	843fff04 	addi	r16,r16,-4
8009b6dc:	8c7fff04 	addi	r17,r17,-4
8009b6e0:	bd7ff91e 	bne	r23,r21,8009b6c8 <__call_exitprocs+0x78>
8009b6e4:	00a00234 	movhi	r2,32776
8009b6e8:	10891404 	addi	r2,r2,9296
8009b6ec:	10000926 	beq	r2,zero,8009b714 <__call_exitprocs+0xc4>
8009b6f0:	a0800117 	ldw	r2,4(r20)
8009b6f4:	1000301e 	bne	r2,zero,8009b7b8 <__call_exitprocs+0x168>
8009b6f8:	a0800017 	ldw	r2,0(r20)
8009b6fc:	10003226 	beq	r2,zero,8009b7c8 <__call_exitprocs+0x178>
8009b700:	a009883a 	mov	r4,r20
8009b704:	98800015 	stw	r2,0(r19)
8009b708:	00824500 	call	80082450 <free>
8009b70c:	9d000017 	ldw	r20,0(r19)
8009b710:	a03fe41e 	bne	r20,zero,8009b6a4 <__call_exitprocs+0x54>
8009b714:	dfc00a17 	ldw	ra,40(sp)
8009b718:	df000917 	ldw	fp,36(sp)
8009b71c:	ddc00817 	ldw	r23,32(sp)
8009b720:	dd800717 	ldw	r22,28(sp)
8009b724:	dd400617 	ldw	r21,24(sp)
8009b728:	dd000517 	ldw	r20,20(sp)
8009b72c:	dcc00417 	ldw	r19,16(sp)
8009b730:	dc800317 	ldw	r18,12(sp)
8009b734:	dc400217 	ldw	r17,8(sp)
8009b738:	dc000117 	ldw	r16,4(sp)
8009b73c:	dec00b04 	addi	sp,sp,44
8009b740:	f800283a 	ret
8009b744:	a0800117 	ldw	r2,4(r20)
8009b748:	80c00017 	ldw	r3,0(r16)
8009b74c:	10bfffc4 	addi	r2,r2,-1
8009b750:	15c01426 	beq	r2,r23,8009b7a4 <__call_exitprocs+0x154>
8009b754:	80000015 	stw	zero,0(r16)
8009b758:	183fde26 	beq	r3,zero,8009b6d4 <__call_exitprocs+0x84>
8009b75c:	95c8983a 	sll	r4,r18,r23
8009b760:	a0806217 	ldw	r2,392(r20)
8009b764:	a5800117 	ldw	r22,4(r20)
8009b768:	2084703a 	and	r2,r4,r2
8009b76c:	10000b26 	beq	r2,zero,8009b79c <__call_exitprocs+0x14c>
8009b770:	a0806317 	ldw	r2,396(r20)
8009b774:	2088703a 	and	r4,r4,r2
8009b778:	20000c1e 	bne	r4,zero,8009b7ac <__call_exitprocs+0x15c>
8009b77c:	89400017 	ldw	r5,0(r17)
8009b780:	d9000017 	ldw	r4,0(sp)
8009b784:	183ee83a 	callr	r3
8009b788:	a0800117 	ldw	r2,4(r20)
8009b78c:	15bfbf1e 	bne	r2,r22,8009b68c <__call_exitprocs+0x3c>
8009b790:	98800017 	ldw	r2,0(r19)
8009b794:	153fcf26 	beq	r2,r20,8009b6d4 <__call_exitprocs+0x84>
8009b798:	003fbc06 	br	8009b68c <__call_exitprocs+0x3c>
8009b79c:	183ee83a 	callr	r3
8009b7a0:	003ff906 	br	8009b788 <__call_exitprocs+0x138>
8009b7a4:	a5c00115 	stw	r23,4(r20)
8009b7a8:	003feb06 	br	8009b758 <__call_exitprocs+0x108>
8009b7ac:	89000017 	ldw	r4,0(r17)
8009b7b0:	183ee83a 	callr	r3
8009b7b4:	003ff406 	br	8009b788 <__call_exitprocs+0x138>
8009b7b8:	a0800017 	ldw	r2,0(r20)
8009b7bc:	a027883a 	mov	r19,r20
8009b7c0:	1029883a 	mov	r20,r2
8009b7c4:	003fb606 	br	8009b6a0 <__call_exitprocs+0x50>
8009b7c8:	0005883a 	mov	r2,zero
8009b7cc:	003ffb06 	br	8009b7bc <__call_exitprocs+0x16c>

8009b7d0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8009b7d0:	20000226 	beq	r4,zero,8009b7dc <_exit+0xc>
    ALT_SIM_FAIL();
8009b7d4:	002af070 	cmpltui	zero,zero,43969
8009b7d8:	003fff06 	br	8009b7d8 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
8009b7dc:	002af0b0 	cmpltui	zero,zero,43970
8009b7e0:	003ffd06 	br	8009b7d8 <_exit+0x8>
