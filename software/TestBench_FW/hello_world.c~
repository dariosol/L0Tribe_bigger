#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <io.h>
#include <time.h>
#include "system.h"
#include "altera_msgdma_descriptor_regs.h"
#include "altera_msgdma_csr_regs.h"
#include "altera_msgdma_response_regs.h"
#include "altera_avalon_pio_regs.h"
#include "altera_msgdma.h"
#include "sys/alt_irq.h"
#include "alt_types.h"
#include <sys/alt_alarm.h>
#include "sys/alt_cache.h"
#include "sys/alt_errno.h"

#define nrams 2
#define ndet  5 //CHOD(0),RICH(1),LKr(2),MUV3(3),newCHOD(4)

///////////////////////////////////////
///RAM:
//Each detector has 280MB allocated (to host almost 70M primitives).
//In the first ram (RAM 0) I allocate CHOD, RICH and LKR.
//In the second ram (RAM 1) I allocate NewCHOD and MUV3

//RAM CONFIGURATION:
/////////RAM0////////
//DET NUMBER --- NAME ------ ADDRESS
//   0           CHOD     [0x80 ; 0x10B07680]
//   1           RICH     [0x10B07688 ; 0x2160EC88]
//   2           LKr      [0x2160EC90 ; 0x32116400]

/////////RAM1////////
//DET NUMBER --- NAME ------ ADDRESS
//   3           MUV3        [0x80 ; 0x10B07680]
//   4           NewCHOD     [0x0x10B07688 ; 0x2160EC88]
///////////////////////////////////////



alt_u32 addressRAM0[3] = {0x80,0x10B07688,0x2160EC90}; //CONTAINS CHOD, RICH, LKR
alt_u32 addressRAM1[2] = {0x80,0x10B07688}; //CONTAINS NewCHOD, MUV3


////////////////////////////
///Pointers to read from the DDR2
alt_msgdma_standard_descriptor a_descriptor[nrams];
alt_msgdma_standard_descriptor *a_descriptor_ptr[nrams];
alt_msgdma_dev dev[nrams];
alt_msgdma_dev *dev_ptr[nrams];

alt_u32 control = 0;

///READING OPERATORS:
alt_u32	len=1024;
alt_u32 rd_addr[nrams];
alt_u32 * rd_adr_p[ndet];
alt_u32 * ram_access_ptr[nrams];


////////////////////////////////////////
alt_msgdma_standard_descriptor a_descriptor_wr;
alt_msgdma_standard_descriptor * a_descriptor_ptr_wr = &a_descriptor_wr;
alt_msgdma_dev dev_wr;
alt_msgdma_dev *dev_ptr_wr = &dev_wr;
alt_u32 control_wr = 0;
alt_u32 wr_addr = 0x80, len_wr=256;
alt_u32 * wr_adr_p = 0x80;
alt_u32 * ram_access_ptr_wr = &wr_adr_p;
alt_u32 status=-1;

///Which detector is ready to be initialized
alt_u8 detectorUnderInit=15;




////////////////////////////////////////
////Function for interrupt
////////////////////////////////////////
volatile alt_u8 ISR_transfer_flag = 0;
volatile int ISR_input_val = 0;

void * ISR_input_ptr = (void *) &ISR_input_val;
static void ISR_transfer_callback(void * context){
	volatile int* ISR_input_ptr = (volatile int *) context;

	*ISR_input_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE);

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE,0xf);
	ISR_transfer_flag = *ISR_input_ptr;
	//printf("ISR_transfer_flag %d\n",ISR_transfer_flag );

}



/******************************************************************
*  Function: GetInputString
*
*  Purpose: Parses an input string for the character '\n'.  Then
*           returns the string, minus any '\r' characters it
*           encounters.
*
******************************************************************/
char entry[4];
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;

  for(i = 0; (ch != '\n') && (i < size); )
  {
    if( (ch = getc(stream)) != '\r')
    {
      entry[i] = ch;
      i++;
    }
  }
}


int main()
{
	printf("Welcome to the L0Tribe initializer program\n\n");
	printf("You should have the ethernet connection correctly setup to send primitives to the L0Tribe RAM\n");
	printf("Primitives to the L0Tribe RAM pass from the eth link 0: configured as 192.168.1.8; mac: 00:01:02:03:04:08\n\n");

	IOWR(CTRL_SIG_BASE,0,0);
	printf("Type y when you are ready to start\n");

	while(1) {
	GetInputString( entry, sizeof(entry), stdin );
	printf("you wrote: %c, type y when you are ready to start\n", entry[0]);
	detectorUnderInit=IORD(INPUT_IO_BASE,0);
	printf("Input from IO: %d\n",(int)detectorUnderInit);
	if(entry[0] == 'y')
	{
		printf(" OK!\n ");
		break;
	}
	}

	for (int i=0; i < nrams; ++i) a_descriptor_ptr[i] = &a_descriptor[i];
	for (int i=0;i<nrams;++i) dev_ptr[i]= &dev[i];
	for (int i=0;i<ndet;++i)  rd_adr_p[i] = 0x0;
	for (int i=0;i<nrams;++i) rd_addr[i] = 0x0;
	for (int i=0;i<nrams;++i) ram_access_ptr[i] = &rd_addr[i];

	  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PILOT_SIG_BASE,0xf); //enabling interrupt on all 4 inputs
	  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PILOT_SIG_BASE,0xf); //clearing older interrupts
	  alt_ic_isr_register(PILOT_SIG_IRQ_INTERRUPT_CONTROLLER_ID, PILOT_SIG_IRQ, ISR_transfer_callback, ISR_input_ptr,0x0);//setting interrupt callback


	  ///////////////////////////
	  //Test RAM INITIALIZATION:
	  printf("Starting RAM INIT\n");
	  ///////////////////////////


	  printf("would you like to clean the ram? y/n\n ");
	  while(1) {
	  GetInputString( entry, sizeof(entry), stdin );
	  printf("you wrote: %c\n",entry[0]);
	  if(entry[0] == 'y') {
		break;
	  }
	  if(entry[0] == 'n') {
		  break;
  	  }
	  }

	  if(entry[0] == 'y') {
		  printf("OK! cleaning RAM0...\n ");

		  for (unsigned int i = 0x0; i < DDR2_RAM_SPAN; i+=4)
		  {
			  IOWR_32DIRECT(DDR2_RAM_BASE, i,0x0);
		  }

		  printf("OK! cleaning RAM1...\n ");

		 		  for (unsigned int i = 0x0; i < DDR2_RAM_1_SPAN; i+=4)
		 		  {
		 			  IOWR_32DIRECT(DDR2_RAM_1_BASE, i,0x0);
		 		  }
	  }
	  else printf("OK! continuing without clean\n ");


	  //L0Tribe receives primitives from workstation.
	  //Every 8 bytes it write a primitive in the FifoToRAM
	  //When the ethernet packet is finished: a signal called ToRamFULL
	  //says to the DMA to start moving data to the DDR.

	  dev_ptr_wr = alt_msgdma_open(FROM_ETH_TO_DDR_ETH_DMA_CSR_NAME);

	  wr_adr_p=0x80;//skip first addresses: they are reset every time

	  alt_u32 time0 = alt_nticks() * alt_ticks_per_second();
	  alt_u32 time1 = alt_nticks() * alt_ticks_per_second();


	  	  while(1) {
	  		  printf("which detector you like to write into the ram (0-4)? n to skip\n");
	  		  GetInputString( entry, sizeof(entry), stdin );
	   	 	  printf("you wrote: %c\n",entry[0]);

	   	 	  if(entry[0] == '0') {
	   	 		wr_adr_p = addressRAM0[0];
	   	 	while(1) {
	   	 	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
	   	 		  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	   	 		  if(status==0){
	   	 			  wr_adr_p+=64; //spedisco 1024 bytes: 1024
	   	 		  }
	   	 		detectorUnderInit=IORD(INPUT_IO_BASE,0);
	   	 		  if(detectorUnderInit!=0) break;
	   	       	}
	   	 	   }
	   	 	  }
	   	 	  else if(entry[0] == '1') {
	  	 			wr_adr_p = addressRAM0[1];
	  	 			while(1) {
	  	 				   	 	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
	  	 				   	 		  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	  	 				   	 		  if(status==0){
	  	 				   	 			  wr_adr_p+=64; //spedisco 1024 bytes: 1024
	  	 				   	 		  }
	  	 				   	 		detectorUnderInit=IORD(INPUT_IO_BASE,0);
	  	 				   	 		  if(detectorUnderInit!=0) break;
	  	 				   	       	}
	  	 				   	 	   }
	  	 	  }
	   	 	else if(entry[0] == '2') {
	   	 		  	wr_adr_p = addressRAM0[2];
	   	 		while(1) {
	   	 			   	 	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
	   	 			   	 		  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	   	 			   	 		  if(status==0){
	   	 			   	 			  wr_adr_p+=64; //spedisco 1024 bytes: 1024
	   	 			   	 		  }
	   	 			   	 		detectorUnderInit=IORD(INPUT_IO_BASE,0);
	   	 			   	 		  if(detectorUnderInit!=0) break;
	   	 			   	       	}
	   	 			   	 	   }
	   	 		  	}

	   		else if(entry[0] == '3') {
	   		   	    wr_adr_p = addressRAM1[0]+DDR2_RAM_1_BASE;
	   		   	while(1) {
	   		   		   	 	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
	   		   		   	 		  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	   		   		   	 		  if(status==0){
	   		   		   	 			  wr_adr_p+=64; //spedisco 1024 bytes: 1024
	   		   		   	 		  }
	   		   		   	 		detectorUnderInit=IORD(INPUT_IO_BASE,0);
	   		   		   	 		  if(detectorUnderInit!=0) break;
	   		   		   	       	}
	   		   		   	 	   }
	   		   	 	}

	   		else if(entry[0] == '4') {
	   		   	 wr_adr_p = addressRAM0[1]+DDR2_RAM_1_BASE;
	   		  while(1) {
	   		  	   	 	if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
	   		  	   	 		  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
	   		  	   	 		  if(status==0){
	   		  	   	 			  wr_adr_p+=64; //spedisco 1024 bytes: 1024
	   		  	   	 		  }
	   		  	   	 		detectorUnderInit=IORD(INPUT_IO_BASE,0);
	   		  	   	 		  if(detectorUnderInit!=0) break;
	   		  	   	       	}
	   		  	   	 	   }
	   		   	 }


	   		else if(entry[0] == 'n') {
	  	 		  break;
	  	   	  }
	  	 	  }


//  printf("would you like to write the ram?\n ");
//	  while(1) {
//
//	 	  GetInputString( entry, sizeof(entry), stdin );
//	 	  printf("you wrote: %c\n",entry[0]);
//	 	  if(entry[0] == 'y') {
//	 		break;
//	 	  }
//	 	  if(entry[0] == 'n') {
//	 		  break;
//	   	  }
//	 	  }
//
//	  if(entry[0] == 'y') {
//		  printf("OK! writing...\n ");
//		  while(1) {
//			  if(alt_msgdma_construct_standard_st_to_mm_descriptor(dev_ptr_wr,a_descriptor_ptr_wr,wr_adr_p,len_wr,control_wr)!=-EINVAL) {/*printf("invalid arg\n");*/
//				  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr_wr,a_descriptor_ptr_wr); //switching to async to get a speedup
//				  if(status==0){
//					  wr_adr_p+=64; //spedisco 1024 bytes: 1024
//				  }
//				  time1 = alt_nticks() * alt_ticks_per_second();
//				  if(time1-time0>62e6) break;
//			  }
//		  }
//	  }
//	  else  printf("OK continuing without write\n ");

	  printf("Fill complete\n");
  //Read back what I have written
	  unsigned int write;


	  for (unsigned int i = 0x0; i < 0x100 ; i+=4)
	  	  {
		  write = IORD_32DIRECT(DDR2_RAM_BASE, i);

		  printf("address: %x; octal-base: %o; data: %x\n",i,i,write);
	  	  }
	  printf("UDP download PORT0 to RAM success\n");

	  for (unsigned int i = addressRam0[2]; i < addressRam0[2] + 0x200 ; i+=4)
	  {
		  write = IORD_32DIRECT(DDR2_RAM_BASE, i);

		  printf("LKR address: %x; octal-base: %o; data: %x\n",i,i,write);
	  }


	  for (unsigned int i = addressRam1[1]; i <  addressRam1[1] + 0x100 ; i+=4)
		  {
			  write = IORD_32DIRECT(DDR2_RAM_BASE, i);

			  printf("NewCHOD address: %x; octal-base: %o; data: %x\n",i,i,write);
		  }

	  printf("UDP download PORT1 to RAM success\n");


  printf("Initializing DATA transfer to ethernet...\n");

  dev_ptr[0] = alt_msgdma_open(DMA_FIFO_SUSBYSTEM_DMA_CSR_NAME);
  dev_ptr[1] = alt_msgdma_open(DMA_FIFO_SUBSYSTEM_1_DMA_CSR_NAME);



  //-----------------MAIN SEND LOOP AFTER THIS LINE----------------------------


  len=1024;
  alt_u32 g,addr1,addr2;
  g=4096;

  alt_u8  addr_update[ndet];
  alt_u32 ninterrupt[ndet];

  ISR_transfer_flag = 0;

  //INIT DETECTORS
  for(int i = 0; i < ndet; ++i) {
	  addr_update[i] =1;
	  ninterrupt[i]  =1;
  }




//FIRST INITIALZATION OF PrimitiveFIFO before SOB: I start with data inside.

  //NOTE: TO BE CHANGED!!!!!!!!!!!
  //18-june-2020 I am testing the writing process in the right ram addresses,
  //but i still have only 2 DMA interfaces and 2 eth ports: dev_ptr and a_descriptor_ptr cannot be changed.

  rd_adr_p[2] = (alt_u32 *) addressRAM0[2];
  rd_adr_p[4] = (alt_u32 *) addressRAM1[1];

  printf("Port 0: First init starting from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[2],g,IORD_32DIRECT(DDR2_RAM_BASE,address[2]));
  printf("Port 1: First init starting from \n ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p[4],g,IORD_32DIRECT(DDR2_RAM_1_BASE,address[1]));

  if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[0], a_descriptor_ptr[0], rd_adr_p[2], g, control)==-EINVAL) printf("invalid arg\n");
  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[0],a_descriptor_ptr[0]);
  printf ("Port 0 status: %d\n", (int)status);

  if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[1], a_descriptor_ptr[1], rd_adr_p[4], g, control)==-EINVAL) printf("invalid arg\n");
   status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[1],a_descriptor_ptr[1]);
printf ("Port 1 status: %d\n", (int)status);

   printf(" Are you ready to start the burst? ");

	  while(1) {
	 	  GetInputString( entry, sizeof(entry), stdin );
	 	  printf("you wrote: %c\n",entry[0]);
	 	  if(entry[0] == 'y') {
	 		break;
	 	  }
	 	  }

   alt_u32 SOB = alt_nticks() * alt_ticks_per_second();
   alt_u32 EOB = alt_nticks() * alt_ticks_per_second();



  IOWR(CTRL_SIG_BASE,0,1); //SOB
  printf("SOB, time: %lu \n",alt_nticks()* alt_ticks_per_second());

  while(1) {

	  if(addr_update[2]) {
		  //Preparing new transer and waiting for ISR
		  g=4096;
		  rd_adr_p[2] = rd_adr_p[2] + g/4;
		 // printf("ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p,g,IORD_32DIRECT(DDR2_RAM_BASE, rd_adr_p[0] + g/4));
		  if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[0], a_descriptor_ptr[0], rd_adr_p[2], g, control)==-EINVAL) printf("invalid arg\n");
		  addr_update[2] = 0;
	  }

	  if(addr_update[4]) {
	  		  //Preparing new transer and waiting for ISR
	  		  g=4096;
	  		 // rd_adr_p = (alt_u32 *) addr2 + g*ninterrupt; //address: starting point + fix transfering
	  		  rd_adr_p[4] = rd_adr_p[4] + g/4;
	  		 // printf("ADDR: %x \tlen: %lu word: %x\n",(alt_u32)rd_adr_p,g,IORD_32DIRECT(DDR2_RAM_BASE, rd_adr_p[0] + g/4));
	  		  if(alt_msgdma_construct_standard_mm_to_st_descriptor(dev_ptr[1], a_descriptor_ptr[1], rd_adr_p[4], g, control)==-EINVAL) printf("invalid arg\n");
	  		  addr_update[4] = 0;
	  	  }

	  if((ISR_transfer_flag&1) == 1 ) { //Primitive FIFO usedw < 0x80: send new data
	 		 // printf("!!!!!!!!!!!!ISR Send packet\n");
	 		  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[0],a_descriptor_ptr[0]);
	 		  ISR_transfer_flag &= ~(1UL << 0);
	 		  addr_update[2] = 1;
	 		  ninterrupt[0]+=1;
	 	  }

	  if((ISR_transfer_flag&2) == 2 ) { //Primitive FIFO usedw < 0x80: send new data
		 // printf("!!!!!!!!!!!!ISR Send packet\n");
		  status = alt_msgdma_standard_descriptor_async_transfer(dev_ptr[1],a_descriptor_ptr[1]);
		  ISR_transfer_flag &= ~(1UL << 1);
		  addr_update[4] = 1;
		  ninterrupt[1]+=1;
	  }

	  EOB = alt_nticks() * alt_ticks_per_second();
	  if(EOB-SOB > 6.5e6) break;
  }

  IOWR(CTRL_SIG_BASE,0,0);
  printf("Port0: ninterrupt: %d \n",ninterrupt[0]);
  printf("Port1: ninterrupt: %d \n",ninterrupt[1]);
  printf("EOB sent: burst long %f seconds\n",(EOB-SOB)*0.000001);
  return 0;
}


